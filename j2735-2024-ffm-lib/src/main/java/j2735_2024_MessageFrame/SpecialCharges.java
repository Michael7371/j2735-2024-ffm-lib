// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SpecialCharges {
 *     struct PaymentFee *hov2Charge;
 *     struct PaymentFee *hov3Charge;
 *     struct PaymentFee *hov4Charge;
 *     struct PaymentFee *hov5PlusCharge;
 *     struct PaymentFee *cleanAirCharge;
 *     struct OperatorDefined *operatorDefined;
 *     EngineCharacteristics_t *engineCharacteristics;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SpecialCharges {

    SpecialCharges() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("hov2Charge"),
        MessageFrame_h.C_POINTER.withName("hov3Charge"),
        MessageFrame_h.C_POINTER.withName("hov4Charge"),
        MessageFrame_h.C_POINTER.withName("hov5PlusCharge"),
        MessageFrame_h.C_POINTER.withName("cleanAirCharge"),
        MessageFrame_h.C_POINTER.withName("operatorDefined"),
        MessageFrame_h.C_POINTER.withName("engineCharacteristics"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SpecialCharges");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout hov2Charge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hov2Charge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov2Charge
     * }
     */
    public static final AddressLayout hov2Charge$layout() {
        return hov2Charge$LAYOUT;
    }

    private static final long hov2Charge$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov2Charge
     * }
     */
    public static final long hov2Charge$offset() {
        return hov2Charge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov2Charge
     * }
     */
    public static MemorySegment hov2Charge(MemorySegment struct) {
        return struct.get(hov2Charge$LAYOUT, hov2Charge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov2Charge
     * }
     */
    public static void hov2Charge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hov2Charge$LAYOUT, hov2Charge$OFFSET, fieldValue);
    }

    private static final AddressLayout hov3Charge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hov3Charge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov3Charge
     * }
     */
    public static final AddressLayout hov3Charge$layout() {
        return hov3Charge$LAYOUT;
    }

    private static final long hov3Charge$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov3Charge
     * }
     */
    public static final long hov3Charge$offset() {
        return hov3Charge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov3Charge
     * }
     */
    public static MemorySegment hov3Charge(MemorySegment struct) {
        return struct.get(hov3Charge$LAYOUT, hov3Charge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov3Charge
     * }
     */
    public static void hov3Charge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hov3Charge$LAYOUT, hov3Charge$OFFSET, fieldValue);
    }

    private static final AddressLayout hov4Charge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hov4Charge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov4Charge
     * }
     */
    public static final AddressLayout hov4Charge$layout() {
        return hov4Charge$LAYOUT;
    }

    private static final long hov4Charge$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov4Charge
     * }
     */
    public static final long hov4Charge$offset() {
        return hov4Charge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov4Charge
     * }
     */
    public static MemorySegment hov4Charge(MemorySegment struct) {
        return struct.get(hov4Charge$LAYOUT, hov4Charge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov4Charge
     * }
     */
    public static void hov4Charge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hov4Charge$LAYOUT, hov4Charge$OFFSET, fieldValue);
    }

    private static final AddressLayout hov5PlusCharge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hov5PlusCharge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov5PlusCharge
     * }
     */
    public static final AddressLayout hov5PlusCharge$layout() {
        return hov5PlusCharge$LAYOUT;
    }

    private static final long hov5PlusCharge$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov5PlusCharge
     * }
     */
    public static final long hov5PlusCharge$offset() {
        return hov5PlusCharge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov5PlusCharge
     * }
     */
    public static MemorySegment hov5PlusCharge(MemorySegment struct) {
        return struct.get(hov5PlusCharge$LAYOUT, hov5PlusCharge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PaymentFee *hov5PlusCharge
     * }
     */
    public static void hov5PlusCharge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hov5PlusCharge$LAYOUT, hov5PlusCharge$OFFSET, fieldValue);
    }

    private static final AddressLayout cleanAirCharge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cleanAirCharge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PaymentFee *cleanAirCharge
     * }
     */
    public static final AddressLayout cleanAirCharge$layout() {
        return cleanAirCharge$LAYOUT;
    }

    private static final long cleanAirCharge$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PaymentFee *cleanAirCharge
     * }
     */
    public static final long cleanAirCharge$offset() {
        return cleanAirCharge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PaymentFee *cleanAirCharge
     * }
     */
    public static MemorySegment cleanAirCharge(MemorySegment struct) {
        return struct.get(cleanAirCharge$LAYOUT, cleanAirCharge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PaymentFee *cleanAirCharge
     * }
     */
    public static void cleanAirCharge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cleanAirCharge$LAYOUT, cleanAirCharge$OFFSET, fieldValue);
    }

    private static final AddressLayout operatorDefined$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("operatorDefined"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct OperatorDefined *operatorDefined
     * }
     */
    public static final AddressLayout operatorDefined$layout() {
        return operatorDefined$LAYOUT;
    }

    private static final long operatorDefined$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct OperatorDefined *operatorDefined
     * }
     */
    public static final long operatorDefined$offset() {
        return operatorDefined$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct OperatorDefined *operatorDefined
     * }
     */
    public static MemorySegment operatorDefined(MemorySegment struct) {
        return struct.get(operatorDefined$LAYOUT, operatorDefined$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct OperatorDefined *operatorDefined
     * }
     */
    public static void operatorDefined(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(operatorDefined$LAYOUT, operatorDefined$OFFSET, fieldValue);
    }

    private static final AddressLayout engineCharacteristics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("engineCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EngineCharacteristics_t *engineCharacteristics
     * }
     */
    public static final AddressLayout engineCharacteristics$layout() {
        return engineCharacteristics$LAYOUT;
    }

    private static final long engineCharacteristics$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EngineCharacteristics_t *engineCharacteristics
     * }
     */
    public static final long engineCharacteristics$offset() {
        return engineCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EngineCharacteristics_t *engineCharacteristics
     * }
     */
    public static MemorySegment engineCharacteristics(MemorySegment struct) {
        return struct.get(engineCharacteristics$LAYOUT, engineCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EngineCharacteristics_t *engineCharacteristics
     * }
     */
    public static void engineCharacteristics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(engineCharacteristics$LAYOUT, engineCharacteristics$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

