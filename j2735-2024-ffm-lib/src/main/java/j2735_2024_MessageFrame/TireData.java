// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TireData {
 *     TireLocation_t *location;
 *     TirePressure_t *pressure;
 *     TireTemp_t *temp;
 *     WheelSensorStatus_t *wheelSensorStatus;
 *     WheelEndElectFault_t *wheelEndElectFault;
 *     TireLeakageRate_t *leakageRate;
 *     TirePressureThresholdDetection_t *detection;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TireData {

    TireData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("location"),
        MessageFrame_h.C_POINTER.withName("pressure"),
        MessageFrame_h.C_POINTER.withName("temp"),
        MessageFrame_h.C_POINTER.withName("wheelSensorStatus"),
        MessageFrame_h.C_POINTER.withName("wheelEndElectFault"),
        MessageFrame_h.C_POINTER.withName("leakageRate"),
        MessageFrame_h.C_POINTER.withName("detection"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TireData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout location$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("location"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TireLocation_t *location
     * }
     */
    public static final AddressLayout location$layout() {
        return location$LAYOUT;
    }

    private static final long location$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TireLocation_t *location
     * }
     */
    public static final long location$offset() {
        return location$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TireLocation_t *location
     * }
     */
    public static MemorySegment location(MemorySegment struct) {
        return struct.get(location$LAYOUT, location$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TireLocation_t *location
     * }
     */
    public static void location(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(location$LAYOUT, location$OFFSET, fieldValue);
    }

    private static final AddressLayout pressure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TirePressure_t *pressure
     * }
     */
    public static final AddressLayout pressure$layout() {
        return pressure$LAYOUT;
    }

    private static final long pressure$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TirePressure_t *pressure
     * }
     */
    public static final long pressure$offset() {
        return pressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TirePressure_t *pressure
     * }
     */
    public static MemorySegment pressure(MemorySegment struct) {
        return struct.get(pressure$LAYOUT, pressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TirePressure_t *pressure
     * }
     */
    public static void pressure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pressure$LAYOUT, pressure$OFFSET, fieldValue);
    }

    private static final AddressLayout temp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("temp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TireTemp_t *temp
     * }
     */
    public static final AddressLayout temp$layout() {
        return temp$LAYOUT;
    }

    private static final long temp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TireTemp_t *temp
     * }
     */
    public static final long temp$offset() {
        return temp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TireTemp_t *temp
     * }
     */
    public static MemorySegment temp(MemorySegment struct) {
        return struct.get(temp$LAYOUT, temp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TireTemp_t *temp
     * }
     */
    public static void temp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(temp$LAYOUT, temp$OFFSET, fieldValue);
    }

    private static final AddressLayout wheelSensorStatus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wheelSensorStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WheelSensorStatus_t *wheelSensorStatus
     * }
     */
    public static final AddressLayout wheelSensorStatus$layout() {
        return wheelSensorStatus$LAYOUT;
    }

    private static final long wheelSensorStatus$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WheelSensorStatus_t *wheelSensorStatus
     * }
     */
    public static final long wheelSensorStatus$offset() {
        return wheelSensorStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WheelSensorStatus_t *wheelSensorStatus
     * }
     */
    public static MemorySegment wheelSensorStatus(MemorySegment struct) {
        return struct.get(wheelSensorStatus$LAYOUT, wheelSensorStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WheelSensorStatus_t *wheelSensorStatus
     * }
     */
    public static void wheelSensorStatus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wheelSensorStatus$LAYOUT, wheelSensorStatus$OFFSET, fieldValue);
    }

    private static final AddressLayout wheelEndElectFault$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wheelEndElectFault"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WheelEndElectFault_t *wheelEndElectFault
     * }
     */
    public static final AddressLayout wheelEndElectFault$layout() {
        return wheelEndElectFault$LAYOUT;
    }

    private static final long wheelEndElectFault$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WheelEndElectFault_t *wheelEndElectFault
     * }
     */
    public static final long wheelEndElectFault$offset() {
        return wheelEndElectFault$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WheelEndElectFault_t *wheelEndElectFault
     * }
     */
    public static MemorySegment wheelEndElectFault(MemorySegment struct) {
        return struct.get(wheelEndElectFault$LAYOUT, wheelEndElectFault$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WheelEndElectFault_t *wheelEndElectFault
     * }
     */
    public static void wheelEndElectFault(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wheelEndElectFault$LAYOUT, wheelEndElectFault$OFFSET, fieldValue);
    }

    private static final AddressLayout leakageRate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("leakageRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TireLeakageRate_t *leakageRate
     * }
     */
    public static final AddressLayout leakageRate$layout() {
        return leakageRate$LAYOUT;
    }

    private static final long leakageRate$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TireLeakageRate_t *leakageRate
     * }
     */
    public static final long leakageRate$offset() {
        return leakageRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TireLeakageRate_t *leakageRate
     * }
     */
    public static MemorySegment leakageRate(MemorySegment struct) {
        return struct.get(leakageRate$LAYOUT, leakageRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TireLeakageRate_t *leakageRate
     * }
     */
    public static void leakageRate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(leakageRate$LAYOUT, leakageRate$OFFSET, fieldValue);
    }

    private static final AddressLayout detection$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("detection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TirePressureThresholdDetection_t *detection
     * }
     */
    public static final AddressLayout detection$layout() {
        return detection$LAYOUT;
    }

    private static final long detection$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TirePressureThresholdDetection_t *detection
     * }
     */
    public static final long detection$offset() {
        return detection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TirePressureThresholdDetection_t *detection
     * }
     */
    public static MemorySegment detection(MemorySegment struct) {
        return struct.get(detection$LAYOUT, detection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TirePressureThresholdDetection_t *detection
     * }
     */
    public static void detection(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(detection$LAYOUT, detection$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

