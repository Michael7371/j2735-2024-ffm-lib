// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct J1939data {
 *     struct TireDataList *tires;
 *     struct AxleWeightList *axles;
 *     TrailerWeight_t *trailerWeight;
 *     CargoWeight_t *cargoWeight;
 *     SteeringAxleTemperature_t *steeringAxleTemperature;
 *     DriveAxleLocation_t *driveAxleLocation;
 *     DriveAxleLiftAirPressure_t *driveAxleLiftAirPressure;
 *     DriveAxleTemperature_t *driveAxleTemperature;
 *     DriveAxleLubePressure_t *driveAxleLubePressure;
 *     SteeringAxleLubePressure_t *steeringAxleLubePressure;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class J1939data {

    J1939data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("tires"),
        MessageFrame_h.C_POINTER.withName("axles"),
        MessageFrame_h.C_POINTER.withName("trailerWeight"),
        MessageFrame_h.C_POINTER.withName("cargoWeight"),
        MessageFrame_h.C_POINTER.withName("steeringAxleTemperature"),
        MessageFrame_h.C_POINTER.withName("driveAxleLocation"),
        MessageFrame_h.C_POINTER.withName("driveAxleLiftAirPressure"),
        MessageFrame_h.C_POINTER.withName("driveAxleTemperature"),
        MessageFrame_h.C_POINTER.withName("driveAxleLubePressure"),
        MessageFrame_h.C_POINTER.withName("steeringAxleLubePressure"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("J1939data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout tires$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tires"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TireDataList *tires
     * }
     */
    public static final AddressLayout tires$layout() {
        return tires$LAYOUT;
    }

    private static final long tires$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TireDataList *tires
     * }
     */
    public static final long tires$offset() {
        return tires$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TireDataList *tires
     * }
     */
    public static MemorySegment tires(MemorySegment struct) {
        return struct.get(tires$LAYOUT, tires$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TireDataList *tires
     * }
     */
    public static void tires(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tires$LAYOUT, tires$OFFSET, fieldValue);
    }

    private static final AddressLayout axles$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("axles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AxleWeightList *axles
     * }
     */
    public static final AddressLayout axles$layout() {
        return axles$LAYOUT;
    }

    private static final long axles$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AxleWeightList *axles
     * }
     */
    public static final long axles$offset() {
        return axles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AxleWeightList *axles
     * }
     */
    public static MemorySegment axles(MemorySegment struct) {
        return struct.get(axles$LAYOUT, axles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AxleWeightList *axles
     * }
     */
    public static void axles(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(axles$LAYOUT, axles$OFFSET, fieldValue);
    }

    private static final AddressLayout trailerWeight$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trailerWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrailerWeight_t *trailerWeight
     * }
     */
    public static final AddressLayout trailerWeight$layout() {
        return trailerWeight$LAYOUT;
    }

    private static final long trailerWeight$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrailerWeight_t *trailerWeight
     * }
     */
    public static final long trailerWeight$offset() {
        return trailerWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrailerWeight_t *trailerWeight
     * }
     */
    public static MemorySegment trailerWeight(MemorySegment struct) {
        return struct.get(trailerWeight$LAYOUT, trailerWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrailerWeight_t *trailerWeight
     * }
     */
    public static void trailerWeight(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trailerWeight$LAYOUT, trailerWeight$OFFSET, fieldValue);
    }

    private static final AddressLayout cargoWeight$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cargoWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CargoWeight_t *cargoWeight
     * }
     */
    public static final AddressLayout cargoWeight$layout() {
        return cargoWeight$LAYOUT;
    }

    private static final long cargoWeight$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CargoWeight_t *cargoWeight
     * }
     */
    public static final long cargoWeight$offset() {
        return cargoWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CargoWeight_t *cargoWeight
     * }
     */
    public static MemorySegment cargoWeight(MemorySegment struct) {
        return struct.get(cargoWeight$LAYOUT, cargoWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CargoWeight_t *cargoWeight
     * }
     */
    public static void cargoWeight(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cargoWeight$LAYOUT, cargoWeight$OFFSET, fieldValue);
    }

    private static final AddressLayout steeringAxleTemperature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("steeringAxleTemperature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteeringAxleTemperature_t *steeringAxleTemperature
     * }
     */
    public static final AddressLayout steeringAxleTemperature$layout() {
        return steeringAxleTemperature$LAYOUT;
    }

    private static final long steeringAxleTemperature$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteeringAxleTemperature_t *steeringAxleTemperature
     * }
     */
    public static final long steeringAxleTemperature$offset() {
        return steeringAxleTemperature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteeringAxleTemperature_t *steeringAxleTemperature
     * }
     */
    public static MemorySegment steeringAxleTemperature(MemorySegment struct) {
        return struct.get(steeringAxleTemperature$LAYOUT, steeringAxleTemperature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteeringAxleTemperature_t *steeringAxleTemperature
     * }
     */
    public static void steeringAxleTemperature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(steeringAxleTemperature$LAYOUT, steeringAxleTemperature$OFFSET, fieldValue);
    }

    private static final AddressLayout driveAxleLocation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driveAxleLocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DriveAxleLocation_t *driveAxleLocation
     * }
     */
    public static final AddressLayout driveAxleLocation$layout() {
        return driveAxleLocation$LAYOUT;
    }

    private static final long driveAxleLocation$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DriveAxleLocation_t *driveAxleLocation
     * }
     */
    public static final long driveAxleLocation$offset() {
        return driveAxleLocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DriveAxleLocation_t *driveAxleLocation
     * }
     */
    public static MemorySegment driveAxleLocation(MemorySegment struct) {
        return struct.get(driveAxleLocation$LAYOUT, driveAxleLocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DriveAxleLocation_t *driveAxleLocation
     * }
     */
    public static void driveAxleLocation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driveAxleLocation$LAYOUT, driveAxleLocation$OFFSET, fieldValue);
    }

    private static final AddressLayout driveAxleLiftAirPressure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driveAxleLiftAirPressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DriveAxleLiftAirPressure_t *driveAxleLiftAirPressure
     * }
     */
    public static final AddressLayout driveAxleLiftAirPressure$layout() {
        return driveAxleLiftAirPressure$LAYOUT;
    }

    private static final long driveAxleLiftAirPressure$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DriveAxleLiftAirPressure_t *driveAxleLiftAirPressure
     * }
     */
    public static final long driveAxleLiftAirPressure$offset() {
        return driveAxleLiftAirPressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DriveAxleLiftAirPressure_t *driveAxleLiftAirPressure
     * }
     */
    public static MemorySegment driveAxleLiftAirPressure(MemorySegment struct) {
        return struct.get(driveAxleLiftAirPressure$LAYOUT, driveAxleLiftAirPressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DriveAxleLiftAirPressure_t *driveAxleLiftAirPressure
     * }
     */
    public static void driveAxleLiftAirPressure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driveAxleLiftAirPressure$LAYOUT, driveAxleLiftAirPressure$OFFSET, fieldValue);
    }

    private static final AddressLayout driveAxleTemperature$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driveAxleTemperature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DriveAxleTemperature_t *driveAxleTemperature
     * }
     */
    public static final AddressLayout driveAxleTemperature$layout() {
        return driveAxleTemperature$LAYOUT;
    }

    private static final long driveAxleTemperature$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DriveAxleTemperature_t *driveAxleTemperature
     * }
     */
    public static final long driveAxleTemperature$offset() {
        return driveAxleTemperature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DriveAxleTemperature_t *driveAxleTemperature
     * }
     */
    public static MemorySegment driveAxleTemperature(MemorySegment struct) {
        return struct.get(driveAxleTemperature$LAYOUT, driveAxleTemperature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DriveAxleTemperature_t *driveAxleTemperature
     * }
     */
    public static void driveAxleTemperature(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driveAxleTemperature$LAYOUT, driveAxleTemperature$OFFSET, fieldValue);
    }

    private static final AddressLayout driveAxleLubePressure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driveAxleLubePressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DriveAxleLubePressure_t *driveAxleLubePressure
     * }
     */
    public static final AddressLayout driveAxleLubePressure$layout() {
        return driveAxleLubePressure$LAYOUT;
    }

    private static final long driveAxleLubePressure$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DriveAxleLubePressure_t *driveAxleLubePressure
     * }
     */
    public static final long driveAxleLubePressure$offset() {
        return driveAxleLubePressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DriveAxleLubePressure_t *driveAxleLubePressure
     * }
     */
    public static MemorySegment driveAxleLubePressure(MemorySegment struct) {
        return struct.get(driveAxleLubePressure$LAYOUT, driveAxleLubePressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DriveAxleLubePressure_t *driveAxleLubePressure
     * }
     */
    public static void driveAxleLubePressure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driveAxleLubePressure$LAYOUT, driveAxleLubePressure$OFFSET, fieldValue);
    }

    private static final AddressLayout steeringAxleLubePressure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("steeringAxleLubePressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteeringAxleLubePressure_t *steeringAxleLubePressure
     * }
     */
    public static final AddressLayout steeringAxleLubePressure$layout() {
        return steeringAxleLubePressure$LAYOUT;
    }

    private static final long steeringAxleLubePressure$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteeringAxleLubePressure_t *steeringAxleLubePressure
     * }
     */
    public static final long steeringAxleLubePressure$offset() {
        return steeringAxleLubePressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteeringAxleLubePressure_t *steeringAxleLubePressure
     * }
     */
    public static MemorySegment steeringAxleLubePressure(MemorySegment struct) {
        return struct.get(steeringAxleLubePressure$LAYOUT, steeringAxleLubePressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteeringAxleLubePressure_t *steeringAxleLubePressure
     * }
     */
    public static void steeringAxleLubePressure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(steeringAxleLubePressure$LAYOUT, steeringAxleLubePressure$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

