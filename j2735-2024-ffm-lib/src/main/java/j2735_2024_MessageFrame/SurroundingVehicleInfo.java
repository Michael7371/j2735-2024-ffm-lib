// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SurroundingVehicleInfo {
 *     TemporaryID_t surroundingVehicleID;
 *     ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t surroundingVehiclePosition;
 *     VehicleSize_t surroundingVehicleSize;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SurroundingVehicleInfo {

    SurroundingVehicleInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        OCTET_STRING.layout().withName("surroundingVehicleID"),
        ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ.layout().withName("surroundingVehiclePosition"),
        VehicleSize.layout().withName("surroundingVehicleSize"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SurroundingVehicleInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout surroundingVehicleID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surroundingVehicleID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t surroundingVehicleID
     * }
     */
    public static final GroupLayout surroundingVehicleID$layout() {
        return surroundingVehicleID$LAYOUT;
    }

    private static final long surroundingVehicleID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t surroundingVehicleID
     * }
     */
    public static final long surroundingVehicleID$offset() {
        return surroundingVehicleID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t surroundingVehicleID
     * }
     */
    public static MemorySegment surroundingVehicleID(MemorySegment struct) {
        return struct.asSlice(surroundingVehicleID$OFFSET, surroundingVehicleID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t surroundingVehicleID
     * }
     */
    public static void surroundingVehicleID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surroundingVehicleID$OFFSET, surroundingVehicleID$LAYOUT.byteSize());
    }

    private static final GroupLayout surroundingVehiclePosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surroundingVehiclePosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t surroundingVehiclePosition
     * }
     */
    public static final GroupLayout surroundingVehiclePosition$layout() {
        return surroundingVehiclePosition$LAYOUT;
    }

    private static final long surroundingVehiclePosition$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t surroundingVehiclePosition
     * }
     */
    public static final long surroundingVehiclePosition$offset() {
        return surroundingVehiclePosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t surroundingVehiclePosition
     * }
     */
    public static MemorySegment surroundingVehiclePosition(MemorySegment struct) {
        return struct.asSlice(surroundingVehiclePosition$OFFSET, surroundingVehiclePosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t surroundingVehiclePosition
     * }
     */
    public static void surroundingVehiclePosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surroundingVehiclePosition$OFFSET, surroundingVehiclePosition$LAYOUT.byteSize());
    }

    private static final GroupLayout surroundingVehicleSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("surroundingVehicleSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleSize_t surroundingVehicleSize
     * }
     */
    public static final GroupLayout surroundingVehicleSize$layout() {
        return surroundingVehicleSize$LAYOUT;
    }

    private static final long surroundingVehicleSize$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleSize_t surroundingVehicleSize
     * }
     */
    public static final long surroundingVehicleSize$offset() {
        return surroundingVehicleSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleSize_t surroundingVehicleSize
     * }
     */
    public static MemorySegment surroundingVehicleSize(MemorySegment struct) {
        return struct.asSlice(surroundingVehicleSize$OFFSET, surroundingVehicleSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleSize_t surroundingVehicleSize
     * }
     */
    public static void surroundingVehicleSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, surroundingVehicleSize$OFFSET, surroundingVehicleSize$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

