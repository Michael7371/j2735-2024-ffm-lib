// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_TYPE_descriptor_s {
 *     const char *name;
 *     const char *xml_tag;
 *     asn_TYPE_operation_t *op;
 *     const ber_tlv_tag_t *tags;
 *     unsigned int tags_count;
 *     const ber_tlv_tag_t *all_tags;
 *     unsigned int all_tags_count;
 *     asn_encoding_constraints_t encoding_constraints;
 *     struct asn_TYPE_member_s *elements;
 *     unsigned int elements_count;
 *     const void *specifics;
 * }
 * }
 */
public class asn_TYPE_descriptor_s {

    asn_TYPE_descriptor_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("name"),
        MessageFrame_h.C_POINTER.withName("xml_tag"),
        MessageFrame_h.C_POINTER.withName("op"),
        MessageFrame_h.C_POINTER.withName("tags"),
        MessageFrame_h.C_INT.withName("tags_count"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_POINTER.withName("all_tags"),
        MessageFrame_h.C_INT.withName("all_tags_count"),
        MemoryLayout.paddingLayout(4),
        asn_encoding_constraints_s.layout().withName("encoding_constraints"),
        MessageFrame_h.C_POINTER.withName("elements"),
        MessageFrame_h.C_INT.withName("elements_count"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_POINTER.withName("specifics")
    ).withName("asn_TYPE_descriptor_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout xml_tag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xml_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *xml_tag
     * }
     */
    public static final AddressLayout xml_tag$layout() {
        return xml_tag$LAYOUT;
    }

    private static final long xml_tag$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *xml_tag
     * }
     */
    public static final long xml_tag$offset() {
        return xml_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *xml_tag
     * }
     */
    public static MemorySegment xml_tag(MemorySegment struct) {
        return struct.get(xml_tag$LAYOUT, xml_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *xml_tag
     * }
     */
    public static void xml_tag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xml_tag$LAYOUT, xml_tag$OFFSET, fieldValue);
    }

    private static final AddressLayout op$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_TYPE_operation_t *op
     * }
     */
    public static final AddressLayout op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_TYPE_operation_t *op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_TYPE_operation_t *op
     * }
     */
    public static MemorySegment op(MemorySegment struct) {
        return struct.get(op$LAYOUT, op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_TYPE_operation_t *op
     * }
     */
    public static void op(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(op$LAYOUT, op$OFFSET, fieldValue);
    }

    private static final AddressLayout tags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *tags
     * }
     */
    public static final AddressLayout tags$layout() {
        return tags$LAYOUT;
    }

    private static final long tags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *tags
     * }
     */
    public static final long tags$offset() {
        return tags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *tags
     * }
     */
    public static MemorySegment tags(MemorySegment struct) {
        return struct.get(tags$LAYOUT, tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *tags
     * }
     */
    public static void tags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tags$LAYOUT, tags$OFFSET, fieldValue);
    }

    private static final OfInt tags_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tags_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int tags_count
     * }
     */
    public static final OfInt tags_count$layout() {
        return tags_count$LAYOUT;
    }

    private static final long tags_count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int tags_count
     * }
     */
    public static final long tags_count$offset() {
        return tags_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int tags_count
     * }
     */
    public static int tags_count(MemorySegment struct) {
        return struct.get(tags_count$LAYOUT, tags_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int tags_count
     * }
     */
    public static void tags_count(MemorySegment struct, int fieldValue) {
        struct.set(tags_count$LAYOUT, tags_count$OFFSET, fieldValue);
    }

    private static final AddressLayout all_tags$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("all_tags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *all_tags
     * }
     */
    public static final AddressLayout all_tags$layout() {
        return all_tags$LAYOUT;
    }

    private static final long all_tags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *all_tags
     * }
     */
    public static final long all_tags$offset() {
        return all_tags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *all_tags
     * }
     */
    public static MemorySegment all_tags(MemorySegment struct) {
        return struct.get(all_tags$LAYOUT, all_tags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ber_tlv_tag_t *all_tags
     * }
     */
    public static void all_tags(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(all_tags$LAYOUT, all_tags$OFFSET, fieldValue);
    }

    private static final OfInt all_tags_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("all_tags_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int all_tags_count
     * }
     */
    public static final OfInt all_tags_count$layout() {
        return all_tags_count$LAYOUT;
    }

    private static final long all_tags_count$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int all_tags_count
     * }
     */
    public static final long all_tags_count$offset() {
        return all_tags_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int all_tags_count
     * }
     */
    public static int all_tags_count(MemorySegment struct) {
        return struct.get(all_tags_count$LAYOUT, all_tags_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int all_tags_count
     * }
     */
    public static void all_tags_count(MemorySegment struct, int fieldValue) {
        struct.set(all_tags_count$LAYOUT, all_tags_count$OFFSET, fieldValue);
    }

    private static final GroupLayout encoding_constraints$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("encoding_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_encoding_constraints_t encoding_constraints
     * }
     */
    public static final GroupLayout encoding_constraints$layout() {
        return encoding_constraints$LAYOUT;
    }

    private static final long encoding_constraints$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_encoding_constraints_t encoding_constraints
     * }
     */
    public static final long encoding_constraints$offset() {
        return encoding_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_encoding_constraints_t encoding_constraints
     * }
     */
    public static MemorySegment encoding_constraints(MemorySegment struct) {
        return struct.asSlice(encoding_constraints$OFFSET, encoding_constraints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_encoding_constraints_t encoding_constraints
     * }
     */
    public static void encoding_constraints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, encoding_constraints$OFFSET, encoding_constraints$LAYOUT.byteSize());
    }

    private static final AddressLayout elements$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("elements"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct asn_TYPE_member_s *elements
     * }
     */
    public static final AddressLayout elements$layout() {
        return elements$LAYOUT;
    }

    private static final long elements$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct asn_TYPE_member_s *elements
     * }
     */
    public static final long elements$offset() {
        return elements$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct asn_TYPE_member_s *elements
     * }
     */
    public static MemorySegment elements(MemorySegment struct) {
        return struct.get(elements$LAYOUT, elements$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct asn_TYPE_member_s *elements
     * }
     */
    public static void elements(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(elements$LAYOUT, elements$OFFSET, fieldValue);
    }

    private static final OfInt elements_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("elements_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int elements_count
     * }
     */
    public static final OfInt elements_count$layout() {
        return elements_count$LAYOUT;
    }

    private static final long elements_count$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int elements_count
     * }
     */
    public static final long elements_count$offset() {
        return elements_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int elements_count
     * }
     */
    public static int elements_count(MemorySegment struct) {
        return struct.get(elements_count$LAYOUT, elements_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int elements_count
     * }
     */
    public static void elements_count(MemorySegment struct, int fieldValue) {
        struct.set(elements_count$LAYOUT, elements_count$OFFSET, fieldValue);
    }

    private static final AddressLayout specifics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("specifics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *specifics
     * }
     */
    public static final AddressLayout specifics$layout() {
        return specifics$LAYOUT;
    }

    private static final long specifics$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *specifics
     * }
     */
    public static final long specifics$offset() {
        return specifics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *specifics
     * }
     */
    public static MemorySegment specifics(MemorySegment struct) {
        return struct.get(specifics$LAYOUT, specifics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *specifics
     * }
     */
    public static void specifics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(specifics$LAYOUT, specifics$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

