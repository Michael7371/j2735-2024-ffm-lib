// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TrafficLightStatusMessage {
 *     TrafficLightID_t trafficLightID;
 *     Common_Longitude_t *Long;
 *     Common_Latitude_t *lat;
 *     TrafficLightOperationStatus_t operationStatus;
 *     TrafficLightControllerStatus_t controllerStatus;
 *     TimeInSecond_B16_t cyclecounter;
 *     TimeInSecond_B16_t cycletime;
 *     DDateTime_t currentTime;
 *     TrafficLightStatusList_t trafficLightStatus;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TrafficLightStatusMessage {

    TrafficLightStatusMessage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        TrafficLightID.layout().withName("trafficLightID"),
        MessageFrame_h.C_POINTER.withName("Long"),
        MessageFrame_h.C_POINTER.withName("lat"),
        BIT_STRING_s.layout().withName("operationStatus"),
        BIT_STRING_s.layout().withName("controllerStatus"),
        MessageFrame_h.C_LONG.withName("cyclecounter"),
        MessageFrame_h.C_LONG.withName("cycletime"),
        DDateTime.layout().withName("currentTime"),
        TrafficLightStatusList.layout().withName("trafficLightStatus"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TrafficLightStatusMessage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout trafficLightID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("trafficLightID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrafficLightID_t trafficLightID
     * }
     */
    public static final GroupLayout trafficLightID$layout() {
        return trafficLightID$LAYOUT;
    }

    private static final long trafficLightID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrafficLightID_t trafficLightID
     * }
     */
    public static final long trafficLightID$offset() {
        return trafficLightID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrafficLightID_t trafficLightID
     * }
     */
    public static MemorySegment trafficLightID(MemorySegment struct) {
        return struct.asSlice(trafficLightID$OFFSET, trafficLightID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrafficLightID_t trafficLightID
     * }
     */
    public static void trafficLightID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, trafficLightID$OFFSET, trafficLightID$LAYOUT.byteSize());
    }

    private static final AddressLayout Long_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Long"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Longitude_t *Long
     * }
     */
    public static final AddressLayout Long_$layout() {
        return Long_$LAYOUT;
    }

    private static final long Long_$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Longitude_t *Long
     * }
     */
    public static final long Long_$offset() {
        return Long_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Longitude_t *Long
     * }
     */
    public static MemorySegment Long_(MemorySegment struct) {
        return struct.get(Long_$LAYOUT, Long_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Longitude_t *Long
     * }
     */
    public static void Long_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Long_$LAYOUT, Long_$OFFSET, fieldValue);
    }

    private static final AddressLayout lat$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Latitude_t *lat
     * }
     */
    public static final AddressLayout lat$layout() {
        return lat$LAYOUT;
    }

    private static final long lat$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Latitude_t *lat
     * }
     */
    public static final long lat$offset() {
        return lat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Latitude_t *lat
     * }
     */
    public static MemorySegment lat(MemorySegment struct) {
        return struct.get(lat$LAYOUT, lat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Latitude_t *lat
     * }
     */
    public static void lat(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lat$LAYOUT, lat$OFFSET, fieldValue);
    }

    private static final GroupLayout operationStatus$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("operationStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrafficLightOperationStatus_t operationStatus
     * }
     */
    public static final GroupLayout operationStatus$layout() {
        return operationStatus$LAYOUT;
    }

    private static final long operationStatus$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrafficLightOperationStatus_t operationStatus
     * }
     */
    public static final long operationStatus$offset() {
        return operationStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrafficLightOperationStatus_t operationStatus
     * }
     */
    public static MemorySegment operationStatus(MemorySegment struct) {
        return struct.asSlice(operationStatus$OFFSET, operationStatus$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrafficLightOperationStatus_t operationStatus
     * }
     */
    public static void operationStatus(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, operationStatus$OFFSET, operationStatus$LAYOUT.byteSize());
    }

    private static final GroupLayout controllerStatus$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("controllerStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrafficLightControllerStatus_t controllerStatus
     * }
     */
    public static final GroupLayout controllerStatus$layout() {
        return controllerStatus$LAYOUT;
    }

    private static final long controllerStatus$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrafficLightControllerStatus_t controllerStatus
     * }
     */
    public static final long controllerStatus$offset() {
        return controllerStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrafficLightControllerStatus_t controllerStatus
     * }
     */
    public static MemorySegment controllerStatus(MemorySegment struct) {
        return struct.asSlice(controllerStatus$OFFSET, controllerStatus$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrafficLightControllerStatus_t controllerStatus
     * }
     */
    public static void controllerStatus(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, controllerStatus$OFFSET, controllerStatus$LAYOUT.byteSize());
    }

    private static final OfLong cyclecounter$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cyclecounter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cyclecounter
     * }
     */
    public static final OfLong cyclecounter$layout() {
        return cyclecounter$LAYOUT;
    }

    private static final long cyclecounter$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cyclecounter
     * }
     */
    public static final long cyclecounter$offset() {
        return cyclecounter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cyclecounter
     * }
     */
    public static long cyclecounter(MemorySegment struct) {
        return struct.get(cyclecounter$LAYOUT, cyclecounter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cyclecounter
     * }
     */
    public static void cyclecounter(MemorySegment struct, long fieldValue) {
        struct.set(cyclecounter$LAYOUT, cyclecounter$OFFSET, fieldValue);
    }

    private static final OfLong cycletime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cycletime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cycletime
     * }
     */
    public static final OfLong cycletime$layout() {
        return cycletime$LAYOUT;
    }

    private static final long cycletime$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cycletime
     * }
     */
    public static final long cycletime$offset() {
        return cycletime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cycletime
     * }
     */
    public static long cycletime(MemorySegment struct) {
        return struct.get(cycletime$LAYOUT, cycletime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeInSecond_B16_t cycletime
     * }
     */
    public static void cycletime(MemorySegment struct, long fieldValue) {
        struct.set(cycletime$LAYOUT, cycletime$OFFSET, fieldValue);
    }

    private static final GroupLayout currentTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("currentTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t currentTime
     * }
     */
    public static final GroupLayout currentTime$layout() {
        return currentTime$LAYOUT;
    }

    private static final long currentTime$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t currentTime
     * }
     */
    public static final long currentTime$offset() {
        return currentTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t currentTime
     * }
     */
    public static MemorySegment currentTime(MemorySegment struct) {
        return struct.asSlice(currentTime$OFFSET, currentTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t currentTime
     * }
     */
    public static void currentTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, currentTime$OFFSET, currentTime$LAYOUT.byteSize());
    }

    private static final GroupLayout trafficLightStatus$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("trafficLightStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrafficLightStatusList_t trafficLightStatus
     * }
     */
    public static final GroupLayout trafficLightStatus$layout() {
        return trafficLightStatus$LAYOUT;
    }

    private static final long trafficLightStatus$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrafficLightStatusList_t trafficLightStatus
     * }
     */
    public static final long trafficLightStatus$offset() {
        return trafficLightStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrafficLightStatusList_t trafficLightStatus
     * }
     */
    public static MemorySegment trafficLightStatus(MemorySegment struct) {
        return struct.asSlice(trafficLightStatus$OFFSET, trafficLightStatus$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrafficLightStatusList_t trafficLightStatus
     * }
     */
    public static void trafficLightStatus(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, trafficLightStatus$OFFSET, trafficLightStatus$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

