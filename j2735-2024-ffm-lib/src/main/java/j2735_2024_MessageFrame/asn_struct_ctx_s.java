// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_struct_ctx_s {
 *     short phase;
 *     short step;
 *     int context;
 *     void *ptr;
 *     ber_tlv_len_t left;
 * }
 * }
 */
public class asn_struct_ctx_s {

    asn_struct_ctx_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_SHORT.withName("phase"),
        MessageFrame_h.C_SHORT.withName("step"),
        MessageFrame_h.C_INT.withName("context"),
        MessageFrame_h.C_POINTER.withName("ptr"),
        MessageFrame_h.C_LONG.withName("left")
    ).withName("asn_struct_ctx_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort phase$LAYOUT = (OfShort)$LAYOUT.select(groupElement("phase"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short phase
     * }
     */
    public static final OfShort phase$layout() {
        return phase$LAYOUT;
    }

    private static final long phase$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short phase
     * }
     */
    public static final long phase$offset() {
        return phase$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short phase
     * }
     */
    public static short phase(MemorySegment struct) {
        return struct.get(phase$LAYOUT, phase$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short phase
     * }
     */
    public static void phase(MemorySegment struct, short fieldValue) {
        struct.set(phase$LAYOUT, phase$OFFSET, fieldValue);
    }

    private static final OfShort step$LAYOUT = (OfShort)$LAYOUT.select(groupElement("step"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short step
     * }
     */
    public static final OfShort step$layout() {
        return step$LAYOUT;
    }

    private static final long step$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short step
     * }
     */
    public static final long step$offset() {
        return step$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short step
     * }
     */
    public static short step(MemorySegment struct) {
        return struct.get(step$LAYOUT, step$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short step
     * }
     */
    public static void step(MemorySegment struct, short fieldValue) {
        struct.set(step$LAYOUT, step$OFFSET, fieldValue);
    }

    private static final OfInt context$LAYOUT = (OfInt)$LAYOUT.select(groupElement("context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int context
     * }
     */
    public static final OfInt context$layout() {
        return context$LAYOUT;
    }

    private static final long context$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int context
     * }
     */
    public static final long context$offset() {
        return context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int context
     * }
     */
    public static int context(MemorySegment struct) {
        return struct.get(context$LAYOUT, context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int context
     * }
     */
    public static void context(MemorySegment struct, int fieldValue) {
        struct.set(context$LAYOUT, context$OFFSET, fieldValue);
    }

    private static final AddressLayout ptr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final AddressLayout ptr$layout() {
        return ptr$LAYOUT;
    }

    private static final long ptr$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static final long ptr$offset() {
        return ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static MemorySegment ptr(MemorySegment struct) {
        return struct.get(ptr$LAYOUT, ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptr
     * }
     */
    public static void ptr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ptr$LAYOUT, ptr$OFFSET, fieldValue);
    }

    private static final OfLong left$LAYOUT = (OfLong)$LAYOUT.select(groupElement("left"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static final OfLong left$layout() {
        return left$LAYOUT;
    }

    private static final long left$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static final long left$offset() {
        return left$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static long left(MemorySegment struct) {
        return struct.get(left$LAYOUT, left$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static void left(MemorySegment struct, long fieldValue) {
        struct.set(left$LAYOUT, left$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

