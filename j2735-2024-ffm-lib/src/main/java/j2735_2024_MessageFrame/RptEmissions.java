// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RptEmissions {
 *     long *hydrocarbons;
 *     long *co;
 *     long *co2;
 *     long *no;
 *     long *no2;
 *     long *so2;
 *     long *o3;
 *     long *pm10;
 *     long *pm25;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RptEmissions {

    RptEmissions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("hydrocarbons"),
        MessageFrame_h.C_POINTER.withName("co"),
        MessageFrame_h.C_POINTER.withName("co2"),
        MessageFrame_h.C_POINTER.withName("no"),
        MessageFrame_h.C_POINTER.withName("no2"),
        MessageFrame_h.C_POINTER.withName("so2"),
        MessageFrame_h.C_POINTER.withName("o3"),
        MessageFrame_h.C_POINTER.withName("pm10"),
        MessageFrame_h.C_POINTER.withName("pm25"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RptEmissions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout hydrocarbons$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hydrocarbons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *hydrocarbons
     * }
     */
    public static final AddressLayout hydrocarbons$layout() {
        return hydrocarbons$LAYOUT;
    }

    private static final long hydrocarbons$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *hydrocarbons
     * }
     */
    public static final long hydrocarbons$offset() {
        return hydrocarbons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *hydrocarbons
     * }
     */
    public static MemorySegment hydrocarbons(MemorySegment struct) {
        return struct.get(hydrocarbons$LAYOUT, hydrocarbons$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *hydrocarbons
     * }
     */
    public static void hydrocarbons(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hydrocarbons$LAYOUT, hydrocarbons$OFFSET, fieldValue);
    }

    private static final AddressLayout co$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("co"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *co
     * }
     */
    public static final AddressLayout co$layout() {
        return co$LAYOUT;
    }

    private static final long co$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *co
     * }
     */
    public static final long co$offset() {
        return co$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *co
     * }
     */
    public static MemorySegment co(MemorySegment struct) {
        return struct.get(co$LAYOUT, co$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *co
     * }
     */
    public static void co(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(co$LAYOUT, co$OFFSET, fieldValue);
    }

    private static final AddressLayout co2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("co2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *co2
     * }
     */
    public static final AddressLayout co2$layout() {
        return co2$LAYOUT;
    }

    private static final long co2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *co2
     * }
     */
    public static final long co2$offset() {
        return co2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *co2
     * }
     */
    public static MemorySegment co2(MemorySegment struct) {
        return struct.get(co2$LAYOUT, co2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *co2
     * }
     */
    public static void co2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(co2$LAYOUT, co2$OFFSET, fieldValue);
    }

    private static final AddressLayout no$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("no"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *no
     * }
     */
    public static final AddressLayout no$layout() {
        return no$LAYOUT;
    }

    private static final long no$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *no
     * }
     */
    public static final long no$offset() {
        return no$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *no
     * }
     */
    public static MemorySegment no(MemorySegment struct) {
        return struct.get(no$LAYOUT, no$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *no
     * }
     */
    public static void no(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(no$LAYOUT, no$OFFSET, fieldValue);
    }

    private static final AddressLayout no2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("no2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *no2
     * }
     */
    public static final AddressLayout no2$layout() {
        return no2$LAYOUT;
    }

    private static final long no2$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *no2
     * }
     */
    public static final long no2$offset() {
        return no2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *no2
     * }
     */
    public static MemorySegment no2(MemorySegment struct) {
        return struct.get(no2$LAYOUT, no2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *no2
     * }
     */
    public static void no2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(no2$LAYOUT, no2$OFFSET, fieldValue);
    }

    private static final AddressLayout so2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("so2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *so2
     * }
     */
    public static final AddressLayout so2$layout() {
        return so2$LAYOUT;
    }

    private static final long so2$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *so2
     * }
     */
    public static final long so2$offset() {
        return so2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *so2
     * }
     */
    public static MemorySegment so2(MemorySegment struct) {
        return struct.get(so2$LAYOUT, so2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *so2
     * }
     */
    public static void so2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(so2$LAYOUT, so2$OFFSET, fieldValue);
    }

    private static final AddressLayout o3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("o3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *o3
     * }
     */
    public static final AddressLayout o3$layout() {
        return o3$LAYOUT;
    }

    private static final long o3$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *o3
     * }
     */
    public static final long o3$offset() {
        return o3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *o3
     * }
     */
    public static MemorySegment o3(MemorySegment struct) {
        return struct.get(o3$LAYOUT, o3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *o3
     * }
     */
    public static void o3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(o3$LAYOUT, o3$OFFSET, fieldValue);
    }

    private static final AddressLayout pm10$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pm10"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *pm10
     * }
     */
    public static final AddressLayout pm10$layout() {
        return pm10$LAYOUT;
    }

    private static final long pm10$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *pm10
     * }
     */
    public static final long pm10$offset() {
        return pm10$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *pm10
     * }
     */
    public static MemorySegment pm10(MemorySegment struct) {
        return struct.get(pm10$LAYOUT, pm10$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *pm10
     * }
     */
    public static void pm10(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pm10$LAYOUT, pm10$OFFSET, fieldValue);
    }

    private static final AddressLayout pm25$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pm25"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *pm25
     * }
     */
    public static final AddressLayout pm25$layout() {
        return pm25$LAYOUT;
    }

    private static final long pm25$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *pm25
     * }
     */
    public static final long pm25$offset() {
        return pm25$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *pm25
     * }
     */
    public static MemorySegment pm25(MemorySegment struct) {
        return struct.get(pm25$LAYOUT, pm25$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *pm25
     * }
     */
    public static void pm25(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pm25$LAYOUT, pm25$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

