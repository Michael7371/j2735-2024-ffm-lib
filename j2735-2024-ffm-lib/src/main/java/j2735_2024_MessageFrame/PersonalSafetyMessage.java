// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PersonalSafetyMessage {
 *     PersonalDeviceUserType_t basicType;
 *     DSecond_t secMark;
 *     Common_MsgCount_t msgCnt;
 *     TemporaryID_t id;
 *     Position3D_t position;
 *     PositionalAccuracy_t accuracy;
 *     Velocity_t speed;
 *     Heading_t heading;
 *     struct AccelerationSet4Way *accelSet;
 *     struct PathHistory *pathHistory;
 *     struct PathPrediction *pathPrediction;
 *     struct PropelledInformation *propulsion;
 *     PersonalDeviceUsageState_t *useState;
 *     PersonalCrossingRequest_t *crossRequest;
 *     PersonalCrossingInProgress_t *crossState;
 *     NumberOfParticipantsInCluster_t *clusterSize;
 *     PersonalClusterRadius_t *clusterRadius;
 *     PublicSafetyEventResponderWorkerType_t *eventResponderType;
 *     PublicSafetyAndRoadWorkerActivity_t *activityType;
 *     PublicSafetyDirectingTrafficSubType_t *activitySubType;
 *     PersonalAssistive_t *assistType;
 *     UserSizeAndBehaviour_t *sizing;
 *     Attachment_t *attachment;
 *     AttachmentRadius_t *attachmentRadius;
 *     AnimalType_t *animalType;
 *     struct PersonalSafetyMessage__regional {
 *         struct {
 *             struct Reg_PersonalSafetyMessage **array;
 *             int count;
 *             int size;
 *             void (*free)(struct Reg_PersonalSafetyMessage *);
 *         } list;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *regional;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class PersonalSafetyMessage {

    PersonalSafetyMessage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("basicType"),
        MessageFrame_h.C_LONG.withName("secMark"),
        MessageFrame_h.C_LONG.withName("msgCnt"),
        OCTET_STRING.layout().withName("id"),
        Position3D.layout().withName("position"),
        PositionalAccuracy.layout().withName("accuracy"),
        MessageFrame_h.C_LONG.withName("speed"),
        MessageFrame_h.C_LONG.withName("heading"),
        MessageFrame_h.C_POINTER.withName("accelSet"),
        MessageFrame_h.C_POINTER.withName("pathHistory"),
        MessageFrame_h.C_POINTER.withName("pathPrediction"),
        MessageFrame_h.C_POINTER.withName("propulsion"),
        MessageFrame_h.C_POINTER.withName("useState"),
        MessageFrame_h.C_POINTER.withName("crossRequest"),
        MessageFrame_h.C_POINTER.withName("crossState"),
        MessageFrame_h.C_POINTER.withName("clusterSize"),
        MessageFrame_h.C_POINTER.withName("clusterRadius"),
        MessageFrame_h.C_POINTER.withName("eventResponderType"),
        MessageFrame_h.C_POINTER.withName("activityType"),
        MessageFrame_h.C_POINTER.withName("activitySubType"),
        MessageFrame_h.C_POINTER.withName("assistType"),
        MessageFrame_h.C_POINTER.withName("sizing"),
        MessageFrame_h.C_POINTER.withName("attachment"),
        MessageFrame_h.C_POINTER.withName("attachmentRadius"),
        MessageFrame_h.C_POINTER.withName("animalType"),
        MessageFrame_h.C_POINTER.withName("regional"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("PersonalSafetyMessage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong basicType$LAYOUT = (OfLong)$LAYOUT.select(groupElement("basicType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalDeviceUserType_t basicType
     * }
     */
    public static final OfLong basicType$layout() {
        return basicType$LAYOUT;
    }

    private static final long basicType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalDeviceUserType_t basicType
     * }
     */
    public static final long basicType$offset() {
        return basicType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalDeviceUserType_t basicType
     * }
     */
    public static long basicType(MemorySegment struct) {
        return struct.get(basicType$LAYOUT, basicType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalDeviceUserType_t basicType
     * }
     */
    public static void basicType(MemorySegment struct, long fieldValue) {
        struct.set(basicType$LAYOUT, basicType$OFFSET, fieldValue);
    }

    private static final OfLong secMark$LAYOUT = (OfLong)$LAYOUT.select(groupElement("secMark"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static final OfLong secMark$layout() {
        return secMark$LAYOUT;
    }

    private static final long secMark$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static final long secMark$offset() {
        return secMark$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static long secMark(MemorySegment struct) {
        return struct.get(secMark$LAYOUT, secMark$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static void secMark(MemorySegment struct, long fieldValue) {
        struct.set(secMark$LAYOUT, secMark$OFFSET, fieldValue);
    }

    private static final OfLong msgCnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("msgCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final OfLong msgCnt$layout() {
        return msgCnt$LAYOUT;
    }

    private static final long msgCnt$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final long msgCnt$offset() {
        return msgCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static long msgCnt(MemorySegment struct) {
        return struct.get(msgCnt$LAYOUT, msgCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static void msgCnt(MemorySegment struct, long fieldValue) {
        struct.set(msgCnt$LAYOUT, msgCnt$OFFSET, fieldValue);
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final GroupLayout position$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Position3D_t position
     * }
     */
    public static final GroupLayout position$layout() {
        return position$LAYOUT;
    }

    private static final long position$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Position3D_t position
     * }
     */
    public static final long position$offset() {
        return position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Position3D_t position
     * }
     */
    public static MemorySegment position(MemorySegment struct) {
        return struct.asSlice(position$OFFSET, position$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Position3D_t position
     * }
     */
    public static void position(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, position$OFFSET, position$LAYOUT.byteSize());
    }

    private static final GroupLayout accuracy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static final GroupLayout accuracy$layout() {
        return accuracy$LAYOUT;
    }

    private static final long accuracy$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static final long accuracy$offset() {
        return accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static MemorySegment accuracy(MemorySegment struct) {
        return struct.asSlice(accuracy$OFFSET, accuracy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static void accuracy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, accuracy$OFFSET, accuracy$LAYOUT.byteSize());
    }

    private static final OfLong speed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("speed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Velocity_t speed
     * }
     */
    public static final OfLong speed$layout() {
        return speed$LAYOUT;
    }

    private static final long speed$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Velocity_t speed
     * }
     */
    public static final long speed$offset() {
        return speed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Velocity_t speed
     * }
     */
    public static long speed(MemorySegment struct) {
        return struct.get(speed$LAYOUT, speed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Velocity_t speed
     * }
     */
    public static void speed(MemorySegment struct, long fieldValue) {
        struct.set(speed$LAYOUT, speed$OFFSET, fieldValue);
    }

    private static final OfLong heading$LAYOUT = (OfLong)$LAYOUT.select(groupElement("heading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final OfLong heading$layout() {
        return heading$LAYOUT;
    }

    private static final long heading$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final long heading$offset() {
        return heading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static long heading(MemorySegment struct) {
        return struct.get(heading$LAYOUT, heading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static void heading(MemorySegment struct, long fieldValue) {
        struct.set(heading$LAYOUT, heading$OFFSET, fieldValue);
    }

    private static final AddressLayout accelSet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accelSet
     * }
     */
    public static final AddressLayout accelSet$layout() {
        return accelSet$LAYOUT;
    }

    private static final long accelSet$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accelSet
     * }
     */
    public static final long accelSet$offset() {
        return accelSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accelSet
     * }
     */
    public static MemorySegment accelSet(MemorySegment struct) {
        return struct.get(accelSet$LAYOUT, accelSet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accelSet
     * }
     */
    public static void accelSet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelSet$LAYOUT, accelSet$OFFSET, fieldValue);
    }

    private static final AddressLayout pathHistory$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pathHistory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PathHistory *pathHistory
     * }
     */
    public static final AddressLayout pathHistory$layout() {
        return pathHistory$LAYOUT;
    }

    private static final long pathHistory$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PathHistory *pathHistory
     * }
     */
    public static final long pathHistory$offset() {
        return pathHistory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PathHistory *pathHistory
     * }
     */
    public static MemorySegment pathHistory(MemorySegment struct) {
        return struct.get(pathHistory$LAYOUT, pathHistory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PathHistory *pathHistory
     * }
     */
    public static void pathHistory(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pathHistory$LAYOUT, pathHistory$OFFSET, fieldValue);
    }

    private static final AddressLayout pathPrediction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pathPrediction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PathPrediction *pathPrediction
     * }
     */
    public static final AddressLayout pathPrediction$layout() {
        return pathPrediction$LAYOUT;
    }

    private static final long pathPrediction$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PathPrediction *pathPrediction
     * }
     */
    public static final long pathPrediction$offset() {
        return pathPrediction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PathPrediction *pathPrediction
     * }
     */
    public static MemorySegment pathPrediction(MemorySegment struct) {
        return struct.get(pathPrediction$LAYOUT, pathPrediction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PathPrediction *pathPrediction
     * }
     */
    public static void pathPrediction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pathPrediction$LAYOUT, pathPrediction$OFFSET, fieldValue);
    }

    private static final AddressLayout propulsion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("propulsion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PropelledInformation *propulsion
     * }
     */
    public static final AddressLayout propulsion$layout() {
        return propulsion$LAYOUT;
    }

    private static final long propulsion$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PropelledInformation *propulsion
     * }
     */
    public static final long propulsion$offset() {
        return propulsion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PropelledInformation *propulsion
     * }
     */
    public static MemorySegment propulsion(MemorySegment struct) {
        return struct.get(propulsion$LAYOUT, propulsion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PropelledInformation *propulsion
     * }
     */
    public static void propulsion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(propulsion$LAYOUT, propulsion$OFFSET, fieldValue);
    }

    private static final AddressLayout useState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("useState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalDeviceUsageState_t *useState
     * }
     */
    public static final AddressLayout useState$layout() {
        return useState$LAYOUT;
    }

    private static final long useState$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalDeviceUsageState_t *useState
     * }
     */
    public static final long useState$offset() {
        return useState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalDeviceUsageState_t *useState
     * }
     */
    public static MemorySegment useState(MemorySegment struct) {
        return struct.get(useState$LAYOUT, useState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalDeviceUsageState_t *useState
     * }
     */
    public static void useState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(useState$LAYOUT, useState$OFFSET, fieldValue);
    }

    private static final AddressLayout crossRequest$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("crossRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalCrossingRequest_t *crossRequest
     * }
     */
    public static final AddressLayout crossRequest$layout() {
        return crossRequest$LAYOUT;
    }

    private static final long crossRequest$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalCrossingRequest_t *crossRequest
     * }
     */
    public static final long crossRequest$offset() {
        return crossRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalCrossingRequest_t *crossRequest
     * }
     */
    public static MemorySegment crossRequest(MemorySegment struct) {
        return struct.get(crossRequest$LAYOUT, crossRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalCrossingRequest_t *crossRequest
     * }
     */
    public static void crossRequest(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(crossRequest$LAYOUT, crossRequest$OFFSET, fieldValue);
    }

    private static final AddressLayout crossState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("crossState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalCrossingInProgress_t *crossState
     * }
     */
    public static final AddressLayout crossState$layout() {
        return crossState$LAYOUT;
    }

    private static final long crossState$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalCrossingInProgress_t *crossState
     * }
     */
    public static final long crossState$offset() {
        return crossState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalCrossingInProgress_t *crossState
     * }
     */
    public static MemorySegment crossState(MemorySegment struct) {
        return struct.get(crossState$LAYOUT, crossState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalCrossingInProgress_t *crossState
     * }
     */
    public static void crossState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(crossState$LAYOUT, crossState$OFFSET, fieldValue);
    }

    private static final AddressLayout clusterSize$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clusterSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NumberOfParticipantsInCluster_t *clusterSize
     * }
     */
    public static final AddressLayout clusterSize$layout() {
        return clusterSize$LAYOUT;
    }

    private static final long clusterSize$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NumberOfParticipantsInCluster_t *clusterSize
     * }
     */
    public static final long clusterSize$offset() {
        return clusterSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NumberOfParticipantsInCluster_t *clusterSize
     * }
     */
    public static MemorySegment clusterSize(MemorySegment struct) {
        return struct.get(clusterSize$LAYOUT, clusterSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NumberOfParticipantsInCluster_t *clusterSize
     * }
     */
    public static void clusterSize(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clusterSize$LAYOUT, clusterSize$OFFSET, fieldValue);
    }

    private static final AddressLayout clusterRadius$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clusterRadius"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalClusterRadius_t *clusterRadius
     * }
     */
    public static final AddressLayout clusterRadius$layout() {
        return clusterRadius$LAYOUT;
    }

    private static final long clusterRadius$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalClusterRadius_t *clusterRadius
     * }
     */
    public static final long clusterRadius$offset() {
        return clusterRadius$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalClusterRadius_t *clusterRadius
     * }
     */
    public static MemorySegment clusterRadius(MemorySegment struct) {
        return struct.get(clusterRadius$LAYOUT, clusterRadius$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalClusterRadius_t *clusterRadius
     * }
     */
    public static void clusterRadius(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clusterRadius$LAYOUT, clusterRadius$OFFSET, fieldValue);
    }

    private static final AddressLayout eventResponderType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("eventResponderType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PublicSafetyEventResponderWorkerType_t *eventResponderType
     * }
     */
    public static final AddressLayout eventResponderType$layout() {
        return eventResponderType$LAYOUT;
    }

    private static final long eventResponderType$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PublicSafetyEventResponderWorkerType_t *eventResponderType
     * }
     */
    public static final long eventResponderType$offset() {
        return eventResponderType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PublicSafetyEventResponderWorkerType_t *eventResponderType
     * }
     */
    public static MemorySegment eventResponderType(MemorySegment struct) {
        return struct.get(eventResponderType$LAYOUT, eventResponderType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PublicSafetyEventResponderWorkerType_t *eventResponderType
     * }
     */
    public static void eventResponderType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(eventResponderType$LAYOUT, eventResponderType$OFFSET, fieldValue);
    }

    private static final AddressLayout activityType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("activityType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PublicSafetyAndRoadWorkerActivity_t *activityType
     * }
     */
    public static final AddressLayout activityType$layout() {
        return activityType$LAYOUT;
    }

    private static final long activityType$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PublicSafetyAndRoadWorkerActivity_t *activityType
     * }
     */
    public static final long activityType$offset() {
        return activityType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PublicSafetyAndRoadWorkerActivity_t *activityType
     * }
     */
    public static MemorySegment activityType(MemorySegment struct) {
        return struct.get(activityType$LAYOUT, activityType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PublicSafetyAndRoadWorkerActivity_t *activityType
     * }
     */
    public static void activityType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(activityType$LAYOUT, activityType$OFFSET, fieldValue);
    }

    private static final AddressLayout activitySubType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("activitySubType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PublicSafetyDirectingTrafficSubType_t *activitySubType
     * }
     */
    public static final AddressLayout activitySubType$layout() {
        return activitySubType$LAYOUT;
    }

    private static final long activitySubType$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PublicSafetyDirectingTrafficSubType_t *activitySubType
     * }
     */
    public static final long activitySubType$offset() {
        return activitySubType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PublicSafetyDirectingTrafficSubType_t *activitySubType
     * }
     */
    public static MemorySegment activitySubType(MemorySegment struct) {
        return struct.get(activitySubType$LAYOUT, activitySubType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PublicSafetyDirectingTrafficSubType_t *activitySubType
     * }
     */
    public static void activitySubType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(activitySubType$LAYOUT, activitySubType$OFFSET, fieldValue);
    }

    private static final AddressLayout assistType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("assistType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalAssistive_t *assistType
     * }
     */
    public static final AddressLayout assistType$layout() {
        return assistType$LAYOUT;
    }

    private static final long assistType$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalAssistive_t *assistType
     * }
     */
    public static final long assistType$offset() {
        return assistType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalAssistive_t *assistType
     * }
     */
    public static MemorySegment assistType(MemorySegment struct) {
        return struct.get(assistType$LAYOUT, assistType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalAssistive_t *assistType
     * }
     */
    public static void assistType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(assistType$LAYOUT, assistType$OFFSET, fieldValue);
    }

    private static final AddressLayout sizing$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sizing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UserSizeAndBehaviour_t *sizing
     * }
     */
    public static final AddressLayout sizing$layout() {
        return sizing$LAYOUT;
    }

    private static final long sizing$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UserSizeAndBehaviour_t *sizing
     * }
     */
    public static final long sizing$offset() {
        return sizing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UserSizeAndBehaviour_t *sizing
     * }
     */
    public static MemorySegment sizing(MemorySegment struct) {
        return struct.get(sizing$LAYOUT, sizing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UserSizeAndBehaviour_t *sizing
     * }
     */
    public static void sizing(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sizing$LAYOUT, sizing$OFFSET, fieldValue);
    }

    private static final AddressLayout attachment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attachment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Attachment_t *attachment
     * }
     */
    public static final AddressLayout attachment$layout() {
        return attachment$LAYOUT;
    }

    private static final long attachment$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Attachment_t *attachment
     * }
     */
    public static final long attachment$offset() {
        return attachment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Attachment_t *attachment
     * }
     */
    public static MemorySegment attachment(MemorySegment struct) {
        return struct.get(attachment$LAYOUT, attachment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Attachment_t *attachment
     * }
     */
    public static void attachment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attachment$LAYOUT, attachment$OFFSET, fieldValue);
    }

    private static final AddressLayout attachmentRadius$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("attachmentRadius"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AttachmentRadius_t *attachmentRadius
     * }
     */
    public static final AddressLayout attachmentRadius$layout() {
        return attachmentRadius$LAYOUT;
    }

    private static final long attachmentRadius$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AttachmentRadius_t *attachmentRadius
     * }
     */
    public static final long attachmentRadius$offset() {
        return attachmentRadius$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AttachmentRadius_t *attachmentRadius
     * }
     */
    public static MemorySegment attachmentRadius(MemorySegment struct) {
        return struct.get(attachmentRadius$LAYOUT, attachmentRadius$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AttachmentRadius_t *attachmentRadius
     * }
     */
    public static void attachmentRadius(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(attachmentRadius$LAYOUT, attachmentRadius$OFFSET, fieldValue);
    }

    private static final AddressLayout animalType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("animalType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AnimalType_t *animalType
     * }
     */
    public static final AddressLayout animalType$layout() {
        return animalType$LAYOUT;
    }

    private static final long animalType$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AnimalType_t *animalType
     * }
     */
    public static final long animalType$offset() {
        return animalType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AnimalType_t *animalType
     * }
     */
    public static MemorySegment animalType(MemorySegment struct) {
        return struct.get(animalType$LAYOUT, animalType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AnimalType_t *animalType
     * }
     */
    public static void animalType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(animalType$LAYOUT, animalType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct PersonalSafetyMessage__regional {
     *     struct {
     *         struct Reg_PersonalSafetyMessage **array;
     *         int count;
     *         int size;
     *         void (*free)(struct Reg_PersonalSafetyMessage *);
     *     } list;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class PersonalSafetyMessage__regional {

        PersonalSafetyMessage__regional() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            list.layout().withName("list"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("PersonalSafetyMessage__regional");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     struct Reg_PersonalSafetyMessage **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_PersonalSafetyMessage *);
         * }
         * }
         */
        public static class list {

            list() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                MessageFrame_h.C_POINTER.withName("array"),
                MessageFrame_h.C_INT.withName("count"),
                MessageFrame_h.C_INT.withName("size"),
                MessageFrame_h.C_POINTER.withName("free")
            ).withName("$anon$79:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct Reg_PersonalSafetyMessage **array
             * }
             */
            public static final AddressLayout array$layout() {
                return array$LAYOUT;
            }

            private static final long array$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct Reg_PersonalSafetyMessage **array
             * }
             */
            public static final long array$offset() {
                return array$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct Reg_PersonalSafetyMessage **array
             * }
             */
            public static MemorySegment array(MemorySegment struct) {
                return struct.get(array$LAYOUT, array$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct Reg_PersonalSafetyMessage **array
             * }
             */
            public static void array(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(array$LAYOUT, array$OFFSET, fieldValue);
            }

            private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final OfInt count$layout() {
                return count$LAYOUT;
            }

            private static final long count$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final long count$offset() {
                return count$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static int count(MemorySegment struct) {
                return struct.get(count$LAYOUT, count$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static void count(MemorySegment struct, int fieldValue) {
                struct.set(count$LAYOUT, count$OFFSET, fieldValue);
            }

            private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final OfInt size$layout() {
                return size$LAYOUT;
            }

            private static final long size$OFFSET = 12;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final long size$offset() {
                return size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static int size(MemorySegment struct) {
                return struct.get(size$LAYOUT, size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static void size(MemorySegment struct, int fieldValue) {
                struct.set(size$LAYOUT, size$OFFSET, fieldValue);
            }

            /**
             * {@snippet lang=c :
             * void (*free)(struct Reg_PersonalSafetyMessage *)
             * }
             */
            public static class free {

                free() {
                    // Should not be called directly
                }

                /**
                 * The function pointer signature, expressed as a functional interface
                 */
                public interface Function {
                    void apply(MemorySegment _x0);
                }

                private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                    MessageFrame_h.C_POINTER
                );

                /**
                 * The descriptor of this function pointer
                 */
                public static FunctionDescriptor descriptor() {
                    return $DESC;
                }

                private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

                /**
                 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
                 * The lifetime of the returned segment is managed by {@code arena}
                 */
                public static MemorySegment allocate(Function fi, Arena arena) {
                    return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
                }

                private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

                /**
                 * Invoke the upcall stub {@code funcPtr}, with given parameters
                 */
                public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                    try {
                         DOWN$MH.invokeExact(funcPtr, _x0);
                    } catch (Throwable ex$) {
                        throw new AssertionError("should not reach here", ex$);
                    }
                }
            }

            private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_PersonalSafetyMessage *)
             * }
             */
            public static final AddressLayout free$layout() {
                return free$LAYOUT;
            }

            private static final long free$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_PersonalSafetyMessage *)
             * }
             */
            public static final long free$offset() {
                return free$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_PersonalSafetyMessage *)
             * }
             */
            public static MemorySegment free(MemorySegment struct) {
                return struct.get(free$LAYOUT, free$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_PersonalSafetyMessage *)
             * }
             */
            public static void free(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(free$LAYOUT, free$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_PersonalSafetyMessage **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_PersonalSafetyMessage *);
         * } list
         * }
         */
        public static final GroupLayout list$layout() {
            return list$LAYOUT;
        }

        private static final long list$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_PersonalSafetyMessage **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_PersonalSafetyMessage *);
         * } list
         * }
         */
        public static final long list$offset() {
            return list$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_PersonalSafetyMessage **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_PersonalSafetyMessage *);
         * } list
         * }
         */
        public static MemorySegment list(MemorySegment struct) {
            return struct.asSlice(list$OFFSET, list$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_PersonalSafetyMessage **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_PersonalSafetyMessage *);
         * } list
         * }
         */
        public static void list(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, list$OFFSET, list$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout regional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PersonalSafetyMessage__regional *regional
     * }
     */
    public static final AddressLayout regional$layout() {
        return regional$LAYOUT;
    }

    private static final long regional$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PersonalSafetyMessage__regional *regional
     * }
     */
    public static final long regional$offset() {
        return regional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PersonalSafetyMessage__regional *regional
     * }
     */
    public static MemorySegment regional(MemorySegment struct) {
        return struct.get(regional$LAYOUT, regional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PersonalSafetyMessage__regional *regional
     * }
     */
    public static void regional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regional$LAYOUT, regional$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

