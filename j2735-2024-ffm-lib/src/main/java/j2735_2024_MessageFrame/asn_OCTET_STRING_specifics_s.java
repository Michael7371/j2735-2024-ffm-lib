// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_OCTET_STRING_specifics_s {
 *     unsigned int struct_size;
 *     unsigned int ctx_offset;
 *     enum asn_OS_Subvariant {
 *         ASN_OSUBV_ANY,
 *         ASN_OSUBV_BIT,
 *         ASN_OSUBV_STR,
 *         ASN_OSUBV_U16,
 *         ASN_OSUBV_U32
 *     } subvariant;
 * }
 * }
 */
public class asn_OCTET_STRING_specifics_s {

    asn_OCTET_STRING_specifics_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("struct_size"),
        MessageFrame_h.C_INT.withName("ctx_offset"),
        MessageFrame_h.C_INT.withName("subvariant")
    ).withName("asn_OCTET_STRING_specifics_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt struct_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("struct_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static final OfInt struct_size$layout() {
        return struct_size$LAYOUT;
    }

    private static final long struct_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static final long struct_size$offset() {
        return struct_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static int struct_size(MemorySegment struct) {
        return struct.get(struct_size$LAYOUT, struct_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static void struct_size(MemorySegment struct, int fieldValue) {
        struct.set(struct_size$LAYOUT, struct_size$OFFSET, fieldValue);
    }

    private static final OfInt ctx_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ctx_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static final OfInt ctx_offset$layout() {
        return ctx_offset$LAYOUT;
    }

    private static final long ctx_offset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static final long ctx_offset$offset() {
        return ctx_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static int ctx_offset(MemorySegment struct) {
        return struct.get(ctx_offset$LAYOUT, ctx_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static void ctx_offset(MemorySegment struct, int fieldValue) {
        struct.set(ctx_offset$LAYOUT, ctx_offset$OFFSET, fieldValue);
    }

    private static final OfInt subvariant$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subvariant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum asn_OS_Subvariant subvariant
     * }
     */
    public static final OfInt subvariant$layout() {
        return subvariant$LAYOUT;
    }

    private static final long subvariant$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum asn_OS_Subvariant subvariant
     * }
     */
    public static final long subvariant$offset() {
        return subvariant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum asn_OS_Subvariant subvariant
     * }
     */
    public static int subvariant(MemorySegment struct) {
        return struct.get(subvariant$LAYOUT, subvariant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum asn_OS_Subvariant subvariant
     * }
     */
    public static void subvariant(MemorySegment struct, int fieldValue) {
        struct.set(subvariant$LAYOUT, subvariant$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

