// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RwmSnapShot {
 *     FullPositionVector_t thePosition;
 *     struct VehicleSafetyExtensions *safetyExt;
 *     struct VehicleStatus *dataSet;
 *     struct NtcipEssData *weatherData;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RwmSnapShot {

    RwmSnapShot() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        FullPositionVector.layout().withName("thePosition"),
        MessageFrame_h.C_POINTER.withName("safetyExt"),
        MessageFrame_h.C_POINTER.withName("dataSet"),
        MessageFrame_h.C_POINTER.withName("weatherData"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RwmSnapShot");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout thePosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("thePosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FullPositionVector_t thePosition
     * }
     */
    public static final GroupLayout thePosition$layout() {
        return thePosition$LAYOUT;
    }

    private static final long thePosition$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FullPositionVector_t thePosition
     * }
     */
    public static final long thePosition$offset() {
        return thePosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FullPositionVector_t thePosition
     * }
     */
    public static MemorySegment thePosition(MemorySegment struct) {
        return struct.asSlice(thePosition$OFFSET, thePosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FullPositionVector_t thePosition
     * }
     */
    public static void thePosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, thePosition$OFFSET, thePosition$LAYOUT.byteSize());
    }

    private static final AddressLayout safetyExt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("safetyExt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleSafetyExtensions *safetyExt
     * }
     */
    public static final AddressLayout safetyExt$layout() {
        return safetyExt$LAYOUT;
    }

    private static final long safetyExt$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleSafetyExtensions *safetyExt
     * }
     */
    public static final long safetyExt$offset() {
        return safetyExt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleSafetyExtensions *safetyExt
     * }
     */
    public static MemorySegment safetyExt(MemorySegment struct) {
        return struct.get(safetyExt$LAYOUT, safetyExt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleSafetyExtensions *safetyExt
     * }
     */
    public static void safetyExt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(safetyExt$LAYOUT, safetyExt$OFFSET, fieldValue);
    }

    private static final AddressLayout dataSet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dataSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus *dataSet
     * }
     */
    public static final AddressLayout dataSet$layout() {
        return dataSet$LAYOUT;
    }

    private static final long dataSet$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus *dataSet
     * }
     */
    public static final long dataSet$offset() {
        return dataSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus *dataSet
     * }
     */
    public static MemorySegment dataSet(MemorySegment struct) {
        return struct.get(dataSet$LAYOUT, dataSet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus *dataSet
     * }
     */
    public static void dataSet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dataSet$LAYOUT, dataSet$OFFSET, fieldValue);
    }

    private static final AddressLayout weatherData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("weatherData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipEssData *weatherData
     * }
     */
    public static final AddressLayout weatherData$layout() {
        return weatherData$LAYOUT;
    }

    private static final long weatherData$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipEssData *weatherData
     * }
     */
    public static final long weatherData$offset() {
        return weatherData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipEssData *weatherData
     * }
     */
    public static MemorySegment weatherData(MemorySegment struct) {
        return struct.get(weatherData$LAYOUT, weatherData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipEssData *weatherData
     * }
     */
    public static void weatherData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(weatherData$LAYOUT, weatherData$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

