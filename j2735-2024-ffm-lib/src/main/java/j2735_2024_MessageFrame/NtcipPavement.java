// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct NtcipPavement {
 *     NTCIPEssSurfaceTemperature_t *surfaceTemp;
 *     SurfaceTempMeasurementStdDev_t *tempStdDev;
 *     NTCIPPavementSensorSurfaceCondition_t *condition;
 *     NTCIPEssSurfaceIceOrWaterDepth_t *moistureDepth;
 *     struct RoadRoughness *roadRoughness;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class NtcipPavement {

    NtcipPavement() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("surfaceTemp"),
        MessageFrame_h.C_POINTER.withName("tempStdDev"),
        MessageFrame_h.C_POINTER.withName("condition"),
        MessageFrame_h.C_POINTER.withName("moistureDepth"),
        MessageFrame_h.C_POINTER.withName("roadRoughness"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("NtcipPavement");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout surfaceTemp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("surfaceTemp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceTemperature_t *surfaceTemp
     * }
     */
    public static final AddressLayout surfaceTemp$layout() {
        return surfaceTemp$LAYOUT;
    }

    private static final long surfaceTemp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceTemperature_t *surfaceTemp
     * }
     */
    public static final long surfaceTemp$offset() {
        return surfaceTemp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceTemperature_t *surfaceTemp
     * }
     */
    public static MemorySegment surfaceTemp(MemorySegment struct) {
        return struct.get(surfaceTemp$LAYOUT, surfaceTemp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceTemperature_t *surfaceTemp
     * }
     */
    public static void surfaceTemp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(surfaceTemp$LAYOUT, surfaceTemp$OFFSET, fieldValue);
    }

    private static final AddressLayout tempStdDev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tempStdDev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SurfaceTempMeasurementStdDev_t *tempStdDev
     * }
     */
    public static final AddressLayout tempStdDev$layout() {
        return tempStdDev$LAYOUT;
    }

    private static final long tempStdDev$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SurfaceTempMeasurementStdDev_t *tempStdDev
     * }
     */
    public static final long tempStdDev$offset() {
        return tempStdDev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SurfaceTempMeasurementStdDev_t *tempStdDev
     * }
     */
    public static MemorySegment tempStdDev(MemorySegment struct) {
        return struct.get(tempStdDev$LAYOUT, tempStdDev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SurfaceTempMeasurementStdDev_t *tempStdDev
     * }
     */
    public static void tempStdDev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tempStdDev$LAYOUT, tempStdDev$OFFSET, fieldValue);
    }

    private static final AddressLayout condition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("condition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPPavementSensorSurfaceCondition_t *condition
     * }
     */
    public static final AddressLayout condition$layout() {
        return condition$LAYOUT;
    }

    private static final long condition$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPPavementSensorSurfaceCondition_t *condition
     * }
     */
    public static final long condition$offset() {
        return condition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPPavementSensorSurfaceCondition_t *condition
     * }
     */
    public static MemorySegment condition(MemorySegment struct) {
        return struct.get(condition$LAYOUT, condition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPPavementSensorSurfaceCondition_t *condition
     * }
     */
    public static void condition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(condition$LAYOUT, condition$OFFSET, fieldValue);
    }

    private static final AddressLayout moistureDepth$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("moistureDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceIceOrWaterDepth_t *moistureDepth
     * }
     */
    public static final AddressLayout moistureDepth$layout() {
        return moistureDepth$LAYOUT;
    }

    private static final long moistureDepth$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceIceOrWaterDepth_t *moistureDepth
     * }
     */
    public static final long moistureDepth$offset() {
        return moistureDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceIceOrWaterDepth_t *moistureDepth
     * }
     */
    public static MemorySegment moistureDepth(MemorySegment struct) {
        return struct.get(moistureDepth$LAYOUT, moistureDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssSurfaceIceOrWaterDepth_t *moistureDepth
     * }
     */
    public static void moistureDepth(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(moistureDepth$LAYOUT, moistureDepth$OFFSET, fieldValue);
    }

    private static final AddressLayout roadRoughness$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("roadRoughness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct RoadRoughness *roadRoughness
     * }
     */
    public static final AddressLayout roadRoughness$layout() {
        return roadRoughness$LAYOUT;
    }

    private static final long roadRoughness$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct RoadRoughness *roadRoughness
     * }
     */
    public static final long roadRoughness$offset() {
        return roadRoughness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct RoadRoughness *roadRoughness
     * }
     */
    public static MemorySegment roadRoughness(MemorySegment struct) {
        return struct.get(roadRoughness$LAYOUT, roadRoughness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct RoadRoughness *roadRoughness
     * }
     */
    public static void roadRoughness(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(roadRoughness$LAYOUT, roadRoughness$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

