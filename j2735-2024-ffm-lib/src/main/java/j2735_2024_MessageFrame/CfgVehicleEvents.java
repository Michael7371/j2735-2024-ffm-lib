// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgVehicleEvents {
 *     BOOLEAN_t *headLights;
 *     BOOLEAN_t *fogLights;
 *     BOOLEAN_t *hazardLights;
 *     struct CfgKinematicEvents *kinematicEvents;
 *     BOOLEAN_t *wiperStatusChange;
 *     struct CfgLowSpeedCriteria *lowSpeed;
 *     long *resumedSpeed;
 *     BOOLEAN_t *vehEntrsExitsRegion;
 *     BOOLEAN_t *emerVehDetect;
 *     struct CfgEmerAndTransitInfo *emerAndTransInfo;
 *     struct CfgMsgRecepIndicators *v2xMsgRecption;
 *     BOOLEAN_t *driverAlertsAndWarnings;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgVehicleEvents {

    CfgVehicleEvents() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("headLights"),
        MessageFrame_h.C_POINTER.withName("fogLights"),
        MessageFrame_h.C_POINTER.withName("hazardLights"),
        MessageFrame_h.C_POINTER.withName("kinematicEvents"),
        MessageFrame_h.C_POINTER.withName("wiperStatusChange"),
        MessageFrame_h.C_POINTER.withName("lowSpeed"),
        MessageFrame_h.C_POINTER.withName("resumedSpeed"),
        MessageFrame_h.C_POINTER.withName("vehEntrsExitsRegion"),
        MessageFrame_h.C_POINTER.withName("emerVehDetect"),
        MessageFrame_h.C_POINTER.withName("emerAndTransInfo"),
        MessageFrame_h.C_POINTER.withName("v2xMsgRecption"),
        MessageFrame_h.C_POINTER.withName("driverAlertsAndWarnings"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgVehicleEvents");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout headLights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("headLights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *headLights
     * }
     */
    public static final AddressLayout headLights$layout() {
        return headLights$LAYOUT;
    }

    private static final long headLights$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *headLights
     * }
     */
    public static final long headLights$offset() {
        return headLights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *headLights
     * }
     */
    public static MemorySegment headLights(MemorySegment struct) {
        return struct.get(headLights$LAYOUT, headLights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *headLights
     * }
     */
    public static void headLights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(headLights$LAYOUT, headLights$OFFSET, fieldValue);
    }

    private static final AddressLayout fogLights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fogLights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fogLights
     * }
     */
    public static final AddressLayout fogLights$layout() {
        return fogLights$LAYOUT;
    }

    private static final long fogLights$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fogLights
     * }
     */
    public static final long fogLights$offset() {
        return fogLights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fogLights
     * }
     */
    public static MemorySegment fogLights(MemorySegment struct) {
        return struct.get(fogLights$LAYOUT, fogLights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fogLights
     * }
     */
    public static void fogLights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fogLights$LAYOUT, fogLights$OFFSET, fieldValue);
    }

    private static final AddressLayout hazardLights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hazardLights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hazardLights
     * }
     */
    public static final AddressLayout hazardLights$layout() {
        return hazardLights$LAYOUT;
    }

    private static final long hazardLights$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hazardLights
     * }
     */
    public static final long hazardLights$offset() {
        return hazardLights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hazardLights
     * }
     */
    public static MemorySegment hazardLights(MemorySegment struct) {
        return struct.get(hazardLights$LAYOUT, hazardLights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hazardLights
     * }
     */
    public static void hazardLights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hazardLights$LAYOUT, hazardLights$OFFSET, fieldValue);
    }

    private static final AddressLayout kinematicEvents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kinematicEvents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgKinematicEvents *kinematicEvents
     * }
     */
    public static final AddressLayout kinematicEvents$layout() {
        return kinematicEvents$LAYOUT;
    }

    private static final long kinematicEvents$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgKinematicEvents *kinematicEvents
     * }
     */
    public static final long kinematicEvents$offset() {
        return kinematicEvents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgKinematicEvents *kinematicEvents
     * }
     */
    public static MemorySegment kinematicEvents(MemorySegment struct) {
        return struct.get(kinematicEvents$LAYOUT, kinematicEvents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgKinematicEvents *kinematicEvents
     * }
     */
    public static void kinematicEvents(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kinematicEvents$LAYOUT, kinematicEvents$OFFSET, fieldValue);
    }

    private static final AddressLayout wiperStatusChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wiperStatusChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *wiperStatusChange
     * }
     */
    public static final AddressLayout wiperStatusChange$layout() {
        return wiperStatusChange$LAYOUT;
    }

    private static final long wiperStatusChange$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *wiperStatusChange
     * }
     */
    public static final long wiperStatusChange$offset() {
        return wiperStatusChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *wiperStatusChange
     * }
     */
    public static MemorySegment wiperStatusChange(MemorySegment struct) {
        return struct.get(wiperStatusChange$LAYOUT, wiperStatusChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *wiperStatusChange
     * }
     */
    public static void wiperStatusChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wiperStatusChange$LAYOUT, wiperStatusChange$OFFSET, fieldValue);
    }

    private static final AddressLayout lowSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lowSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *lowSpeed
     * }
     */
    public static final AddressLayout lowSpeed$layout() {
        return lowSpeed$LAYOUT;
    }

    private static final long lowSpeed$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *lowSpeed
     * }
     */
    public static final long lowSpeed$offset() {
        return lowSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *lowSpeed
     * }
     */
    public static MemorySegment lowSpeed(MemorySegment struct) {
        return struct.get(lowSpeed$LAYOUT, lowSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *lowSpeed
     * }
     */
    public static void lowSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lowSpeed$LAYOUT, lowSpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout resumedSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("resumedSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *resumedSpeed
     * }
     */
    public static final AddressLayout resumedSpeed$layout() {
        return resumedSpeed$LAYOUT;
    }

    private static final long resumedSpeed$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *resumedSpeed
     * }
     */
    public static final long resumedSpeed$offset() {
        return resumedSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *resumedSpeed
     * }
     */
    public static MemorySegment resumedSpeed(MemorySegment struct) {
        return struct.get(resumedSpeed$LAYOUT, resumedSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *resumedSpeed
     * }
     */
    public static void resumedSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(resumedSpeed$LAYOUT, resumedSpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout vehEntrsExitsRegion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehEntrsExitsRegion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *vehEntrsExitsRegion
     * }
     */
    public static final AddressLayout vehEntrsExitsRegion$layout() {
        return vehEntrsExitsRegion$LAYOUT;
    }

    private static final long vehEntrsExitsRegion$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *vehEntrsExitsRegion
     * }
     */
    public static final long vehEntrsExitsRegion$offset() {
        return vehEntrsExitsRegion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *vehEntrsExitsRegion
     * }
     */
    public static MemorySegment vehEntrsExitsRegion(MemorySegment struct) {
        return struct.get(vehEntrsExitsRegion$LAYOUT, vehEntrsExitsRegion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *vehEntrsExitsRegion
     * }
     */
    public static void vehEntrsExitsRegion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehEntrsExitsRegion$LAYOUT, vehEntrsExitsRegion$OFFSET, fieldValue);
    }

    private static final AddressLayout emerVehDetect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("emerVehDetect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *emerVehDetect
     * }
     */
    public static final AddressLayout emerVehDetect$layout() {
        return emerVehDetect$LAYOUT;
    }

    private static final long emerVehDetect$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *emerVehDetect
     * }
     */
    public static final long emerVehDetect$offset() {
        return emerVehDetect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *emerVehDetect
     * }
     */
    public static MemorySegment emerVehDetect(MemorySegment struct) {
        return struct.get(emerVehDetect$LAYOUT, emerVehDetect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *emerVehDetect
     * }
     */
    public static void emerVehDetect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(emerVehDetect$LAYOUT, emerVehDetect$OFFSET, fieldValue);
    }

    private static final AddressLayout emerAndTransInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("emerAndTransInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgEmerAndTransitInfo *emerAndTransInfo
     * }
     */
    public static final AddressLayout emerAndTransInfo$layout() {
        return emerAndTransInfo$LAYOUT;
    }

    private static final long emerAndTransInfo$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgEmerAndTransitInfo *emerAndTransInfo
     * }
     */
    public static final long emerAndTransInfo$offset() {
        return emerAndTransInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgEmerAndTransitInfo *emerAndTransInfo
     * }
     */
    public static MemorySegment emerAndTransInfo(MemorySegment struct) {
        return struct.get(emerAndTransInfo$LAYOUT, emerAndTransInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgEmerAndTransitInfo *emerAndTransInfo
     * }
     */
    public static void emerAndTransInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(emerAndTransInfo$LAYOUT, emerAndTransInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout v2xMsgRecption$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("v2xMsgRecption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *v2xMsgRecption
     * }
     */
    public static final AddressLayout v2xMsgRecption$layout() {
        return v2xMsgRecption$LAYOUT;
    }

    private static final long v2xMsgRecption$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *v2xMsgRecption
     * }
     */
    public static final long v2xMsgRecption$offset() {
        return v2xMsgRecption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *v2xMsgRecption
     * }
     */
    public static MemorySegment v2xMsgRecption(MemorySegment struct) {
        return struct.get(v2xMsgRecption$LAYOUT, v2xMsgRecption$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *v2xMsgRecption
     * }
     */
    public static void v2xMsgRecption(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(v2xMsgRecption$LAYOUT, v2xMsgRecption$OFFSET, fieldValue);
    }

    private static final AddressLayout driverAlertsAndWarnings$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driverAlertsAndWarnings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *driverAlertsAndWarnings
     * }
     */
    public static final AddressLayout driverAlertsAndWarnings$layout() {
        return driverAlertsAndWarnings$LAYOUT;
    }

    private static final long driverAlertsAndWarnings$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *driverAlertsAndWarnings
     * }
     */
    public static final long driverAlertsAndWarnings$offset() {
        return driverAlertsAndWarnings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *driverAlertsAndWarnings
     * }
     */
    public static MemorySegment driverAlertsAndWarnings(MemorySegment struct) {
        return struct.get(driverAlertsAndWarnings$LAYOUT, driverAlertsAndWarnings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *driverAlertsAndWarnings
     * }
     */
    public static void driverAlertsAndWarnings(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driverAlertsAndWarnings$LAYOUT, driverAlertsAndWarnings$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

