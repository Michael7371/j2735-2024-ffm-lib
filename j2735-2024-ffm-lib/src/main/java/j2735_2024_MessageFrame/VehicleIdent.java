// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VehicleIdent {
 *     DescriptiveName_t *name;
 *     VINstring_t *vin;
 *     IA5String_t *ownerCode;
 *     struct VehicleID *id;
 *     VehicleType_t *vehicleType;
 *     struct VehicleIdent__vehicleClass {
 *         VehicleIdent__vehicleClass_PR present;
 *         union VehicleIdent__vehicleClass_u {
 *             ITIS_VehicleGroupAffected_t vGroup;
 *             ITIS_ResponderGroupAffected_t rGroup;
 *             ITIS_IncidentResponseEquipment_t rEquip;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *vehicleClass;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class VehicleIdent {

    VehicleIdent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("name"),
        MessageFrame_h.C_POINTER.withName("vin"),
        MessageFrame_h.C_POINTER.withName("ownerCode"),
        MessageFrame_h.C_POINTER.withName("id"),
        MessageFrame_h.C_POINTER.withName("vehicleType"),
        MessageFrame_h.C_POINTER.withName("vehicleClass"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("VehicleIdent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout vin$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VINstring_t *vin
     * }
     */
    public static final AddressLayout vin$layout() {
        return vin$LAYOUT;
    }

    private static final long vin$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VINstring_t *vin
     * }
     */
    public static final long vin$offset() {
        return vin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VINstring_t *vin
     * }
     */
    public static MemorySegment vin(MemorySegment struct) {
        return struct.get(vin$LAYOUT, vin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VINstring_t *vin
     * }
     */
    public static void vin(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vin$LAYOUT, vin$OFFSET, fieldValue);
    }

    private static final AddressLayout ownerCode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ownerCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *ownerCode
     * }
     */
    public static final AddressLayout ownerCode$layout() {
        return ownerCode$LAYOUT;
    }

    private static final long ownerCode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *ownerCode
     * }
     */
    public static final long ownerCode$offset() {
        return ownerCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *ownerCode
     * }
     */
    public static MemorySegment ownerCode(MemorySegment struct) {
        return struct.get(ownerCode$LAYOUT, ownerCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *ownerCode
     * }
     */
    public static void ownerCode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ownerCode$LAYOUT, ownerCode$OFFSET, fieldValue);
    }

    private static final AddressLayout id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleID *id
     * }
     */
    public static final AddressLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleID *id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleID *id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleID *id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleType_t *vehicleType
     * }
     */
    public static final AddressLayout vehicleType$layout() {
        return vehicleType$LAYOUT;
    }

    private static final long vehicleType$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleType_t *vehicleType
     * }
     */
    public static final long vehicleType$offset() {
        return vehicleType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleType_t *vehicleType
     * }
     */
    public static MemorySegment vehicleType(MemorySegment struct) {
        return struct.get(vehicleType$LAYOUT, vehicleType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleType_t *vehicleType
     * }
     */
    public static void vehicleType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleType$LAYOUT, vehicleType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleIdent__vehicleClass {
     *     VehicleIdent__vehicleClass_PR present;
     *     union VehicleIdent__vehicleClass_u {
     *         ITIS_VehicleGroupAffected_t vGroup;
     *         ITIS_ResponderGroupAffected_t rGroup;
     *         ITIS_IncidentResponseEquipment_t rEquip;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleIdent__vehicleClass {

        VehicleIdent__vehicleClass() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            VehicleIdent__vehicleClass_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleIdent__vehicleClass");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * VehicleIdent__vehicleClass_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * VehicleIdent__vehicleClass_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * VehicleIdent__vehicleClass_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * VehicleIdent__vehicleClass_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union VehicleIdent__vehicleClass_u {
         *     ITIS_VehicleGroupAffected_t vGroup;
         *     ITIS_ResponderGroupAffected_t rGroup;
         *     ITIS_IncidentResponseEquipment_t rEquip;
         * }
         * }
         */
        public static class VehicleIdent__vehicleClass_u {

            VehicleIdent__vehicleClass_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                MessageFrame_h.C_LONG.withName("vGroup"),
                MessageFrame_h.C_LONG.withName("rGroup"),
                MessageFrame_h.C_LONG.withName("rEquip")
            ).withName("VehicleIdent__vehicleClass_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfLong vGroup$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vGroup"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ITIS_VehicleGroupAffected_t vGroup
             * }
             */
            public static final OfLong vGroup$layout() {
                return vGroup$LAYOUT;
            }

            private static final long vGroup$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ITIS_VehicleGroupAffected_t vGroup
             * }
             */
            public static final long vGroup$offset() {
                return vGroup$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ITIS_VehicleGroupAffected_t vGroup
             * }
             */
            public static long vGroup(MemorySegment union) {
                return union.get(vGroup$LAYOUT, vGroup$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ITIS_VehicleGroupAffected_t vGroup
             * }
             */
            public static void vGroup(MemorySegment union, long fieldValue) {
                union.set(vGroup$LAYOUT, vGroup$OFFSET, fieldValue);
            }

            private static final OfLong rGroup$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rGroup"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ITIS_ResponderGroupAffected_t rGroup
             * }
             */
            public static final OfLong rGroup$layout() {
                return rGroup$LAYOUT;
            }

            private static final long rGroup$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ITIS_ResponderGroupAffected_t rGroup
             * }
             */
            public static final long rGroup$offset() {
                return rGroup$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ITIS_ResponderGroupAffected_t rGroup
             * }
             */
            public static long rGroup(MemorySegment union) {
                return union.get(rGroup$LAYOUT, rGroup$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ITIS_ResponderGroupAffected_t rGroup
             * }
             */
            public static void rGroup(MemorySegment union, long fieldValue) {
                union.set(rGroup$LAYOUT, rGroup$OFFSET, fieldValue);
            }

            private static final OfLong rEquip$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rEquip"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ITIS_IncidentResponseEquipment_t rEquip
             * }
             */
            public static final OfLong rEquip$layout() {
                return rEquip$LAYOUT;
            }

            private static final long rEquip$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ITIS_IncidentResponseEquipment_t rEquip
             * }
             */
            public static final long rEquip$offset() {
                return rEquip$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ITIS_IncidentResponseEquipment_t rEquip
             * }
             */
            public static long rEquip(MemorySegment union) {
                return union.get(rEquip$LAYOUT, rEquip$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ITIS_IncidentResponseEquipment_t rEquip
             * }
             */
            public static void rEquip(MemorySegment union, long fieldValue) {
                union.set(rEquip$LAYOUT, rEquip$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union VehicleIdent__vehicleClass_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union VehicleIdent__vehicleClass_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union VehicleIdent__vehicleClass_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union VehicleIdent__vehicleClass_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout vehicleClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleIdent__vehicleClass *vehicleClass
     * }
     */
    public static final AddressLayout vehicleClass$layout() {
        return vehicleClass$LAYOUT;
    }

    private static final long vehicleClass$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleIdent__vehicleClass *vehicleClass
     * }
     */
    public static final long vehicleClass$offset() {
        return vehicleClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleIdent__vehicleClass *vehicleClass
     * }
     */
    public static MemorySegment vehicleClass(MemorySegment struct) {
        return struct.get(vehicleClass$LAYOUT, vehicleClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleIdent__vehicleClass *vehicleClass
     * }
     */
    public static void vehicleClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleClass$LAYOUT, vehicleClass$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

