// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct GenericLane {
 *     LaneID_t laneID;
 *     DescriptiveName_t *name;
 *     ApproachID_t *ingressApproach;
 *     ApproachID_t *egressApproach;
 *     LaneAttributes_t laneAttributes;
 *     AllowedManeuvers_t *maneuvers;
 *     NodeListXY_t nodeList;
 *     struct ConnectsToList *connectsTo;
 *     struct OverlayLaneList *overlays;
 *     struct GenericLane__regional {
 *         struct {
 *             struct Reg_GenericLane **array;
 *             int count;
 *             int size;
 *             void (*free)(struct Reg_GenericLane *);
 *         } list;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *regional;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class GenericLane {

    GenericLane() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("laneID"),
        MessageFrame_h.C_POINTER.withName("name"),
        MessageFrame_h.C_POINTER.withName("ingressApproach"),
        MessageFrame_h.C_POINTER.withName("egressApproach"),
        LaneAttributes.layout().withName("laneAttributes"),
        MessageFrame_h.C_POINTER.withName("maneuvers"),
        NodeListXY.layout().withName("nodeList"),
        MessageFrame_h.C_POINTER.withName("connectsTo"),
        MessageFrame_h.C_POINTER.withName("overlays"),
        MessageFrame_h.C_POINTER.withName("regional"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("GenericLane");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong laneID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("laneID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneID_t laneID
     * }
     */
    public static final OfLong laneID$layout() {
        return laneID$LAYOUT;
    }

    private static final long laneID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneID_t laneID
     * }
     */
    public static final long laneID$offset() {
        return laneID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneID_t laneID
     * }
     */
    public static long laneID(MemorySegment struct) {
        return struct.get(laneID$LAYOUT, laneID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneID_t laneID
     * }
     */
    public static void laneID(MemorySegment struct, long fieldValue) {
        struct.set(laneID$LAYOUT, laneID$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout ingressApproach$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ingressApproach"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ApproachID_t *ingressApproach
     * }
     */
    public static final AddressLayout ingressApproach$layout() {
        return ingressApproach$LAYOUT;
    }

    private static final long ingressApproach$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ApproachID_t *ingressApproach
     * }
     */
    public static final long ingressApproach$offset() {
        return ingressApproach$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ApproachID_t *ingressApproach
     * }
     */
    public static MemorySegment ingressApproach(MemorySegment struct) {
        return struct.get(ingressApproach$LAYOUT, ingressApproach$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ApproachID_t *ingressApproach
     * }
     */
    public static void ingressApproach(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ingressApproach$LAYOUT, ingressApproach$OFFSET, fieldValue);
    }

    private static final AddressLayout egressApproach$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("egressApproach"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ApproachID_t *egressApproach
     * }
     */
    public static final AddressLayout egressApproach$layout() {
        return egressApproach$LAYOUT;
    }

    private static final long egressApproach$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ApproachID_t *egressApproach
     * }
     */
    public static final long egressApproach$offset() {
        return egressApproach$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ApproachID_t *egressApproach
     * }
     */
    public static MemorySegment egressApproach(MemorySegment struct) {
        return struct.get(egressApproach$LAYOUT, egressApproach$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ApproachID_t *egressApproach
     * }
     */
    public static void egressApproach(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(egressApproach$LAYOUT, egressApproach$OFFSET, fieldValue);
    }

    private static final GroupLayout laneAttributes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("laneAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneAttributes_t laneAttributes
     * }
     */
    public static final GroupLayout laneAttributes$layout() {
        return laneAttributes$LAYOUT;
    }

    private static final long laneAttributes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneAttributes_t laneAttributes
     * }
     */
    public static final long laneAttributes$offset() {
        return laneAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneAttributes_t laneAttributes
     * }
     */
    public static MemorySegment laneAttributes(MemorySegment struct) {
        return struct.asSlice(laneAttributes$OFFSET, laneAttributes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneAttributes_t laneAttributes
     * }
     */
    public static void laneAttributes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, laneAttributes$OFFSET, laneAttributes$LAYOUT.byteSize());
    }

    private static final AddressLayout maneuvers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maneuvers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AllowedManeuvers_t *maneuvers
     * }
     */
    public static final AddressLayout maneuvers$layout() {
        return maneuvers$LAYOUT;
    }

    private static final long maneuvers$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AllowedManeuvers_t *maneuvers
     * }
     */
    public static final long maneuvers$offset() {
        return maneuvers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AllowedManeuvers_t *maneuvers
     * }
     */
    public static MemorySegment maneuvers(MemorySegment struct) {
        return struct.get(maneuvers$LAYOUT, maneuvers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AllowedManeuvers_t *maneuvers
     * }
     */
    public static void maneuvers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maneuvers$LAYOUT, maneuvers$OFFSET, fieldValue);
    }

    private static final GroupLayout nodeList$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("nodeList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NodeListXY_t nodeList
     * }
     */
    public static final GroupLayout nodeList$layout() {
        return nodeList$LAYOUT;
    }

    private static final long nodeList$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NodeListXY_t nodeList
     * }
     */
    public static final long nodeList$offset() {
        return nodeList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NodeListXY_t nodeList
     * }
     */
    public static MemorySegment nodeList(MemorySegment struct) {
        return struct.asSlice(nodeList$OFFSET, nodeList$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NodeListXY_t nodeList
     * }
     */
    public static void nodeList(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, nodeList$OFFSET, nodeList$LAYOUT.byteSize());
    }

    private static final AddressLayout connectsTo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connectsTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ConnectsToList *connectsTo
     * }
     */
    public static final AddressLayout connectsTo$layout() {
        return connectsTo$LAYOUT;
    }

    private static final long connectsTo$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ConnectsToList *connectsTo
     * }
     */
    public static final long connectsTo$offset() {
        return connectsTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ConnectsToList *connectsTo
     * }
     */
    public static MemorySegment connectsTo(MemorySegment struct) {
        return struct.get(connectsTo$LAYOUT, connectsTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ConnectsToList *connectsTo
     * }
     */
    public static void connectsTo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connectsTo$LAYOUT, connectsTo$OFFSET, fieldValue);
    }

    private static final AddressLayout overlays$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("overlays"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct OverlayLaneList *overlays
     * }
     */
    public static final AddressLayout overlays$layout() {
        return overlays$LAYOUT;
    }

    private static final long overlays$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct OverlayLaneList *overlays
     * }
     */
    public static final long overlays$offset() {
        return overlays$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct OverlayLaneList *overlays
     * }
     */
    public static MemorySegment overlays(MemorySegment struct) {
        return struct.get(overlays$LAYOUT, overlays$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct OverlayLaneList *overlays
     * }
     */
    public static void overlays(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(overlays$LAYOUT, overlays$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct GenericLane__regional {
     *     struct {
     *         struct Reg_GenericLane **array;
     *         int count;
     *         int size;
     *         void (*free)(struct Reg_GenericLane *);
     *     } list;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class GenericLane__regional {

        GenericLane__regional() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            list.layout().withName("list"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("GenericLane__regional");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     struct Reg_GenericLane **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_GenericLane *);
         * }
         * }
         */
        public static class list {

            list() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                MessageFrame_h.C_POINTER.withName("array"),
                MessageFrame_h.C_INT.withName("count"),
                MessageFrame_h.C_INT.withName("size"),
                MessageFrame_h.C_POINTER.withName("free")
            ).withName("$anon$46:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct Reg_GenericLane **array
             * }
             */
            public static final AddressLayout array$layout() {
                return array$LAYOUT;
            }

            private static final long array$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct Reg_GenericLane **array
             * }
             */
            public static final long array$offset() {
                return array$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct Reg_GenericLane **array
             * }
             */
            public static MemorySegment array(MemorySegment struct) {
                return struct.get(array$LAYOUT, array$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct Reg_GenericLane **array
             * }
             */
            public static void array(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(array$LAYOUT, array$OFFSET, fieldValue);
            }

            private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final OfInt count$layout() {
                return count$LAYOUT;
            }

            private static final long count$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final long count$offset() {
                return count$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static int count(MemorySegment struct) {
                return struct.get(count$LAYOUT, count$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static void count(MemorySegment struct, int fieldValue) {
                struct.set(count$LAYOUT, count$OFFSET, fieldValue);
            }

            private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final OfInt size$layout() {
                return size$LAYOUT;
            }

            private static final long size$OFFSET = 12;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final long size$offset() {
                return size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static int size(MemorySegment struct) {
                return struct.get(size$LAYOUT, size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static void size(MemorySegment struct, int fieldValue) {
                struct.set(size$LAYOUT, size$OFFSET, fieldValue);
            }

            /**
             * {@snippet lang=c :
             * void (*free)(struct Reg_GenericLane *)
             * }
             */
            public static class free {

                free() {
                    // Should not be called directly
                }

                /**
                 * The function pointer signature, expressed as a functional interface
                 */
                public interface Function {
                    void apply(MemorySegment _x0);
                }

                private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                    MessageFrame_h.C_POINTER
                );

                /**
                 * The descriptor of this function pointer
                 */
                public static FunctionDescriptor descriptor() {
                    return $DESC;
                }

                private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

                /**
                 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
                 * The lifetime of the returned segment is managed by {@code arena}
                 */
                public static MemorySegment allocate(Function fi, Arena arena) {
                    return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
                }

                private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

                /**
                 * Invoke the upcall stub {@code funcPtr}, with given parameters
                 */
                public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                    try {
                         DOWN$MH.invokeExact(funcPtr, _x0);
                    } catch (Throwable ex$) {
                        throw new AssertionError("should not reach here", ex$);
                    }
                }
            }

            private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_GenericLane *)
             * }
             */
            public static final AddressLayout free$layout() {
                return free$LAYOUT;
            }

            private static final long free$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_GenericLane *)
             * }
             */
            public static final long free$offset() {
                return free$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_GenericLane *)
             * }
             */
            public static MemorySegment free(MemorySegment struct) {
                return struct.get(free$LAYOUT, free$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void (*free)(struct Reg_GenericLane *)
             * }
             */
            public static void free(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(free$LAYOUT, free$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_GenericLane **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_GenericLane *);
         * } list
         * }
         */
        public static final GroupLayout list$layout() {
            return list$LAYOUT;
        }

        private static final long list$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_GenericLane **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_GenericLane *);
         * } list
         * }
         */
        public static final long list$offset() {
            return list$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_GenericLane **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_GenericLane *);
         * } list
         * }
         */
        public static MemorySegment list(MemorySegment struct) {
            return struct.asSlice(list$OFFSET, list$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     struct Reg_GenericLane **array;
         *     int count;
         *     int size;
         *     void (*free)(struct Reg_GenericLane *);
         * } list
         * }
         */
        public static void list(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, list$OFFSET, list$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout regional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct GenericLane__regional *regional
     * }
     */
    public static final AddressLayout regional$layout() {
        return regional$LAYOUT;
    }

    private static final long regional$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct GenericLane__regional *regional
     * }
     */
    public static final long regional$offset() {
        return regional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct GenericLane__regional *regional
     * }
     */
    public static MemorySegment regional(MemorySegment struct) {
        return struct.get(regional$LAYOUT, regional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct GenericLane__regional *regional
     * }
     */
    public static void regional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regional$LAYOUT, regional$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

