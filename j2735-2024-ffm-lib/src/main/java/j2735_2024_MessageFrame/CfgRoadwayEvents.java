// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgRoadwayEvents {
 *     BOOLEAN_t obstacleDetected;
 *     BOOLEAN_t adverseRoadSurface;
 *     struct CfgTrafficSigEncounters *trafficSigEncounters;
 *     BOOLEAN_t trfsigLightOut;
 *     BOOLEAN_t trfsigRoadGeoMismatch;
 *     struct CfgRoadSignInfo *roadSignInfo;
 *     long *lowLaneMarkReflect;
 *     BOOLEAN_t roadsignIncnstncy;
 *     BOOLEAN_t laneGeoIncnstncy;
 *     BOOLEAN_t incidentDetect;
 *     BOOLEAN_t workZoneCharDetect;
 *     BOOLEAN_t inclWeatherDetect;
 *     BOOLEAN_t railrdCrossActivated;
 *     BOOLEAN_t drawBridgeActivated;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgRoadwayEvents {

    CfgRoadwayEvents() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("obstacleDetected"),
        MessageFrame_h.C_INT.withName("adverseRoadSurface"),
        MessageFrame_h.C_POINTER.withName("trafficSigEncounters"),
        MessageFrame_h.C_INT.withName("trfsigLightOut"),
        MessageFrame_h.C_INT.withName("trfsigRoadGeoMismatch"),
        MessageFrame_h.C_POINTER.withName("roadSignInfo"),
        MessageFrame_h.C_POINTER.withName("lowLaneMarkReflect"),
        MessageFrame_h.C_INT.withName("roadsignIncnstncy"),
        MessageFrame_h.C_INT.withName("laneGeoIncnstncy"),
        MessageFrame_h.C_INT.withName("incidentDetect"),
        MessageFrame_h.C_INT.withName("workZoneCharDetect"),
        MessageFrame_h.C_INT.withName("inclWeatherDetect"),
        MessageFrame_h.C_INT.withName("railrdCrossActivated"),
        MessageFrame_h.C_INT.withName("drawBridgeActivated"),
        MemoryLayout.paddingLayout(4),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgRoadwayEvents");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt obstacleDetected$LAYOUT = (OfInt)$LAYOUT.select(groupElement("obstacleDetected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t obstacleDetected
     * }
     */
    public static final OfInt obstacleDetected$layout() {
        return obstacleDetected$LAYOUT;
    }

    private static final long obstacleDetected$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t obstacleDetected
     * }
     */
    public static final long obstacleDetected$offset() {
        return obstacleDetected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t obstacleDetected
     * }
     */
    public static int obstacleDetected(MemorySegment struct) {
        return struct.get(obstacleDetected$LAYOUT, obstacleDetected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t obstacleDetected
     * }
     */
    public static void obstacleDetected(MemorySegment struct, int fieldValue) {
        struct.set(obstacleDetected$LAYOUT, obstacleDetected$OFFSET, fieldValue);
    }

    private static final OfInt adverseRoadSurface$LAYOUT = (OfInt)$LAYOUT.select(groupElement("adverseRoadSurface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t adverseRoadSurface
     * }
     */
    public static final OfInt adverseRoadSurface$layout() {
        return adverseRoadSurface$LAYOUT;
    }

    private static final long adverseRoadSurface$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t adverseRoadSurface
     * }
     */
    public static final long adverseRoadSurface$offset() {
        return adverseRoadSurface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t adverseRoadSurface
     * }
     */
    public static int adverseRoadSurface(MemorySegment struct) {
        return struct.get(adverseRoadSurface$LAYOUT, adverseRoadSurface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t adverseRoadSurface
     * }
     */
    public static void adverseRoadSurface(MemorySegment struct, int fieldValue) {
        struct.set(adverseRoadSurface$LAYOUT, adverseRoadSurface$OFFSET, fieldValue);
    }

    private static final AddressLayout trafficSigEncounters$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trafficSigEncounters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgTrafficSigEncounters *trafficSigEncounters
     * }
     */
    public static final AddressLayout trafficSigEncounters$layout() {
        return trafficSigEncounters$LAYOUT;
    }

    private static final long trafficSigEncounters$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgTrafficSigEncounters *trafficSigEncounters
     * }
     */
    public static final long trafficSigEncounters$offset() {
        return trafficSigEncounters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgTrafficSigEncounters *trafficSigEncounters
     * }
     */
    public static MemorySegment trafficSigEncounters(MemorySegment struct) {
        return struct.get(trafficSigEncounters$LAYOUT, trafficSigEncounters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgTrafficSigEncounters *trafficSigEncounters
     * }
     */
    public static void trafficSigEncounters(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trafficSigEncounters$LAYOUT, trafficSigEncounters$OFFSET, fieldValue);
    }

    private static final OfInt trfsigLightOut$LAYOUT = (OfInt)$LAYOUT.select(groupElement("trfsigLightOut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigLightOut
     * }
     */
    public static final OfInt trfsigLightOut$layout() {
        return trfsigLightOut$LAYOUT;
    }

    private static final long trfsigLightOut$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigLightOut
     * }
     */
    public static final long trfsigLightOut$offset() {
        return trfsigLightOut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigLightOut
     * }
     */
    public static int trfsigLightOut(MemorySegment struct) {
        return struct.get(trfsigLightOut$LAYOUT, trfsigLightOut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigLightOut
     * }
     */
    public static void trfsigLightOut(MemorySegment struct, int fieldValue) {
        struct.set(trfsigLightOut$LAYOUT, trfsigLightOut$OFFSET, fieldValue);
    }

    private static final OfInt trfsigRoadGeoMismatch$LAYOUT = (OfInt)$LAYOUT.select(groupElement("trfsigRoadGeoMismatch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigRoadGeoMismatch
     * }
     */
    public static final OfInt trfsigRoadGeoMismatch$layout() {
        return trfsigRoadGeoMismatch$LAYOUT;
    }

    private static final long trfsigRoadGeoMismatch$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigRoadGeoMismatch
     * }
     */
    public static final long trfsigRoadGeoMismatch$offset() {
        return trfsigRoadGeoMismatch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigRoadGeoMismatch
     * }
     */
    public static int trfsigRoadGeoMismatch(MemorySegment struct) {
        return struct.get(trfsigRoadGeoMismatch$LAYOUT, trfsigRoadGeoMismatch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t trfsigRoadGeoMismatch
     * }
     */
    public static void trfsigRoadGeoMismatch(MemorySegment struct, int fieldValue) {
        struct.set(trfsigRoadGeoMismatch$LAYOUT, trfsigRoadGeoMismatch$OFFSET, fieldValue);
    }

    private static final AddressLayout roadSignInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("roadSignInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgRoadSignInfo *roadSignInfo
     * }
     */
    public static final AddressLayout roadSignInfo$layout() {
        return roadSignInfo$LAYOUT;
    }

    private static final long roadSignInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgRoadSignInfo *roadSignInfo
     * }
     */
    public static final long roadSignInfo$offset() {
        return roadSignInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgRoadSignInfo *roadSignInfo
     * }
     */
    public static MemorySegment roadSignInfo(MemorySegment struct) {
        return struct.get(roadSignInfo$LAYOUT, roadSignInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgRoadSignInfo *roadSignInfo
     * }
     */
    public static void roadSignInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(roadSignInfo$LAYOUT, roadSignInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout lowLaneMarkReflect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lowLaneMarkReflect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *lowLaneMarkReflect
     * }
     */
    public static final AddressLayout lowLaneMarkReflect$layout() {
        return lowLaneMarkReflect$LAYOUT;
    }

    private static final long lowLaneMarkReflect$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *lowLaneMarkReflect
     * }
     */
    public static final long lowLaneMarkReflect$offset() {
        return lowLaneMarkReflect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *lowLaneMarkReflect
     * }
     */
    public static MemorySegment lowLaneMarkReflect(MemorySegment struct) {
        return struct.get(lowLaneMarkReflect$LAYOUT, lowLaneMarkReflect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *lowLaneMarkReflect
     * }
     */
    public static void lowLaneMarkReflect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lowLaneMarkReflect$LAYOUT, lowLaneMarkReflect$OFFSET, fieldValue);
    }

    private static final OfInt roadsignIncnstncy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("roadsignIncnstncy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t roadsignIncnstncy
     * }
     */
    public static final OfInt roadsignIncnstncy$layout() {
        return roadsignIncnstncy$LAYOUT;
    }

    private static final long roadsignIncnstncy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t roadsignIncnstncy
     * }
     */
    public static final long roadsignIncnstncy$offset() {
        return roadsignIncnstncy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t roadsignIncnstncy
     * }
     */
    public static int roadsignIncnstncy(MemorySegment struct) {
        return struct.get(roadsignIncnstncy$LAYOUT, roadsignIncnstncy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t roadsignIncnstncy
     * }
     */
    public static void roadsignIncnstncy(MemorySegment struct, int fieldValue) {
        struct.set(roadsignIncnstncy$LAYOUT, roadsignIncnstncy$OFFSET, fieldValue);
    }

    private static final OfInt laneGeoIncnstncy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("laneGeoIncnstncy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t laneGeoIncnstncy
     * }
     */
    public static final OfInt laneGeoIncnstncy$layout() {
        return laneGeoIncnstncy$LAYOUT;
    }

    private static final long laneGeoIncnstncy$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t laneGeoIncnstncy
     * }
     */
    public static final long laneGeoIncnstncy$offset() {
        return laneGeoIncnstncy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t laneGeoIncnstncy
     * }
     */
    public static int laneGeoIncnstncy(MemorySegment struct) {
        return struct.get(laneGeoIncnstncy$LAYOUT, laneGeoIncnstncy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t laneGeoIncnstncy
     * }
     */
    public static void laneGeoIncnstncy(MemorySegment struct, int fieldValue) {
        struct.set(laneGeoIncnstncy$LAYOUT, laneGeoIncnstncy$OFFSET, fieldValue);
    }

    private static final OfInt incidentDetect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("incidentDetect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t incidentDetect
     * }
     */
    public static final OfInt incidentDetect$layout() {
        return incidentDetect$LAYOUT;
    }

    private static final long incidentDetect$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t incidentDetect
     * }
     */
    public static final long incidentDetect$offset() {
        return incidentDetect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t incidentDetect
     * }
     */
    public static int incidentDetect(MemorySegment struct) {
        return struct.get(incidentDetect$LAYOUT, incidentDetect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t incidentDetect
     * }
     */
    public static void incidentDetect(MemorySegment struct, int fieldValue) {
        struct.set(incidentDetect$LAYOUT, incidentDetect$OFFSET, fieldValue);
    }

    private static final OfInt workZoneCharDetect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("workZoneCharDetect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t workZoneCharDetect
     * }
     */
    public static final OfInt workZoneCharDetect$layout() {
        return workZoneCharDetect$LAYOUT;
    }

    private static final long workZoneCharDetect$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t workZoneCharDetect
     * }
     */
    public static final long workZoneCharDetect$offset() {
        return workZoneCharDetect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t workZoneCharDetect
     * }
     */
    public static int workZoneCharDetect(MemorySegment struct) {
        return struct.get(workZoneCharDetect$LAYOUT, workZoneCharDetect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t workZoneCharDetect
     * }
     */
    public static void workZoneCharDetect(MemorySegment struct, int fieldValue) {
        struct.set(workZoneCharDetect$LAYOUT, workZoneCharDetect$OFFSET, fieldValue);
    }

    private static final OfInt inclWeatherDetect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inclWeatherDetect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t inclWeatherDetect
     * }
     */
    public static final OfInt inclWeatherDetect$layout() {
        return inclWeatherDetect$LAYOUT;
    }

    private static final long inclWeatherDetect$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t inclWeatherDetect
     * }
     */
    public static final long inclWeatherDetect$offset() {
        return inclWeatherDetect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t inclWeatherDetect
     * }
     */
    public static int inclWeatherDetect(MemorySegment struct) {
        return struct.get(inclWeatherDetect$LAYOUT, inclWeatherDetect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t inclWeatherDetect
     * }
     */
    public static void inclWeatherDetect(MemorySegment struct, int fieldValue) {
        struct.set(inclWeatherDetect$LAYOUT, inclWeatherDetect$OFFSET, fieldValue);
    }

    private static final OfInt railrdCrossActivated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("railrdCrossActivated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t railrdCrossActivated
     * }
     */
    public static final OfInt railrdCrossActivated$layout() {
        return railrdCrossActivated$LAYOUT;
    }

    private static final long railrdCrossActivated$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t railrdCrossActivated
     * }
     */
    public static final long railrdCrossActivated$offset() {
        return railrdCrossActivated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t railrdCrossActivated
     * }
     */
    public static int railrdCrossActivated(MemorySegment struct) {
        return struct.get(railrdCrossActivated$LAYOUT, railrdCrossActivated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t railrdCrossActivated
     * }
     */
    public static void railrdCrossActivated(MemorySegment struct, int fieldValue) {
        struct.set(railrdCrossActivated$LAYOUT, railrdCrossActivated$OFFSET, fieldValue);
    }

    private static final OfInt drawBridgeActivated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("drawBridgeActivated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t drawBridgeActivated
     * }
     */
    public static final OfInt drawBridgeActivated$layout() {
        return drawBridgeActivated$LAYOUT;
    }

    private static final long drawBridgeActivated$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t drawBridgeActivated
     * }
     */
    public static final long drawBridgeActivated$offset() {
        return drawBridgeActivated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t drawBridgeActivated
     * }
     */
    public static int drawBridgeActivated(MemorySegment struct) {
        return struct.get(drawBridgeActivated$LAYOUT, drawBridgeActivated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t drawBridgeActivated
     * }
     */
    public static void drawBridgeActivated(MemorySegment struct, int fieldValue) {
        struct.set(drawBridgeActivated$LAYOUT, drawBridgeActivated$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

