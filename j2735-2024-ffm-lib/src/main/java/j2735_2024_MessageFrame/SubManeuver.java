// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SubManeuver {
 *     TemporaryID_t executantVehID;
 *     TemporaryIDPointer_t affectedVehIDs;
 *     CurrentStateData_t currentStateData;
 *     struct TargetRoadResource *targetRoadResource;
 *     DDateTime_t startTime;
 *     DDateTime_t endTime;
 *     Speed_t *minSpeed;
 *     Speed_t *maxSpeed;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SubManeuver {

    SubManeuver() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        OCTET_STRING.layout().withName("executantVehID"),
        BIT_STRING_s.layout().withName("affectedVehIDs"),
        CurrentStateData.layout().withName("currentStateData"),
        MessageFrame_h.C_POINTER.withName("targetRoadResource"),
        DDateTime.layout().withName("startTime"),
        DDateTime.layout().withName("endTime"),
        MessageFrame_h.C_POINTER.withName("minSpeed"),
        MessageFrame_h.C_POINTER.withName("maxSpeed"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SubManeuver");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout executantVehID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("executantVehID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t executantVehID
     * }
     */
    public static final GroupLayout executantVehID$layout() {
        return executantVehID$LAYOUT;
    }

    private static final long executantVehID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t executantVehID
     * }
     */
    public static final long executantVehID$offset() {
        return executantVehID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t executantVehID
     * }
     */
    public static MemorySegment executantVehID(MemorySegment struct) {
        return struct.asSlice(executantVehID$OFFSET, executantVehID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t executantVehID
     * }
     */
    public static void executantVehID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, executantVehID$OFFSET, executantVehID$LAYOUT.byteSize());
    }

    private static final GroupLayout affectedVehIDs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("affectedVehIDs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryIDPointer_t affectedVehIDs
     * }
     */
    public static final GroupLayout affectedVehIDs$layout() {
        return affectedVehIDs$LAYOUT;
    }

    private static final long affectedVehIDs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryIDPointer_t affectedVehIDs
     * }
     */
    public static final long affectedVehIDs$offset() {
        return affectedVehIDs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryIDPointer_t affectedVehIDs
     * }
     */
    public static MemorySegment affectedVehIDs(MemorySegment struct) {
        return struct.asSlice(affectedVehIDs$OFFSET, affectedVehIDs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryIDPointer_t affectedVehIDs
     * }
     */
    public static void affectedVehIDs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, affectedVehIDs$OFFSET, affectedVehIDs$LAYOUT.byteSize());
    }

    private static final GroupLayout currentStateData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("currentStateData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CurrentStateData_t currentStateData
     * }
     */
    public static final GroupLayout currentStateData$layout() {
        return currentStateData$LAYOUT;
    }

    private static final long currentStateData$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CurrentStateData_t currentStateData
     * }
     */
    public static final long currentStateData$offset() {
        return currentStateData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CurrentStateData_t currentStateData
     * }
     */
    public static MemorySegment currentStateData(MemorySegment struct) {
        return struct.asSlice(currentStateData$OFFSET, currentStateData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CurrentStateData_t currentStateData
     * }
     */
    public static void currentStateData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, currentStateData$OFFSET, currentStateData$LAYOUT.byteSize());
    }

    private static final AddressLayout targetRoadResource$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("targetRoadResource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TargetRoadResource *targetRoadResource
     * }
     */
    public static final AddressLayout targetRoadResource$layout() {
        return targetRoadResource$LAYOUT;
    }

    private static final long targetRoadResource$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TargetRoadResource *targetRoadResource
     * }
     */
    public static final long targetRoadResource$offset() {
        return targetRoadResource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TargetRoadResource *targetRoadResource
     * }
     */
    public static MemorySegment targetRoadResource(MemorySegment struct) {
        return struct.get(targetRoadResource$LAYOUT, targetRoadResource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TargetRoadResource *targetRoadResource
     * }
     */
    public static void targetRoadResource(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(targetRoadResource$LAYOUT, targetRoadResource$OFFSET, fieldValue);
    }

    private static final GroupLayout startTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("startTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static final GroupLayout startTime$layout() {
        return startTime$LAYOUT;
    }

    private static final long startTime$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static final long startTime$offset() {
        return startTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static MemorySegment startTime(MemorySegment struct) {
        return struct.asSlice(startTime$OFFSET, startTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static void startTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, startTime$OFFSET, startTime$LAYOUT.byteSize());
    }

    private static final GroupLayout endTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static final GroupLayout endTime$layout() {
        return endTime$LAYOUT;
    }

    private static final long endTime$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static final long endTime$offset() {
        return endTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static MemorySegment endTime(MemorySegment struct) {
        return struct.asSlice(endTime$OFFSET, endTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static void endTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endTime$OFFSET, endTime$LAYOUT.byteSize());
    }

    private static final AddressLayout minSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("minSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *minSpeed
     * }
     */
    public static final AddressLayout minSpeed$layout() {
        return minSpeed$LAYOUT;
    }

    private static final long minSpeed$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *minSpeed
     * }
     */
    public static final long minSpeed$offset() {
        return minSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *minSpeed
     * }
     */
    public static MemorySegment minSpeed(MemorySegment struct) {
        return struct.get(minSpeed$LAYOUT, minSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *minSpeed
     * }
     */
    public static void minSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(minSpeed$LAYOUT, minSpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout maxSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maxSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *maxSpeed
     * }
     */
    public static final AddressLayout maxSpeed$layout() {
        return maxSpeed$LAYOUT;
    }

    private static final long maxSpeed$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *maxSpeed
     * }
     */
    public static final long maxSpeed$offset() {
        return maxSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *maxSpeed
     * }
     */
    public static MemorySegment maxSpeed(MemorySegment struct) {
        return struct.get(maxSpeed$LAYOUT, maxSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *maxSpeed
     * }
     */
    public static void maxSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maxSpeed$LAYOUT, maxSpeed$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

