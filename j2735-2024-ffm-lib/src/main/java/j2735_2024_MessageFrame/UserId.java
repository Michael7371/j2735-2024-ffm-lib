// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct UserId {
 *     PersonalAccountNumber_t *pan;
 *     ContractSerialNumber_t *contractSerialNumber;
 *     struct Lpn *licencePlateNumber;
 *     struct ObeId *obeId;
 *     EquipmentIccId_t *iccId;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class UserId {

    UserId() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("pan"),
        MessageFrame_h.C_POINTER.withName("contractSerialNumber"),
        MessageFrame_h.C_POINTER.withName("licencePlateNumber"),
        MessageFrame_h.C_POINTER.withName("obeId"),
        MessageFrame_h.C_POINTER.withName("iccId"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("UserId");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pan$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pan"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PersonalAccountNumber_t *pan
     * }
     */
    public static final AddressLayout pan$layout() {
        return pan$LAYOUT;
    }

    private static final long pan$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PersonalAccountNumber_t *pan
     * }
     */
    public static final long pan$offset() {
        return pan$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PersonalAccountNumber_t *pan
     * }
     */
    public static MemorySegment pan(MemorySegment struct) {
        return struct.get(pan$LAYOUT, pan$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PersonalAccountNumber_t *pan
     * }
     */
    public static void pan(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pan$LAYOUT, pan$OFFSET, fieldValue);
    }

    private static final AddressLayout contractSerialNumber$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contractSerialNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ContractSerialNumber_t *contractSerialNumber
     * }
     */
    public static final AddressLayout contractSerialNumber$layout() {
        return contractSerialNumber$LAYOUT;
    }

    private static final long contractSerialNumber$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ContractSerialNumber_t *contractSerialNumber
     * }
     */
    public static final long contractSerialNumber$offset() {
        return contractSerialNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ContractSerialNumber_t *contractSerialNumber
     * }
     */
    public static MemorySegment contractSerialNumber(MemorySegment struct) {
        return struct.get(contractSerialNumber$LAYOUT, contractSerialNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ContractSerialNumber_t *contractSerialNumber
     * }
     */
    public static void contractSerialNumber(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(contractSerialNumber$LAYOUT, contractSerialNumber$OFFSET, fieldValue);
    }

    private static final AddressLayout licencePlateNumber$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("licencePlateNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Lpn *licencePlateNumber
     * }
     */
    public static final AddressLayout licencePlateNumber$layout() {
        return licencePlateNumber$LAYOUT;
    }

    private static final long licencePlateNumber$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Lpn *licencePlateNumber
     * }
     */
    public static final long licencePlateNumber$offset() {
        return licencePlateNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Lpn *licencePlateNumber
     * }
     */
    public static MemorySegment licencePlateNumber(MemorySegment struct) {
        return struct.get(licencePlateNumber$LAYOUT, licencePlateNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Lpn *licencePlateNumber
     * }
     */
    public static void licencePlateNumber(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(licencePlateNumber$LAYOUT, licencePlateNumber$OFFSET, fieldValue);
    }

    private static final AddressLayout obeId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("obeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ObeId *obeId
     * }
     */
    public static final AddressLayout obeId$layout() {
        return obeId$LAYOUT;
    }

    private static final long obeId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ObeId *obeId
     * }
     */
    public static final long obeId$offset() {
        return obeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ObeId *obeId
     * }
     */
    public static MemorySegment obeId(MemorySegment struct) {
        return struct.get(obeId$LAYOUT, obeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ObeId *obeId
     * }
     */
    public static void obeId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(obeId$LAYOUT, obeId$OFFSET, fieldValue);
    }

    private static final AddressLayout iccId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iccId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EquipmentIccId_t *iccId
     * }
     */
    public static final AddressLayout iccId$layout() {
        return iccId$LAYOUT;
    }

    private static final long iccId$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EquipmentIccId_t *iccId
     * }
     */
    public static final long iccId$offset() {
        return iccId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EquipmentIccId_t *iccId
     * }
     */
    public static MemorySegment iccId(MemorySegment struct) {
        return struct.get(iccId$LAYOUT, iccId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EquipmentIccId_t *iccId
     * }
     */
    public static void iccId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iccId$LAYOUT, iccId$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

