// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct MessageFrame {
 *     DSRCmsgID_t messageId;
 *     struct MessageFrame__value {
 *         MessageFrame__value_PR present;
 *         union MessageFrame__value_u {
 *             BasicSafetyMessage_t BasicSafetyMessage;
 *             MapData_t MapData;
 *             SPAT_t SPAT;
 *             CommonSafetyRequest_t CommonSafetyRequest;
 *             EmergencyVehicleAlert_t EmergencyVehicleAlert;
 *             IntersectionCollision_t IntersectionCollision;
 *             NMEAcorrections_t NMEAcorrections;
 *             ProbeDataManagement_t ProbeDataManagement;
 *             ProbeVehicleData_t ProbeVehicleData;
 *             RoadSideAlert_t RoadSideAlert;
 *             RTCMcorrections_t RTCMcorrections;
 *             SignalRequestMessage_t SignalRequestMessage;
 *             SignalStatusMessage_t SignalStatusMessage;
 *             TravelerInformation_t TravelerInformation;
 *             PersonalSafetyMessage_t PersonalSafetyMessage;
 *             RoadSafetyMessage_t RoadSafetyMessage;
 *             RoadWeatherMessage_t RoadWeatherMessage;
 *             ProbeDataConfigMessage_t ProbeDataConfigMessage;
 *             ProbeDataReportMessage_t ProbeDataReportMessage;
 *             TollAdvertisementMessage_t TollAdvertisementMessage;
 *             TollUsageMessage_t TollUsageMessage;
 *             TollUsageAckMessage_t TollUsageAckMessage;
 *             CooperativeControlMessage_t CooperativeControlMessage;
 *             SensorDataSharingMessage_t SensorDataSharingMessage;
 *             ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage;
 *             RoadGeometryAndAttributes_t RoadGeometryAndAttributes;
 *             PersonalSafetyMessage2_t PersonalSafetyMessage2;
 *             TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming;
 *             SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest;
 *             SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus;
 *             RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage;
 *             RoadUserChargingReportMessage_t RoadUserChargingReportMessage;
 *             TrafficLightStatusMessage_t TrafficLightStatusMessage;
 *             TestMessage00_t TestMessage00;
 *             TestMessage01_t TestMessage01;
 *             TestMessage02_t TestMessage02;
 *             TestMessage03_t TestMessage03;
 *             TestMessage04_t TestMessage04;
 *             TestMessage05_t TestMessage05;
 *             TestMessage06_t TestMessage06;
 *             TestMessage07_t TestMessage07;
 *             TestMessage08_t TestMessage08;
 *             TestMessage09_t TestMessage09;
 *             TestMessage10_t TestMessage10;
 *             TestMessage11_t TestMessage11;
 *             TestMessage12_t TestMessage12;
 *             TestMessage13_t TestMessage13;
 *             TestMessage14_t TestMessage14;
 *             TestMessage15_t TestMessage15;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } value;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class MessageFrame {

    MessageFrame() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("messageId"),
        MessageFrame__value.layout().withName("value"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("MessageFrame");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong messageId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("messageId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DSRCmsgID_t messageId
     * }
     */
    public static final OfLong messageId$layout() {
        return messageId$LAYOUT;
    }

    private static final long messageId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DSRCmsgID_t messageId
     * }
     */
    public static final long messageId$offset() {
        return messageId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DSRCmsgID_t messageId
     * }
     */
    public static long messageId(MemorySegment struct) {
        return struct.get(messageId$LAYOUT, messageId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DSRCmsgID_t messageId
     * }
     */
    public static void messageId(MemorySegment struct, long fieldValue) {
        struct.set(messageId$LAYOUT, messageId$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct MessageFrame__value {
     *     MessageFrame__value_PR present;
     *     union MessageFrame__value_u {
     *         BasicSafetyMessage_t BasicSafetyMessage;
     *         MapData_t MapData;
     *         SPAT_t SPAT;
     *         CommonSafetyRequest_t CommonSafetyRequest;
     *         EmergencyVehicleAlert_t EmergencyVehicleAlert;
     *         IntersectionCollision_t IntersectionCollision;
     *         NMEAcorrections_t NMEAcorrections;
     *         ProbeDataManagement_t ProbeDataManagement;
     *         ProbeVehicleData_t ProbeVehicleData;
     *         RoadSideAlert_t RoadSideAlert;
     *         RTCMcorrections_t RTCMcorrections;
     *         SignalRequestMessage_t SignalRequestMessage;
     *         SignalStatusMessage_t SignalStatusMessage;
     *         TravelerInformation_t TravelerInformation;
     *         PersonalSafetyMessage_t PersonalSafetyMessage;
     *         RoadSafetyMessage_t RoadSafetyMessage;
     *         RoadWeatherMessage_t RoadWeatherMessage;
     *         ProbeDataConfigMessage_t ProbeDataConfigMessage;
     *         ProbeDataReportMessage_t ProbeDataReportMessage;
     *         TollAdvertisementMessage_t TollAdvertisementMessage;
     *         TollUsageMessage_t TollUsageMessage;
     *         TollUsageAckMessage_t TollUsageAckMessage;
     *         CooperativeControlMessage_t CooperativeControlMessage;
     *         SensorDataSharingMessage_t SensorDataSharingMessage;
     *         ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage;
     *         RoadGeometryAndAttributes_t RoadGeometryAndAttributes;
     *         PersonalSafetyMessage2_t PersonalSafetyMessage2;
     *         TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming;
     *         SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest;
     *         SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus;
     *         RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage;
     *         RoadUserChargingReportMessage_t RoadUserChargingReportMessage;
     *         TrafficLightStatusMessage_t TrafficLightStatusMessage;
     *         TestMessage00_t TestMessage00;
     *         TestMessage01_t TestMessage01;
     *         TestMessage02_t TestMessage02;
     *         TestMessage03_t TestMessage03;
     *         TestMessage04_t TestMessage04;
     *         TestMessage05_t TestMessage05;
     *         TestMessage06_t TestMessage06;
     *         TestMessage07_t TestMessage07;
     *         TestMessage08_t TestMessage08;
     *         TestMessage09_t TestMessage09;
     *         TestMessage10_t TestMessage10;
     *         TestMessage11_t TestMessage11;
     *         TestMessage12_t TestMessage12;
     *         TestMessage13_t TestMessage13;
     *         TestMessage14_t TestMessage14;
     *         TestMessage15_t TestMessage15;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class MessageFrame__value {

        MessageFrame__value() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            MessageFrame__value_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("MessageFrame__value");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * MessageFrame__value_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * MessageFrame__value_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * MessageFrame__value_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * MessageFrame__value_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union MessageFrame__value_u {
         *     BasicSafetyMessage_t BasicSafetyMessage;
         *     MapData_t MapData;
         *     SPAT_t SPAT;
         *     CommonSafetyRequest_t CommonSafetyRequest;
         *     EmergencyVehicleAlert_t EmergencyVehicleAlert;
         *     IntersectionCollision_t IntersectionCollision;
         *     NMEAcorrections_t NMEAcorrections;
         *     ProbeDataManagement_t ProbeDataManagement;
         *     ProbeVehicleData_t ProbeVehicleData;
         *     RoadSideAlert_t RoadSideAlert;
         *     RTCMcorrections_t RTCMcorrections;
         *     SignalRequestMessage_t SignalRequestMessage;
         *     SignalStatusMessage_t SignalStatusMessage;
         *     TravelerInformation_t TravelerInformation;
         *     PersonalSafetyMessage_t PersonalSafetyMessage;
         *     RoadSafetyMessage_t RoadSafetyMessage;
         *     RoadWeatherMessage_t RoadWeatherMessage;
         *     ProbeDataConfigMessage_t ProbeDataConfigMessage;
         *     ProbeDataReportMessage_t ProbeDataReportMessage;
         *     TollAdvertisementMessage_t TollAdvertisementMessage;
         *     TollUsageMessage_t TollUsageMessage;
         *     TollUsageAckMessage_t TollUsageAckMessage;
         *     CooperativeControlMessage_t CooperativeControlMessage;
         *     SensorDataSharingMessage_t SensorDataSharingMessage;
         *     ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage;
         *     RoadGeometryAndAttributes_t RoadGeometryAndAttributes;
         *     PersonalSafetyMessage2_t PersonalSafetyMessage2;
         *     TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming;
         *     SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest;
         *     SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus;
         *     RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage;
         *     RoadUserChargingReportMessage_t RoadUserChargingReportMessage;
         *     TrafficLightStatusMessage_t TrafficLightStatusMessage;
         *     TestMessage00_t TestMessage00;
         *     TestMessage01_t TestMessage01;
         *     TestMessage02_t TestMessage02;
         *     TestMessage03_t TestMessage03;
         *     TestMessage04_t TestMessage04;
         *     TestMessage05_t TestMessage05;
         *     TestMessage06_t TestMessage06;
         *     TestMessage07_t TestMessage07;
         *     TestMessage08_t TestMessage08;
         *     TestMessage09_t TestMessage09;
         *     TestMessage10_t TestMessage10;
         *     TestMessage11_t TestMessage11;
         *     TestMessage12_t TestMessage12;
         *     TestMessage13_t TestMessage13;
         *     TestMessage14_t TestMessage14;
         *     TestMessage15_t TestMessage15;
         * }
         * }
         */
        public static class MessageFrame__value_u {

            MessageFrame__value_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                BasicSafetyMessage.layout().withName("BasicSafetyMessage"),
                MapData.layout().withName("MapData"),
                SPAT.layout().withName("SPAT"),
                CommonSafetyRequest.layout().withName("CommonSafetyRequest"),
                EmergencyVehicleAlert.layout().withName("EmergencyVehicleAlert"),
                IntersectionCollision.layout().withName("IntersectionCollision"),
                NMEAcorrections.layout().withName("NMEAcorrections"),
                ProbeDataManagement.layout().withName("ProbeDataManagement"),
                ProbeVehicleData.layout().withName("ProbeVehicleData"),
                RoadSideAlert.layout().withName("RoadSideAlert"),
                RTCMcorrections.layout().withName("RTCMcorrections"),
                SignalRequestMessage.layout().withName("SignalRequestMessage"),
                SignalStatusMessage.layout().withName("SignalStatusMessage"),
                TravelerInformation.layout().withName("TravelerInformation"),
                PersonalSafetyMessage.layout().withName("PersonalSafetyMessage"),
                RoadSafetyMessage.layout().withName("RoadSafetyMessage"),
                RoadWeatherMessage.layout().withName("RoadWeatherMessage"),
                ProbeDataConfigMessage.layout().withName("ProbeDataConfigMessage"),
                ProbeDataReportMessage.layout().withName("ProbeDataReportMessage"),
                TollAdvertisementMessage.layout().withName("TollAdvertisementMessage"),
                TollUsageMessage.layout().withName("TollUsageMessage"),
                TollUsageAckMessage.layout().withName("TollUsageAckMessage"),
                CooperativeControlMessage.layout().withName("CooperativeControlMessage"),
                SensorDataSharingMessage.layout().withName("SensorDataSharingMessage"),
                ManeuverSharingAndCoordinatingMessage.layout().withName("ManeuverSharingAndCoordinatingMessage"),
                MessageFrame_h.C_INT.withName("RoadGeometryAndAttributes"),
                MessageFrame_h.C_INT.withName("PersonalSafetyMessage2"),
                MessageFrame_h.C_INT.withName("TrafficSignalPhaseAndTiming"),
                MessageFrame_h.C_INT.withName("SignalControlAndPrioritizationRequest"),
                MessageFrame_h.C_INT.withName("SignalControlAndPrioritizationStatus"),
                RoadUserChargingConfigMessage.layout().withName("RoadUserChargingConfigMessage"),
                RoadUserChargingReportMessage.layout().withName("RoadUserChargingReportMessage"),
                TrafficLightStatusMessage.layout().withName("TrafficLightStatusMessage"),
                TestMessage00.layout().withName("TestMessage00"),
                TestMessage01.layout().withName("TestMessage01"),
                TestMessage02.layout().withName("TestMessage02"),
                TestMessage03.layout().withName("TestMessage03"),
                TestMessage04.layout().withName("TestMessage04"),
                TestMessage05.layout().withName("TestMessage05"),
                TestMessage06.layout().withName("TestMessage06"),
                TestMessage07.layout().withName("TestMessage07"),
                TestMessage08.layout().withName("TestMessage08"),
                TestMessage09.layout().withName("TestMessage09"),
                TestMessage10.layout().withName("TestMessage10"),
                TestMessage11.layout().withName("TestMessage11"),
                TestMessage12.layout().withName("TestMessage12"),
                TestMessage13.layout().withName("TestMessage13"),
                TestMessage14.layout().withName("TestMessage14"),
                TestMessage15.layout().withName("TestMessage15")
            ).withName("MessageFrame__value_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final GroupLayout BasicSafetyMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BasicSafetyMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BasicSafetyMessage_t BasicSafetyMessage
             * }
             */
            public static final GroupLayout BasicSafetyMessage$layout() {
                return BasicSafetyMessage$LAYOUT;
            }

            private static final long BasicSafetyMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BasicSafetyMessage_t BasicSafetyMessage
             * }
             */
            public static final long BasicSafetyMessage$offset() {
                return BasicSafetyMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BasicSafetyMessage_t BasicSafetyMessage
             * }
             */
            public static MemorySegment BasicSafetyMessage(MemorySegment union) {
                return union.asSlice(BasicSafetyMessage$OFFSET, BasicSafetyMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BasicSafetyMessage_t BasicSafetyMessage
             * }
             */
            public static void BasicSafetyMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, BasicSafetyMessage$OFFSET, BasicSafetyMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout MapData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MapData"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * MapData_t MapData
             * }
             */
            public static final GroupLayout MapData$layout() {
                return MapData$LAYOUT;
            }

            private static final long MapData$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * MapData_t MapData
             * }
             */
            public static final long MapData$offset() {
                return MapData$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * MapData_t MapData
             * }
             */
            public static MemorySegment MapData(MemorySegment union) {
                return union.asSlice(MapData$OFFSET, MapData$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * MapData_t MapData
             * }
             */
            public static void MapData(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, MapData$OFFSET, MapData$LAYOUT.byteSize());
            }

            private static final GroupLayout SPAT$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SPAT"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SPAT_t SPAT
             * }
             */
            public static final GroupLayout SPAT$layout() {
                return SPAT$LAYOUT;
            }

            private static final long SPAT$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SPAT_t SPAT
             * }
             */
            public static final long SPAT$offset() {
                return SPAT$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SPAT_t SPAT
             * }
             */
            public static MemorySegment SPAT(MemorySegment union) {
                return union.asSlice(SPAT$OFFSET, SPAT$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SPAT_t SPAT
             * }
             */
            public static void SPAT(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, SPAT$OFFSET, SPAT$LAYOUT.byteSize());
            }

            private static final GroupLayout CommonSafetyRequest$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CommonSafetyRequest"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * CommonSafetyRequest_t CommonSafetyRequest
             * }
             */
            public static final GroupLayout CommonSafetyRequest$layout() {
                return CommonSafetyRequest$LAYOUT;
            }

            private static final long CommonSafetyRequest$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * CommonSafetyRequest_t CommonSafetyRequest
             * }
             */
            public static final long CommonSafetyRequest$offset() {
                return CommonSafetyRequest$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * CommonSafetyRequest_t CommonSafetyRequest
             * }
             */
            public static MemorySegment CommonSafetyRequest(MemorySegment union) {
                return union.asSlice(CommonSafetyRequest$OFFSET, CommonSafetyRequest$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * CommonSafetyRequest_t CommonSafetyRequest
             * }
             */
            public static void CommonSafetyRequest(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, CommonSafetyRequest$OFFSET, CommonSafetyRequest$LAYOUT.byteSize());
            }

            private static final GroupLayout EmergencyVehicleAlert$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("EmergencyVehicleAlert"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * EmergencyVehicleAlert_t EmergencyVehicleAlert
             * }
             */
            public static final GroupLayout EmergencyVehicleAlert$layout() {
                return EmergencyVehicleAlert$LAYOUT;
            }

            private static final long EmergencyVehicleAlert$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * EmergencyVehicleAlert_t EmergencyVehicleAlert
             * }
             */
            public static final long EmergencyVehicleAlert$offset() {
                return EmergencyVehicleAlert$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * EmergencyVehicleAlert_t EmergencyVehicleAlert
             * }
             */
            public static MemorySegment EmergencyVehicleAlert(MemorySegment union) {
                return union.asSlice(EmergencyVehicleAlert$OFFSET, EmergencyVehicleAlert$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * EmergencyVehicleAlert_t EmergencyVehicleAlert
             * }
             */
            public static void EmergencyVehicleAlert(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, EmergencyVehicleAlert$OFFSET, EmergencyVehicleAlert$LAYOUT.byteSize());
            }

            private static final GroupLayout IntersectionCollision$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IntersectionCollision"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * IntersectionCollision_t IntersectionCollision
             * }
             */
            public static final GroupLayout IntersectionCollision$layout() {
                return IntersectionCollision$LAYOUT;
            }

            private static final long IntersectionCollision$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * IntersectionCollision_t IntersectionCollision
             * }
             */
            public static final long IntersectionCollision$offset() {
                return IntersectionCollision$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * IntersectionCollision_t IntersectionCollision
             * }
             */
            public static MemorySegment IntersectionCollision(MemorySegment union) {
                return union.asSlice(IntersectionCollision$OFFSET, IntersectionCollision$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * IntersectionCollision_t IntersectionCollision
             * }
             */
            public static void IntersectionCollision(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, IntersectionCollision$OFFSET, IntersectionCollision$LAYOUT.byteSize());
            }

            private static final GroupLayout NMEAcorrections$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NMEAcorrections"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * NMEAcorrections_t NMEAcorrections
             * }
             */
            public static final GroupLayout NMEAcorrections$layout() {
                return NMEAcorrections$LAYOUT;
            }

            private static final long NMEAcorrections$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * NMEAcorrections_t NMEAcorrections
             * }
             */
            public static final long NMEAcorrections$offset() {
                return NMEAcorrections$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * NMEAcorrections_t NMEAcorrections
             * }
             */
            public static MemorySegment NMEAcorrections(MemorySegment union) {
                return union.asSlice(NMEAcorrections$OFFSET, NMEAcorrections$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * NMEAcorrections_t NMEAcorrections
             * }
             */
            public static void NMEAcorrections(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, NMEAcorrections$OFFSET, NMEAcorrections$LAYOUT.byteSize());
            }

            private static final GroupLayout ProbeDataManagement$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ProbeDataManagement"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ProbeDataManagement_t ProbeDataManagement
             * }
             */
            public static final GroupLayout ProbeDataManagement$layout() {
                return ProbeDataManagement$LAYOUT;
            }

            private static final long ProbeDataManagement$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ProbeDataManagement_t ProbeDataManagement
             * }
             */
            public static final long ProbeDataManagement$offset() {
                return ProbeDataManagement$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ProbeDataManagement_t ProbeDataManagement
             * }
             */
            public static MemorySegment ProbeDataManagement(MemorySegment union) {
                return union.asSlice(ProbeDataManagement$OFFSET, ProbeDataManagement$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ProbeDataManagement_t ProbeDataManagement
             * }
             */
            public static void ProbeDataManagement(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ProbeDataManagement$OFFSET, ProbeDataManagement$LAYOUT.byteSize());
            }

            private static final GroupLayout ProbeVehicleData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ProbeVehicleData"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ProbeVehicleData_t ProbeVehicleData
             * }
             */
            public static final GroupLayout ProbeVehicleData$layout() {
                return ProbeVehicleData$LAYOUT;
            }

            private static final long ProbeVehicleData$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ProbeVehicleData_t ProbeVehicleData
             * }
             */
            public static final long ProbeVehicleData$offset() {
                return ProbeVehicleData$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ProbeVehicleData_t ProbeVehicleData
             * }
             */
            public static MemorySegment ProbeVehicleData(MemorySegment union) {
                return union.asSlice(ProbeVehicleData$OFFSET, ProbeVehicleData$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ProbeVehicleData_t ProbeVehicleData
             * }
             */
            public static void ProbeVehicleData(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ProbeVehicleData$OFFSET, ProbeVehicleData$LAYOUT.byteSize());
            }

            private static final GroupLayout RoadSideAlert$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RoadSideAlert"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadSideAlert_t RoadSideAlert
             * }
             */
            public static final GroupLayout RoadSideAlert$layout() {
                return RoadSideAlert$LAYOUT;
            }

            private static final long RoadSideAlert$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadSideAlert_t RoadSideAlert
             * }
             */
            public static final long RoadSideAlert$offset() {
                return RoadSideAlert$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadSideAlert_t RoadSideAlert
             * }
             */
            public static MemorySegment RoadSideAlert(MemorySegment union) {
                return union.asSlice(RoadSideAlert$OFFSET, RoadSideAlert$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadSideAlert_t RoadSideAlert
             * }
             */
            public static void RoadSideAlert(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RoadSideAlert$OFFSET, RoadSideAlert$LAYOUT.byteSize());
            }

            private static final GroupLayout RTCMcorrections$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RTCMcorrections"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RTCMcorrections_t RTCMcorrections
             * }
             */
            public static final GroupLayout RTCMcorrections$layout() {
                return RTCMcorrections$LAYOUT;
            }

            private static final long RTCMcorrections$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RTCMcorrections_t RTCMcorrections
             * }
             */
            public static final long RTCMcorrections$offset() {
                return RTCMcorrections$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RTCMcorrections_t RTCMcorrections
             * }
             */
            public static MemorySegment RTCMcorrections(MemorySegment union) {
                return union.asSlice(RTCMcorrections$OFFSET, RTCMcorrections$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RTCMcorrections_t RTCMcorrections
             * }
             */
            public static void RTCMcorrections(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RTCMcorrections$OFFSET, RTCMcorrections$LAYOUT.byteSize());
            }

            private static final GroupLayout SignalRequestMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SignalRequestMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SignalRequestMessage_t SignalRequestMessage
             * }
             */
            public static final GroupLayout SignalRequestMessage$layout() {
                return SignalRequestMessage$LAYOUT;
            }

            private static final long SignalRequestMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SignalRequestMessage_t SignalRequestMessage
             * }
             */
            public static final long SignalRequestMessage$offset() {
                return SignalRequestMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SignalRequestMessage_t SignalRequestMessage
             * }
             */
            public static MemorySegment SignalRequestMessage(MemorySegment union) {
                return union.asSlice(SignalRequestMessage$OFFSET, SignalRequestMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SignalRequestMessage_t SignalRequestMessage
             * }
             */
            public static void SignalRequestMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, SignalRequestMessage$OFFSET, SignalRequestMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout SignalStatusMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SignalStatusMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SignalStatusMessage_t SignalStatusMessage
             * }
             */
            public static final GroupLayout SignalStatusMessage$layout() {
                return SignalStatusMessage$LAYOUT;
            }

            private static final long SignalStatusMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SignalStatusMessage_t SignalStatusMessage
             * }
             */
            public static final long SignalStatusMessage$offset() {
                return SignalStatusMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SignalStatusMessage_t SignalStatusMessage
             * }
             */
            public static MemorySegment SignalStatusMessage(MemorySegment union) {
                return union.asSlice(SignalStatusMessage$OFFSET, SignalStatusMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SignalStatusMessage_t SignalStatusMessage
             * }
             */
            public static void SignalStatusMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, SignalStatusMessage$OFFSET, SignalStatusMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TravelerInformation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TravelerInformation"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TravelerInformation_t TravelerInformation
             * }
             */
            public static final GroupLayout TravelerInformation$layout() {
                return TravelerInformation$LAYOUT;
            }

            private static final long TravelerInformation$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TravelerInformation_t TravelerInformation
             * }
             */
            public static final long TravelerInformation$offset() {
                return TravelerInformation$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TravelerInformation_t TravelerInformation
             * }
             */
            public static MemorySegment TravelerInformation(MemorySegment union) {
                return union.asSlice(TravelerInformation$OFFSET, TravelerInformation$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TravelerInformation_t TravelerInformation
             * }
             */
            public static void TravelerInformation(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TravelerInformation$OFFSET, TravelerInformation$LAYOUT.byteSize());
            }

            private static final GroupLayout PersonalSafetyMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PersonalSafetyMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage_t PersonalSafetyMessage
             * }
             */
            public static final GroupLayout PersonalSafetyMessage$layout() {
                return PersonalSafetyMessage$LAYOUT;
            }

            private static final long PersonalSafetyMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage_t PersonalSafetyMessage
             * }
             */
            public static final long PersonalSafetyMessage$offset() {
                return PersonalSafetyMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage_t PersonalSafetyMessage
             * }
             */
            public static MemorySegment PersonalSafetyMessage(MemorySegment union) {
                return union.asSlice(PersonalSafetyMessage$OFFSET, PersonalSafetyMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage_t PersonalSafetyMessage
             * }
             */
            public static void PersonalSafetyMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, PersonalSafetyMessage$OFFSET, PersonalSafetyMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout RoadSafetyMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RoadSafetyMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadSafetyMessage_t RoadSafetyMessage
             * }
             */
            public static final GroupLayout RoadSafetyMessage$layout() {
                return RoadSafetyMessage$LAYOUT;
            }

            private static final long RoadSafetyMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadSafetyMessage_t RoadSafetyMessage
             * }
             */
            public static final long RoadSafetyMessage$offset() {
                return RoadSafetyMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadSafetyMessage_t RoadSafetyMessage
             * }
             */
            public static MemorySegment RoadSafetyMessage(MemorySegment union) {
                return union.asSlice(RoadSafetyMessage$OFFSET, RoadSafetyMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadSafetyMessage_t RoadSafetyMessage
             * }
             */
            public static void RoadSafetyMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RoadSafetyMessage$OFFSET, RoadSafetyMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout RoadWeatherMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RoadWeatherMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadWeatherMessage_t RoadWeatherMessage
             * }
             */
            public static final GroupLayout RoadWeatherMessage$layout() {
                return RoadWeatherMessage$LAYOUT;
            }

            private static final long RoadWeatherMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadWeatherMessage_t RoadWeatherMessage
             * }
             */
            public static final long RoadWeatherMessage$offset() {
                return RoadWeatherMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadWeatherMessage_t RoadWeatherMessage
             * }
             */
            public static MemorySegment RoadWeatherMessage(MemorySegment union) {
                return union.asSlice(RoadWeatherMessage$OFFSET, RoadWeatherMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadWeatherMessage_t RoadWeatherMessage
             * }
             */
            public static void RoadWeatherMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RoadWeatherMessage$OFFSET, RoadWeatherMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout ProbeDataConfigMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ProbeDataConfigMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ProbeDataConfigMessage_t ProbeDataConfigMessage
             * }
             */
            public static final GroupLayout ProbeDataConfigMessage$layout() {
                return ProbeDataConfigMessage$LAYOUT;
            }

            private static final long ProbeDataConfigMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ProbeDataConfigMessage_t ProbeDataConfigMessage
             * }
             */
            public static final long ProbeDataConfigMessage$offset() {
                return ProbeDataConfigMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ProbeDataConfigMessage_t ProbeDataConfigMessage
             * }
             */
            public static MemorySegment ProbeDataConfigMessage(MemorySegment union) {
                return union.asSlice(ProbeDataConfigMessage$OFFSET, ProbeDataConfigMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ProbeDataConfigMessage_t ProbeDataConfigMessage
             * }
             */
            public static void ProbeDataConfigMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ProbeDataConfigMessage$OFFSET, ProbeDataConfigMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout ProbeDataReportMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ProbeDataReportMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ProbeDataReportMessage_t ProbeDataReportMessage
             * }
             */
            public static final GroupLayout ProbeDataReportMessage$layout() {
                return ProbeDataReportMessage$LAYOUT;
            }

            private static final long ProbeDataReportMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ProbeDataReportMessage_t ProbeDataReportMessage
             * }
             */
            public static final long ProbeDataReportMessage$offset() {
                return ProbeDataReportMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ProbeDataReportMessage_t ProbeDataReportMessage
             * }
             */
            public static MemorySegment ProbeDataReportMessage(MemorySegment union) {
                return union.asSlice(ProbeDataReportMessage$OFFSET, ProbeDataReportMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ProbeDataReportMessage_t ProbeDataReportMessage
             * }
             */
            public static void ProbeDataReportMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ProbeDataReportMessage$OFFSET, ProbeDataReportMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TollAdvertisementMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TollAdvertisementMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TollAdvertisementMessage_t TollAdvertisementMessage
             * }
             */
            public static final GroupLayout TollAdvertisementMessage$layout() {
                return TollAdvertisementMessage$LAYOUT;
            }

            private static final long TollAdvertisementMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TollAdvertisementMessage_t TollAdvertisementMessage
             * }
             */
            public static final long TollAdvertisementMessage$offset() {
                return TollAdvertisementMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TollAdvertisementMessage_t TollAdvertisementMessage
             * }
             */
            public static MemorySegment TollAdvertisementMessage(MemorySegment union) {
                return union.asSlice(TollAdvertisementMessage$OFFSET, TollAdvertisementMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TollAdvertisementMessage_t TollAdvertisementMessage
             * }
             */
            public static void TollAdvertisementMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TollAdvertisementMessage$OFFSET, TollAdvertisementMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TollUsageMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TollUsageMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TollUsageMessage_t TollUsageMessage
             * }
             */
            public static final GroupLayout TollUsageMessage$layout() {
                return TollUsageMessage$LAYOUT;
            }

            private static final long TollUsageMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TollUsageMessage_t TollUsageMessage
             * }
             */
            public static final long TollUsageMessage$offset() {
                return TollUsageMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TollUsageMessage_t TollUsageMessage
             * }
             */
            public static MemorySegment TollUsageMessage(MemorySegment union) {
                return union.asSlice(TollUsageMessage$OFFSET, TollUsageMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TollUsageMessage_t TollUsageMessage
             * }
             */
            public static void TollUsageMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TollUsageMessage$OFFSET, TollUsageMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TollUsageAckMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TollUsageAckMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TollUsageAckMessage_t TollUsageAckMessage
             * }
             */
            public static final GroupLayout TollUsageAckMessage$layout() {
                return TollUsageAckMessage$LAYOUT;
            }

            private static final long TollUsageAckMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TollUsageAckMessage_t TollUsageAckMessage
             * }
             */
            public static final long TollUsageAckMessage$offset() {
                return TollUsageAckMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TollUsageAckMessage_t TollUsageAckMessage
             * }
             */
            public static MemorySegment TollUsageAckMessage(MemorySegment union) {
                return union.asSlice(TollUsageAckMessage$OFFSET, TollUsageAckMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TollUsageAckMessage_t TollUsageAckMessage
             * }
             */
            public static void TollUsageAckMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TollUsageAckMessage$OFFSET, TollUsageAckMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout CooperativeControlMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CooperativeControlMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * CooperativeControlMessage_t CooperativeControlMessage
             * }
             */
            public static final GroupLayout CooperativeControlMessage$layout() {
                return CooperativeControlMessage$LAYOUT;
            }

            private static final long CooperativeControlMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * CooperativeControlMessage_t CooperativeControlMessage
             * }
             */
            public static final long CooperativeControlMessage$offset() {
                return CooperativeControlMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * CooperativeControlMessage_t CooperativeControlMessage
             * }
             */
            public static MemorySegment CooperativeControlMessage(MemorySegment union) {
                return union.asSlice(CooperativeControlMessage$OFFSET, CooperativeControlMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * CooperativeControlMessage_t CooperativeControlMessage
             * }
             */
            public static void CooperativeControlMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, CooperativeControlMessage$OFFSET, CooperativeControlMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout SensorDataSharingMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SensorDataSharingMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SensorDataSharingMessage_t SensorDataSharingMessage
             * }
             */
            public static final GroupLayout SensorDataSharingMessage$layout() {
                return SensorDataSharingMessage$LAYOUT;
            }

            private static final long SensorDataSharingMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SensorDataSharingMessage_t SensorDataSharingMessage
             * }
             */
            public static final long SensorDataSharingMessage$offset() {
                return SensorDataSharingMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SensorDataSharingMessage_t SensorDataSharingMessage
             * }
             */
            public static MemorySegment SensorDataSharingMessage(MemorySegment union) {
                return union.asSlice(SensorDataSharingMessage$OFFSET, SensorDataSharingMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SensorDataSharingMessage_t SensorDataSharingMessage
             * }
             */
            public static void SensorDataSharingMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, SensorDataSharingMessage$OFFSET, SensorDataSharingMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout ManeuverSharingAndCoordinatingMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ManeuverSharingAndCoordinatingMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage
             * }
             */
            public static final GroupLayout ManeuverSharingAndCoordinatingMessage$layout() {
                return ManeuverSharingAndCoordinatingMessage$LAYOUT;
            }

            private static final long ManeuverSharingAndCoordinatingMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage
             * }
             */
            public static final long ManeuverSharingAndCoordinatingMessage$offset() {
                return ManeuverSharingAndCoordinatingMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage
             * }
             */
            public static MemorySegment ManeuverSharingAndCoordinatingMessage(MemorySegment union) {
                return union.asSlice(ManeuverSharingAndCoordinatingMessage$OFFSET, ManeuverSharingAndCoordinatingMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ManeuverSharingAndCoordinatingMessage_t ManeuverSharingAndCoordinatingMessage
             * }
             */
            public static void ManeuverSharingAndCoordinatingMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ManeuverSharingAndCoordinatingMessage$OFFSET, ManeuverSharingAndCoordinatingMessage$LAYOUT.byteSize());
            }

            private static final OfInt RoadGeometryAndAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RoadGeometryAndAttributes"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadGeometryAndAttributes_t RoadGeometryAndAttributes
             * }
             */
            public static final OfInt RoadGeometryAndAttributes$layout() {
                return RoadGeometryAndAttributes$LAYOUT;
            }

            private static final long RoadGeometryAndAttributes$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadGeometryAndAttributes_t RoadGeometryAndAttributes
             * }
             */
            public static final long RoadGeometryAndAttributes$offset() {
                return RoadGeometryAndAttributes$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadGeometryAndAttributes_t RoadGeometryAndAttributes
             * }
             */
            public static int RoadGeometryAndAttributes(MemorySegment union) {
                return union.get(RoadGeometryAndAttributes$LAYOUT, RoadGeometryAndAttributes$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadGeometryAndAttributes_t RoadGeometryAndAttributes
             * }
             */
            public static void RoadGeometryAndAttributes(MemorySegment union, int fieldValue) {
                union.set(RoadGeometryAndAttributes$LAYOUT, RoadGeometryAndAttributes$OFFSET, fieldValue);
            }

            private static final OfInt PersonalSafetyMessage2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PersonalSafetyMessage2"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage2_t PersonalSafetyMessage2
             * }
             */
            public static final OfInt PersonalSafetyMessage2$layout() {
                return PersonalSafetyMessage2$LAYOUT;
            }

            private static final long PersonalSafetyMessage2$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage2_t PersonalSafetyMessage2
             * }
             */
            public static final long PersonalSafetyMessage2$offset() {
                return PersonalSafetyMessage2$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage2_t PersonalSafetyMessage2
             * }
             */
            public static int PersonalSafetyMessage2(MemorySegment union) {
                return union.get(PersonalSafetyMessage2$LAYOUT, PersonalSafetyMessage2$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * PersonalSafetyMessage2_t PersonalSafetyMessage2
             * }
             */
            public static void PersonalSafetyMessage2(MemorySegment union, int fieldValue) {
                union.set(PersonalSafetyMessage2$LAYOUT, PersonalSafetyMessage2$OFFSET, fieldValue);
            }

            private static final OfInt TrafficSignalPhaseAndTiming$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TrafficSignalPhaseAndTiming"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming
             * }
             */
            public static final OfInt TrafficSignalPhaseAndTiming$layout() {
                return TrafficSignalPhaseAndTiming$LAYOUT;
            }

            private static final long TrafficSignalPhaseAndTiming$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming
             * }
             */
            public static final long TrafficSignalPhaseAndTiming$offset() {
                return TrafficSignalPhaseAndTiming$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming
             * }
             */
            public static int TrafficSignalPhaseAndTiming(MemorySegment union) {
                return union.get(TrafficSignalPhaseAndTiming$LAYOUT, TrafficSignalPhaseAndTiming$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TrafficSignalPhaseAndTiming_t TrafficSignalPhaseAndTiming
             * }
             */
            public static void TrafficSignalPhaseAndTiming(MemorySegment union, int fieldValue) {
                union.set(TrafficSignalPhaseAndTiming$LAYOUT, TrafficSignalPhaseAndTiming$OFFSET, fieldValue);
            }

            private static final OfInt SignalControlAndPrioritizationRequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SignalControlAndPrioritizationRequest"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest
             * }
             */
            public static final OfInt SignalControlAndPrioritizationRequest$layout() {
                return SignalControlAndPrioritizationRequest$LAYOUT;
            }

            private static final long SignalControlAndPrioritizationRequest$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest
             * }
             */
            public static final long SignalControlAndPrioritizationRequest$offset() {
                return SignalControlAndPrioritizationRequest$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest
             * }
             */
            public static int SignalControlAndPrioritizationRequest(MemorySegment union) {
                return union.get(SignalControlAndPrioritizationRequest$LAYOUT, SignalControlAndPrioritizationRequest$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationRequest_t SignalControlAndPrioritizationRequest
             * }
             */
            public static void SignalControlAndPrioritizationRequest(MemorySegment union, int fieldValue) {
                union.set(SignalControlAndPrioritizationRequest$LAYOUT, SignalControlAndPrioritizationRequest$OFFSET, fieldValue);
            }

            private static final OfInt SignalControlAndPrioritizationStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SignalControlAndPrioritizationStatus"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus
             * }
             */
            public static final OfInt SignalControlAndPrioritizationStatus$layout() {
                return SignalControlAndPrioritizationStatus$LAYOUT;
            }

            private static final long SignalControlAndPrioritizationStatus$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus
             * }
             */
            public static final long SignalControlAndPrioritizationStatus$offset() {
                return SignalControlAndPrioritizationStatus$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus
             * }
             */
            public static int SignalControlAndPrioritizationStatus(MemorySegment union) {
                return union.get(SignalControlAndPrioritizationStatus$LAYOUT, SignalControlAndPrioritizationStatus$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SignalControlAndPrioritizationStatus_t SignalControlAndPrioritizationStatus
             * }
             */
            public static void SignalControlAndPrioritizationStatus(MemorySegment union, int fieldValue) {
                union.set(SignalControlAndPrioritizationStatus$LAYOUT, SignalControlAndPrioritizationStatus$OFFSET, fieldValue);
            }

            private static final GroupLayout RoadUserChargingConfigMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RoadUserChargingConfigMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage
             * }
             */
            public static final GroupLayout RoadUserChargingConfigMessage$layout() {
                return RoadUserChargingConfigMessage$LAYOUT;
            }

            private static final long RoadUserChargingConfigMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage
             * }
             */
            public static final long RoadUserChargingConfigMessage$offset() {
                return RoadUserChargingConfigMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage
             * }
             */
            public static MemorySegment RoadUserChargingConfigMessage(MemorySegment union) {
                return union.asSlice(RoadUserChargingConfigMessage$OFFSET, RoadUserChargingConfigMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadUserChargingConfigMessage_t RoadUserChargingConfigMessage
             * }
             */
            public static void RoadUserChargingConfigMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RoadUserChargingConfigMessage$OFFSET, RoadUserChargingConfigMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout RoadUserChargingReportMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RoadUserChargingReportMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadUserChargingReportMessage_t RoadUserChargingReportMessage
             * }
             */
            public static final GroupLayout RoadUserChargingReportMessage$layout() {
                return RoadUserChargingReportMessage$LAYOUT;
            }

            private static final long RoadUserChargingReportMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadUserChargingReportMessage_t RoadUserChargingReportMessage
             * }
             */
            public static final long RoadUserChargingReportMessage$offset() {
                return RoadUserChargingReportMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadUserChargingReportMessage_t RoadUserChargingReportMessage
             * }
             */
            public static MemorySegment RoadUserChargingReportMessage(MemorySegment union) {
                return union.asSlice(RoadUserChargingReportMessage$OFFSET, RoadUserChargingReportMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadUserChargingReportMessage_t RoadUserChargingReportMessage
             * }
             */
            public static void RoadUserChargingReportMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, RoadUserChargingReportMessage$OFFSET, RoadUserChargingReportMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TrafficLightStatusMessage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TrafficLightStatusMessage"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TrafficLightStatusMessage_t TrafficLightStatusMessage
             * }
             */
            public static final GroupLayout TrafficLightStatusMessage$layout() {
                return TrafficLightStatusMessage$LAYOUT;
            }

            private static final long TrafficLightStatusMessage$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TrafficLightStatusMessage_t TrafficLightStatusMessage
             * }
             */
            public static final long TrafficLightStatusMessage$offset() {
                return TrafficLightStatusMessage$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TrafficLightStatusMessage_t TrafficLightStatusMessage
             * }
             */
            public static MemorySegment TrafficLightStatusMessage(MemorySegment union) {
                return union.asSlice(TrafficLightStatusMessage$OFFSET, TrafficLightStatusMessage$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TrafficLightStatusMessage_t TrafficLightStatusMessage
             * }
             */
            public static void TrafficLightStatusMessage(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TrafficLightStatusMessage$OFFSET, TrafficLightStatusMessage$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage00$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage00"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage00_t TestMessage00
             * }
             */
            public static final GroupLayout TestMessage00$layout() {
                return TestMessage00$LAYOUT;
            }

            private static final long TestMessage00$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage00_t TestMessage00
             * }
             */
            public static final long TestMessage00$offset() {
                return TestMessage00$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage00_t TestMessage00
             * }
             */
            public static MemorySegment TestMessage00(MemorySegment union) {
                return union.asSlice(TestMessage00$OFFSET, TestMessage00$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage00_t TestMessage00
             * }
             */
            public static void TestMessage00(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage00$OFFSET, TestMessage00$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage01$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage01"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage01_t TestMessage01
             * }
             */
            public static final GroupLayout TestMessage01$layout() {
                return TestMessage01$LAYOUT;
            }

            private static final long TestMessage01$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage01_t TestMessage01
             * }
             */
            public static final long TestMessage01$offset() {
                return TestMessage01$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage01_t TestMessage01
             * }
             */
            public static MemorySegment TestMessage01(MemorySegment union) {
                return union.asSlice(TestMessage01$OFFSET, TestMessage01$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage01_t TestMessage01
             * }
             */
            public static void TestMessage01(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage01$OFFSET, TestMessage01$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage02$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage02"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage02_t TestMessage02
             * }
             */
            public static final GroupLayout TestMessage02$layout() {
                return TestMessage02$LAYOUT;
            }

            private static final long TestMessage02$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage02_t TestMessage02
             * }
             */
            public static final long TestMessage02$offset() {
                return TestMessage02$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage02_t TestMessage02
             * }
             */
            public static MemorySegment TestMessage02(MemorySegment union) {
                return union.asSlice(TestMessage02$OFFSET, TestMessage02$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage02_t TestMessage02
             * }
             */
            public static void TestMessage02(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage02$OFFSET, TestMessage02$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage03$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage03"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage03_t TestMessage03
             * }
             */
            public static final GroupLayout TestMessage03$layout() {
                return TestMessage03$LAYOUT;
            }

            private static final long TestMessage03$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage03_t TestMessage03
             * }
             */
            public static final long TestMessage03$offset() {
                return TestMessage03$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage03_t TestMessage03
             * }
             */
            public static MemorySegment TestMessage03(MemorySegment union) {
                return union.asSlice(TestMessage03$OFFSET, TestMessage03$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage03_t TestMessage03
             * }
             */
            public static void TestMessage03(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage03$OFFSET, TestMessage03$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage04$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage04"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage04_t TestMessage04
             * }
             */
            public static final GroupLayout TestMessage04$layout() {
                return TestMessage04$LAYOUT;
            }

            private static final long TestMessage04$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage04_t TestMessage04
             * }
             */
            public static final long TestMessage04$offset() {
                return TestMessage04$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage04_t TestMessage04
             * }
             */
            public static MemorySegment TestMessage04(MemorySegment union) {
                return union.asSlice(TestMessage04$OFFSET, TestMessage04$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage04_t TestMessage04
             * }
             */
            public static void TestMessage04(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage04$OFFSET, TestMessage04$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage05$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage05"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage05_t TestMessage05
             * }
             */
            public static final GroupLayout TestMessage05$layout() {
                return TestMessage05$LAYOUT;
            }

            private static final long TestMessage05$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage05_t TestMessage05
             * }
             */
            public static final long TestMessage05$offset() {
                return TestMessage05$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage05_t TestMessage05
             * }
             */
            public static MemorySegment TestMessage05(MemorySegment union) {
                return union.asSlice(TestMessage05$OFFSET, TestMessage05$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage05_t TestMessage05
             * }
             */
            public static void TestMessage05(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage05$OFFSET, TestMessage05$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage06$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage06"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage06_t TestMessage06
             * }
             */
            public static final GroupLayout TestMessage06$layout() {
                return TestMessage06$LAYOUT;
            }

            private static final long TestMessage06$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage06_t TestMessage06
             * }
             */
            public static final long TestMessage06$offset() {
                return TestMessage06$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage06_t TestMessage06
             * }
             */
            public static MemorySegment TestMessage06(MemorySegment union) {
                return union.asSlice(TestMessage06$OFFSET, TestMessage06$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage06_t TestMessage06
             * }
             */
            public static void TestMessage06(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage06$OFFSET, TestMessage06$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage07$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage07"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage07_t TestMessage07
             * }
             */
            public static final GroupLayout TestMessage07$layout() {
                return TestMessage07$LAYOUT;
            }

            private static final long TestMessage07$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage07_t TestMessage07
             * }
             */
            public static final long TestMessage07$offset() {
                return TestMessage07$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage07_t TestMessage07
             * }
             */
            public static MemorySegment TestMessage07(MemorySegment union) {
                return union.asSlice(TestMessage07$OFFSET, TestMessage07$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage07_t TestMessage07
             * }
             */
            public static void TestMessage07(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage07$OFFSET, TestMessage07$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage08$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage08"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage08_t TestMessage08
             * }
             */
            public static final GroupLayout TestMessage08$layout() {
                return TestMessage08$LAYOUT;
            }

            private static final long TestMessage08$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage08_t TestMessage08
             * }
             */
            public static final long TestMessage08$offset() {
                return TestMessage08$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage08_t TestMessage08
             * }
             */
            public static MemorySegment TestMessage08(MemorySegment union) {
                return union.asSlice(TestMessage08$OFFSET, TestMessage08$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage08_t TestMessage08
             * }
             */
            public static void TestMessage08(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage08$OFFSET, TestMessage08$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage09$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage09"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage09_t TestMessage09
             * }
             */
            public static final GroupLayout TestMessage09$layout() {
                return TestMessage09$LAYOUT;
            }

            private static final long TestMessage09$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage09_t TestMessage09
             * }
             */
            public static final long TestMessage09$offset() {
                return TestMessage09$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage09_t TestMessage09
             * }
             */
            public static MemorySegment TestMessage09(MemorySegment union) {
                return union.asSlice(TestMessage09$OFFSET, TestMessage09$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage09_t TestMessage09
             * }
             */
            public static void TestMessage09(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage09$OFFSET, TestMessage09$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage10$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage10"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage10_t TestMessage10
             * }
             */
            public static final GroupLayout TestMessage10$layout() {
                return TestMessage10$LAYOUT;
            }

            private static final long TestMessage10$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage10_t TestMessage10
             * }
             */
            public static final long TestMessage10$offset() {
                return TestMessage10$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage10_t TestMessage10
             * }
             */
            public static MemorySegment TestMessage10(MemorySegment union) {
                return union.asSlice(TestMessage10$OFFSET, TestMessage10$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage10_t TestMessage10
             * }
             */
            public static void TestMessage10(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage10$OFFSET, TestMessage10$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage11$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage11"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage11_t TestMessage11
             * }
             */
            public static final GroupLayout TestMessage11$layout() {
                return TestMessage11$LAYOUT;
            }

            private static final long TestMessage11$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage11_t TestMessage11
             * }
             */
            public static final long TestMessage11$offset() {
                return TestMessage11$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage11_t TestMessage11
             * }
             */
            public static MemorySegment TestMessage11(MemorySegment union) {
                return union.asSlice(TestMessage11$OFFSET, TestMessage11$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage11_t TestMessage11
             * }
             */
            public static void TestMessage11(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage11$OFFSET, TestMessage11$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage12$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage12"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage12_t TestMessage12
             * }
             */
            public static final GroupLayout TestMessage12$layout() {
                return TestMessage12$LAYOUT;
            }

            private static final long TestMessage12$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage12_t TestMessage12
             * }
             */
            public static final long TestMessage12$offset() {
                return TestMessage12$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage12_t TestMessage12
             * }
             */
            public static MemorySegment TestMessage12(MemorySegment union) {
                return union.asSlice(TestMessage12$OFFSET, TestMessage12$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage12_t TestMessage12
             * }
             */
            public static void TestMessage12(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage12$OFFSET, TestMessage12$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage13$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage13"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage13_t TestMessage13
             * }
             */
            public static final GroupLayout TestMessage13$layout() {
                return TestMessage13$LAYOUT;
            }

            private static final long TestMessage13$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage13_t TestMessage13
             * }
             */
            public static final long TestMessage13$offset() {
                return TestMessage13$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage13_t TestMessage13
             * }
             */
            public static MemorySegment TestMessage13(MemorySegment union) {
                return union.asSlice(TestMessage13$OFFSET, TestMessage13$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage13_t TestMessage13
             * }
             */
            public static void TestMessage13(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage13$OFFSET, TestMessage13$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage14$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage14"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage14_t TestMessage14
             * }
             */
            public static final GroupLayout TestMessage14$layout() {
                return TestMessage14$LAYOUT;
            }

            private static final long TestMessage14$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage14_t TestMessage14
             * }
             */
            public static final long TestMessage14$offset() {
                return TestMessage14$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage14_t TestMessage14
             * }
             */
            public static MemorySegment TestMessage14(MemorySegment union) {
                return union.asSlice(TestMessage14$OFFSET, TestMessage14$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage14_t TestMessage14
             * }
             */
            public static void TestMessage14(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage14$OFFSET, TestMessage14$LAYOUT.byteSize());
            }

            private static final GroupLayout TestMessage15$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TestMessage15"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TestMessage15_t TestMessage15
             * }
             */
            public static final GroupLayout TestMessage15$layout() {
                return TestMessage15$LAYOUT;
            }

            private static final long TestMessage15$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TestMessage15_t TestMessage15
             * }
             */
            public static final long TestMessage15$offset() {
                return TestMessage15$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TestMessage15_t TestMessage15
             * }
             */
            public static MemorySegment TestMessage15(MemorySegment union) {
                return union.asSlice(TestMessage15$OFFSET, TestMessage15$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TestMessage15_t TestMessage15
             * }
             */
            public static void TestMessage15(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, TestMessage15$OFFSET, TestMessage15$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union MessageFrame__value_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union MessageFrame__value_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union MessageFrame__value_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union MessageFrame__value_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 576;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout value$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct MessageFrame__value value
     * }
     */
    public static final GroupLayout value$layout() {
        return value$LAYOUT;
    }

    private static final long value$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct MessageFrame__value value
     * }
     */
    public static final long value$offset() {
        return value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct MessageFrame__value value
     * }
     */
    public static MemorySegment value(MemorySegment struct) {
        return struct.asSlice(value$OFFSET, value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct MessageFrame__value value
     * }
     */
    public static void value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, value$OFFSET, value$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

