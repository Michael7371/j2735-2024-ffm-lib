// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PathHistoryPoint {
 *     OffsetLL_B18_t latOffset;
 *     OffsetLL_B18_t lonOffset;
 *     VertOffset_B12_t elevationOffset;
 *     TimeOffset_t timeOffset;
 *     Speed_t *speed;
 *     struct PositionalAccuracy *posAccuracy;
 *     CoarseHeading_t *heading;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class PathHistoryPoint {

    PathHistoryPoint() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("latOffset"),
        MessageFrame_h.C_LONG.withName("lonOffset"),
        MessageFrame_h.C_LONG.withName("elevationOffset"),
        MessageFrame_h.C_LONG.withName("timeOffset"),
        MessageFrame_h.C_POINTER.withName("speed"),
        MessageFrame_h.C_POINTER.withName("posAccuracy"),
        MessageFrame_h.C_POINTER.withName("heading"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("PathHistoryPoint");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong latOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("latOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t latOffset
     * }
     */
    public static final OfLong latOffset$layout() {
        return latOffset$LAYOUT;
    }

    private static final long latOffset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t latOffset
     * }
     */
    public static final long latOffset$offset() {
        return latOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t latOffset
     * }
     */
    public static long latOffset(MemorySegment struct) {
        return struct.get(latOffset$LAYOUT, latOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t latOffset
     * }
     */
    public static void latOffset(MemorySegment struct, long fieldValue) {
        struct.set(latOffset$LAYOUT, latOffset$OFFSET, fieldValue);
    }

    private static final OfLong lonOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lonOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t lonOffset
     * }
     */
    public static final OfLong lonOffset$layout() {
        return lonOffset$LAYOUT;
    }

    private static final long lonOffset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t lonOffset
     * }
     */
    public static final long lonOffset$offset() {
        return lonOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t lonOffset
     * }
     */
    public static long lonOffset(MemorySegment struct) {
        return struct.get(lonOffset$LAYOUT, lonOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OffsetLL_B18_t lonOffset
     * }
     */
    public static void lonOffset(MemorySegment struct, long fieldValue) {
        struct.set(lonOffset$LAYOUT, lonOffset$OFFSET, fieldValue);
    }

    private static final OfLong elevationOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elevationOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VertOffset_B12_t elevationOffset
     * }
     */
    public static final OfLong elevationOffset$layout() {
        return elevationOffset$LAYOUT;
    }

    private static final long elevationOffset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VertOffset_B12_t elevationOffset
     * }
     */
    public static final long elevationOffset$offset() {
        return elevationOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VertOffset_B12_t elevationOffset
     * }
     */
    public static long elevationOffset(MemorySegment struct) {
        return struct.get(elevationOffset$LAYOUT, elevationOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VertOffset_B12_t elevationOffset
     * }
     */
    public static void elevationOffset(MemorySegment struct, long fieldValue) {
        struct.set(elevationOffset$LAYOUT, elevationOffset$OFFSET, fieldValue);
    }

    private static final OfLong timeOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("timeOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeOffset_t timeOffset
     * }
     */
    public static final OfLong timeOffset$layout() {
        return timeOffset$LAYOUT;
    }

    private static final long timeOffset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeOffset_t timeOffset
     * }
     */
    public static final long timeOffset$offset() {
        return timeOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeOffset_t timeOffset
     * }
     */
    public static long timeOffset(MemorySegment struct) {
        return struct.get(timeOffset$LAYOUT, timeOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeOffset_t timeOffset
     * }
     */
    public static void timeOffset(MemorySegment struct, long fieldValue) {
        struct.set(timeOffset$LAYOUT, timeOffset$OFFSET, fieldValue);
    }

    private static final AddressLayout speed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *speed
     * }
     */
    public static final AddressLayout speed$layout() {
        return speed$LAYOUT;
    }

    private static final long speed$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *speed
     * }
     */
    public static final long speed$offset() {
        return speed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *speed
     * }
     */
    public static MemorySegment speed(MemorySegment struct) {
        return struct.get(speed$LAYOUT, speed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *speed
     * }
     */
    public static void speed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speed$LAYOUT, speed$OFFSET, fieldValue);
    }

    private static final AddressLayout posAccuracy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("posAccuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static final AddressLayout posAccuracy$layout() {
        return posAccuracy$LAYOUT;
    }

    private static final long posAccuracy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static final long posAccuracy$offset() {
        return posAccuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static MemorySegment posAccuracy(MemorySegment struct) {
        return struct.get(posAccuracy$LAYOUT, posAccuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static void posAccuracy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(posAccuracy$LAYOUT, posAccuracy$OFFSET, fieldValue);
    }

    private static final AddressLayout heading$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("heading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CoarseHeading_t *heading
     * }
     */
    public static final AddressLayout heading$layout() {
        return heading$LAYOUT;
    }

    private static final long heading$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CoarseHeading_t *heading
     * }
     */
    public static final long heading$offset() {
        return heading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CoarseHeading_t *heading
     * }
     */
    public static MemorySegment heading(MemorySegment struct) {
        return struct.get(heading$LAYOUT, heading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CoarseHeading_t *heading
     * }
     */
    public static void heading(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(heading$LAYOUT, heading$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

