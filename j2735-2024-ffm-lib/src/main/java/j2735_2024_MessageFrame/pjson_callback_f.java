// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef int (pjson_callback_f)(pjson_chunk_type_e, const void *, size_t, void *)
 * }
 */
public class pjson_callback_f {

    pjson_callback_f() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(int _type, MemorySegment _chunk_data, long _chunk_size, MemorySegment _key);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        MessageFrame_h.C_INT,
        MessageFrame_h.C_INT,
        MessageFrame_h.C_POINTER,
        MessageFrame_h.C_LONG,
        MessageFrame_h.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr,int _type, MemorySegment _chunk_data, long _chunk_size, MemorySegment _key) {
        try {
            return (int) DOWN$MH.invokeExact(funcPtr, _type, _chunk_data, _chunk_size, _key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

