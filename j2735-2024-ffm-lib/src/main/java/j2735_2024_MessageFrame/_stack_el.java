// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _stack_el {
 *     ber_tlv_len_t left;
 *     ber_tlv_len_t got;
 *     unsigned int cont_level;
 *     int want_nulls;
 *     int bits_chopped;
 *     ber_tlv_tag_t tag;
 *     struct _stack_el *prev;
 *     struct _stack_el *next;
 * }
 * }
 */
public class _stack_el {

    _stack_el() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("left"),
        MessageFrame_h.C_LONG.withName("got"),
        MessageFrame_h.C_INT.withName("cont_level"),
        MessageFrame_h.C_INT.withName("want_nulls"),
        MessageFrame_h.C_INT.withName("bits_chopped"),
        MessageFrame_h.C_INT.withName("tag"),
        MessageFrame_h.C_POINTER.withName("prev"),
        MessageFrame_h.C_POINTER.withName("next")
    ).withName("_stack_el");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong left$LAYOUT = (OfLong)$LAYOUT.select(groupElement("left"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static final OfLong left$layout() {
        return left$LAYOUT;
    }

    private static final long left$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static final long left$offset() {
        return left$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static long left(MemorySegment struct) {
        return struct.get(left$LAYOUT, left$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t left
     * }
     */
    public static void left(MemorySegment struct, long fieldValue) {
        struct.set(left$LAYOUT, left$OFFSET, fieldValue);
    }

    private static final OfLong got$LAYOUT = (OfLong)$LAYOUT.select(groupElement("got"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_tlv_len_t got
     * }
     */
    public static final OfLong got$layout() {
        return got$LAYOUT;
    }

    private static final long got$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_tlv_len_t got
     * }
     */
    public static final long got$offset() {
        return got$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t got
     * }
     */
    public static long got(MemorySegment struct) {
        return struct.get(got$LAYOUT, got$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_tlv_len_t got
     * }
     */
    public static void got(MemorySegment struct, long fieldValue) {
        struct.set(got$LAYOUT, got$OFFSET, fieldValue);
    }

    private static final OfInt cont_level$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cont_level"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int cont_level
     * }
     */
    public static final OfInt cont_level$layout() {
        return cont_level$LAYOUT;
    }

    private static final long cont_level$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int cont_level
     * }
     */
    public static final long cont_level$offset() {
        return cont_level$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int cont_level
     * }
     */
    public static int cont_level(MemorySegment struct) {
        return struct.get(cont_level$LAYOUT, cont_level$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int cont_level
     * }
     */
    public static void cont_level(MemorySegment struct, int fieldValue) {
        struct.set(cont_level$LAYOUT, cont_level$OFFSET, fieldValue);
    }

    private static final OfInt want_nulls$LAYOUT = (OfInt)$LAYOUT.select(groupElement("want_nulls"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int want_nulls
     * }
     */
    public static final OfInt want_nulls$layout() {
        return want_nulls$LAYOUT;
    }

    private static final long want_nulls$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int want_nulls
     * }
     */
    public static final long want_nulls$offset() {
        return want_nulls$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int want_nulls
     * }
     */
    public static int want_nulls(MemorySegment struct) {
        return struct.get(want_nulls$LAYOUT, want_nulls$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int want_nulls
     * }
     */
    public static void want_nulls(MemorySegment struct, int fieldValue) {
        struct.set(want_nulls$LAYOUT, want_nulls$OFFSET, fieldValue);
    }

    private static final OfInt bits_chopped$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bits_chopped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int bits_chopped
     * }
     */
    public static final OfInt bits_chopped$layout() {
        return bits_chopped$LAYOUT;
    }

    private static final long bits_chopped$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int bits_chopped
     * }
     */
    public static final long bits_chopped$offset() {
        return bits_chopped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int bits_chopped
     * }
     */
    public static int bits_chopped(MemorySegment struct) {
        return struct.get(bits_chopped$LAYOUT, bits_chopped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int bits_chopped
     * }
     */
    public static void bits_chopped(MemorySegment struct, int fieldValue) {
        struct.set(bits_chopped$LAYOUT, bits_chopped$OFFSET, fieldValue);
    }

    private static final OfInt tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t tag
     * }
     */
    public static final OfInt tag$layout() {
        return tag$LAYOUT;
    }

    private static final long tag$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t tag
     * }
     */
    public static final long tag$offset() {
        return tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t tag
     * }
     */
    public static int tag(MemorySegment struct) {
        return struct.get(tag$LAYOUT, tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t tag
     * }
     */
    public static void tag(MemorySegment struct, int fieldValue) {
        struct.set(tag$LAYOUT, tag$OFFSET, fieldValue);
    }

    private static final AddressLayout prev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _stack_el *prev
     * }
     */
    public static final AddressLayout prev$layout() {
        return prev$LAYOUT;
    }

    private static final long prev$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _stack_el *prev
     * }
     */
    public static final long prev$offset() {
        return prev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _stack_el *prev
     * }
     */
    public static MemorySegment prev(MemorySegment struct) {
        return struct.get(prev$LAYOUT, prev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _stack_el *prev
     * }
     */
    public static void prev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prev$LAYOUT, prev$OFFSET, fieldValue);
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct _stack_el *next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct _stack_el *next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct _stack_el *next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct _stack_el *next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

