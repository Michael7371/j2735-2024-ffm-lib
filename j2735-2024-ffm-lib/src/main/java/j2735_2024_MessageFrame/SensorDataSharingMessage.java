// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SensorDataSharingMessage {
 *     Common_MsgCount_t msgCnt;
 *     TemporaryID_t sourceID;
 *     EquipmentType_t equipmentType;
 *     DDateTime_t sDSMTimeStamp;
 *     Position3D_t refPos;
 *     PositionalAccuracy_t refPosXYConf;
 *     ElevationConfidence_t *refPosElConf;
 *     DetectedObjectList_t objects;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SensorDataSharingMessage {

    SensorDataSharingMessage() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("msgCnt"),
        OCTET_STRING.layout().withName("sourceID"),
        MessageFrame_h.C_LONG.withName("equipmentType"),
        DDateTime.layout().withName("sDSMTimeStamp"),
        Position3D.layout().withName("refPos"),
        PositionalAccuracy.layout().withName("refPosXYConf"),
        MessageFrame_h.C_POINTER.withName("refPosElConf"),
        DetectedObjectList.layout().withName("objects"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SensorDataSharingMessage");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong msgCnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("msgCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final OfLong msgCnt$layout() {
        return msgCnt$LAYOUT;
    }

    private static final long msgCnt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final long msgCnt$offset() {
        return msgCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static long msgCnt(MemorySegment struct) {
        return struct.get(msgCnt$LAYOUT, msgCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static void msgCnt(MemorySegment struct, long fieldValue) {
        struct.set(msgCnt$LAYOUT, msgCnt$OFFSET, fieldValue);
    }

    private static final GroupLayout sourceID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sourceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t sourceID
     * }
     */
    public static final GroupLayout sourceID$layout() {
        return sourceID$LAYOUT;
    }

    private static final long sourceID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t sourceID
     * }
     */
    public static final long sourceID$offset() {
        return sourceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t sourceID
     * }
     */
    public static MemorySegment sourceID(MemorySegment struct) {
        return struct.asSlice(sourceID$OFFSET, sourceID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t sourceID
     * }
     */
    public static void sourceID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sourceID$OFFSET, sourceID$LAYOUT.byteSize());
    }

    private static final OfLong equipmentType$LAYOUT = (OfLong)$LAYOUT.select(groupElement("equipmentType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * EquipmentType_t equipmentType
     * }
     */
    public static final OfLong equipmentType$layout() {
        return equipmentType$LAYOUT;
    }

    private static final long equipmentType$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * EquipmentType_t equipmentType
     * }
     */
    public static final long equipmentType$offset() {
        return equipmentType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * EquipmentType_t equipmentType
     * }
     */
    public static long equipmentType(MemorySegment struct) {
        return struct.get(equipmentType$LAYOUT, equipmentType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * EquipmentType_t equipmentType
     * }
     */
    public static void equipmentType(MemorySegment struct, long fieldValue) {
        struct.set(equipmentType$LAYOUT, equipmentType$OFFSET, fieldValue);
    }

    private static final GroupLayout sDSMTimeStamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sDSMTimeStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t sDSMTimeStamp
     * }
     */
    public static final GroupLayout sDSMTimeStamp$layout() {
        return sDSMTimeStamp$LAYOUT;
    }

    private static final long sDSMTimeStamp$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t sDSMTimeStamp
     * }
     */
    public static final long sDSMTimeStamp$offset() {
        return sDSMTimeStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t sDSMTimeStamp
     * }
     */
    public static MemorySegment sDSMTimeStamp(MemorySegment struct) {
        return struct.asSlice(sDSMTimeStamp$OFFSET, sDSMTimeStamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t sDSMTimeStamp
     * }
     */
    public static void sDSMTimeStamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sDSMTimeStamp$OFFSET, sDSMTimeStamp$LAYOUT.byteSize());
    }

    private static final GroupLayout refPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("refPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Position3D_t refPos
     * }
     */
    public static final GroupLayout refPos$layout() {
        return refPos$LAYOUT;
    }

    private static final long refPos$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Position3D_t refPos
     * }
     */
    public static final long refPos$offset() {
        return refPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Position3D_t refPos
     * }
     */
    public static MemorySegment refPos(MemorySegment struct) {
        return struct.asSlice(refPos$OFFSET, refPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Position3D_t refPos
     * }
     */
    public static void refPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, refPos$OFFSET, refPos$LAYOUT.byteSize());
    }

    private static final GroupLayout refPosXYConf$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("refPosXYConf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t refPosXYConf
     * }
     */
    public static final GroupLayout refPosXYConf$layout() {
        return refPosXYConf$LAYOUT;
    }

    private static final long refPosXYConf$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t refPosXYConf
     * }
     */
    public static final long refPosXYConf$offset() {
        return refPosXYConf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t refPosXYConf
     * }
     */
    public static MemorySegment refPosXYConf(MemorySegment struct) {
        return struct.asSlice(refPosXYConf$OFFSET, refPosXYConf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t refPosXYConf
     * }
     */
    public static void refPosXYConf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, refPosXYConf$OFFSET, refPosXYConf$LAYOUT.byteSize());
    }

    private static final AddressLayout refPosElConf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("refPosElConf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ElevationConfidence_t *refPosElConf
     * }
     */
    public static final AddressLayout refPosElConf$layout() {
        return refPosElConf$LAYOUT;
    }

    private static final long refPosElConf$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ElevationConfidence_t *refPosElConf
     * }
     */
    public static final long refPosElConf$offset() {
        return refPosElConf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ElevationConfidence_t *refPosElConf
     * }
     */
    public static MemorySegment refPosElConf(MemorySegment struct) {
        return struct.get(refPosElConf$LAYOUT, refPosElConf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ElevationConfidence_t *refPosElConf
     * }
     */
    public static void refPosElConf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(refPosElConf$LAYOUT, refPosElConf$OFFSET, fieldValue);
    }

    private static final GroupLayout objects$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("objects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DetectedObjectList_t objects
     * }
     */
    public static final GroupLayout objects$layout() {
        return objects$LAYOUT;
    }

    private static final long objects$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DetectedObjectList_t objects
     * }
     */
    public static final long objects$offset() {
        return objects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DetectedObjectList_t objects
     * }
     */
    public static MemorySegment objects(MemorySegment struct) {
        return struct.asSlice(objects$OFFSET, objects$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DetectedObjectList_t objects
     * }
     */
    public static void objects(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, objects$OFFSET, objects$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

