package j2735ffm;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Formatter;

import static j2735_2024_MessageFrame.MessageFrame_h.*;
import j2735_2024_MessageFrame.*;

/**
 * Functions for interconverting J2735 (2024) MessageFrames between XER, JER, and UPER encodings
 * by calling native functions generated by asn1c.
 *
 * @author Ivan Yourshaw
 */
public class MessageFrameCodec {

    public final long textBufferSize;
    public final long uperBufferSize;

    public MessageFrameCodec() {
        this.textBufferSize = 65536L;
        this.uperBufferSize = 4096L;
    }

    public MessageFrameCodec(long textBufferSize, long uperBufferSize) {
        this.textBufferSize = textBufferSize;
        this.uperBufferSize = uperBufferSize;
    }

    /**
     * Output to stdout text representing the ASN.1 object generated by the native 'asn_fprint' function.
     * @param xer An XER encoded MessageFrame
     * @return Summary and error information
     */
    public String xerAsnFprint(String xer) {
        byte[] xmlBytes = xer.getBytes(StandardCharsets.UTF_8);
        ByteBuffer bb = ByteBuffer.wrap(xmlBytes);
        MemorySegment heapXml = MemorySegment.ofBuffer(bb);
        var sb = new StringBuilder();
        var f = new Formatter(sb);

        try (var arena = Arena.ofShared()) {
            MemorySegment optCodecParameters = asn_codec_ctx_t.allocate(arena);

            // I'm unsure of the significance of this parameter or what a good value for it would be
            // so it is set to a random value.
            asn_codec_ctx_t.max_stack_size(optCodecParameters, 2048);

            MemorySegment typeToDecode = asn_DEF_MessageFrame();

            // The result Message Frame
            MemorySegment messageFrame = MessageFrame_t.allocate(arena);

            // Pointer to the result Message Frame
            MemorySegment structurePtr = arena.allocate(8);
            structurePtr.set(ValueLayout.JAVA_LONG, 0, messageFrame.address());

            //long bufferSize = 65536;
            MemorySegment buffer = arena.allocate(textBufferSize);
            buffer.copyFrom(heapXml);
            MemorySegment er = asn_decode(arena, optCodecParameters, ATS_BASIC_XER(), typeToDecode, structurePtr,
                    buffer, textBufferSize);
            long retCode = asn_dec_rval_t.code(er);
            long consumed = asn_dec_rval_t.consumed(er);
            f.format("Ret code: %s. Consumer: %s%n", retCode, consumed);

            long messagePointer = structurePtr.get(ValueLayout.JAVA_LONG, 0);
            f.format("MessageFrame pointer: %s%n", messagePointer);

            long messageId = MessageFrame_t.messageId(messageFrame);
            f.format("Message ID: %s%n", messageId);

            int printResult = asn_fprint(stdout(), typeToDecode, messageFrame);
            f.format("Print result: %s%n", printResult);

        }
        return sb.toString();
    }

    public byte[] xerToUper(String xer) {
        byte[] xmlBytes = xer.getBytes(StandardCharsets.UTF_8);
//        ByteBuffer bb = ByteBuffer.wrap(xmlBytes);
        MemorySegment heapXml = MemorySegment.ofArray(xmlBytes);

        //int outputBufferSize = 16384;
        byte[] outputArray = new byte[(int) uperBufferSize];
        MemorySegment heapOutput = MemorySegment.ofArray(outputArray);

        try (var arena = Arena.ofConfined()) {
            MemorySegment optCodecParameters = asn_codec_ctx_t.allocate(arena);
            asn_codec_ctx_t.max_stack_size(optCodecParameters, 2048);
            MemorySegment typeToDecode = asn_DEF_MessageFrame();

            // The result Message Frame
            MemorySegment messageFrame = MessageFrame_t.allocate(arena);

            // Pointer to the result Message Frame
            MemorySegment structurePtr = arena.allocate(8);
            structurePtr.set(ValueLayout.JAVA_LONG, 0, messageFrame.address());

            //long bufferSize = 65536;
            MemorySegment buffer = arena.allocate(textBufferSize);
            buffer.copyFrom(heapXml);
            MemorySegment er = asn_decode(arena, optCodecParameters, ATS_BASIC_XER(), typeToDecode, structurePtr,
                    buffer, textBufferSize);
            long retCode = asn_dec_rval_t.code(er);
            long consumed = asn_dec_rval_t.consumed(er);
            System.out.println("Ret code: " + retCode + ", Consumed: " + consumed);

//            long messagePointer = structurePtr.get(ValueLayout.JAVA_LONG, 0);
//            System.out.println("MessageFrame pointer: " + messagePointer);

            long messageId = MessageFrame_t.messageId(messageFrame);
            System.out.println("Message ID: " + messageId);

            int printResult = asn_fprint(stdout(), typeToDecode, messageFrame);
            System.out.println("Print result: " + printResult);


            MemorySegment outputBuffer = arena.allocate(uperBufferSize);

            MemorySegment erEnc = asn_encode_to_buffer(arena, optCodecParameters, ATS_UNALIGNED_BASIC_PER(),
                    typeToDecode, messageFrame, outputBuffer, uperBufferSize);
            long encoded = asn_enc_rval_t.encoded(erEnc);
            if (encoded > -1) {
                System.out.printf("Encoded %s bytes%n", encoded);
                heapOutput.copyFrom(outputBuffer);
                return Arrays.copyOfRange(outputArray, 0, (int)encoded);
            } else {
                System.out.println("Error");
                throw new RuntimeException("Error encoding");
                // Check the error info
                // fprintf(stderr, ”Cannot encode %s: %s\n”, er.failed_typeି >name, strerror(errno))
                // Need c function to expose errno macro
            }

        }
    }

    public byte[] jerToUper(String jer) {
        return null;
    }

    public String uperToXer(byte[] uper) {
        return null;
    }

    public String uperToJer(byte[] uper) {
        return null;
    }

    public String xerToJer(String xer) {
        return null;
    }

    public String jerToXer(String jer) {
        return null;
    }

    private MemorySegment xerToMessageFrame(Arena arena, String xer) {
        return null;
    }

    private MemorySegment jerToMessageFrame(Arena arena, String jer) {
        return null;
    }

    private MemorySegment uperToMessageFrame(Arena arena, byte[] uper) {
        return null;
    }


}
