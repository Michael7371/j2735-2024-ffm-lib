// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Lpn {
 *     CountryCode_t countryCode;
 *     long alphabetIndicator;
 *     OCTET_STRING_t licencePlateNumber;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class Lpn {

    Lpn() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        BIT_STRING_s.layout().withName("countryCode"),
        MessageFrame_h.C_LONG.withName("alphabetIndicator"),
        OCTET_STRING.layout().withName("licencePlateNumber"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("Lpn");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout countryCode$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("countryCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CountryCode_t countryCode
     * }
     */
    public static final GroupLayout countryCode$layout() {
        return countryCode$LAYOUT;
    }

    private static final long countryCode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CountryCode_t countryCode
     * }
     */
    public static final long countryCode$offset() {
        return countryCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CountryCode_t countryCode
     * }
     */
    public static MemorySegment countryCode(MemorySegment struct) {
        return struct.asSlice(countryCode$OFFSET, countryCode$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CountryCode_t countryCode
     * }
     */
    public static void countryCode(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, countryCode$OFFSET, countryCode$LAYOUT.byteSize());
    }

    private static final OfLong alphabetIndicator$LAYOUT = (OfLong)$LAYOUT.select(groupElement("alphabetIndicator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long alphabetIndicator
     * }
     */
    public static final OfLong alphabetIndicator$layout() {
        return alphabetIndicator$LAYOUT;
    }

    private static final long alphabetIndicator$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long alphabetIndicator
     * }
     */
    public static final long alphabetIndicator$offset() {
        return alphabetIndicator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long alphabetIndicator
     * }
     */
    public static long alphabetIndicator(MemorySegment struct) {
        return struct.get(alphabetIndicator$LAYOUT, alphabetIndicator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long alphabetIndicator
     * }
     */
    public static void alphabetIndicator(MemorySegment struct, long fieldValue) {
        struct.set(alphabetIndicator$LAYOUT, alphabetIndicator$OFFSET, fieldValue);
    }

    private static final GroupLayout licencePlateNumber$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("licencePlateNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCTET_STRING_t licencePlateNumber
     * }
     */
    public static final GroupLayout licencePlateNumber$layout() {
        return licencePlateNumber$LAYOUT;
    }

    private static final long licencePlateNumber$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCTET_STRING_t licencePlateNumber
     * }
     */
    public static final long licencePlateNumber$offset() {
        return licencePlateNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t licencePlateNumber
     * }
     */
    public static MemorySegment licencePlateNumber(MemorySegment struct) {
        return struct.asSlice(licencePlateNumber$OFFSET, licencePlateNumber$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t licencePlateNumber
     * }
     */
    public static void licencePlateNumber(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, licencePlateNumber$OFFSET, licencePlateNumber$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

