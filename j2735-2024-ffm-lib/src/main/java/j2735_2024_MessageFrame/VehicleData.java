// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VehicleData {
 *     VehicleHeight_t *height;
 *     struct BumperHeights *bumpers;
 *     VehicleMass_t *mass;
 *     TrailerWeight_t *doNotUse;
 *     BOOLEAN_t *trailerPresent;
 *     struct PivotPointDescription *pivotPoint;
 *     struct Axles *axles;
 *     long *leanAngle;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class VehicleData {

    VehicleData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("height"),
        MessageFrame_h.C_POINTER.withName("bumpers"),
        MessageFrame_h.C_POINTER.withName("mass"),
        MessageFrame_h.C_POINTER.withName("doNotUse"),
        MessageFrame_h.C_POINTER.withName("trailerPresent"),
        MessageFrame_h.C_POINTER.withName("pivotPoint"),
        MessageFrame_h.C_POINTER.withName("axles"),
        MessageFrame_h.C_POINTER.withName("leanAngle"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("VehicleData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout height$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final AddressLayout height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static MemorySegment height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static void height(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final AddressLayout bumpers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bumpers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumpers
     * }
     */
    public static final AddressLayout bumpers$layout() {
        return bumpers$LAYOUT;
    }

    private static final long bumpers$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumpers
     * }
     */
    public static final long bumpers$offset() {
        return bumpers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumpers
     * }
     */
    public static MemorySegment bumpers(MemorySegment struct) {
        return struct.get(bumpers$LAYOUT, bumpers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumpers
     * }
     */
    public static void bumpers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bumpers$LAYOUT, bumpers$OFFSET, fieldValue);
    }

    private static final AddressLayout mass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleMass_t *mass
     * }
     */
    public static final AddressLayout mass$layout() {
        return mass$LAYOUT;
    }

    private static final long mass$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleMass_t *mass
     * }
     */
    public static final long mass$offset() {
        return mass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleMass_t *mass
     * }
     */
    public static MemorySegment mass(MemorySegment struct) {
        return struct.get(mass$LAYOUT, mass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleMass_t *mass
     * }
     */
    public static void mass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mass$LAYOUT, mass$OFFSET, fieldValue);
    }

    private static final AddressLayout doNotUse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("doNotUse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrailerWeight_t *doNotUse
     * }
     */
    public static final AddressLayout doNotUse$layout() {
        return doNotUse$LAYOUT;
    }

    private static final long doNotUse$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrailerWeight_t *doNotUse
     * }
     */
    public static final long doNotUse$offset() {
        return doNotUse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrailerWeight_t *doNotUse
     * }
     */
    public static MemorySegment doNotUse(MemorySegment struct) {
        return struct.get(doNotUse$LAYOUT, doNotUse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrailerWeight_t *doNotUse
     * }
     */
    public static void doNotUse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(doNotUse$LAYOUT, doNotUse$OFFSET, fieldValue);
    }

    private static final AddressLayout trailerPresent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trailerPresent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *trailerPresent
     * }
     */
    public static final AddressLayout trailerPresent$layout() {
        return trailerPresent$LAYOUT;
    }

    private static final long trailerPresent$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *trailerPresent
     * }
     */
    public static final long trailerPresent$offset() {
        return trailerPresent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *trailerPresent
     * }
     */
    public static MemorySegment trailerPresent(MemorySegment struct) {
        return struct.get(trailerPresent$LAYOUT, trailerPresent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *trailerPresent
     * }
     */
    public static void trailerPresent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trailerPresent$LAYOUT, trailerPresent$OFFSET, fieldValue);
    }

    private static final AddressLayout pivotPoint$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pivotPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *pivotPoint
     * }
     */
    public static final AddressLayout pivotPoint$layout() {
        return pivotPoint$LAYOUT;
    }

    private static final long pivotPoint$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *pivotPoint
     * }
     */
    public static final long pivotPoint$offset() {
        return pivotPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *pivotPoint
     * }
     */
    public static MemorySegment pivotPoint(MemorySegment struct) {
        return struct.get(pivotPoint$LAYOUT, pivotPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *pivotPoint
     * }
     */
    public static void pivotPoint(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pivotPoint$LAYOUT, pivotPoint$OFFSET, fieldValue);
    }

    private static final AddressLayout axles$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("axles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Axles *axles
     * }
     */
    public static final AddressLayout axles$layout() {
        return axles$LAYOUT;
    }

    private static final long axles$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Axles *axles
     * }
     */
    public static final long axles$offset() {
        return axles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Axles *axles
     * }
     */
    public static MemorySegment axles(MemorySegment struct) {
        return struct.get(axles$LAYOUT, axles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Axles *axles
     * }
     */
    public static void axles(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(axles$LAYOUT, axles$OFFSET, fieldValue);
    }

    private static final AddressLayout leanAngle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("leanAngle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *leanAngle
     * }
     */
    public static final AddressLayout leanAngle$layout() {
        return leanAngle$LAYOUT;
    }

    private static final long leanAngle$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *leanAngle
     * }
     */
    public static final long leanAngle$offset() {
        return leanAngle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *leanAngle
     * }
     */
    public static MemorySegment leanAngle(MemorySegment struct) {
        return struct.get(leanAngle$LAYOUT, leanAngle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *leanAngle
     * }
     */
    public static void leanAngle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(leanAngle$LAYOUT, leanAngle$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

