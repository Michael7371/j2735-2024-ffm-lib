// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_encoding_constraints_s {
 *     const struct asn_oer_constraints_s *oer_constraints;
 *     const struct asn_per_constraints_s *per_constraints;
 *     const struct asn_jer_constraints_s *jer_constraints;
 *     asn_constr_check_f *general_constraints;
 * }
 * }
 */
public class asn_encoding_constraints_s {

    asn_encoding_constraints_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("oer_constraints"),
        MessageFrame_h.C_POINTER.withName("per_constraints"),
        MessageFrame_h.C_POINTER.withName("jer_constraints"),
        MessageFrame_h.C_POINTER.withName("general_constraints")
    ).withName("asn_encoding_constraints_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout oer_constraints$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oer_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct asn_oer_constraints_s *oer_constraints
     * }
     */
    public static final AddressLayout oer_constraints$layout() {
        return oer_constraints$LAYOUT;
    }

    private static final long oer_constraints$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct asn_oer_constraints_s *oer_constraints
     * }
     */
    public static final long oer_constraints$offset() {
        return oer_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct asn_oer_constraints_s *oer_constraints
     * }
     */
    public static MemorySegment oer_constraints(MemorySegment struct) {
        return struct.get(oer_constraints$LAYOUT, oer_constraints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct asn_oer_constraints_s *oer_constraints
     * }
     */
    public static void oer_constraints(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(oer_constraints$LAYOUT, oer_constraints$OFFSET, fieldValue);
    }

    private static final AddressLayout per_constraints$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("per_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct asn_per_constraints_s *per_constraints
     * }
     */
    public static final AddressLayout per_constraints$layout() {
        return per_constraints$LAYOUT;
    }

    private static final long per_constraints$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct asn_per_constraints_s *per_constraints
     * }
     */
    public static final long per_constraints$offset() {
        return per_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct asn_per_constraints_s *per_constraints
     * }
     */
    public static MemorySegment per_constraints(MemorySegment struct) {
        return struct.get(per_constraints$LAYOUT, per_constraints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct asn_per_constraints_s *per_constraints
     * }
     */
    public static void per_constraints(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(per_constraints$LAYOUT, per_constraints$OFFSET, fieldValue);
    }

    private static final AddressLayout jer_constraints$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("jer_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct asn_jer_constraints_s *jer_constraints
     * }
     */
    public static final AddressLayout jer_constraints$layout() {
        return jer_constraints$LAYOUT;
    }

    private static final long jer_constraints$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct asn_jer_constraints_s *jer_constraints
     * }
     */
    public static final long jer_constraints$offset() {
        return jer_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct asn_jer_constraints_s *jer_constraints
     * }
     */
    public static MemorySegment jer_constraints(MemorySegment struct) {
        return struct.get(jer_constraints$LAYOUT, jer_constraints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct asn_jer_constraints_s *jer_constraints
     * }
     */
    public static void jer_constraints(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(jer_constraints$LAYOUT, jer_constraints$OFFSET, fieldValue);
    }

    private static final AddressLayout general_constraints$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("general_constraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_constr_check_f *general_constraints
     * }
     */
    public static final AddressLayout general_constraints$layout() {
        return general_constraints$LAYOUT;
    }

    private static final long general_constraints$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_constr_check_f *general_constraints
     * }
     */
    public static final long general_constraints$offset() {
        return general_constraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_constr_check_f *general_constraints
     * }
     */
    public static MemorySegment general_constraints(MemorySegment struct) {
        return struct.get(general_constraints$LAYOUT, general_constraints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_constr_check_f *general_constraints
     * }
     */
    public static void general_constraints(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(general_constraints$LAYOUT, general_constraints$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

