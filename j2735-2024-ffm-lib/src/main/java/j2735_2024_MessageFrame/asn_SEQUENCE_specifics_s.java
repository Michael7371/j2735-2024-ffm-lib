// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_SEQUENCE_specifics_s {
 *     unsigned int struct_size;
 *     unsigned int ctx_offset;
 *     const asn_TYPE_tag2member_t *tag2el;
 *     unsigned int tag2el_count;
 *     const int *oms;
 *     unsigned int roms_count;
 *     unsigned int aoms_count;
 *     int first_extension;
 * }
 * }
 */
public class asn_SEQUENCE_specifics_s {

    asn_SEQUENCE_specifics_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("struct_size"),
        MessageFrame_h.C_INT.withName("ctx_offset"),
        MessageFrame_h.C_POINTER.withName("tag2el"),
        MessageFrame_h.C_INT.withName("tag2el_count"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_POINTER.withName("oms"),
        MessageFrame_h.C_INT.withName("roms_count"),
        MessageFrame_h.C_INT.withName("aoms_count"),
        MessageFrame_h.C_INT.withName("first_extension"),
        MemoryLayout.paddingLayout(4)
    ).withName("asn_SEQUENCE_specifics_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt struct_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("struct_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static final OfInt struct_size$layout() {
        return struct_size$LAYOUT;
    }

    private static final long struct_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static final long struct_size$offset() {
        return struct_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static int struct_size(MemorySegment struct) {
        return struct.get(struct_size$LAYOUT, struct_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int struct_size
     * }
     */
    public static void struct_size(MemorySegment struct, int fieldValue) {
        struct.set(struct_size$LAYOUT, struct_size$OFFSET, fieldValue);
    }

    private static final OfInt ctx_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ctx_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static final OfInt ctx_offset$layout() {
        return ctx_offset$LAYOUT;
    }

    private static final long ctx_offset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static final long ctx_offset$offset() {
        return ctx_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static int ctx_offset(MemorySegment struct) {
        return struct.get(ctx_offset$LAYOUT, ctx_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ctx_offset
     * }
     */
    public static void ctx_offset(MemorySegment struct, int fieldValue) {
        struct.set(ctx_offset$LAYOUT, ctx_offset$OFFSET, fieldValue);
    }

    private static final AddressLayout tag2el$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tag2el"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const asn_TYPE_tag2member_t *tag2el
     * }
     */
    public static final AddressLayout tag2el$layout() {
        return tag2el$LAYOUT;
    }

    private static final long tag2el$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const asn_TYPE_tag2member_t *tag2el
     * }
     */
    public static final long tag2el$offset() {
        return tag2el$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const asn_TYPE_tag2member_t *tag2el
     * }
     */
    public static MemorySegment tag2el(MemorySegment struct) {
        return struct.get(tag2el$LAYOUT, tag2el$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const asn_TYPE_tag2member_t *tag2el
     * }
     */
    public static void tag2el(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tag2el$LAYOUT, tag2el$OFFSET, fieldValue);
    }

    private static final OfInt tag2el_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag2el_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int tag2el_count
     * }
     */
    public static final OfInt tag2el_count$layout() {
        return tag2el_count$LAYOUT;
    }

    private static final long tag2el_count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int tag2el_count
     * }
     */
    public static final long tag2el_count$offset() {
        return tag2el_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int tag2el_count
     * }
     */
    public static int tag2el_count(MemorySegment struct) {
        return struct.get(tag2el_count$LAYOUT, tag2el_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int tag2el_count
     * }
     */
    public static void tag2el_count(MemorySegment struct, int fieldValue) {
        struct.set(tag2el_count$LAYOUT, tag2el_count$OFFSET, fieldValue);
    }

    private static final AddressLayout oms$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const int *oms
     * }
     */
    public static final AddressLayout oms$layout() {
        return oms$LAYOUT;
    }

    private static final long oms$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const int *oms
     * }
     */
    public static final long oms$offset() {
        return oms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const int *oms
     * }
     */
    public static MemorySegment oms(MemorySegment struct) {
        return struct.get(oms$LAYOUT, oms$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const int *oms
     * }
     */
    public static void oms(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(oms$LAYOUT, oms$OFFSET, fieldValue);
    }

    private static final OfInt roms_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("roms_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int roms_count
     * }
     */
    public static final OfInt roms_count$layout() {
        return roms_count$LAYOUT;
    }

    private static final long roms_count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int roms_count
     * }
     */
    public static final long roms_count$offset() {
        return roms_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int roms_count
     * }
     */
    public static int roms_count(MemorySegment struct) {
        return struct.get(roms_count$LAYOUT, roms_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int roms_count
     * }
     */
    public static void roms_count(MemorySegment struct, int fieldValue) {
        struct.set(roms_count$LAYOUT, roms_count$OFFSET, fieldValue);
    }

    private static final OfInt aoms_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("aoms_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int aoms_count
     * }
     */
    public static final OfInt aoms_count$layout() {
        return aoms_count$LAYOUT;
    }

    private static final long aoms_count$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int aoms_count
     * }
     */
    public static final long aoms_count$offset() {
        return aoms_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int aoms_count
     * }
     */
    public static int aoms_count(MemorySegment struct) {
        return struct.get(aoms_count$LAYOUT, aoms_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int aoms_count
     * }
     */
    public static void aoms_count(MemorySegment struct, int fieldValue) {
        struct.set(aoms_count$LAYOUT, aoms_count$OFFSET, fieldValue);
    }

    private static final OfInt first_extension$LAYOUT = (OfInt)$LAYOUT.select(groupElement("first_extension"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int first_extension
     * }
     */
    public static final OfInt first_extension$layout() {
        return first_extension$LAYOUT;
    }

    private static final long first_extension$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int first_extension
     * }
     */
    public static final long first_extension$offset() {
        return first_extension$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int first_extension
     * }
     */
    public static int first_extension(MemorySegment struct) {
        return struct.get(first_extension$LAYOUT, first_extension$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int first_extension
     * }
     */
    public static void first_extension(MemorySegment struct, int fieldValue) {
        struct.set(first_extension$LAYOUT, first_extension$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

