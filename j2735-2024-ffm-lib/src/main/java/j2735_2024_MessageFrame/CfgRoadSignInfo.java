// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgRoadSignInfo {
 *     CfgRoadSignTypes_t roadsignDetection;
 *     long *lowRoadsignReflect1;
 *     long *lowRoadsignReflect2;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgRoadSignInfo {

    CfgRoadSignInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        CfgRoadSignTypes.layout().withName("roadsignDetection"),
        MessageFrame_h.C_POINTER.withName("lowRoadsignReflect1"),
        MessageFrame_h.C_POINTER.withName("lowRoadsignReflect2"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgRoadSignInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout roadsignDetection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("roadsignDetection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CfgRoadSignTypes_t roadsignDetection
     * }
     */
    public static final GroupLayout roadsignDetection$layout() {
        return roadsignDetection$LAYOUT;
    }

    private static final long roadsignDetection$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CfgRoadSignTypes_t roadsignDetection
     * }
     */
    public static final long roadsignDetection$offset() {
        return roadsignDetection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CfgRoadSignTypes_t roadsignDetection
     * }
     */
    public static MemorySegment roadsignDetection(MemorySegment struct) {
        return struct.asSlice(roadsignDetection$OFFSET, roadsignDetection$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CfgRoadSignTypes_t roadsignDetection
     * }
     */
    public static void roadsignDetection(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, roadsignDetection$OFFSET, roadsignDetection$LAYOUT.byteSize());
    }

    private static final AddressLayout lowRoadsignReflect1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lowRoadsignReflect1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect1
     * }
     */
    public static final AddressLayout lowRoadsignReflect1$layout() {
        return lowRoadsignReflect1$LAYOUT;
    }

    private static final long lowRoadsignReflect1$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect1
     * }
     */
    public static final long lowRoadsignReflect1$offset() {
        return lowRoadsignReflect1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect1
     * }
     */
    public static MemorySegment lowRoadsignReflect1(MemorySegment struct) {
        return struct.get(lowRoadsignReflect1$LAYOUT, lowRoadsignReflect1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect1
     * }
     */
    public static void lowRoadsignReflect1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lowRoadsignReflect1$LAYOUT, lowRoadsignReflect1$OFFSET, fieldValue);
    }

    private static final AddressLayout lowRoadsignReflect2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lowRoadsignReflect2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect2
     * }
     */
    public static final AddressLayout lowRoadsignReflect2$layout() {
        return lowRoadsignReflect2$LAYOUT;
    }

    private static final long lowRoadsignReflect2$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect2
     * }
     */
    public static final long lowRoadsignReflect2$offset() {
        return lowRoadsignReflect2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect2
     * }
     */
    public static MemorySegment lowRoadsignReflect2(MemorySegment struct) {
        return struct.get(lowRoadsignReflect2$LAYOUT, lowRoadsignReflect2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *lowRoadsignReflect2
     * }
     */
    public static void lowRoadsignReflect2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lowRoadsignReflect2$LAYOUT, lowRoadsignReflect2$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

