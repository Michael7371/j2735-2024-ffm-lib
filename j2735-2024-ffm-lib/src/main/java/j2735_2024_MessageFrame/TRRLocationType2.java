// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TRRLocationType2 {
 *     TRRLength_t safetyGap;
 *     struct SurroundingVehicleInfo *frontSideVehicle;
 *     struct SurroundingVehicleInfo *rearSideVehicle;
 *     TRRLength_t *tRRLength;
 *     LaneOffset_t laneOffset;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TRRLocationType2 {

    TRRLocationType2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("safetyGap"),
        MessageFrame_h.C_POINTER.withName("frontSideVehicle"),
        MessageFrame_h.C_POINTER.withName("rearSideVehicle"),
        MessageFrame_h.C_POINTER.withName("tRRLength"),
        MessageFrame_h.C_LONG.withName("laneOffset"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TRRLocationType2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong safetyGap$LAYOUT = (OfLong)$LAYOUT.select(groupElement("safetyGap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TRRLength_t safetyGap
     * }
     */
    public static final OfLong safetyGap$layout() {
        return safetyGap$LAYOUT;
    }

    private static final long safetyGap$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TRRLength_t safetyGap
     * }
     */
    public static final long safetyGap$offset() {
        return safetyGap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TRRLength_t safetyGap
     * }
     */
    public static long safetyGap(MemorySegment struct) {
        return struct.get(safetyGap$LAYOUT, safetyGap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TRRLength_t safetyGap
     * }
     */
    public static void safetyGap(MemorySegment struct, long fieldValue) {
        struct.set(safetyGap$LAYOUT, safetyGap$OFFSET, fieldValue);
    }

    private static final AddressLayout frontSideVehicle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("frontSideVehicle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *frontSideVehicle
     * }
     */
    public static final AddressLayout frontSideVehicle$layout() {
        return frontSideVehicle$LAYOUT;
    }

    private static final long frontSideVehicle$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *frontSideVehicle
     * }
     */
    public static final long frontSideVehicle$offset() {
        return frontSideVehicle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *frontSideVehicle
     * }
     */
    public static MemorySegment frontSideVehicle(MemorySegment struct) {
        return struct.get(frontSideVehicle$LAYOUT, frontSideVehicle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *frontSideVehicle
     * }
     */
    public static void frontSideVehicle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(frontSideVehicle$LAYOUT, frontSideVehicle$OFFSET, fieldValue);
    }

    private static final AddressLayout rearSideVehicle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rearSideVehicle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *rearSideVehicle
     * }
     */
    public static final AddressLayout rearSideVehicle$layout() {
        return rearSideVehicle$LAYOUT;
    }

    private static final long rearSideVehicle$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *rearSideVehicle
     * }
     */
    public static final long rearSideVehicle$offset() {
        return rearSideVehicle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *rearSideVehicle
     * }
     */
    public static MemorySegment rearSideVehicle(MemorySegment struct) {
        return struct.get(rearSideVehicle$LAYOUT, rearSideVehicle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SurroundingVehicleInfo *rearSideVehicle
     * }
     */
    public static void rearSideVehicle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rearSideVehicle$LAYOUT, rearSideVehicle$OFFSET, fieldValue);
    }

    private static final AddressLayout tRRLength$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tRRLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TRRLength_t *tRRLength
     * }
     */
    public static final AddressLayout tRRLength$layout() {
        return tRRLength$LAYOUT;
    }

    private static final long tRRLength$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TRRLength_t *tRRLength
     * }
     */
    public static final long tRRLength$offset() {
        return tRRLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TRRLength_t *tRRLength
     * }
     */
    public static MemorySegment tRRLength(MemorySegment struct) {
        return struct.get(tRRLength$LAYOUT, tRRLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TRRLength_t *tRRLength
     * }
     */
    public static void tRRLength(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tRRLength$LAYOUT, tRRLength$OFFSET, fieldValue);
    }

    private static final OfLong laneOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("laneOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static final OfLong laneOffset$layout() {
        return laneOffset$LAYOUT;
    }

    private static final long laneOffset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static final long laneOffset$offset() {
        return laneOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static long laneOffset(MemorySegment struct) {
        return struct.get(laneOffset$LAYOUT, laneOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static void laneOffset(MemorySegment struct, long fieldValue) {
        struct.set(laneOffset$LAYOUT, laneOffset$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

