// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct MovementEvent_addGrpB {
 *     TimeRemaining_t *startTime;
 *     MinTimetoChange_t minEndTime;
 *     MaxTimetoChange_t *maxEndTime;
 *     TimeRemaining_t *likelyTime;
 *     TimeIntervalConfidence_t *confidence;
 *     TimeRemaining_t *nextTime;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class MovementEvent_addGrpB {

    MovementEvent_addGrpB() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("startTime"),
        MessageFrame_h.C_LONG.withName("minEndTime"),
        MessageFrame_h.C_POINTER.withName("maxEndTime"),
        MessageFrame_h.C_POINTER.withName("likelyTime"),
        MessageFrame_h.C_POINTER.withName("confidence"),
        MessageFrame_h.C_POINTER.withName("nextTime"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("MovementEvent_addGrpB");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout startTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("startTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeRemaining_t *startTime
     * }
     */
    public static final AddressLayout startTime$layout() {
        return startTime$LAYOUT;
    }

    private static final long startTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeRemaining_t *startTime
     * }
     */
    public static final long startTime$offset() {
        return startTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *startTime
     * }
     */
    public static MemorySegment startTime(MemorySegment struct) {
        return struct.get(startTime$LAYOUT, startTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *startTime
     * }
     */
    public static void startTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(startTime$LAYOUT, startTime$OFFSET, fieldValue);
    }

    private static final OfLong minEndTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minEndTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MinTimetoChange_t minEndTime
     * }
     */
    public static final OfLong minEndTime$layout() {
        return minEndTime$LAYOUT;
    }

    private static final long minEndTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MinTimetoChange_t minEndTime
     * }
     */
    public static final long minEndTime$offset() {
        return minEndTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MinTimetoChange_t minEndTime
     * }
     */
    public static long minEndTime(MemorySegment struct) {
        return struct.get(minEndTime$LAYOUT, minEndTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MinTimetoChange_t minEndTime
     * }
     */
    public static void minEndTime(MemorySegment struct, long fieldValue) {
        struct.set(minEndTime$LAYOUT, minEndTime$OFFSET, fieldValue);
    }

    private static final AddressLayout maxEndTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maxEndTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MaxTimetoChange_t *maxEndTime
     * }
     */
    public static final AddressLayout maxEndTime$layout() {
        return maxEndTime$LAYOUT;
    }

    private static final long maxEndTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MaxTimetoChange_t *maxEndTime
     * }
     */
    public static final long maxEndTime$offset() {
        return maxEndTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MaxTimetoChange_t *maxEndTime
     * }
     */
    public static MemorySegment maxEndTime(MemorySegment struct) {
        return struct.get(maxEndTime$LAYOUT, maxEndTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MaxTimetoChange_t *maxEndTime
     * }
     */
    public static void maxEndTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maxEndTime$LAYOUT, maxEndTime$OFFSET, fieldValue);
    }

    private static final AddressLayout likelyTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("likelyTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeRemaining_t *likelyTime
     * }
     */
    public static final AddressLayout likelyTime$layout() {
        return likelyTime$LAYOUT;
    }

    private static final long likelyTime$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeRemaining_t *likelyTime
     * }
     */
    public static final long likelyTime$offset() {
        return likelyTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *likelyTime
     * }
     */
    public static MemorySegment likelyTime(MemorySegment struct) {
        return struct.get(likelyTime$LAYOUT, likelyTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *likelyTime
     * }
     */
    public static void likelyTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(likelyTime$LAYOUT, likelyTime$OFFSET, fieldValue);
    }

    private static final AddressLayout confidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("confidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeIntervalConfidence_t *confidence
     * }
     */
    public static final AddressLayout confidence$layout() {
        return confidence$LAYOUT;
    }

    private static final long confidence$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeIntervalConfidence_t *confidence
     * }
     */
    public static final long confidence$offset() {
        return confidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeIntervalConfidence_t *confidence
     * }
     */
    public static MemorySegment confidence(MemorySegment struct) {
        return struct.get(confidence$LAYOUT, confidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeIntervalConfidence_t *confidence
     * }
     */
    public static void confidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(confidence$LAYOUT, confidence$OFFSET, fieldValue);
    }

    private static final AddressLayout nextTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nextTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeRemaining_t *nextTime
     * }
     */
    public static final AddressLayout nextTime$layout() {
        return nextTime$LAYOUT;
    }

    private static final long nextTime$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeRemaining_t *nextTime
     * }
     */
    public static final long nextTime$offset() {
        return nextTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *nextTime
     * }
     */
    public static MemorySegment nextTime(MemorySegment struct) {
        return struct.get(nextTime$LAYOUT, nextTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeRemaining_t *nextTime
     * }
     */
    public static void nextTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nextTime$LAYOUT, nextTime$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

