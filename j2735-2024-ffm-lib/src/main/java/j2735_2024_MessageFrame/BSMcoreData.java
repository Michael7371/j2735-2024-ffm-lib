// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct BSMcoreData {
 *     Common_MsgCount_t msgCnt;
 *     TemporaryID_t id;
 *     DSecond_t secMark;
 *     Common_Latitude_t lat;
 *     Common_Longitude_t Long;
 *     Common_Elevation_t elev;
 *     PositionalAccuracy_t accuracy;
 *     TransmissionState_t transmission;
 *     Speed_t speed;
 *     Heading_t heading;
 *     SteeringWheelAngle_t angle;
 *     AccelerationSet4Way_t accelSet;
 *     BrakeSystemStatus_t brakes;
 *     VehicleSize_t size;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class BSMcoreData {

    BSMcoreData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("msgCnt"),
        OCTET_STRING.layout().withName("id"),
        MessageFrame_h.C_LONG.withName("secMark"),
        MessageFrame_h.C_LONG.withName("lat"),
        MessageFrame_h.C_LONG.withName("Long"),
        MessageFrame_h.C_LONG.withName("elev"),
        PositionalAccuracy.layout().withName("accuracy"),
        MessageFrame_h.C_LONG.withName("transmission"),
        MessageFrame_h.C_LONG.withName("speed"),
        MessageFrame_h.C_LONG.withName("heading"),
        MessageFrame_h.C_LONG.withName("angle"),
        AccelerationSet4Way.layout().withName("accelSet"),
        BrakeSystemStatus.layout().withName("brakes"),
        VehicleSize.layout().withName("size"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("BSMcoreData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong msgCnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("msgCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final OfLong msgCnt$layout() {
        return msgCnt$LAYOUT;
    }

    private static final long msgCnt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static final long msgCnt$offset() {
        return msgCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static long msgCnt(MemorySegment struct) {
        return struct.get(msgCnt$LAYOUT, msgCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t msgCnt
     * }
     */
    public static void msgCnt(MemorySegment struct, long fieldValue) {
        struct.set(msgCnt$LAYOUT, msgCnt$OFFSET, fieldValue);
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final OfLong secMark$LAYOUT = (OfLong)$LAYOUT.select(groupElement("secMark"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static final OfLong secMark$layout() {
        return secMark$LAYOUT;
    }

    private static final long secMark$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static final long secMark$offset() {
        return secMark$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static long secMark(MemorySegment struct) {
        return struct.get(secMark$LAYOUT, secMark$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DSecond_t secMark
     * }
     */
    public static void secMark(MemorySegment struct, long fieldValue) {
        struct.set(secMark$LAYOUT, secMark$OFFSET, fieldValue);
    }

    private static final OfLong lat$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static final OfLong lat$layout() {
        return lat$LAYOUT;
    }

    private static final long lat$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static final long lat$offset() {
        return lat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static long lat(MemorySegment struct) {
        return struct.get(lat$LAYOUT, lat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static void lat(MemorySegment struct, long fieldValue) {
        struct.set(lat$LAYOUT, lat$OFFSET, fieldValue);
    }

    private static final OfLong Long_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Long"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static final OfLong Long_$layout() {
        return Long_$LAYOUT;
    }

    private static final long Long_$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static final long Long_$offset() {
        return Long_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static long Long_(MemorySegment struct) {
        return struct.get(Long_$LAYOUT, Long_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static void Long_(MemorySegment struct, long fieldValue) {
        struct.set(Long_$LAYOUT, Long_$OFFSET, fieldValue);
    }

    private static final OfLong elev$LAYOUT = (OfLong)$LAYOUT.select(groupElement("elev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Elevation_t elev
     * }
     */
    public static final OfLong elev$layout() {
        return elev$LAYOUT;
    }

    private static final long elev$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Elevation_t elev
     * }
     */
    public static final long elev$offset() {
        return elev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Elevation_t elev
     * }
     */
    public static long elev(MemorySegment struct) {
        return struct.get(elev$LAYOUT, elev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Elevation_t elev
     * }
     */
    public static void elev(MemorySegment struct, long fieldValue) {
        struct.set(elev$LAYOUT, elev$OFFSET, fieldValue);
    }

    private static final GroupLayout accuracy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("accuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static final GroupLayout accuracy$layout() {
        return accuracy$LAYOUT;
    }

    private static final long accuracy$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static final long accuracy$offset() {
        return accuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static MemorySegment accuracy(MemorySegment struct) {
        return struct.asSlice(accuracy$OFFSET, accuracy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accuracy
     * }
     */
    public static void accuracy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, accuracy$OFFSET, accuracy$LAYOUT.byteSize());
    }

    private static final OfLong transmission$LAYOUT = (OfLong)$LAYOUT.select(groupElement("transmission"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TransmissionState_t transmission
     * }
     */
    public static final OfLong transmission$layout() {
        return transmission$LAYOUT;
    }

    private static final long transmission$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TransmissionState_t transmission
     * }
     */
    public static final long transmission$offset() {
        return transmission$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TransmissionState_t transmission
     * }
     */
    public static long transmission(MemorySegment struct) {
        return struct.get(transmission$LAYOUT, transmission$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TransmissionState_t transmission
     * }
     */
    public static void transmission(MemorySegment struct, long fieldValue) {
        struct.set(transmission$LAYOUT, transmission$OFFSET, fieldValue);
    }

    private static final OfLong speed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("speed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static final OfLong speed$layout() {
        return speed$LAYOUT;
    }

    private static final long speed$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static final long speed$offset() {
        return speed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static long speed(MemorySegment struct) {
        return struct.get(speed$LAYOUT, speed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static void speed(MemorySegment struct, long fieldValue) {
        struct.set(speed$LAYOUT, speed$OFFSET, fieldValue);
    }

    private static final OfLong heading$LAYOUT = (OfLong)$LAYOUT.select(groupElement("heading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final OfLong heading$layout() {
        return heading$LAYOUT;
    }

    private static final long heading$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final long heading$offset() {
        return heading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static long heading(MemorySegment struct) {
        return struct.get(heading$LAYOUT, heading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static void heading(MemorySegment struct, long fieldValue) {
        struct.set(heading$LAYOUT, heading$OFFSET, fieldValue);
    }

    private static final OfLong angle$LAYOUT = (OfLong)$LAYOUT.select(groupElement("angle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteeringWheelAngle_t angle
     * }
     */
    public static final OfLong angle$layout() {
        return angle$LAYOUT;
    }

    private static final long angle$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteeringWheelAngle_t angle
     * }
     */
    public static final long angle$offset() {
        return angle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteeringWheelAngle_t angle
     * }
     */
    public static long angle(MemorySegment struct) {
        return struct.get(angle$LAYOUT, angle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteeringWheelAngle_t angle
     * }
     */
    public static void angle(MemorySegment struct, long fieldValue) {
        struct.set(angle$LAYOUT, angle$OFFSET, fieldValue);
    }

    private static final GroupLayout accelSet$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("accelSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AccelerationSet4Way_t accelSet
     * }
     */
    public static final GroupLayout accelSet$layout() {
        return accelSet$LAYOUT;
    }

    private static final long accelSet$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AccelerationSet4Way_t accelSet
     * }
     */
    public static final long accelSet$offset() {
        return accelSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AccelerationSet4Way_t accelSet
     * }
     */
    public static MemorySegment accelSet(MemorySegment struct) {
        return struct.asSlice(accelSet$OFFSET, accelSet$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AccelerationSet4Way_t accelSet
     * }
     */
    public static void accelSet(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, accelSet$OFFSET, accelSet$LAYOUT.byteSize());
    }

    private static final GroupLayout brakes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("brakes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BrakeSystemStatus_t brakes
     * }
     */
    public static final GroupLayout brakes$layout() {
        return brakes$LAYOUT;
    }

    private static final long brakes$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BrakeSystemStatus_t brakes
     * }
     */
    public static final long brakes$offset() {
        return brakes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BrakeSystemStatus_t brakes
     * }
     */
    public static MemorySegment brakes(MemorySegment struct) {
        return struct.asSlice(brakes$OFFSET, brakes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BrakeSystemStatus_t brakes
     * }
     */
    public static void brakes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, brakes$OFFSET, brakes$LAYOUT.byteSize());
    }

    private static final GroupLayout size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static final GroupLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.asSlice(size$OFFSET, size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, size$OFFSET, size$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

