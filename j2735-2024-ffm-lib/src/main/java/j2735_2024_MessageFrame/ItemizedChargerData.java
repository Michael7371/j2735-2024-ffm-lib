// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ItemizedChargerData {
 *     OBJECT_IDENTIFIER_t chargerID;
 *     DescriptiveName_t *chargingDescription;
 *     long *configID;
 *     struct TripInfo *tripInfo;
 *     PaymentFee_t totalPaidToCharger;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class ItemizedChargerData {

    ItemizedChargerData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ASN__PRIMITIVE_TYPE_s.layout().withName("chargerID"),
        MessageFrame_h.C_POINTER.withName("chargingDescription"),
        MessageFrame_h.C_POINTER.withName("configID"),
        MessageFrame_h.C_POINTER.withName("tripInfo"),
        PaymentFee.layout().withName("totalPaidToCharger"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("ItemizedChargerData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout chargerID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("chargerID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t chargerID
     * }
     */
    public static final GroupLayout chargerID$layout() {
        return chargerID$LAYOUT;
    }

    private static final long chargerID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t chargerID
     * }
     */
    public static final long chargerID$offset() {
        return chargerID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t chargerID
     * }
     */
    public static MemorySegment chargerID(MemorySegment struct) {
        return struct.asSlice(chargerID$OFFSET, chargerID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t chargerID
     * }
     */
    public static void chargerID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, chargerID$OFFSET, chargerID$LAYOUT.byteSize());
    }

    private static final AddressLayout chargingDescription$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("chargingDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescriptiveName_t *chargingDescription
     * }
     */
    public static final AddressLayout chargingDescription$layout() {
        return chargingDescription$LAYOUT;
    }

    private static final long chargingDescription$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescriptiveName_t *chargingDescription
     * }
     */
    public static final long chargingDescription$offset() {
        return chargingDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *chargingDescription
     * }
     */
    public static MemorySegment chargingDescription(MemorySegment struct) {
        return struct.get(chargingDescription$LAYOUT, chargingDescription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescriptiveName_t *chargingDescription
     * }
     */
    public static void chargingDescription(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(chargingDescription$LAYOUT, chargingDescription$OFFSET, fieldValue);
    }

    private static final AddressLayout configID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("configID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *configID
     * }
     */
    public static final AddressLayout configID$layout() {
        return configID$LAYOUT;
    }

    private static final long configID$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *configID
     * }
     */
    public static final long configID$offset() {
        return configID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *configID
     * }
     */
    public static MemorySegment configID(MemorySegment struct) {
        return struct.get(configID$LAYOUT, configID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *configID
     * }
     */
    public static void configID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(configID$LAYOUT, configID$OFFSET, fieldValue);
    }

    private static final AddressLayout tripInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tripInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TripInfo *tripInfo
     * }
     */
    public static final AddressLayout tripInfo$layout() {
        return tripInfo$LAYOUT;
    }

    private static final long tripInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TripInfo *tripInfo
     * }
     */
    public static final long tripInfo$offset() {
        return tripInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TripInfo *tripInfo
     * }
     */
    public static MemorySegment tripInfo(MemorySegment struct) {
        return struct.get(tripInfo$LAYOUT, tripInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TripInfo *tripInfo
     * }
     */
    public static void tripInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tripInfo$LAYOUT, tripInfo$OFFSET, fieldValue);
    }

    private static final GroupLayout totalPaidToCharger$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("totalPaidToCharger"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PaymentFee_t totalPaidToCharger
     * }
     */
    public static final GroupLayout totalPaidToCharger$layout() {
        return totalPaidToCharger$LAYOUT;
    }

    private static final long totalPaidToCharger$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PaymentFee_t totalPaidToCharger
     * }
     */
    public static final long totalPaidToCharger$offset() {
        return totalPaidToCharger$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PaymentFee_t totalPaidToCharger
     * }
     */
    public static MemorySegment totalPaidToCharger(MemorySegment struct) {
        return struct.asSlice(totalPaidToCharger$OFFSET, totalPaidToCharger$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PaymentFee_t totalPaidToCharger
     * }
     */
    public static void totalPaidToCharger(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, totalPaidToCharger$OFFSET, totalPaidToCharger$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

