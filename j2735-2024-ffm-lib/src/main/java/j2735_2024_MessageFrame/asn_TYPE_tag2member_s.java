// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_TYPE_tag2member_s {
 *     ber_tlv_tag_t el_tag;
 *     unsigned int el_no;
 *     int toff_first;
 *     int toff_last;
 * }
 * }
 */
public class asn_TYPE_tag2member_s {

    asn_TYPE_tag2member_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("el_tag"),
        MessageFrame_h.C_INT.withName("el_no"),
        MessageFrame_h.C_INT.withName("toff_first"),
        MessageFrame_h.C_INT.withName("toff_last")
    ).withName("asn_TYPE_tag2member_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt el_tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("el_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t el_tag
     * }
     */
    public static final OfInt el_tag$layout() {
        return el_tag$LAYOUT;
    }

    private static final long el_tag$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t el_tag
     * }
     */
    public static final long el_tag$offset() {
        return el_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t el_tag
     * }
     */
    public static int el_tag(MemorySegment struct) {
        return struct.get(el_tag$LAYOUT, el_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_tlv_tag_t el_tag
     * }
     */
    public static void el_tag(MemorySegment struct, int fieldValue) {
        struct.set(el_tag$LAYOUT, el_tag$OFFSET, fieldValue);
    }

    private static final OfInt el_no$LAYOUT = (OfInt)$LAYOUT.select(groupElement("el_no"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int el_no
     * }
     */
    public static final OfInt el_no$layout() {
        return el_no$LAYOUT;
    }

    private static final long el_no$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int el_no
     * }
     */
    public static final long el_no$offset() {
        return el_no$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int el_no
     * }
     */
    public static int el_no(MemorySegment struct) {
        return struct.get(el_no$LAYOUT, el_no$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int el_no
     * }
     */
    public static void el_no(MemorySegment struct, int fieldValue) {
        struct.set(el_no$LAYOUT, el_no$OFFSET, fieldValue);
    }

    private static final OfInt toff_first$LAYOUT = (OfInt)$LAYOUT.select(groupElement("toff_first"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int toff_first
     * }
     */
    public static final OfInt toff_first$layout() {
        return toff_first$LAYOUT;
    }

    private static final long toff_first$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int toff_first
     * }
     */
    public static final long toff_first$offset() {
        return toff_first$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int toff_first
     * }
     */
    public static int toff_first(MemorySegment struct) {
        return struct.get(toff_first$LAYOUT, toff_first$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int toff_first
     * }
     */
    public static void toff_first(MemorySegment struct, int fieldValue) {
        struct.set(toff_first$LAYOUT, toff_first$OFFSET, fieldValue);
    }

    private static final OfInt toff_last$LAYOUT = (OfInt)$LAYOUT.select(groupElement("toff_last"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int toff_last
     * }
     */
    public static final OfInt toff_last$layout() {
        return toff_last$LAYOUT;
    }

    private static final long toff_last$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int toff_last
     * }
     */
    public static final long toff_last$offset() {
        return toff_last$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int toff_last
     * }
     */
    public static int toff_last(MemorySegment struct) {
        return struct.get(toff_last$LAYOUT, toff_last$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int toff_last
     * }
     */
    public static void toff_last(MemorySegment struct, int fieldValue) {
        struct.set(toff_last$LAYOUT, toff_last$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

