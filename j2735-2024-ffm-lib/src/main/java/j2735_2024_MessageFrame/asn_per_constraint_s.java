// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_per_constraint_s {
 *     enum asn_per_constraint_flags {
 *         APC_UNCONSTRAINED = 0,
 *         APC_SEMI_CONSTRAINED = 1,
 *         APC_CONSTRAINED = 2,
 *         APC_EXTENSIBLE = 4
 *     } flags;
 *     int range_bits;
 *     int effective_bits;
 *     intmax_t lower_bound;
 *     intmax_t upper_bound;
 * }
 * }
 */
public class asn_per_constraint_s {

    asn_per_constraint_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("flags"),
        MessageFrame_h.C_INT.withName("range_bits"),
        MessageFrame_h.C_INT.withName("effective_bits"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_LONG.withName("lower_bound"),
        MessageFrame_h.C_LONG.withName("upper_bound")
    ).withName("asn_per_constraint_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum asn_per_constraint_flags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum asn_per_constraint_flags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum asn_per_constraint_flags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum asn_per_constraint_flags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt range_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("range_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int range_bits
     * }
     */
    public static final OfInt range_bits$layout() {
        return range_bits$LAYOUT;
    }

    private static final long range_bits$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int range_bits
     * }
     */
    public static final long range_bits$offset() {
        return range_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int range_bits
     * }
     */
    public static int range_bits(MemorySegment struct) {
        return struct.get(range_bits$LAYOUT, range_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int range_bits
     * }
     */
    public static void range_bits(MemorySegment struct, int fieldValue) {
        struct.set(range_bits$LAYOUT, range_bits$OFFSET, fieldValue);
    }

    private static final OfInt effective_bits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("effective_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int effective_bits
     * }
     */
    public static final OfInt effective_bits$layout() {
        return effective_bits$LAYOUT;
    }

    private static final long effective_bits$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int effective_bits
     * }
     */
    public static final long effective_bits$offset() {
        return effective_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int effective_bits
     * }
     */
    public static int effective_bits(MemorySegment struct) {
        return struct.get(effective_bits$LAYOUT, effective_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int effective_bits
     * }
     */
    public static void effective_bits(MemorySegment struct, int fieldValue) {
        struct.set(effective_bits$LAYOUT, effective_bits$OFFSET, fieldValue);
    }

    private static final OfLong lower_bound$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lower_bound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * intmax_t lower_bound
     * }
     */
    public static final OfLong lower_bound$layout() {
        return lower_bound$LAYOUT;
    }

    private static final long lower_bound$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * intmax_t lower_bound
     * }
     */
    public static final long lower_bound$offset() {
        return lower_bound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * intmax_t lower_bound
     * }
     */
    public static long lower_bound(MemorySegment struct) {
        return struct.get(lower_bound$LAYOUT, lower_bound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * intmax_t lower_bound
     * }
     */
    public static void lower_bound(MemorySegment struct, long fieldValue) {
        struct.set(lower_bound$LAYOUT, lower_bound$OFFSET, fieldValue);
    }

    private static final OfLong upper_bound$LAYOUT = (OfLong)$LAYOUT.select(groupElement("upper_bound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * intmax_t upper_bound
     * }
     */
    public static final OfLong upper_bound$layout() {
        return upper_bound$LAYOUT;
    }

    private static final long upper_bound$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * intmax_t upper_bound
     * }
     */
    public static final long upper_bound$offset() {
        return upper_bound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * intmax_t upper_bound
     * }
     */
    public static long upper_bound(MemorySegment struct) {
        return struct.get(upper_bound$LAYOUT, upper_bound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * intmax_t upper_bound
     * }
     */
    public static void upper_bound(MemorySegment struct, long fieldValue) {
        struct.set(upper_bound$LAYOUT, upper_bound$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

