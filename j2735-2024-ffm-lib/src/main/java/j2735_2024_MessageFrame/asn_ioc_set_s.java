// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_ioc_set_s {
 *     size_t rows_count;
 *     size_t columns_count;
 *     const struct asn_ioc_cell_s *rows;
 * }
 * }
 */
public class asn_ioc_set_s {

    asn_ioc_set_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("rows_count"),
        MessageFrame_h.C_LONG.withName("columns_count"),
        MessageFrame_h.C_POINTER.withName("rows")
    ).withName("asn_ioc_set_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong rows_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rows_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t rows_count
     * }
     */
    public static final OfLong rows_count$layout() {
        return rows_count$LAYOUT;
    }

    private static final long rows_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t rows_count
     * }
     */
    public static final long rows_count$offset() {
        return rows_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t rows_count
     * }
     */
    public static long rows_count(MemorySegment struct) {
        return struct.get(rows_count$LAYOUT, rows_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t rows_count
     * }
     */
    public static void rows_count(MemorySegment struct, long fieldValue) {
        struct.set(rows_count$LAYOUT, rows_count$OFFSET, fieldValue);
    }

    private static final OfLong columns_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("columns_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t columns_count
     * }
     */
    public static final OfLong columns_count$layout() {
        return columns_count$LAYOUT;
    }

    private static final long columns_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t columns_count
     * }
     */
    public static final long columns_count$offset() {
        return columns_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t columns_count
     * }
     */
    public static long columns_count(MemorySegment struct) {
        return struct.get(columns_count$LAYOUT, columns_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t columns_count
     * }
     */
    public static void columns_count(MemorySegment struct, long fieldValue) {
        struct.set(columns_count$LAYOUT, columns_count$OFFSET, fieldValue);
    }

    private static final AddressLayout rows$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct asn_ioc_cell_s *rows
     * }
     */
    public static final AddressLayout rows$layout() {
        return rows$LAYOUT;
    }

    private static final long rows$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct asn_ioc_cell_s *rows
     * }
     */
    public static final long rows$offset() {
        return rows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct asn_ioc_cell_s *rows
     * }
     */
    public static MemorySegment rows(MemorySegment struct) {
        return struct.get(rows$LAYOUT, rows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct asn_ioc_cell_s *rows
     * }
     */
    public static void rows(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rows$LAYOUT, rows$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

