// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LaneAttributes {
 *     LaneDirection_t directionalUse;
 *     LaneSharing_t sharedWith;
 *     LaneTypeAttributes_t laneType;
 *     struct Reg_LaneAttributes *regional;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class LaneAttributes {

    LaneAttributes() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        BIT_STRING_s.layout().withName("directionalUse"),
        BIT_STRING_s.layout().withName("sharedWith"),
        LaneTypeAttributes.layout().withName("laneType"),
        MessageFrame_h.C_POINTER.withName("regional"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("LaneAttributes");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout directionalUse$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("directionalUse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneDirection_t directionalUse
     * }
     */
    public static final GroupLayout directionalUse$layout() {
        return directionalUse$LAYOUT;
    }

    private static final long directionalUse$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneDirection_t directionalUse
     * }
     */
    public static final long directionalUse$offset() {
        return directionalUse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneDirection_t directionalUse
     * }
     */
    public static MemorySegment directionalUse(MemorySegment struct) {
        return struct.asSlice(directionalUse$OFFSET, directionalUse$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneDirection_t directionalUse
     * }
     */
    public static void directionalUse(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, directionalUse$OFFSET, directionalUse$LAYOUT.byteSize());
    }

    private static final GroupLayout sharedWith$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sharedWith"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneSharing_t sharedWith
     * }
     */
    public static final GroupLayout sharedWith$layout() {
        return sharedWith$LAYOUT;
    }

    private static final long sharedWith$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneSharing_t sharedWith
     * }
     */
    public static final long sharedWith$offset() {
        return sharedWith$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneSharing_t sharedWith
     * }
     */
    public static MemorySegment sharedWith(MemorySegment struct) {
        return struct.asSlice(sharedWith$OFFSET, sharedWith$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneSharing_t sharedWith
     * }
     */
    public static void sharedWith(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sharedWith$OFFSET, sharedWith$LAYOUT.byteSize());
    }

    private static final GroupLayout laneType$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("laneType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_t laneType
     * }
     */
    public static final GroupLayout laneType$layout() {
        return laneType$LAYOUT;
    }

    private static final long laneType$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_t laneType
     * }
     */
    public static final long laneType$offset() {
        return laneType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_t laneType
     * }
     */
    public static MemorySegment laneType(MemorySegment struct) {
        return struct.asSlice(laneType$OFFSET, laneType$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_t laneType
     * }
     */
    public static void laneType(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, laneType$OFFSET, laneType$LAYOUT.byteSize());
    }

    private static final AddressLayout regional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Reg_LaneAttributes *regional
     * }
     */
    public static final AddressLayout regional$layout() {
        return regional$LAYOUT;
    }

    private static final long regional$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Reg_LaneAttributes *regional
     * }
     */
    public static final long regional$offset() {
        return regional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Reg_LaneAttributes *regional
     * }
     */
    public static MemorySegment regional(MemorySegment struct) {
        return struct.get(regional$LAYOUT, regional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Reg_LaneAttributes *regional
     * }
     */
    public static void regional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regional$LAYOUT, regional$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

