// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct Connection {
 *     ConnectingLane_t connectingLane;
 *     struct IntersectionReferenceID *remoteIntersection;
 *     SignalGroupID_t *signalGroup;
 *     RestrictionClassID_t *userClass;
 *     LaneConnectionID_t *connectionID;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class Connection {

    Connection() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ConnectingLane.layout().withName("connectingLane"),
        MessageFrame_h.C_POINTER.withName("remoteIntersection"),
        MessageFrame_h.C_POINTER.withName("signalGroup"),
        MessageFrame_h.C_POINTER.withName("userClass"),
        MessageFrame_h.C_POINTER.withName("connectionID"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("Connection");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout connectingLane$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("connectingLane"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ConnectingLane_t connectingLane
     * }
     */
    public static final GroupLayout connectingLane$layout() {
        return connectingLane$LAYOUT;
    }

    private static final long connectingLane$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ConnectingLane_t connectingLane
     * }
     */
    public static final long connectingLane$offset() {
        return connectingLane$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ConnectingLane_t connectingLane
     * }
     */
    public static MemorySegment connectingLane(MemorySegment struct) {
        return struct.asSlice(connectingLane$OFFSET, connectingLane$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ConnectingLane_t connectingLane
     * }
     */
    public static void connectingLane(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, connectingLane$OFFSET, connectingLane$LAYOUT.byteSize());
    }

    private static final AddressLayout remoteIntersection$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remoteIntersection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct IntersectionReferenceID *remoteIntersection
     * }
     */
    public static final AddressLayout remoteIntersection$layout() {
        return remoteIntersection$LAYOUT;
    }

    private static final long remoteIntersection$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct IntersectionReferenceID *remoteIntersection
     * }
     */
    public static final long remoteIntersection$offset() {
        return remoteIntersection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct IntersectionReferenceID *remoteIntersection
     * }
     */
    public static MemorySegment remoteIntersection(MemorySegment struct) {
        return struct.get(remoteIntersection$LAYOUT, remoteIntersection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct IntersectionReferenceID *remoteIntersection
     * }
     */
    public static void remoteIntersection(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remoteIntersection$LAYOUT, remoteIntersection$OFFSET, fieldValue);
    }

    private static final AddressLayout signalGroup$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("signalGroup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SignalGroupID_t *signalGroup
     * }
     */
    public static final AddressLayout signalGroup$layout() {
        return signalGroup$LAYOUT;
    }

    private static final long signalGroup$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SignalGroupID_t *signalGroup
     * }
     */
    public static final long signalGroup$offset() {
        return signalGroup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SignalGroupID_t *signalGroup
     * }
     */
    public static MemorySegment signalGroup(MemorySegment struct) {
        return struct.get(signalGroup$LAYOUT, signalGroup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SignalGroupID_t *signalGroup
     * }
     */
    public static void signalGroup(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(signalGroup$LAYOUT, signalGroup$OFFSET, fieldValue);
    }

    private static final AddressLayout userClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RestrictionClassID_t *userClass
     * }
     */
    public static final AddressLayout userClass$layout() {
        return userClass$LAYOUT;
    }

    private static final long userClass$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RestrictionClassID_t *userClass
     * }
     */
    public static final long userClass$offset() {
        return userClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RestrictionClassID_t *userClass
     * }
     */
    public static MemorySegment userClass(MemorySegment struct) {
        return struct.get(userClass$LAYOUT, userClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RestrictionClassID_t *userClass
     * }
     */
    public static void userClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userClass$LAYOUT, userClass$OFFSET, fieldValue);
    }

    private static final AddressLayout connectionID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connectionID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneConnectionID_t *connectionID
     * }
     */
    public static final AddressLayout connectionID$layout() {
        return connectionID$LAYOUT;
    }

    private static final long connectionID$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneConnectionID_t *connectionID
     * }
     */
    public static final long connectionID$offset() {
        return connectionID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneConnectionID_t *connectionID
     * }
     */
    public static MemorySegment connectionID(MemorySegment struct) {
        return struct.get(connectionID$LAYOUT, connectionID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneConnectionID_t *connectionID
     * }
     */
    public static void connectionID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connectionID$LAYOUT, connectionID$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

