// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DDateTime {
 *     DYear_t *year;
 *     DMonth_t *month;
 *     DDay_t *day;
 *     DHour_t *hour;
 *     DMinute_t *minute;
 *     DSecond_t *second;
 *     DOffset_t *offset;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class DDateTime {

    DDateTime() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("year"),
        MessageFrame_h.C_POINTER.withName("month"),
        MessageFrame_h.C_POINTER.withName("day"),
        MessageFrame_h.C_POINTER.withName("hour"),
        MessageFrame_h.C_POINTER.withName("minute"),
        MessageFrame_h.C_POINTER.withName("second"),
        MessageFrame_h.C_POINTER.withName("offset"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("DDateTime");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout year$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("year"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DYear_t *year
     * }
     */
    public static final AddressLayout year$layout() {
        return year$LAYOUT;
    }

    private static final long year$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DYear_t *year
     * }
     */
    public static final long year$offset() {
        return year$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DYear_t *year
     * }
     */
    public static MemorySegment year(MemorySegment struct) {
        return struct.get(year$LAYOUT, year$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DYear_t *year
     * }
     */
    public static void year(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(year$LAYOUT, year$OFFSET, fieldValue);
    }

    private static final AddressLayout month$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("month"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DMonth_t *month
     * }
     */
    public static final AddressLayout month$layout() {
        return month$LAYOUT;
    }

    private static final long month$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DMonth_t *month
     * }
     */
    public static final long month$offset() {
        return month$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DMonth_t *month
     * }
     */
    public static MemorySegment month(MemorySegment struct) {
        return struct.get(month$LAYOUT, month$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DMonth_t *month
     * }
     */
    public static void month(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(month$LAYOUT, month$OFFSET, fieldValue);
    }

    private static final AddressLayout day$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("day"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDay_t *day
     * }
     */
    public static final AddressLayout day$layout() {
        return day$LAYOUT;
    }

    private static final long day$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDay_t *day
     * }
     */
    public static final long day$offset() {
        return day$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDay_t *day
     * }
     */
    public static MemorySegment day(MemorySegment struct) {
        return struct.get(day$LAYOUT, day$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDay_t *day
     * }
     */
    public static void day(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(day$LAYOUT, day$OFFSET, fieldValue);
    }

    private static final AddressLayout hour$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hour"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DHour_t *hour
     * }
     */
    public static final AddressLayout hour$layout() {
        return hour$LAYOUT;
    }

    private static final long hour$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DHour_t *hour
     * }
     */
    public static final long hour$offset() {
        return hour$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DHour_t *hour
     * }
     */
    public static MemorySegment hour(MemorySegment struct) {
        return struct.get(hour$LAYOUT, hour$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DHour_t *hour
     * }
     */
    public static void hour(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hour$LAYOUT, hour$OFFSET, fieldValue);
    }

    private static final AddressLayout minute$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("minute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DMinute_t *minute
     * }
     */
    public static final AddressLayout minute$layout() {
        return minute$LAYOUT;
    }

    private static final long minute$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DMinute_t *minute
     * }
     */
    public static final long minute$offset() {
        return minute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DMinute_t *minute
     * }
     */
    public static MemorySegment minute(MemorySegment struct) {
        return struct.get(minute$LAYOUT, minute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DMinute_t *minute
     * }
     */
    public static void minute(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(minute$LAYOUT, minute$OFFSET, fieldValue);
    }

    private static final AddressLayout second$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("second"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DSecond_t *second
     * }
     */
    public static final AddressLayout second$layout() {
        return second$LAYOUT;
    }

    private static final long second$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DSecond_t *second
     * }
     */
    public static final long second$offset() {
        return second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DSecond_t *second
     * }
     */
    public static MemorySegment second(MemorySegment struct) {
        return struct.get(second$LAYOUT, second$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DSecond_t *second
     * }
     */
    public static void second(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(second$LAYOUT, second$OFFSET, fieldValue);
    }

    private static final AddressLayout offset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DOffset_t *offset
     * }
     */
    public static final AddressLayout offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DOffset_t *offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DOffset_t *offset
     * }
     */
    public static MemorySegment offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DOffset_t *offset
     * }
     */
    public static void offset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

