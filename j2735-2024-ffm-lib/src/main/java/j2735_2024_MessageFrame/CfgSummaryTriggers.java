// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgSummaryTriggers {
 *     BOOLEAN_t *regTravelTime;
 *     BOOLEAN_t *regVehDistTraveled;
 *     BOOLEAN_t *regVehTimeTraveled;
 *     BOOLEAN_t *fuelConsumption;
 *     BOOLEAN_t *totalVehEmissions;
 *     struct CfgLowSpeedCriteria *numOfLowSpeedEvents;
 *     struct CfgStoppedCriteria *timeStopped;
 *     struct CfgStoppedCriteria *numOfStopped;
 *     BOOLEAN_t *locOfStops;
 *     BOOLEAN_t *regNumOfVehPassed;
 *     BOOLEAN_t *regNumOfSurpassedVeh;
 *     struct CfgMsgRecepIndicators *totalMsgsReceived;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgSummaryTriggers {

    CfgSummaryTriggers() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("regTravelTime"),
        MessageFrame_h.C_POINTER.withName("regVehDistTraveled"),
        MessageFrame_h.C_POINTER.withName("regVehTimeTraveled"),
        MessageFrame_h.C_POINTER.withName("fuelConsumption"),
        MessageFrame_h.C_POINTER.withName("totalVehEmissions"),
        MessageFrame_h.C_POINTER.withName("numOfLowSpeedEvents"),
        MessageFrame_h.C_POINTER.withName("timeStopped"),
        MessageFrame_h.C_POINTER.withName("numOfStopped"),
        MessageFrame_h.C_POINTER.withName("locOfStops"),
        MessageFrame_h.C_POINTER.withName("regNumOfVehPassed"),
        MessageFrame_h.C_POINTER.withName("regNumOfSurpassedVeh"),
        MessageFrame_h.C_POINTER.withName("totalMsgsReceived"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgSummaryTriggers");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout regTravelTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regTravelTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regTravelTime
     * }
     */
    public static final AddressLayout regTravelTime$layout() {
        return regTravelTime$LAYOUT;
    }

    private static final long regTravelTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regTravelTime
     * }
     */
    public static final long regTravelTime$offset() {
        return regTravelTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regTravelTime
     * }
     */
    public static MemorySegment regTravelTime(MemorySegment struct) {
        return struct.get(regTravelTime$LAYOUT, regTravelTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regTravelTime
     * }
     */
    public static void regTravelTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regTravelTime$LAYOUT, regTravelTime$OFFSET, fieldValue);
    }

    private static final AddressLayout regVehDistTraveled$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regVehDistTraveled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehDistTraveled
     * }
     */
    public static final AddressLayout regVehDistTraveled$layout() {
        return regVehDistTraveled$LAYOUT;
    }

    private static final long regVehDistTraveled$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehDistTraveled
     * }
     */
    public static final long regVehDistTraveled$offset() {
        return regVehDistTraveled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehDistTraveled
     * }
     */
    public static MemorySegment regVehDistTraveled(MemorySegment struct) {
        return struct.get(regVehDistTraveled$LAYOUT, regVehDistTraveled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehDistTraveled
     * }
     */
    public static void regVehDistTraveled(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regVehDistTraveled$LAYOUT, regVehDistTraveled$OFFSET, fieldValue);
    }

    private static final AddressLayout regVehTimeTraveled$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regVehTimeTraveled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehTimeTraveled
     * }
     */
    public static final AddressLayout regVehTimeTraveled$layout() {
        return regVehTimeTraveled$LAYOUT;
    }

    private static final long regVehTimeTraveled$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehTimeTraveled
     * }
     */
    public static final long regVehTimeTraveled$offset() {
        return regVehTimeTraveled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehTimeTraveled
     * }
     */
    public static MemorySegment regVehTimeTraveled(MemorySegment struct) {
        return struct.get(regVehTimeTraveled$LAYOUT, regVehTimeTraveled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regVehTimeTraveled
     * }
     */
    public static void regVehTimeTraveled(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regVehTimeTraveled$LAYOUT, regVehTimeTraveled$OFFSET, fieldValue);
    }

    private static final AddressLayout fuelConsumption$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fuelConsumption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fuelConsumption
     * }
     */
    public static final AddressLayout fuelConsumption$layout() {
        return fuelConsumption$LAYOUT;
    }

    private static final long fuelConsumption$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fuelConsumption
     * }
     */
    public static final long fuelConsumption$offset() {
        return fuelConsumption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fuelConsumption
     * }
     */
    public static MemorySegment fuelConsumption(MemorySegment struct) {
        return struct.get(fuelConsumption$LAYOUT, fuelConsumption$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *fuelConsumption
     * }
     */
    public static void fuelConsumption(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fuelConsumption$LAYOUT, fuelConsumption$OFFSET, fieldValue);
    }

    private static final AddressLayout totalVehEmissions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("totalVehEmissions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *totalVehEmissions
     * }
     */
    public static final AddressLayout totalVehEmissions$layout() {
        return totalVehEmissions$LAYOUT;
    }

    private static final long totalVehEmissions$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *totalVehEmissions
     * }
     */
    public static final long totalVehEmissions$offset() {
        return totalVehEmissions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *totalVehEmissions
     * }
     */
    public static MemorySegment totalVehEmissions(MemorySegment struct) {
        return struct.get(totalVehEmissions$LAYOUT, totalVehEmissions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *totalVehEmissions
     * }
     */
    public static void totalVehEmissions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(totalVehEmissions$LAYOUT, totalVehEmissions$OFFSET, fieldValue);
    }

    private static final AddressLayout numOfLowSpeedEvents$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("numOfLowSpeedEvents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *numOfLowSpeedEvents
     * }
     */
    public static final AddressLayout numOfLowSpeedEvents$layout() {
        return numOfLowSpeedEvents$LAYOUT;
    }

    private static final long numOfLowSpeedEvents$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *numOfLowSpeedEvents
     * }
     */
    public static final long numOfLowSpeedEvents$offset() {
        return numOfLowSpeedEvents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *numOfLowSpeedEvents
     * }
     */
    public static MemorySegment numOfLowSpeedEvents(MemorySegment struct) {
        return struct.get(numOfLowSpeedEvents$LAYOUT, numOfLowSpeedEvents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgLowSpeedCriteria *numOfLowSpeedEvents
     * }
     */
    public static void numOfLowSpeedEvents(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(numOfLowSpeedEvents$LAYOUT, numOfLowSpeedEvents$OFFSET, fieldValue);
    }

    private static final AddressLayout timeStopped$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("timeStopped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *timeStopped
     * }
     */
    public static final AddressLayout timeStopped$layout() {
        return timeStopped$LAYOUT;
    }

    private static final long timeStopped$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *timeStopped
     * }
     */
    public static final long timeStopped$offset() {
        return timeStopped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *timeStopped
     * }
     */
    public static MemorySegment timeStopped(MemorySegment struct) {
        return struct.get(timeStopped$LAYOUT, timeStopped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *timeStopped
     * }
     */
    public static void timeStopped(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timeStopped$LAYOUT, timeStopped$OFFSET, fieldValue);
    }

    private static final AddressLayout numOfStopped$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("numOfStopped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *numOfStopped
     * }
     */
    public static final AddressLayout numOfStopped$layout() {
        return numOfStopped$LAYOUT;
    }

    private static final long numOfStopped$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *numOfStopped
     * }
     */
    public static final long numOfStopped$offset() {
        return numOfStopped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *numOfStopped
     * }
     */
    public static MemorySegment numOfStopped(MemorySegment struct) {
        return struct.get(numOfStopped$LAYOUT, numOfStopped$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgStoppedCriteria *numOfStopped
     * }
     */
    public static void numOfStopped(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(numOfStopped$LAYOUT, numOfStopped$OFFSET, fieldValue);
    }

    private static final AddressLayout locOfStops$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("locOfStops"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *locOfStops
     * }
     */
    public static final AddressLayout locOfStops$layout() {
        return locOfStops$LAYOUT;
    }

    private static final long locOfStops$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *locOfStops
     * }
     */
    public static final long locOfStops$offset() {
        return locOfStops$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *locOfStops
     * }
     */
    public static MemorySegment locOfStops(MemorySegment struct) {
        return struct.get(locOfStops$LAYOUT, locOfStops$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *locOfStops
     * }
     */
    public static void locOfStops(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(locOfStops$LAYOUT, locOfStops$OFFSET, fieldValue);
    }

    private static final AddressLayout regNumOfVehPassed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regNumOfVehPassed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfVehPassed
     * }
     */
    public static final AddressLayout regNumOfVehPassed$layout() {
        return regNumOfVehPassed$LAYOUT;
    }

    private static final long regNumOfVehPassed$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfVehPassed
     * }
     */
    public static final long regNumOfVehPassed$offset() {
        return regNumOfVehPassed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfVehPassed
     * }
     */
    public static MemorySegment regNumOfVehPassed(MemorySegment struct) {
        return struct.get(regNumOfVehPassed$LAYOUT, regNumOfVehPassed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfVehPassed
     * }
     */
    public static void regNumOfVehPassed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regNumOfVehPassed$LAYOUT, regNumOfVehPassed$OFFSET, fieldValue);
    }

    private static final AddressLayout regNumOfSurpassedVeh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regNumOfSurpassedVeh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfSurpassedVeh
     * }
     */
    public static final AddressLayout regNumOfSurpassedVeh$layout() {
        return regNumOfSurpassedVeh$LAYOUT;
    }

    private static final long regNumOfSurpassedVeh$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfSurpassedVeh
     * }
     */
    public static final long regNumOfSurpassedVeh$offset() {
        return regNumOfSurpassedVeh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfSurpassedVeh
     * }
     */
    public static MemorySegment regNumOfSurpassedVeh(MemorySegment struct) {
        return struct.get(regNumOfSurpassedVeh$LAYOUT, regNumOfSurpassedVeh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *regNumOfSurpassedVeh
     * }
     */
    public static void regNumOfSurpassedVeh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regNumOfSurpassedVeh$LAYOUT, regNumOfSurpassedVeh$OFFSET, fieldValue);
    }

    private static final AddressLayout totalMsgsReceived$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("totalMsgsReceived"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *totalMsgsReceived
     * }
     */
    public static final AddressLayout totalMsgsReceived$layout() {
        return totalMsgsReceived$LAYOUT;
    }

    private static final long totalMsgsReceived$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *totalMsgsReceived
     * }
     */
    public static final long totalMsgsReceived$offset() {
        return totalMsgsReceived$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *totalMsgsReceived
     * }
     */
    public static MemorySegment totalMsgsReceived(MemorySegment struct) {
        return struct.get(totalMsgsReceived$LAYOUT, totalMsgsReceived$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct CfgMsgRecepIndicators *totalMsgsReceived
     * }
     */
    public static void totalMsgsReceived(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(totalMsgsReceived$LAYOUT, totalMsgsReceived$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

