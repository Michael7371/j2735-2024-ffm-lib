// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FullPositionVector {
 *     struct DDateTime *utcTime;
 *     Common_Longitude_t Long;
 *     Common_Latitude_t lat;
 *     Common_Elevation_t *elevation;
 *     Heading_t *heading;
 *     struct TransmissionAndSpeed *speed;
 *     struct PositionalAccuracy *posAccuracy;
 *     TimeConfidence_t *timeConfidence;
 *     struct PositionConfidenceSet *posConfidence;
 *     struct SpeedandHeadingandThrottleConfidence *speedConfidence;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class FullPositionVector {

    FullPositionVector() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("utcTime"),
        MessageFrame_h.C_LONG.withName("Long"),
        MessageFrame_h.C_LONG.withName("lat"),
        MessageFrame_h.C_POINTER.withName("elevation"),
        MessageFrame_h.C_POINTER.withName("heading"),
        MessageFrame_h.C_POINTER.withName("speed"),
        MessageFrame_h.C_POINTER.withName("posAccuracy"),
        MessageFrame_h.C_POINTER.withName("timeConfidence"),
        MessageFrame_h.C_POINTER.withName("posConfidence"),
        MessageFrame_h.C_POINTER.withName("speedConfidence"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("FullPositionVector");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout utcTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("utcTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DDateTime *utcTime
     * }
     */
    public static final AddressLayout utcTime$layout() {
        return utcTime$LAYOUT;
    }

    private static final long utcTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DDateTime *utcTime
     * }
     */
    public static final long utcTime$offset() {
        return utcTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DDateTime *utcTime
     * }
     */
    public static MemorySegment utcTime(MemorySegment struct) {
        return struct.get(utcTime$LAYOUT, utcTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DDateTime *utcTime
     * }
     */
    public static void utcTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(utcTime$LAYOUT, utcTime$OFFSET, fieldValue);
    }

    private static final OfLong Long_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Long"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static final OfLong Long_$layout() {
        return Long_$LAYOUT;
    }

    private static final long Long_$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static final long Long_$offset() {
        return Long_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static long Long_(MemorySegment struct) {
        return struct.get(Long_$LAYOUT, Long_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Longitude_t Long
     * }
     */
    public static void Long_(MemorySegment struct, long fieldValue) {
        struct.set(Long_$LAYOUT, Long_$OFFSET, fieldValue);
    }

    private static final OfLong lat$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static final OfLong lat$layout() {
        return lat$LAYOUT;
    }

    private static final long lat$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static final long lat$offset() {
        return lat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static long lat(MemorySegment struct) {
        return struct.get(lat$LAYOUT, lat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Latitude_t lat
     * }
     */
    public static void lat(MemorySegment struct, long fieldValue) {
        struct.set(lat$LAYOUT, lat$OFFSET, fieldValue);
    }

    private static final AddressLayout elevation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("elevation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_Elevation_t *elevation
     * }
     */
    public static final AddressLayout elevation$layout() {
        return elevation$LAYOUT;
    }

    private static final long elevation$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_Elevation_t *elevation
     * }
     */
    public static final long elevation$offset() {
        return elevation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_Elevation_t *elevation
     * }
     */
    public static MemorySegment elevation(MemorySegment struct) {
        return struct.get(elevation$LAYOUT, elevation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_Elevation_t *elevation
     * }
     */
    public static void elevation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(elevation$LAYOUT, elevation$OFFSET, fieldValue);
    }

    private static final AddressLayout heading$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("heading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Heading_t *heading
     * }
     */
    public static final AddressLayout heading$layout() {
        return heading$LAYOUT;
    }

    private static final long heading$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Heading_t *heading
     * }
     */
    public static final long heading$offset() {
        return heading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Heading_t *heading
     * }
     */
    public static MemorySegment heading(MemorySegment struct) {
        return struct.get(heading$LAYOUT, heading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Heading_t *heading
     * }
     */
    public static void heading(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(heading$LAYOUT, heading$OFFSET, fieldValue);
    }

    private static final AddressLayout speed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TransmissionAndSpeed *speed
     * }
     */
    public static final AddressLayout speed$layout() {
        return speed$LAYOUT;
    }

    private static final long speed$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TransmissionAndSpeed *speed
     * }
     */
    public static final long speed$offset() {
        return speed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TransmissionAndSpeed *speed
     * }
     */
    public static MemorySegment speed(MemorySegment struct) {
        return struct.get(speed$LAYOUT, speed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TransmissionAndSpeed *speed
     * }
     */
    public static void speed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speed$LAYOUT, speed$OFFSET, fieldValue);
    }

    private static final AddressLayout posAccuracy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("posAccuracy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static final AddressLayout posAccuracy$layout() {
        return posAccuracy$LAYOUT;
    }

    private static final long posAccuracy$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static final long posAccuracy$offset() {
        return posAccuracy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static MemorySegment posAccuracy(MemorySegment struct) {
        return struct.get(posAccuracy$LAYOUT, posAccuracy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionalAccuracy *posAccuracy
     * }
     */
    public static void posAccuracy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(posAccuracy$LAYOUT, posAccuracy$OFFSET, fieldValue);
    }

    private static final AddressLayout timeConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("timeConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static final AddressLayout timeConfidence$layout() {
        return timeConfidence$LAYOUT;
    }

    private static final long timeConfidence$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static final long timeConfidence$offset() {
        return timeConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static MemorySegment timeConfidence(MemorySegment struct) {
        return struct.get(timeConfidence$LAYOUT, timeConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static void timeConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timeConfidence$LAYOUT, timeConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout posConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("posConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static final AddressLayout posConfidence$layout() {
        return posConfidence$LAYOUT;
    }

    private static final long posConfidence$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static final long posConfidence$offset() {
        return posConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static MemorySegment posConfidence(MemorySegment struct) {
        return struct.get(posConfidence$LAYOUT, posConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static void posConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(posConfidence$LAYOUT, posConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout speedConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speedConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static final AddressLayout speedConfidence$layout() {
        return speedConfidence$LAYOUT;
    }

    private static final long speedConfidence$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static final long speedConfidence$offset() {
        return speedConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static MemorySegment speedConfidence(MemorySegment struct) {
        return struct.get(speedConfidence$LAYOUT, speedConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static void speedConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speedConfidence$LAYOUT, speedConfidence$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

