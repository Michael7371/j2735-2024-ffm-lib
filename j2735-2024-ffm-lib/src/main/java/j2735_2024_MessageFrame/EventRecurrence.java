// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EventRecurrence {
 *     struct DTime *startTime;
 *     struct DTime *endTime;
 *     struct DDate *startDate;
 *     struct DDate *endDate;
 *     BOOLEAN_t monday;
 *     BOOLEAN_t tuesday;
 *     BOOLEAN_t wednesday;
 *     BOOLEAN_t thursday;
 *     BOOLEAN_t friday;
 *     BOOLEAN_t saturday;
 *     BOOLEAN_t sunday;
 *     BOOLEAN_t *exclusion;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class EventRecurrence {

    EventRecurrence() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("startTime"),
        MessageFrame_h.C_POINTER.withName("endTime"),
        MessageFrame_h.C_POINTER.withName("startDate"),
        MessageFrame_h.C_POINTER.withName("endDate"),
        MessageFrame_h.C_INT.withName("monday"),
        MessageFrame_h.C_INT.withName("tuesday"),
        MessageFrame_h.C_INT.withName("wednesday"),
        MessageFrame_h.C_INT.withName("thursday"),
        MessageFrame_h.C_INT.withName("friday"),
        MessageFrame_h.C_INT.withName("saturday"),
        MessageFrame_h.C_INT.withName("sunday"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_POINTER.withName("exclusion"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("EventRecurrence");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout startTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("startTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DTime *startTime
     * }
     */
    public static final AddressLayout startTime$layout() {
        return startTime$LAYOUT;
    }

    private static final long startTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DTime *startTime
     * }
     */
    public static final long startTime$offset() {
        return startTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DTime *startTime
     * }
     */
    public static MemorySegment startTime(MemorySegment struct) {
        return struct.get(startTime$LAYOUT, startTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DTime *startTime
     * }
     */
    public static void startTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(startTime$LAYOUT, startTime$OFFSET, fieldValue);
    }

    private static final AddressLayout endTime$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("endTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DTime *endTime
     * }
     */
    public static final AddressLayout endTime$layout() {
        return endTime$LAYOUT;
    }

    private static final long endTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DTime *endTime
     * }
     */
    public static final long endTime$offset() {
        return endTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DTime *endTime
     * }
     */
    public static MemorySegment endTime(MemorySegment struct) {
        return struct.get(endTime$LAYOUT, endTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DTime *endTime
     * }
     */
    public static void endTime(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(endTime$LAYOUT, endTime$OFFSET, fieldValue);
    }

    private static final AddressLayout startDate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("startDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DDate *startDate
     * }
     */
    public static final AddressLayout startDate$layout() {
        return startDate$LAYOUT;
    }

    private static final long startDate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DDate *startDate
     * }
     */
    public static final long startDate$offset() {
        return startDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DDate *startDate
     * }
     */
    public static MemorySegment startDate(MemorySegment struct) {
        return struct.get(startDate$LAYOUT, startDate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DDate *startDate
     * }
     */
    public static void startDate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(startDate$LAYOUT, startDate$OFFSET, fieldValue);
    }

    private static final AddressLayout endDate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("endDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DDate *endDate
     * }
     */
    public static final AddressLayout endDate$layout() {
        return endDate$LAYOUT;
    }

    private static final long endDate$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DDate *endDate
     * }
     */
    public static final long endDate$offset() {
        return endDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DDate *endDate
     * }
     */
    public static MemorySegment endDate(MemorySegment struct) {
        return struct.get(endDate$LAYOUT, endDate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DDate *endDate
     * }
     */
    public static void endDate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(endDate$LAYOUT, endDate$OFFSET, fieldValue);
    }

    private static final OfInt monday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("monday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t monday
     * }
     */
    public static final OfInt monday$layout() {
        return monday$LAYOUT;
    }

    private static final long monday$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t monday
     * }
     */
    public static final long monday$offset() {
        return monday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t monday
     * }
     */
    public static int monday(MemorySegment struct) {
        return struct.get(monday$LAYOUT, monday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t monday
     * }
     */
    public static void monday(MemorySegment struct, int fieldValue) {
        struct.set(monday$LAYOUT, monday$OFFSET, fieldValue);
    }

    private static final OfInt tuesday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tuesday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t tuesday
     * }
     */
    public static final OfInt tuesday$layout() {
        return tuesday$LAYOUT;
    }

    private static final long tuesday$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t tuesday
     * }
     */
    public static final long tuesday$offset() {
        return tuesday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t tuesday
     * }
     */
    public static int tuesday(MemorySegment struct) {
        return struct.get(tuesday$LAYOUT, tuesday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t tuesday
     * }
     */
    public static void tuesday(MemorySegment struct, int fieldValue) {
        struct.set(tuesday$LAYOUT, tuesday$OFFSET, fieldValue);
    }

    private static final OfInt wednesday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wednesday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t wednesday
     * }
     */
    public static final OfInt wednesday$layout() {
        return wednesday$LAYOUT;
    }

    private static final long wednesday$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t wednesday
     * }
     */
    public static final long wednesday$offset() {
        return wednesday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t wednesday
     * }
     */
    public static int wednesday(MemorySegment struct) {
        return struct.get(wednesday$LAYOUT, wednesday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t wednesday
     * }
     */
    public static void wednesday(MemorySegment struct, int fieldValue) {
        struct.set(wednesday$LAYOUT, wednesday$OFFSET, fieldValue);
    }

    private static final OfInt thursday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thursday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t thursday
     * }
     */
    public static final OfInt thursday$layout() {
        return thursday$LAYOUT;
    }

    private static final long thursday$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t thursday
     * }
     */
    public static final long thursday$offset() {
        return thursday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t thursday
     * }
     */
    public static int thursday(MemorySegment struct) {
        return struct.get(thursday$LAYOUT, thursday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t thursday
     * }
     */
    public static void thursday(MemorySegment struct, int fieldValue) {
        struct.set(thursday$LAYOUT, thursday$OFFSET, fieldValue);
    }

    private static final OfInt friday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("friday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t friday
     * }
     */
    public static final OfInt friday$layout() {
        return friday$LAYOUT;
    }

    private static final long friday$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t friday
     * }
     */
    public static final long friday$offset() {
        return friday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t friday
     * }
     */
    public static int friday(MemorySegment struct) {
        return struct.get(friday$LAYOUT, friday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t friday
     * }
     */
    public static void friday(MemorySegment struct, int fieldValue) {
        struct.set(friday$LAYOUT, friday$OFFSET, fieldValue);
    }

    private static final OfInt saturday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("saturday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t saturday
     * }
     */
    public static final OfInt saturday$layout() {
        return saturday$LAYOUT;
    }

    private static final long saturday$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t saturday
     * }
     */
    public static final long saturday$offset() {
        return saturday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t saturday
     * }
     */
    public static int saturday(MemorySegment struct) {
        return struct.get(saturday$LAYOUT, saturday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t saturday
     * }
     */
    public static void saturday(MemorySegment struct, int fieldValue) {
        struct.set(saturday$LAYOUT, saturday$OFFSET, fieldValue);
    }

    private static final OfInt sunday$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sunday"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t sunday
     * }
     */
    public static final OfInt sunday$layout() {
        return sunday$LAYOUT;
    }

    private static final long sunday$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t sunday
     * }
     */
    public static final long sunday$offset() {
        return sunday$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t sunday
     * }
     */
    public static int sunday(MemorySegment struct) {
        return struct.get(sunday$LAYOUT, sunday$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t sunday
     * }
     */
    public static void sunday(MemorySegment struct, int fieldValue) {
        struct.set(sunday$LAYOUT, sunday$OFFSET, fieldValue);
    }

    private static final AddressLayout exclusion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("exclusion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *exclusion
     * }
     */
    public static final AddressLayout exclusion$layout() {
        return exclusion$LAYOUT;
    }

    private static final long exclusion$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *exclusion
     * }
     */
    public static final long exclusion$offset() {
        return exclusion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *exclusion
     * }
     */
    public static MemorySegment exclusion(MemorySegment struct) {
        return struct.get(exclusion$LAYOUT, exclusion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *exclusion
     * }
     */
    public static void exclusion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(exclusion$LAYOUT, exclusion$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

