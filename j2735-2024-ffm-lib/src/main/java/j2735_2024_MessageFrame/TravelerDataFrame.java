// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TravelerDataFrame {
 *     SSPindex_t doNotUse1;
 *     TravelerInfoType_t frameType;
 *     struct TravelerDataFrame__msgId {
 *         TravelerDataFrame__msgId_PR present;
 *         union TravelerDataFrame__msgId_u {
 *             FurtherInfoID_t furtherInfoID;
 *             RoadSignID_t roadSignID;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } msgId;
 *     DYear_t *startYear;
 *     MinuteOfTheYear_t startTime;
 *     MinutesDuration_t durationTime;
 *     SignPriority_t priority;
 *     SSPindex_t doNotUse2;
 *     struct TravelerDataFrame__regions {
 *         struct {
 *             struct GeographicalPath **array;
 *             int count;
 *             int size;
 *             void (*free)(struct GeographicalPath *);
 *         } list;
 *         asn_struct_ctx_t _asn_ctx;
 *     } regions;
 *     SSPindex_t doNotUse3;
 *     SSPindex_t doNotUse4;
 *     struct TravelerDataFrame__content {
 *         TravelerDataFrame__content_PR present;
 *         union TravelerDataFrame__content_u {
 *             ITIS_ITIScodesAndText_t advisory;
 *             WorkZone_t workZone;
 *             GenericSignage_t genericSign;
 *             SpeedLimit_t speedLimit;
 *             ExitService_t exitService;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } content;
 *     URL_Short_t *url;
 *     struct TravelerDataFrameNewPartIIIContent *contentNew;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TravelerDataFrame {

    TravelerDataFrame() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("doNotUse1"),
        MessageFrame_h.C_LONG.withName("frameType"),
        TravelerDataFrame__msgId.layout().withName("msgId"),
        MessageFrame_h.C_POINTER.withName("startYear"),
        MessageFrame_h.C_LONG.withName("startTime"),
        MessageFrame_h.C_LONG.withName("durationTime"),
        MessageFrame_h.C_LONG.withName("priority"),
        MessageFrame_h.C_LONG.withName("doNotUse2"),
        TravelerDataFrame__regions.layout().withName("regions"),
        MessageFrame_h.C_LONG.withName("doNotUse3"),
        MessageFrame_h.C_LONG.withName("doNotUse4"),
        TravelerDataFrame__content.layout().withName("content"),
        MessageFrame_h.C_POINTER.withName("url"),
        MessageFrame_h.C_POINTER.withName("contentNew"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TravelerDataFrame");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong doNotUse1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("doNotUse1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse1
     * }
     */
    public static final OfLong doNotUse1$layout() {
        return doNotUse1$LAYOUT;
    }

    private static final long doNotUse1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse1
     * }
     */
    public static final long doNotUse1$offset() {
        return doNotUse1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse1
     * }
     */
    public static long doNotUse1(MemorySegment struct) {
        return struct.get(doNotUse1$LAYOUT, doNotUse1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse1
     * }
     */
    public static void doNotUse1(MemorySegment struct, long fieldValue) {
        struct.set(doNotUse1$LAYOUT, doNotUse1$OFFSET, fieldValue);
    }

    private static final OfLong frameType$LAYOUT = (OfLong)$LAYOUT.select(groupElement("frameType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TravelerInfoType_t frameType
     * }
     */
    public static final OfLong frameType$layout() {
        return frameType$LAYOUT;
    }

    private static final long frameType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TravelerInfoType_t frameType
     * }
     */
    public static final long frameType$offset() {
        return frameType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TravelerInfoType_t frameType
     * }
     */
    public static long frameType(MemorySegment struct) {
        return struct.get(frameType$LAYOUT, frameType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TravelerInfoType_t frameType
     * }
     */
    public static void frameType(MemorySegment struct, long fieldValue) {
        struct.set(frameType$LAYOUT, frameType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct TravelerDataFrame__msgId {
     *     TravelerDataFrame__msgId_PR present;
     *     union TravelerDataFrame__msgId_u {
     *         FurtherInfoID_t furtherInfoID;
     *         RoadSignID_t roadSignID;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class TravelerDataFrame__msgId {

        TravelerDataFrame__msgId() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            TravelerDataFrame__msgId_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("TravelerDataFrame__msgId");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TravelerDataFrame__msgId_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TravelerDataFrame__msgId_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TravelerDataFrame__msgId_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TravelerDataFrame__msgId_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union TravelerDataFrame__msgId_u {
         *     FurtherInfoID_t furtherInfoID;
         *     RoadSignID_t roadSignID;
         * }
         * }
         */
        public static class TravelerDataFrame__msgId_u {

            TravelerDataFrame__msgId_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                OCTET_STRING.layout().withName("furtherInfoID"),
                RoadSignID.layout().withName("roadSignID")
            ).withName("TravelerDataFrame__msgId_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final GroupLayout furtherInfoID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("furtherInfoID"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * FurtherInfoID_t furtherInfoID
             * }
             */
            public static final GroupLayout furtherInfoID$layout() {
                return furtherInfoID$LAYOUT;
            }

            private static final long furtherInfoID$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * FurtherInfoID_t furtherInfoID
             * }
             */
            public static final long furtherInfoID$offset() {
                return furtherInfoID$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * FurtherInfoID_t furtherInfoID
             * }
             */
            public static MemorySegment furtherInfoID(MemorySegment union) {
                return union.asSlice(furtherInfoID$OFFSET, furtherInfoID$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * FurtherInfoID_t furtherInfoID
             * }
             */
            public static void furtherInfoID(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, furtherInfoID$OFFSET, furtherInfoID$LAYOUT.byteSize());
            }

            private static final GroupLayout roadSignID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("roadSignID"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * RoadSignID_t roadSignID
             * }
             */
            public static final GroupLayout roadSignID$layout() {
                return roadSignID$LAYOUT;
            }

            private static final long roadSignID$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * RoadSignID_t roadSignID
             * }
             */
            public static final long roadSignID$offset() {
                return roadSignID$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * RoadSignID_t roadSignID
             * }
             */
            public static MemorySegment roadSignID(MemorySegment union) {
                return union.asSlice(roadSignID$OFFSET, roadSignID$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * RoadSignID_t roadSignID
             * }
             */
            public static void roadSignID(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, roadSignID$OFFSET, roadSignID$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__msgId_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__msgId_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__msgId_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__msgId_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 152;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout msgId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("msgId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__msgId msgId
     * }
     */
    public static final GroupLayout msgId$layout() {
        return msgId$LAYOUT;
    }

    private static final long msgId$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__msgId msgId
     * }
     */
    public static final long msgId$offset() {
        return msgId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__msgId msgId
     * }
     */
    public static MemorySegment msgId(MemorySegment struct) {
        return struct.asSlice(msgId$OFFSET, msgId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__msgId msgId
     * }
     */
    public static void msgId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, msgId$OFFSET, msgId$LAYOUT.byteSize());
    }

    private static final AddressLayout startYear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("startYear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DYear_t *startYear
     * }
     */
    public static final AddressLayout startYear$layout() {
        return startYear$LAYOUT;
    }

    private static final long startYear$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DYear_t *startYear
     * }
     */
    public static final long startYear$offset() {
        return startYear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DYear_t *startYear
     * }
     */
    public static MemorySegment startYear(MemorySegment struct) {
        return struct.get(startYear$LAYOUT, startYear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DYear_t *startYear
     * }
     */
    public static void startYear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(startYear$LAYOUT, startYear$OFFSET, fieldValue);
    }

    private static final OfLong startTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("startTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MinuteOfTheYear_t startTime
     * }
     */
    public static final OfLong startTime$layout() {
        return startTime$LAYOUT;
    }

    private static final long startTime$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MinuteOfTheYear_t startTime
     * }
     */
    public static final long startTime$offset() {
        return startTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MinuteOfTheYear_t startTime
     * }
     */
    public static long startTime(MemorySegment struct) {
        return struct.get(startTime$LAYOUT, startTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MinuteOfTheYear_t startTime
     * }
     */
    public static void startTime(MemorySegment struct, long fieldValue) {
        struct.set(startTime$LAYOUT, startTime$OFFSET, fieldValue);
    }

    private static final OfLong durationTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("durationTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MinutesDuration_t durationTime
     * }
     */
    public static final OfLong durationTime$layout() {
        return durationTime$LAYOUT;
    }

    private static final long durationTime$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MinutesDuration_t durationTime
     * }
     */
    public static final long durationTime$offset() {
        return durationTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MinutesDuration_t durationTime
     * }
     */
    public static long durationTime(MemorySegment struct) {
        return struct.get(durationTime$LAYOUT, durationTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MinutesDuration_t durationTime
     * }
     */
    public static void durationTime(MemorySegment struct, long fieldValue) {
        struct.set(durationTime$LAYOUT, durationTime$OFFSET, fieldValue);
    }

    private static final OfLong priority$LAYOUT = (OfLong)$LAYOUT.select(groupElement("priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SignPriority_t priority
     * }
     */
    public static final OfLong priority$layout() {
        return priority$LAYOUT;
    }

    private static final long priority$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SignPriority_t priority
     * }
     */
    public static final long priority$offset() {
        return priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SignPriority_t priority
     * }
     */
    public static long priority(MemorySegment struct) {
        return struct.get(priority$LAYOUT, priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SignPriority_t priority
     * }
     */
    public static void priority(MemorySegment struct, long fieldValue) {
        struct.set(priority$LAYOUT, priority$OFFSET, fieldValue);
    }

    private static final OfLong doNotUse2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("doNotUse2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse2
     * }
     */
    public static final OfLong doNotUse2$layout() {
        return doNotUse2$LAYOUT;
    }

    private static final long doNotUse2$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse2
     * }
     */
    public static final long doNotUse2$offset() {
        return doNotUse2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse2
     * }
     */
    public static long doNotUse2(MemorySegment struct) {
        return struct.get(doNotUse2$LAYOUT, doNotUse2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse2
     * }
     */
    public static void doNotUse2(MemorySegment struct, long fieldValue) {
        struct.set(doNotUse2$LAYOUT, doNotUse2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct TravelerDataFrame__regions {
     *     struct {
     *         struct GeographicalPath **array;
     *         int count;
     *         int size;
     *         void (*free)(struct GeographicalPath *);
     *     } list;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class TravelerDataFrame__regions {

        TravelerDataFrame__regions() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            list.layout().withName("list"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("TravelerDataFrame__regions");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     struct GeographicalPath **array;
         *     int count;
         *     int size;
         *     void (*free)(struct GeographicalPath *);
         * }
         * }
         */
        public static class list {

            list() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                MessageFrame_h.C_POINTER.withName("array"),
                MessageFrame_h.C_INT.withName("count"),
                MessageFrame_h.C_INT.withName("size"),
                MessageFrame_h.C_POINTER.withName("free")
            ).withName("$anon$78:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct GeographicalPath **array
             * }
             */
            public static final AddressLayout array$layout() {
                return array$LAYOUT;
            }

            private static final long array$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct GeographicalPath **array
             * }
             */
            public static final long array$offset() {
                return array$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct GeographicalPath **array
             * }
             */
            public static MemorySegment array(MemorySegment struct) {
                return struct.get(array$LAYOUT, array$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct GeographicalPath **array
             * }
             */
            public static void array(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(array$LAYOUT, array$OFFSET, fieldValue);
            }

            private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final OfInt count$layout() {
                return count$LAYOUT;
            }

            private static final long count$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static final long count$offset() {
                return count$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static int count(MemorySegment struct) {
                return struct.get(count$LAYOUT, count$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int count
             * }
             */
            public static void count(MemorySegment struct, int fieldValue) {
                struct.set(count$LAYOUT, count$OFFSET, fieldValue);
            }

            private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final OfInt size$layout() {
                return size$LAYOUT;
            }

            private static final long size$OFFSET = 12;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final long size$offset() {
                return size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static int size(MemorySegment struct) {
                return struct.get(size$LAYOUT, size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static void size(MemorySegment struct, int fieldValue) {
                struct.set(size$LAYOUT, size$OFFSET, fieldValue);
            }

            /**
             * {@snippet lang=c :
             * void (*free)(struct GeographicalPath *)
             * }
             */
            public static class free {

                free() {
                    // Should not be called directly
                }

                /**
                 * The function pointer signature, expressed as a functional interface
                 */
                public interface Function {
                    void apply(MemorySegment _x0);
                }

                private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                    MessageFrame_h.C_POINTER
                );

                /**
                 * The descriptor of this function pointer
                 */
                public static FunctionDescriptor descriptor() {
                    return $DESC;
                }

                private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

                /**
                 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
                 * The lifetime of the returned segment is managed by {@code arena}
                 */
                public static MemorySegment allocate(Function fi, Arena arena) {
                    return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
                }

                private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

                /**
                 * Invoke the upcall stub {@code funcPtr}, with given parameters
                 */
                public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                    try {
                         DOWN$MH.invokeExact(funcPtr, _x0);
                    } catch (Throwable ex$) {
                        throw new AssertionError("should not reach here", ex$);
                    }
                }
            }

            private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void (*free)(struct GeographicalPath *)
             * }
             */
            public static final AddressLayout free$layout() {
                return free$LAYOUT;
            }

            private static final long free$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void (*free)(struct GeographicalPath *)
             * }
             */
            public static final long free$offset() {
                return free$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void (*free)(struct GeographicalPath *)
             * }
             */
            public static MemorySegment free(MemorySegment struct) {
                return struct.get(free$LAYOUT, free$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void (*free)(struct GeographicalPath *)
             * }
             */
            public static void free(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(free$LAYOUT, free$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     struct GeographicalPath **array;
         *     int count;
         *     int size;
         *     void (*free)(struct GeographicalPath *);
         * } list
         * }
         */
        public static final GroupLayout list$layout() {
            return list$LAYOUT;
        }

        private static final long list$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     struct GeographicalPath **array;
         *     int count;
         *     int size;
         *     void (*free)(struct GeographicalPath *);
         * } list
         * }
         */
        public static final long list$offset() {
            return list$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     struct GeographicalPath **array;
         *     int count;
         *     int size;
         *     void (*free)(struct GeographicalPath *);
         * } list
         * }
         */
        public static MemorySegment list(MemorySegment struct) {
            return struct.asSlice(list$OFFSET, list$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     struct GeographicalPath **array;
         *     int count;
         *     int size;
         *     void (*free)(struct GeographicalPath *);
         * } list
         * }
         */
        public static void list(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, list$OFFSET, list$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout regions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("regions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__regions regions
     * }
     */
    public static final GroupLayout regions$layout() {
        return regions$LAYOUT;
    }

    private static final long regions$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__regions regions
     * }
     */
    public static final long regions$offset() {
        return regions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__regions regions
     * }
     */
    public static MemorySegment regions(MemorySegment struct) {
        return struct.asSlice(regions$OFFSET, regions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__regions regions
     * }
     */
    public static void regions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, regions$OFFSET, regions$LAYOUT.byteSize());
    }

    private static final OfLong doNotUse3$LAYOUT = (OfLong)$LAYOUT.select(groupElement("doNotUse3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse3
     * }
     */
    public static final OfLong doNotUse3$layout() {
        return doNotUse3$LAYOUT;
    }

    private static final long doNotUse3$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse3
     * }
     */
    public static final long doNotUse3$offset() {
        return doNotUse3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse3
     * }
     */
    public static long doNotUse3(MemorySegment struct) {
        return struct.get(doNotUse3$LAYOUT, doNotUse3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse3
     * }
     */
    public static void doNotUse3(MemorySegment struct, long fieldValue) {
        struct.set(doNotUse3$LAYOUT, doNotUse3$OFFSET, fieldValue);
    }

    private static final OfLong doNotUse4$LAYOUT = (OfLong)$LAYOUT.select(groupElement("doNotUse4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse4
     * }
     */
    public static final OfLong doNotUse4$layout() {
        return doNotUse4$LAYOUT;
    }

    private static final long doNotUse4$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse4
     * }
     */
    public static final long doNotUse4$offset() {
        return doNotUse4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse4
     * }
     */
    public static long doNotUse4(MemorySegment struct) {
        return struct.get(doNotUse4$LAYOUT, doNotUse4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse4
     * }
     */
    public static void doNotUse4(MemorySegment struct, long fieldValue) {
        struct.set(doNotUse4$LAYOUT, doNotUse4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct TravelerDataFrame__content {
     *     TravelerDataFrame__content_PR present;
     *     union TravelerDataFrame__content_u {
     *         ITIS_ITIScodesAndText_t advisory;
     *         WorkZone_t workZone;
     *         GenericSignage_t genericSign;
     *         SpeedLimit_t speedLimit;
     *         ExitService_t exitService;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class TravelerDataFrame__content {

        TravelerDataFrame__content() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            TravelerDataFrame__content_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("TravelerDataFrame__content");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TravelerDataFrame__content_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TravelerDataFrame__content_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TravelerDataFrame__content_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TravelerDataFrame__content_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union TravelerDataFrame__content_u {
         *     ITIS_ITIScodesAndText_t advisory;
         *     WorkZone_t workZone;
         *     GenericSignage_t genericSign;
         *     SpeedLimit_t speedLimit;
         *     ExitService_t exitService;
         * }
         * }
         */
        public static class TravelerDataFrame__content_u {

            TravelerDataFrame__content_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                ITIS_ITIScodesAndText.layout().withName("advisory"),
                WorkZone.layout().withName("workZone"),
                GenericSignage.layout().withName("genericSign"),
                SpeedLimit.layout().withName("speedLimit"),
                ExitService.layout().withName("exitService")
            ).withName("TravelerDataFrame__content_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final GroupLayout advisory$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("advisory"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ITIS_ITIScodesAndText_t advisory
             * }
             */
            public static final GroupLayout advisory$layout() {
                return advisory$LAYOUT;
            }

            private static final long advisory$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ITIS_ITIScodesAndText_t advisory
             * }
             */
            public static final long advisory$offset() {
                return advisory$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ITIS_ITIScodesAndText_t advisory
             * }
             */
            public static MemorySegment advisory(MemorySegment union) {
                return union.asSlice(advisory$OFFSET, advisory$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ITIS_ITIScodesAndText_t advisory
             * }
             */
            public static void advisory(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, advisory$OFFSET, advisory$LAYOUT.byteSize());
            }

            private static final GroupLayout workZone$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("workZone"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * WorkZone_t workZone
             * }
             */
            public static final GroupLayout workZone$layout() {
                return workZone$LAYOUT;
            }

            private static final long workZone$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * WorkZone_t workZone
             * }
             */
            public static final long workZone$offset() {
                return workZone$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * WorkZone_t workZone
             * }
             */
            public static MemorySegment workZone(MemorySegment union) {
                return union.asSlice(workZone$OFFSET, workZone$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * WorkZone_t workZone
             * }
             */
            public static void workZone(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, workZone$OFFSET, workZone$LAYOUT.byteSize());
            }

            private static final GroupLayout genericSign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("genericSign"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * GenericSignage_t genericSign
             * }
             */
            public static final GroupLayout genericSign$layout() {
                return genericSign$LAYOUT;
            }

            private static final long genericSign$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * GenericSignage_t genericSign
             * }
             */
            public static final long genericSign$offset() {
                return genericSign$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * GenericSignage_t genericSign
             * }
             */
            public static MemorySegment genericSign(MemorySegment union) {
                return union.asSlice(genericSign$OFFSET, genericSign$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * GenericSignage_t genericSign
             * }
             */
            public static void genericSign(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, genericSign$OFFSET, genericSign$LAYOUT.byteSize());
            }

            private static final GroupLayout speedLimit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("speedLimit"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * SpeedLimit_t speedLimit
             * }
             */
            public static final GroupLayout speedLimit$layout() {
                return speedLimit$LAYOUT;
            }

            private static final long speedLimit$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * SpeedLimit_t speedLimit
             * }
             */
            public static final long speedLimit$offset() {
                return speedLimit$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * SpeedLimit_t speedLimit
             * }
             */
            public static MemorySegment speedLimit(MemorySegment union) {
                return union.asSlice(speedLimit$OFFSET, speedLimit$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * SpeedLimit_t speedLimit
             * }
             */
            public static void speedLimit(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, speedLimit$OFFSET, speedLimit$LAYOUT.byteSize());
            }

            private static final GroupLayout exitService$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("exitService"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ExitService_t exitService
             * }
             */
            public static final GroupLayout exitService$layout() {
                return exitService$LAYOUT;
            }

            private static final long exitService$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ExitService_t exitService
             * }
             */
            public static final long exitService$offset() {
                return exitService$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ExitService_t exitService
             * }
             */
            public static MemorySegment exitService(MemorySegment union) {
                return union.asSlice(exitService$OFFSET, exitService$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ExitService_t exitService
             * }
             */
            public static void exitService(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, exitService$OFFSET, exitService$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__content_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__content_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__content_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union TravelerDataFrame__content_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 56;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout content$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("content"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__content content
     * }
     */
    public static final GroupLayout content$layout() {
        return content$LAYOUT;
    }

    private static final long content$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__content content
     * }
     */
    public static final long content$offset() {
        return content$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__content content
     * }
     */
    public static MemorySegment content(MemorySegment struct) {
        return struct.asSlice(content$OFFSET, content$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrame__content content
     * }
     */
    public static void content(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, content$OFFSET, content$LAYOUT.byteSize());
    }

    private static final AddressLayout url$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("url"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * URL_Short_t *url
     * }
     */
    public static final AddressLayout url$layout() {
        return url$LAYOUT;
    }

    private static final long url$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * URL_Short_t *url
     * }
     */
    public static final long url$offset() {
        return url$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * URL_Short_t *url
     * }
     */
    public static MemorySegment url(MemorySegment struct) {
        return struct.get(url$LAYOUT, url$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * URL_Short_t *url
     * }
     */
    public static void url(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(url$LAYOUT, url$OFFSET, fieldValue);
    }

    private static final AddressLayout contentNew$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("contentNew"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TravelerDataFrameNewPartIIIContent *contentNew
     * }
     */
    public static final AddressLayout contentNew$layout() {
        return contentNew$LAYOUT;
    }

    private static final long contentNew$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TravelerDataFrameNewPartIIIContent *contentNew
     * }
     */
    public static final long contentNew$offset() {
        return contentNew$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrameNewPartIIIContent *contentNew
     * }
     */
    public static MemorySegment contentNew(MemorySegment struct) {
        return struct.get(contentNew$LAYOUT, contentNew$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TravelerDataFrameNewPartIIIContent *contentNew
     * }
     */
    public static void contentNew(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(contentNew$LAYOUT, contentNew$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

