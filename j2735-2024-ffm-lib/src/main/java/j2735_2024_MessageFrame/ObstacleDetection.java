// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ObstacleDetection {
 *     ObstacleDistance_t obDist;
 *     ObstacleDirection_t obDirect;
 *     ITIS_ITIScodes_t *description;
 *     ITIS_GenericLocations_t *locationDetails;
 *     DDateTime_t dateTime;
 *     VerticalAccelerationThreshold_t *vertEvent;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class ObstacleDetection {

    ObstacleDetection() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("obDist"),
        MessageFrame_h.C_LONG.withName("obDirect"),
        MessageFrame_h.C_POINTER.withName("description"),
        MessageFrame_h.C_POINTER.withName("locationDetails"),
        DDateTime.layout().withName("dateTime"),
        MessageFrame_h.C_POINTER.withName("vertEvent"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("ObstacleDetection");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong obDist$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obDist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ObstacleDistance_t obDist
     * }
     */
    public static final OfLong obDist$layout() {
        return obDist$LAYOUT;
    }

    private static final long obDist$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ObstacleDistance_t obDist
     * }
     */
    public static final long obDist$offset() {
        return obDist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ObstacleDistance_t obDist
     * }
     */
    public static long obDist(MemorySegment struct) {
        return struct.get(obDist$LAYOUT, obDist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ObstacleDistance_t obDist
     * }
     */
    public static void obDist(MemorySegment struct, long fieldValue) {
        struct.set(obDist$LAYOUT, obDist$OFFSET, fieldValue);
    }

    private static final OfLong obDirect$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obDirect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ObstacleDirection_t obDirect
     * }
     */
    public static final OfLong obDirect$layout() {
        return obDirect$LAYOUT;
    }

    private static final long obDirect$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ObstacleDirection_t obDirect
     * }
     */
    public static final long obDirect$offset() {
        return obDirect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ObstacleDirection_t obDirect
     * }
     */
    public static long obDirect(MemorySegment struct) {
        return struct.get(obDirect$LAYOUT, obDirect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ObstacleDirection_t obDirect
     * }
     */
    public static void obDirect(MemorySegment struct, long fieldValue) {
        struct.set(obDirect$LAYOUT, obDirect$OFFSET, fieldValue);
    }

    private static final AddressLayout description$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ITIS_ITIScodes_t *description
     * }
     */
    public static final AddressLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ITIS_ITIScodes_t *description
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ITIS_ITIScodes_t *description
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.get(description$LAYOUT, description$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ITIS_ITIScodes_t *description
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(description$LAYOUT, description$OFFSET, fieldValue);
    }

    private static final AddressLayout locationDetails$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("locationDetails"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ITIS_GenericLocations_t *locationDetails
     * }
     */
    public static final AddressLayout locationDetails$layout() {
        return locationDetails$LAYOUT;
    }

    private static final long locationDetails$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ITIS_GenericLocations_t *locationDetails
     * }
     */
    public static final long locationDetails$offset() {
        return locationDetails$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ITIS_GenericLocations_t *locationDetails
     * }
     */
    public static MemorySegment locationDetails(MemorySegment struct) {
        return struct.get(locationDetails$LAYOUT, locationDetails$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ITIS_GenericLocations_t *locationDetails
     * }
     */
    public static void locationDetails(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(locationDetails$LAYOUT, locationDetails$OFFSET, fieldValue);
    }

    private static final GroupLayout dateTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dateTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t dateTime
     * }
     */
    public static final GroupLayout dateTime$layout() {
        return dateTime$LAYOUT;
    }

    private static final long dateTime$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t dateTime
     * }
     */
    public static final long dateTime$offset() {
        return dateTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t dateTime
     * }
     */
    public static MemorySegment dateTime(MemorySegment struct) {
        return struct.asSlice(dateTime$OFFSET, dateTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t dateTime
     * }
     */
    public static void dateTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dateTime$OFFSET, dateTime$LAYOUT.byteSize());
    }

    private static final AddressLayout vertEvent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertEvent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VerticalAccelerationThreshold_t *vertEvent
     * }
     */
    public static final AddressLayout vertEvent$layout() {
        return vertEvent$LAYOUT;
    }

    private static final long vertEvent$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VerticalAccelerationThreshold_t *vertEvent
     * }
     */
    public static final long vertEvent$offset() {
        return vertEvent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VerticalAccelerationThreshold_t *vertEvent
     * }
     */
    public static MemorySegment vertEvent(MemorySegment struct) {
        return struct.get(vertEvent$LAYOUT, vertEvent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VerticalAccelerationThreshold_t *vertEvent
     * }
     */
    public static void vertEvent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vertEvent$LAYOUT, vertEvent$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

