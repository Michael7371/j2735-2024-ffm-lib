// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ConfigInfo {
 *     long configID;
 *     long configVersion;
 *     DDateTime_t startDate;
 *     DDateTime_t expirationDate;
 *     long configurationFeeType;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class ConfigInfo {

    ConfigInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("configID"),
        MessageFrame_h.C_LONG.withName("configVersion"),
        DDateTime.layout().withName("startDate"),
        DDateTime.layout().withName("expirationDate"),
        MessageFrame_h.C_LONG.withName("configurationFeeType"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("ConfigInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong configID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("configID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long configID
     * }
     */
    public static final OfLong configID$layout() {
        return configID$LAYOUT;
    }

    private static final long configID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long configID
     * }
     */
    public static final long configID$offset() {
        return configID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long configID
     * }
     */
    public static long configID(MemorySegment struct) {
        return struct.get(configID$LAYOUT, configID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long configID
     * }
     */
    public static void configID(MemorySegment struct, long fieldValue) {
        struct.set(configID$LAYOUT, configID$OFFSET, fieldValue);
    }

    private static final OfLong configVersion$LAYOUT = (OfLong)$LAYOUT.select(groupElement("configVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long configVersion
     * }
     */
    public static final OfLong configVersion$layout() {
        return configVersion$LAYOUT;
    }

    private static final long configVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long configVersion
     * }
     */
    public static final long configVersion$offset() {
        return configVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long configVersion
     * }
     */
    public static long configVersion(MemorySegment struct) {
        return struct.get(configVersion$LAYOUT, configVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long configVersion
     * }
     */
    public static void configVersion(MemorySegment struct, long fieldValue) {
        struct.set(configVersion$LAYOUT, configVersion$OFFSET, fieldValue);
    }

    private static final GroupLayout startDate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("startDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t startDate
     * }
     */
    public static final GroupLayout startDate$layout() {
        return startDate$LAYOUT;
    }

    private static final long startDate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t startDate
     * }
     */
    public static final long startDate$offset() {
        return startDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t startDate
     * }
     */
    public static MemorySegment startDate(MemorySegment struct) {
        return struct.asSlice(startDate$OFFSET, startDate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t startDate
     * }
     */
    public static void startDate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, startDate$OFFSET, startDate$LAYOUT.byteSize());
    }

    private static final GroupLayout expirationDate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("expirationDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t expirationDate
     * }
     */
    public static final GroupLayout expirationDate$layout() {
        return expirationDate$LAYOUT;
    }

    private static final long expirationDate$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t expirationDate
     * }
     */
    public static final long expirationDate$offset() {
        return expirationDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t expirationDate
     * }
     */
    public static MemorySegment expirationDate(MemorySegment struct) {
        return struct.asSlice(expirationDate$OFFSET, expirationDate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t expirationDate
     * }
     */
    public static void expirationDate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, expirationDate$OFFSET, expirationDate$LAYOUT.byteSize());
    }

    private static final OfLong configurationFeeType$LAYOUT = (OfLong)$LAYOUT.select(groupElement("configurationFeeType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long configurationFeeType
     * }
     */
    public static final OfLong configurationFeeType$layout() {
        return configurationFeeType$LAYOUT;
    }

    private static final long configurationFeeType$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long configurationFeeType
     * }
     */
    public static final long configurationFeeType$offset() {
        return configurationFeeType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long configurationFeeType
     * }
     */
    public static long configurationFeeType(MemorySegment struct) {
        return struct.get(configurationFeeType$LAYOUT, configurationFeeType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long configurationFeeType
     * }
     */
    public static void configurationFeeType(MemorySegment struct, long fieldValue) {
        struct.set(configurationFeeType$LAYOUT, configurationFeeType$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

