// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct NtcipPavementTreatment {
 *     NTCIPEssPavementTreatmentLatitude_t latitude;
 *     NTCIPEssPavementTreatmentLongitude_t longitude;
 *     NTCIPEssPavementTreatmentLocation_t location;
 *     NTCIPEssPaveTreatProductType_t *productType;
 *     NTCIPEssPaveTreatProductForm_t *form;
 *     NTCIPEssPercentProductMix_t *percentage;
 *     NTCIPEssPaveTreatmentAmount_t *amount;
 *     NTCIPEssPaveTreatmentWidth_t *width;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class NtcipPavementTreatment {

    NtcipPavementTreatment() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("latitude"),
        MessageFrame_h.C_LONG.withName("longitude"),
        OCTET_STRING.layout().withName("location"),
        MessageFrame_h.C_POINTER.withName("productType"),
        MessageFrame_h.C_POINTER.withName("form"),
        MessageFrame_h.C_POINTER.withName("percentage"),
        MessageFrame_h.C_POINTER.withName("amount"),
        MessageFrame_h.C_POINTER.withName("width"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("NtcipPavementTreatment");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong latitude$LAYOUT = (OfLong)$LAYOUT.select(groupElement("latitude"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLatitude_t latitude
     * }
     */
    public static final OfLong latitude$layout() {
        return latitude$LAYOUT;
    }

    private static final long latitude$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLatitude_t latitude
     * }
     */
    public static final long latitude$offset() {
        return latitude$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLatitude_t latitude
     * }
     */
    public static long latitude(MemorySegment struct) {
        return struct.get(latitude$LAYOUT, latitude$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLatitude_t latitude
     * }
     */
    public static void latitude(MemorySegment struct, long fieldValue) {
        struct.set(latitude$LAYOUT, latitude$OFFSET, fieldValue);
    }

    private static final OfLong longitude$LAYOUT = (OfLong)$LAYOUT.select(groupElement("longitude"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLongitude_t longitude
     * }
     */
    public static final OfLong longitude$layout() {
        return longitude$LAYOUT;
    }

    private static final long longitude$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLongitude_t longitude
     * }
     */
    public static final long longitude$offset() {
        return longitude$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLongitude_t longitude
     * }
     */
    public static long longitude(MemorySegment struct) {
        return struct.get(longitude$LAYOUT, longitude$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLongitude_t longitude
     * }
     */
    public static void longitude(MemorySegment struct, long fieldValue) {
        struct.set(longitude$LAYOUT, longitude$OFFSET, fieldValue);
    }

    private static final GroupLayout location$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("location"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLocation_t location
     * }
     */
    public static final GroupLayout location$layout() {
        return location$LAYOUT;
    }

    private static final long location$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLocation_t location
     * }
     */
    public static final long location$offset() {
        return location$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLocation_t location
     * }
     */
    public static MemorySegment location(MemorySegment struct) {
        return struct.asSlice(location$OFFSET, location$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPavementTreatmentLocation_t location
     * }
     */
    public static void location(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, location$OFFSET, location$LAYOUT.byteSize());
    }

    private static final AddressLayout productType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("productType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductType_t *productType
     * }
     */
    public static final AddressLayout productType$layout() {
        return productType$LAYOUT;
    }

    private static final long productType$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductType_t *productType
     * }
     */
    public static final long productType$offset() {
        return productType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductType_t *productType
     * }
     */
    public static MemorySegment productType(MemorySegment struct) {
        return struct.get(productType$LAYOUT, productType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductType_t *productType
     * }
     */
    public static void productType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(productType$LAYOUT, productType$OFFSET, fieldValue);
    }

    private static final AddressLayout form$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("form"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductForm_t *form
     * }
     */
    public static final AddressLayout form$layout() {
        return form$LAYOUT;
    }

    private static final long form$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductForm_t *form
     * }
     */
    public static final long form$offset() {
        return form$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductForm_t *form
     * }
     */
    public static MemorySegment form(MemorySegment struct) {
        return struct.get(form$LAYOUT, form$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatProductForm_t *form
     * }
     */
    public static void form(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(form$LAYOUT, form$OFFSET, fieldValue);
    }

    private static final AddressLayout percentage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("percentage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPercentProductMix_t *percentage
     * }
     */
    public static final AddressLayout percentage$layout() {
        return percentage$LAYOUT;
    }

    private static final long percentage$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPercentProductMix_t *percentage
     * }
     */
    public static final long percentage$offset() {
        return percentage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPercentProductMix_t *percentage
     * }
     */
    public static MemorySegment percentage(MemorySegment struct) {
        return struct.get(percentage$LAYOUT, percentage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPercentProductMix_t *percentage
     * }
     */
    public static void percentage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(percentage$LAYOUT, percentage$OFFSET, fieldValue);
    }

    private static final AddressLayout amount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("amount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentAmount_t *amount
     * }
     */
    public static final AddressLayout amount$layout() {
        return amount$LAYOUT;
    }

    private static final long amount$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentAmount_t *amount
     * }
     */
    public static final long amount$offset() {
        return amount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentAmount_t *amount
     * }
     */
    public static MemorySegment amount(MemorySegment struct) {
        return struct.get(amount$LAYOUT, amount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentAmount_t *amount
     * }
     */
    public static void amount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(amount$LAYOUT, amount$OFFSET, fieldValue);
    }

    private static final AddressLayout width$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentWidth_t *width
     * }
     */
    public static final AddressLayout width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentWidth_t *width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentWidth_t *width
     * }
     */
    public static MemorySegment width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * NTCIPEssPaveTreatmentWidth_t *width
     * }
     */
    public static void width(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

