// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CurrentStateData {
 *     struct PositionOffsetXYZ *executantVehPos;
 *     struct PositionConfidenceSet *executantVehPosConfidence;
 *     Speed_t speed;
 *     Heading_t heading;
 *     struct AccelerationSet4Way *accel4way;
 *     VehicleSize_t size;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CurrentStateData {

    CurrentStateData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("executantVehPos"),
        MessageFrame_h.C_POINTER.withName("executantVehPosConfidence"),
        MessageFrame_h.C_LONG.withName("speed"),
        MessageFrame_h.C_LONG.withName("heading"),
        MessageFrame_h.C_POINTER.withName("accel4way"),
        VehicleSize.layout().withName("size"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CurrentStateData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout executantVehPos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("executantVehPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionOffsetXYZ *executantVehPos
     * }
     */
    public static final AddressLayout executantVehPos$layout() {
        return executantVehPos$LAYOUT;
    }

    private static final long executantVehPos$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionOffsetXYZ *executantVehPos
     * }
     */
    public static final long executantVehPos$offset() {
        return executantVehPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionOffsetXYZ *executantVehPos
     * }
     */
    public static MemorySegment executantVehPos(MemorySegment struct) {
        return struct.get(executantVehPos$LAYOUT, executantVehPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionOffsetXYZ *executantVehPos
     * }
     */
    public static void executantVehPos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(executantVehPos$LAYOUT, executantVehPos$OFFSET, fieldValue);
    }

    private static final AddressLayout executantVehPosConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("executantVehPosConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *executantVehPosConfidence
     * }
     */
    public static final AddressLayout executantVehPosConfidence$layout() {
        return executantVehPosConfidence$LAYOUT;
    }

    private static final long executantVehPosConfidence$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *executantVehPosConfidence
     * }
     */
    public static final long executantVehPosConfidence$offset() {
        return executantVehPosConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *executantVehPosConfidence
     * }
     */
    public static MemorySegment executantVehPosConfidence(MemorySegment struct) {
        return struct.get(executantVehPosConfidence$LAYOUT, executantVehPosConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *executantVehPosConfidence
     * }
     */
    public static void executantVehPosConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(executantVehPosConfidence$LAYOUT, executantVehPosConfidence$OFFSET, fieldValue);
    }

    private static final OfLong speed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("speed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static final OfLong speed$layout() {
        return speed$LAYOUT;
    }

    private static final long speed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static final long speed$offset() {
        return speed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static long speed(MemorySegment struct) {
        return struct.get(speed$LAYOUT, speed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t speed
     * }
     */
    public static void speed(MemorySegment struct, long fieldValue) {
        struct.set(speed$LAYOUT, speed$OFFSET, fieldValue);
    }

    private static final OfLong heading$LAYOUT = (OfLong)$LAYOUT.select(groupElement("heading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final OfLong heading$layout() {
        return heading$LAYOUT;
    }

    private static final long heading$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static final long heading$offset() {
        return heading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static long heading(MemorySegment struct) {
        return struct.get(heading$LAYOUT, heading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Heading_t heading
     * }
     */
    public static void heading(MemorySegment struct, long fieldValue) {
        struct.set(heading$LAYOUT, heading$OFFSET, fieldValue);
    }

    private static final AddressLayout accel4way$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accel4way"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accel4way
     * }
     */
    public static final AddressLayout accel4way$layout() {
        return accel4way$LAYOUT;
    }

    private static final long accel4way$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accel4way
     * }
     */
    public static final long accel4way$offset() {
        return accel4way$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accel4way
     * }
     */
    public static MemorySegment accel4way(MemorySegment struct) {
        return struct.get(accel4way$LAYOUT, accel4way$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AccelerationSet4Way *accel4way
     * }
     */
    public static void accel4way(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accel4way$LAYOUT, accel4way$OFFSET, fieldValue);
    }

    private static final GroupLayout size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static final GroupLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.asSlice(size$OFFSET, size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleSize_t size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, size$OFFSET, size$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

