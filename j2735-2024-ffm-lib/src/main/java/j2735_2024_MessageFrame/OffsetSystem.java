// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OffsetSystem {
 *     Zoom_t *scale;
 *     struct OffsetSystem__offset {
 *         OffsetSystem__offset_PR present;
 *         union OffsetSystem__offset_u {
 *             NodeListXY_t xy;
 *             NodeListLL_t ll;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } offset;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class OffsetSystem {

    OffsetSystem() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("scale"),
        OffsetSystem__offset.layout().withName("offset"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("OffsetSystem");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout scale$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Zoom_t *scale
     * }
     */
    public static final AddressLayout scale$layout() {
        return scale$LAYOUT;
    }

    private static final long scale$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Zoom_t *scale
     * }
     */
    public static final long scale$offset() {
        return scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Zoom_t *scale
     * }
     */
    public static MemorySegment scale(MemorySegment struct) {
        return struct.get(scale$LAYOUT, scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Zoom_t *scale
     * }
     */
    public static void scale(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scale$LAYOUT, scale$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct OffsetSystem__offset {
     *     OffsetSystem__offset_PR present;
     *     union OffsetSystem__offset_u {
     *         NodeListXY_t xy;
     *         NodeListLL_t ll;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class OffsetSystem__offset {

        OffsetSystem__offset() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            OffsetSystem__offset_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("OffsetSystem__offset");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * OffsetSystem__offset_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * OffsetSystem__offset_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * OffsetSystem__offset_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * OffsetSystem__offset_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union OffsetSystem__offset_u {
         *     NodeListXY_t xy;
         *     NodeListLL_t ll;
         * }
         * }
         */
        public static class OffsetSystem__offset_u {

            OffsetSystem__offset_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                NodeListXY.layout().withName("xy"),
                NodeListLL.layout().withName("ll")
            ).withName("OffsetSystem__offset_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final GroupLayout xy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("xy"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * NodeListXY_t xy
             * }
             */
            public static final GroupLayout xy$layout() {
                return xy$LAYOUT;
            }

            private static final long xy$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * NodeListXY_t xy
             * }
             */
            public static final long xy$offset() {
                return xy$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * NodeListXY_t xy
             * }
             */
            public static MemorySegment xy(MemorySegment union) {
                return union.asSlice(xy$OFFSET, xy$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * NodeListXY_t xy
             * }
             */
            public static void xy(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, xy$OFFSET, xy$LAYOUT.byteSize());
            }

            private static final GroupLayout ll$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ll"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * NodeListLL_t ll
             * }
             */
            public static final GroupLayout ll$layout() {
                return ll$LAYOUT;
            }

            private static final long ll$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * NodeListLL_t ll
             * }
             */
            public static final long ll$offset() {
                return ll$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * NodeListLL_t ll
             * }
             */
            public static MemorySegment ll(MemorySegment union) {
                return union.asSlice(ll$OFFSET, ll$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * NodeListLL_t ll
             * }
             */
            public static void ll(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, ll$OFFSET, ll$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union OffsetSystem__offset_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union OffsetSystem__offset_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union OffsetSystem__offset_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union OffsetSystem__offset_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 184;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout offset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct OffsetSystem__offset offset
     * }
     */
    public static final GroupLayout offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct OffsetSystem__offset offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct OffsetSystem__offset offset
     * }
     */
    public static MemorySegment offset(MemorySegment struct) {
        return struct.asSlice(offset$OFFSET, offset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct OffsetSystem__offset offset
     * }
     */
    public static void offset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, offset$OFFSET, offset$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

