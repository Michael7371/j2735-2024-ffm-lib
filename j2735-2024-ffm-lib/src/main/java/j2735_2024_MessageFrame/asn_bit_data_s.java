// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_bit_data_s {
 *     const uint8_t *buffer;
 *     size_t nboff;
 *     size_t nbits;
 *     size_t moved;
 *     int (*refill)(struct asn_bit_data_s *);
 *     void *refill_key;
 * }
 * }
 */
public class asn_bit_data_s {

    asn_bit_data_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("buffer"),
        MessageFrame_h.C_LONG.withName("nboff"),
        MessageFrame_h.C_LONG.withName("nbits"),
        MessageFrame_h.C_LONG.withName("moved"),
        MessageFrame_h.C_POINTER.withName("refill"),
        MessageFrame_h.C_POINTER.withName("refill_key")
    ).withName("asn_bit_data_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint8_t *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint8_t *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint8_t *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint8_t *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final OfLong nboff$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nboff"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t nboff
     * }
     */
    public static final OfLong nboff$layout() {
        return nboff$LAYOUT;
    }

    private static final long nboff$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t nboff
     * }
     */
    public static final long nboff$offset() {
        return nboff$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t nboff
     * }
     */
    public static long nboff(MemorySegment struct) {
        return struct.get(nboff$LAYOUT, nboff$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t nboff
     * }
     */
    public static void nboff(MemorySegment struct, long fieldValue) {
        struct.set(nboff$LAYOUT, nboff$OFFSET, fieldValue);
    }

    private static final OfLong nbits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nbits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t nbits
     * }
     */
    public static final OfLong nbits$layout() {
        return nbits$LAYOUT;
    }

    private static final long nbits$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t nbits
     * }
     */
    public static final long nbits$offset() {
        return nbits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t nbits
     * }
     */
    public static long nbits(MemorySegment struct) {
        return struct.get(nbits$LAYOUT, nbits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t nbits
     * }
     */
    public static void nbits(MemorySegment struct, long fieldValue) {
        struct.set(nbits$LAYOUT, nbits$OFFSET, fieldValue);
    }

    private static final OfLong moved$LAYOUT = (OfLong)$LAYOUT.select(groupElement("moved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t moved
     * }
     */
    public static final OfLong moved$layout() {
        return moved$LAYOUT;
    }

    private static final long moved$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t moved
     * }
     */
    public static final long moved$offset() {
        return moved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t moved
     * }
     */
    public static long moved(MemorySegment struct) {
        return struct.get(moved$LAYOUT, moved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t moved
     * }
     */
    public static void moved(MemorySegment struct, long fieldValue) {
        struct.set(moved$LAYOUT, moved$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int (*refill)(struct asn_bit_data_s *)
     * }
     */
    public static class refill {

        refill() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout refill$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("refill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int (*refill)(struct asn_bit_data_s *)
     * }
     */
    public static final AddressLayout refill$layout() {
        return refill$LAYOUT;
    }

    private static final long refill$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int (*refill)(struct asn_bit_data_s *)
     * }
     */
    public static final long refill$offset() {
        return refill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*refill)(struct asn_bit_data_s *)
     * }
     */
    public static MemorySegment refill(MemorySegment struct) {
        return struct.get(refill$LAYOUT, refill$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*refill)(struct asn_bit_data_s *)
     * }
     */
    public static void refill(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(refill$LAYOUT, refill$OFFSET, fieldValue);
    }

    private static final AddressLayout refill_key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("refill_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *refill_key
     * }
     */
    public static final AddressLayout refill_key$layout() {
        return refill_key$LAYOUT;
    }

    private static final long refill_key$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *refill_key
     * }
     */
    public static final long refill_key$offset() {
        return refill_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *refill_key
     * }
     */
    public static MemorySegment refill_key(MemorySegment struct) {
        return struct.get(refill_key$LAYOUT, refill_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *refill_key
     * }
     */
    public static void refill_key(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(refill_key$LAYOUT, refill_key$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

