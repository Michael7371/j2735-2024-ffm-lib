// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

/**
 * {@snippet lang=c :
 * typedef enum xer_pbd_rval {
 *     XPBD_SYSTEM_FAILURE,
 *     XPBD_DECODER_LIMIT,
 *     XPBD_BROKEN_ENCODING,
 *     XPBD_NOT_BODY_IGNORE,
 *     XPBD_BODY_CONSUMED
 * } (xer_primitive_body_decoder_f)(const asn_TYPE_descriptor_t *, void *, const void *, size_t)
 * }
 */
public class xer_primitive_body_decoder_f {

    xer_primitive_body_decoder_f() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        int apply(MemorySegment td, MemorySegment struct_ptr, MemorySegment chunk_buf, long chunk_size);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        MessageFrame_h.C_INT,
        MessageFrame_h.C_POINTER,
        MessageFrame_h.C_POINTER,
        MessageFrame_h.C_POINTER,
        MessageFrame_h.C_LONG
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static int invoke(MemorySegment funcPtr,MemorySegment td, MemorySegment struct_ptr, MemorySegment chunk_buf, long chunk_size) {
        try {
            return (int) DOWN$MH.invokeExact(funcPtr, td, struct_ptr, chunk_buf, chunk_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

