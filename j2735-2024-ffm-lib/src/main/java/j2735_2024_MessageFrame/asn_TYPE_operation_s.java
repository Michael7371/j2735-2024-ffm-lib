// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_TYPE_operation_s {
 *     asn_struct_free_f *free_struct;
 *     asn_struct_print_f *print_struct;
 *     asn_struct_compare_f *compare_struct;
 *     asn_struct_copy_f *copy_struct;
 *     ber_type_decoder_f *ber_decoder;
 *     der_type_encoder_f *der_encoder;
 *     xer_type_decoder_f *xer_decoder;
 *     xer_type_encoder_f *xer_encoder;
 *     jer_type_decoder_f *jer_decoder;
 *     jer_type_encoder_f *jer_encoder;
 *     oer_type_decoder_f *oer_decoder;
 *     oer_type_encoder_f *oer_encoder;
 *     per_type_decoder_f *uper_decoder;
 *     per_type_encoder_f *uper_encoder;
 *     per_type_decoder_f *aper_decoder;
 *     per_type_encoder_f *aper_encoder;
 *     asn_random_fill_f *random_fill;
 *     asn_outmost_tag_f *outmost_tag;
 * }
 * }
 */
public class asn_TYPE_operation_s {

    asn_TYPE_operation_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("free_struct"),
        MessageFrame_h.C_POINTER.withName("print_struct"),
        MessageFrame_h.C_POINTER.withName("compare_struct"),
        MessageFrame_h.C_POINTER.withName("copy_struct"),
        MessageFrame_h.C_POINTER.withName("ber_decoder"),
        MessageFrame_h.C_POINTER.withName("der_encoder"),
        MessageFrame_h.C_POINTER.withName("xer_decoder"),
        MessageFrame_h.C_POINTER.withName("xer_encoder"),
        MessageFrame_h.C_POINTER.withName("jer_decoder"),
        MessageFrame_h.C_POINTER.withName("jer_encoder"),
        MessageFrame_h.C_POINTER.withName("oer_decoder"),
        MessageFrame_h.C_POINTER.withName("oer_encoder"),
        MessageFrame_h.C_POINTER.withName("uper_decoder"),
        MessageFrame_h.C_POINTER.withName("uper_encoder"),
        MessageFrame_h.C_POINTER.withName("aper_decoder"),
        MessageFrame_h.C_POINTER.withName("aper_encoder"),
        MessageFrame_h.C_POINTER.withName("random_fill"),
        MessageFrame_h.C_POINTER.withName("outmost_tag")
    ).withName("asn_TYPE_operation_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout free_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_free_f *free_struct
     * }
     */
    public static final AddressLayout free_struct$layout() {
        return free_struct$LAYOUT;
    }

    private static final long free_struct$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_free_f *free_struct
     * }
     */
    public static final long free_struct$offset() {
        return free_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_free_f *free_struct
     * }
     */
    public static MemorySegment free_struct(MemorySegment struct) {
        return struct.get(free_struct$LAYOUT, free_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_free_f *free_struct
     * }
     */
    public static void free_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_struct$LAYOUT, free_struct$OFFSET, fieldValue);
    }

    private static final AddressLayout print_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("print_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_print_f *print_struct
     * }
     */
    public static final AddressLayout print_struct$layout() {
        return print_struct$LAYOUT;
    }

    private static final long print_struct$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_print_f *print_struct
     * }
     */
    public static final long print_struct$offset() {
        return print_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_print_f *print_struct
     * }
     */
    public static MemorySegment print_struct(MemorySegment struct) {
        return struct.get(print_struct$LAYOUT, print_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_print_f *print_struct
     * }
     */
    public static void print_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(print_struct$LAYOUT, print_struct$OFFSET, fieldValue);
    }

    private static final AddressLayout compare_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("compare_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_compare_f *compare_struct
     * }
     */
    public static final AddressLayout compare_struct$layout() {
        return compare_struct$LAYOUT;
    }

    private static final long compare_struct$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_compare_f *compare_struct
     * }
     */
    public static final long compare_struct$offset() {
        return compare_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_compare_f *compare_struct
     * }
     */
    public static MemorySegment compare_struct(MemorySegment struct) {
        return struct.get(compare_struct$LAYOUT, compare_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_compare_f *compare_struct
     * }
     */
    public static void compare_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(compare_struct$LAYOUT, compare_struct$OFFSET, fieldValue);
    }

    private static final AddressLayout copy_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("copy_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_copy_f *copy_struct
     * }
     */
    public static final AddressLayout copy_struct$layout() {
        return copy_struct$LAYOUT;
    }

    private static final long copy_struct$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_copy_f *copy_struct
     * }
     */
    public static final long copy_struct$offset() {
        return copy_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_copy_f *copy_struct
     * }
     */
    public static MemorySegment copy_struct(MemorySegment struct) {
        return struct.get(copy_struct$LAYOUT, copy_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_copy_f *copy_struct
     * }
     */
    public static void copy_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(copy_struct$LAYOUT, copy_struct$OFFSET, fieldValue);
    }

    private static final AddressLayout ber_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ber_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ber_type_decoder_f *ber_decoder
     * }
     */
    public static final AddressLayout ber_decoder$layout() {
        return ber_decoder$LAYOUT;
    }

    private static final long ber_decoder$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ber_type_decoder_f *ber_decoder
     * }
     */
    public static final long ber_decoder$offset() {
        return ber_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ber_type_decoder_f *ber_decoder
     * }
     */
    public static MemorySegment ber_decoder(MemorySegment struct) {
        return struct.get(ber_decoder$LAYOUT, ber_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ber_type_decoder_f *ber_decoder
     * }
     */
    public static void ber_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ber_decoder$LAYOUT, ber_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout der_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("der_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * der_type_encoder_f *der_encoder
     * }
     */
    public static final AddressLayout der_encoder$layout() {
        return der_encoder$LAYOUT;
    }

    private static final long der_encoder$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * der_type_encoder_f *der_encoder
     * }
     */
    public static final long der_encoder$offset() {
        return der_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * der_type_encoder_f *der_encoder
     * }
     */
    public static MemorySegment der_encoder(MemorySegment struct) {
        return struct.get(der_encoder$LAYOUT, der_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * der_type_encoder_f *der_encoder
     * }
     */
    public static void der_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(der_encoder$LAYOUT, der_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout xer_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xer_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xer_type_decoder_f *xer_decoder
     * }
     */
    public static final AddressLayout xer_decoder$layout() {
        return xer_decoder$LAYOUT;
    }

    private static final long xer_decoder$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xer_type_decoder_f *xer_decoder
     * }
     */
    public static final long xer_decoder$offset() {
        return xer_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xer_type_decoder_f *xer_decoder
     * }
     */
    public static MemorySegment xer_decoder(MemorySegment struct) {
        return struct.get(xer_decoder$LAYOUT, xer_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xer_type_decoder_f *xer_decoder
     * }
     */
    public static void xer_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xer_decoder$LAYOUT, xer_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout xer_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("xer_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * xer_type_encoder_f *xer_encoder
     * }
     */
    public static final AddressLayout xer_encoder$layout() {
        return xer_encoder$LAYOUT;
    }

    private static final long xer_encoder$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * xer_type_encoder_f *xer_encoder
     * }
     */
    public static final long xer_encoder$offset() {
        return xer_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * xer_type_encoder_f *xer_encoder
     * }
     */
    public static MemorySegment xer_encoder(MemorySegment struct) {
        return struct.get(xer_encoder$LAYOUT, xer_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * xer_type_encoder_f *xer_encoder
     * }
     */
    public static void xer_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(xer_encoder$LAYOUT, xer_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout jer_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("jer_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jer_type_decoder_f *jer_decoder
     * }
     */
    public static final AddressLayout jer_decoder$layout() {
        return jer_decoder$LAYOUT;
    }

    private static final long jer_decoder$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jer_type_decoder_f *jer_decoder
     * }
     */
    public static final long jer_decoder$offset() {
        return jer_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jer_type_decoder_f *jer_decoder
     * }
     */
    public static MemorySegment jer_decoder(MemorySegment struct) {
        return struct.get(jer_decoder$LAYOUT, jer_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jer_type_decoder_f *jer_decoder
     * }
     */
    public static void jer_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(jer_decoder$LAYOUT, jer_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout jer_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("jer_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * jer_type_encoder_f *jer_encoder
     * }
     */
    public static final AddressLayout jer_encoder$layout() {
        return jer_encoder$LAYOUT;
    }

    private static final long jer_encoder$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * jer_type_encoder_f *jer_encoder
     * }
     */
    public static final long jer_encoder$offset() {
        return jer_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * jer_type_encoder_f *jer_encoder
     * }
     */
    public static MemorySegment jer_encoder(MemorySegment struct) {
        return struct.get(jer_encoder$LAYOUT, jer_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * jer_type_encoder_f *jer_encoder
     * }
     */
    public static void jer_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(jer_encoder$LAYOUT, jer_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout oer_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oer_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * oer_type_decoder_f *oer_decoder
     * }
     */
    public static final AddressLayout oer_decoder$layout() {
        return oer_decoder$LAYOUT;
    }

    private static final long oer_decoder$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * oer_type_decoder_f *oer_decoder
     * }
     */
    public static final long oer_decoder$offset() {
        return oer_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * oer_type_decoder_f *oer_decoder
     * }
     */
    public static MemorySegment oer_decoder(MemorySegment struct) {
        return struct.get(oer_decoder$LAYOUT, oer_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * oer_type_decoder_f *oer_decoder
     * }
     */
    public static void oer_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(oer_decoder$LAYOUT, oer_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout oer_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("oer_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * oer_type_encoder_f *oer_encoder
     * }
     */
    public static final AddressLayout oer_encoder$layout() {
        return oer_encoder$LAYOUT;
    }

    private static final long oer_encoder$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * oer_type_encoder_f *oer_encoder
     * }
     */
    public static final long oer_encoder$offset() {
        return oer_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * oer_type_encoder_f *oer_encoder
     * }
     */
    public static MemorySegment oer_encoder(MemorySegment struct) {
        return struct.get(oer_encoder$LAYOUT, oer_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * oer_type_encoder_f *oer_encoder
     * }
     */
    public static void oer_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(oer_encoder$LAYOUT, oer_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout uper_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uper_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * per_type_decoder_f *uper_decoder
     * }
     */
    public static final AddressLayout uper_decoder$layout() {
        return uper_decoder$LAYOUT;
    }

    private static final long uper_decoder$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * per_type_decoder_f *uper_decoder
     * }
     */
    public static final long uper_decoder$offset() {
        return uper_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * per_type_decoder_f *uper_decoder
     * }
     */
    public static MemorySegment uper_decoder(MemorySegment struct) {
        return struct.get(uper_decoder$LAYOUT, uper_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * per_type_decoder_f *uper_decoder
     * }
     */
    public static void uper_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uper_decoder$LAYOUT, uper_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout uper_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uper_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * per_type_encoder_f *uper_encoder
     * }
     */
    public static final AddressLayout uper_encoder$layout() {
        return uper_encoder$LAYOUT;
    }

    private static final long uper_encoder$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * per_type_encoder_f *uper_encoder
     * }
     */
    public static final long uper_encoder$offset() {
        return uper_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * per_type_encoder_f *uper_encoder
     * }
     */
    public static MemorySegment uper_encoder(MemorySegment struct) {
        return struct.get(uper_encoder$LAYOUT, uper_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * per_type_encoder_f *uper_encoder
     * }
     */
    public static void uper_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uper_encoder$LAYOUT, uper_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout aper_decoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aper_decoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * per_type_decoder_f *aper_decoder
     * }
     */
    public static final AddressLayout aper_decoder$layout() {
        return aper_decoder$LAYOUT;
    }

    private static final long aper_decoder$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * per_type_decoder_f *aper_decoder
     * }
     */
    public static final long aper_decoder$offset() {
        return aper_decoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * per_type_decoder_f *aper_decoder
     * }
     */
    public static MemorySegment aper_decoder(MemorySegment struct) {
        return struct.get(aper_decoder$LAYOUT, aper_decoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * per_type_decoder_f *aper_decoder
     * }
     */
    public static void aper_decoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aper_decoder$LAYOUT, aper_decoder$OFFSET, fieldValue);
    }

    private static final AddressLayout aper_encoder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aper_encoder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * per_type_encoder_f *aper_encoder
     * }
     */
    public static final AddressLayout aper_encoder$layout() {
        return aper_encoder$LAYOUT;
    }

    private static final long aper_encoder$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * per_type_encoder_f *aper_encoder
     * }
     */
    public static final long aper_encoder$offset() {
        return aper_encoder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * per_type_encoder_f *aper_encoder
     * }
     */
    public static MemorySegment aper_encoder(MemorySegment struct) {
        return struct.get(aper_encoder$LAYOUT, aper_encoder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * per_type_encoder_f *aper_encoder
     * }
     */
    public static void aper_encoder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aper_encoder$LAYOUT, aper_encoder$OFFSET, fieldValue);
    }

    private static final AddressLayout random_fill$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("random_fill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_random_fill_f *random_fill
     * }
     */
    public static final AddressLayout random_fill$layout() {
        return random_fill$LAYOUT;
    }

    private static final long random_fill$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_random_fill_f *random_fill
     * }
     */
    public static final long random_fill$offset() {
        return random_fill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_random_fill_f *random_fill
     * }
     */
    public static MemorySegment random_fill(MemorySegment struct) {
        return struct.get(random_fill$LAYOUT, random_fill$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_random_fill_f *random_fill
     * }
     */
    public static void random_fill(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(random_fill$LAYOUT, random_fill$OFFSET, fieldValue);
    }

    private static final AddressLayout outmost_tag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("outmost_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_outmost_tag_f *outmost_tag
     * }
     */
    public static final AddressLayout outmost_tag$layout() {
        return outmost_tag$LAYOUT;
    }

    private static final long outmost_tag$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_outmost_tag_f *outmost_tag
     * }
     */
    public static final long outmost_tag$offset() {
        return outmost_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_outmost_tag_f *outmost_tag
     * }
     */
    public static MemorySegment outmost_tag(MemorySegment struct) {
        return struct.get(outmost_tag$LAYOUT, outmost_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_outmost_tag_f *outmost_tag
     * }
     */
    public static void outmost_tag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(outmost_tag$LAYOUT, outmost_tag$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

