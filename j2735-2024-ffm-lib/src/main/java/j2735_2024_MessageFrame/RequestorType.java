// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RequestorType {
 *     BasicVehicleRole_t role;
 *     RequestSubRole_t *subrole;
 *     RequestImportanceLevel_t *request;
 *     Iso3833VehicleType_t *iso3883;
 *     VehicleType_t *hpmsType;
 *     struct Reg_RequestorType *regional;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RequestorType {

    RequestorType() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("role"),
        MessageFrame_h.C_POINTER.withName("subrole"),
        MessageFrame_h.C_POINTER.withName("request"),
        MessageFrame_h.C_POINTER.withName("iso3883"),
        MessageFrame_h.C_POINTER.withName("hpmsType"),
        MessageFrame_h.C_POINTER.withName("regional"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RequestorType");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong role$LAYOUT = (OfLong)$LAYOUT.select(groupElement("role"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t role
     * }
     */
    public static final OfLong role$layout() {
        return role$LAYOUT;
    }

    private static final long role$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t role
     * }
     */
    public static final long role$offset() {
        return role$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t role
     * }
     */
    public static long role(MemorySegment struct) {
        return struct.get(role$LAYOUT, role$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t role
     * }
     */
    public static void role(MemorySegment struct, long fieldValue) {
        struct.set(role$LAYOUT, role$OFFSET, fieldValue);
    }

    private static final AddressLayout subrole$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("subrole"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RequestSubRole_t *subrole
     * }
     */
    public static final AddressLayout subrole$layout() {
        return subrole$LAYOUT;
    }

    private static final long subrole$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RequestSubRole_t *subrole
     * }
     */
    public static final long subrole$offset() {
        return subrole$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RequestSubRole_t *subrole
     * }
     */
    public static MemorySegment subrole(MemorySegment struct) {
        return struct.get(subrole$LAYOUT, subrole$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RequestSubRole_t *subrole
     * }
     */
    public static void subrole(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subrole$LAYOUT, subrole$OFFSET, fieldValue);
    }

    private static final AddressLayout request$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RequestImportanceLevel_t *request
     * }
     */
    public static final AddressLayout request$layout() {
        return request$LAYOUT;
    }

    private static final long request$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RequestImportanceLevel_t *request
     * }
     */
    public static final long request$offset() {
        return request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RequestImportanceLevel_t *request
     * }
     */
    public static MemorySegment request(MemorySegment struct) {
        return struct.get(request$LAYOUT, request$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RequestImportanceLevel_t *request
     * }
     */
    public static void request(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(request$LAYOUT, request$OFFSET, fieldValue);
    }

    private static final AddressLayout iso3883$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("iso3883"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Iso3833VehicleType_t *iso3883
     * }
     */
    public static final AddressLayout iso3883$layout() {
        return iso3883$LAYOUT;
    }

    private static final long iso3883$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Iso3833VehicleType_t *iso3883
     * }
     */
    public static final long iso3883$offset() {
        return iso3883$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Iso3833VehicleType_t *iso3883
     * }
     */
    public static MemorySegment iso3883(MemorySegment struct) {
        return struct.get(iso3883$LAYOUT, iso3883$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Iso3833VehicleType_t *iso3883
     * }
     */
    public static void iso3883(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(iso3883$LAYOUT, iso3883$OFFSET, fieldValue);
    }

    private static final AddressLayout hpmsType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hpmsType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleType_t *hpmsType
     * }
     */
    public static final AddressLayout hpmsType$layout() {
        return hpmsType$LAYOUT;
    }

    private static final long hpmsType$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleType_t *hpmsType
     * }
     */
    public static final long hpmsType$offset() {
        return hpmsType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleType_t *hpmsType
     * }
     */
    public static MemorySegment hpmsType(MemorySegment struct) {
        return struct.get(hpmsType$LAYOUT, hpmsType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleType_t *hpmsType
     * }
     */
    public static void hpmsType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hpmsType$LAYOUT, hpmsType$OFFSET, fieldValue);
    }

    private static final AddressLayout regional$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("regional"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Reg_RequestorType *regional
     * }
     */
    public static final AddressLayout regional$layout() {
        return regional$LAYOUT;
    }

    private static final long regional$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Reg_RequestorType *regional
     * }
     */
    public static final long regional$offset() {
        return regional$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Reg_RequestorType *regional
     * }
     */
    public static MemorySegment regional(MemorySegment struct) {
        return struct.get(regional$LAYOUT, regional$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Reg_RequestorType *regional
     * }
     */
    public static void regional(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(regional$LAYOUT, regional$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

