// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TrailerUnitDescription {
 *     IsDolly_t isDolly;
 *     VehicleWidth_t width;
 *     VehicleLength_t length;
 *     VehicleHeight_t *height;
 *     TrailerMass_t *mass;
 *     struct BumperHeights *bumperHeights;
 *     VehicleHeight_t *centerOfGravity;
 *     PivotPointDescription_t frontPivot;
 *     struct PivotPointDescription *rearPivot;
 *     Offset_B12_t *rearWheelOffset;
 *     Node_XY_24b_t positionOffset;
 *     VertOffset_B07_t *elevationOffset;
 *     struct TrailerHistoryPointList *crumbData;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TrailerUnitDescription {

    TrailerUnitDescription() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("isDolly"),
        MemoryLayout.paddingLayout(4),
        MessageFrame_h.C_LONG.withName("width"),
        MessageFrame_h.C_LONG.withName("length"),
        MessageFrame_h.C_POINTER.withName("height"),
        MessageFrame_h.C_POINTER.withName("mass"),
        MessageFrame_h.C_POINTER.withName("bumperHeights"),
        MessageFrame_h.C_POINTER.withName("centerOfGravity"),
        PivotPointDescription.layout().withName("frontPivot"),
        MessageFrame_h.C_POINTER.withName("rearPivot"),
        MessageFrame_h.C_POINTER.withName("rearWheelOffset"),
        Node_XY_24b.layout().withName("positionOffset"),
        MessageFrame_h.C_POINTER.withName("elevationOffset"),
        MessageFrame_h.C_POINTER.withName("crumbData"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TrailerUnitDescription");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt isDolly$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isDolly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IsDolly_t isDolly
     * }
     */
    public static final OfInt isDolly$layout() {
        return isDolly$LAYOUT;
    }

    private static final long isDolly$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IsDolly_t isDolly
     * }
     */
    public static final long isDolly$offset() {
        return isDolly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IsDolly_t isDolly
     * }
     */
    public static int isDolly(MemorySegment struct) {
        return struct.get(isDolly$LAYOUT, isDolly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IsDolly_t isDolly
     * }
     */
    public static void isDolly(MemorySegment struct, int fieldValue) {
        struct.set(isDolly$LAYOUT, isDolly$OFFSET, fieldValue);
    }

    private static final OfLong width$LAYOUT = (OfLong)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleWidth_t width
     * }
     */
    public static final OfLong width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleWidth_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleWidth_t width
     * }
     */
    public static long width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleWidth_t width
     * }
     */
    public static void width(MemorySegment struct, long fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleLength_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleLength_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleLength_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleLength_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final AddressLayout height$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final AddressLayout height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static MemorySegment height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static void height(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final AddressLayout mass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TrailerMass_t *mass
     * }
     */
    public static final AddressLayout mass$layout() {
        return mass$LAYOUT;
    }

    private static final long mass$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TrailerMass_t *mass
     * }
     */
    public static final long mass$offset() {
        return mass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TrailerMass_t *mass
     * }
     */
    public static MemorySegment mass(MemorySegment struct) {
        return struct.get(mass$LAYOUT, mass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TrailerMass_t *mass
     * }
     */
    public static void mass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mass$LAYOUT, mass$OFFSET, fieldValue);
    }

    private static final AddressLayout bumperHeights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bumperHeights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumperHeights
     * }
     */
    public static final AddressLayout bumperHeights$layout() {
        return bumperHeights$LAYOUT;
    }

    private static final long bumperHeights$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumperHeights
     * }
     */
    public static final long bumperHeights$offset() {
        return bumperHeights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumperHeights
     * }
     */
    public static MemorySegment bumperHeights(MemorySegment struct) {
        return struct.get(bumperHeights$LAYOUT, bumperHeights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct BumperHeights *bumperHeights
     * }
     */
    public static void bumperHeights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bumperHeights$LAYOUT, bumperHeights$OFFSET, fieldValue);
    }

    private static final AddressLayout centerOfGravity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("centerOfGravity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleHeight_t *centerOfGravity
     * }
     */
    public static final AddressLayout centerOfGravity$layout() {
        return centerOfGravity$LAYOUT;
    }

    private static final long centerOfGravity$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleHeight_t *centerOfGravity
     * }
     */
    public static final long centerOfGravity$offset() {
        return centerOfGravity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *centerOfGravity
     * }
     */
    public static MemorySegment centerOfGravity(MemorySegment struct) {
        return struct.get(centerOfGravity$LAYOUT, centerOfGravity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *centerOfGravity
     * }
     */
    public static void centerOfGravity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(centerOfGravity$LAYOUT, centerOfGravity$OFFSET, fieldValue);
    }

    private static final GroupLayout frontPivot$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frontPivot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PivotPointDescription_t frontPivot
     * }
     */
    public static final GroupLayout frontPivot$layout() {
        return frontPivot$LAYOUT;
    }

    private static final long frontPivot$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PivotPointDescription_t frontPivot
     * }
     */
    public static final long frontPivot$offset() {
        return frontPivot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PivotPointDescription_t frontPivot
     * }
     */
    public static MemorySegment frontPivot(MemorySegment struct) {
        return struct.asSlice(frontPivot$OFFSET, frontPivot$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PivotPointDescription_t frontPivot
     * }
     */
    public static void frontPivot(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, frontPivot$OFFSET, frontPivot$LAYOUT.byteSize());
    }

    private static final AddressLayout rearPivot$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rearPivot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *rearPivot
     * }
     */
    public static final AddressLayout rearPivot$layout() {
        return rearPivot$LAYOUT;
    }

    private static final long rearPivot$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *rearPivot
     * }
     */
    public static final long rearPivot$offset() {
        return rearPivot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *rearPivot
     * }
     */
    public static MemorySegment rearPivot(MemorySegment struct) {
        return struct.get(rearPivot$LAYOUT, rearPivot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PivotPointDescription *rearPivot
     * }
     */
    public static void rearPivot(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rearPivot$LAYOUT, rearPivot$OFFSET, fieldValue);
    }

    private static final AddressLayout rearWheelOffset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rearWheelOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Offset_B12_t *rearWheelOffset
     * }
     */
    public static final AddressLayout rearWheelOffset$layout() {
        return rearWheelOffset$LAYOUT;
    }

    private static final long rearWheelOffset$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Offset_B12_t *rearWheelOffset
     * }
     */
    public static final long rearWheelOffset$offset() {
        return rearWheelOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Offset_B12_t *rearWheelOffset
     * }
     */
    public static MemorySegment rearWheelOffset(MemorySegment struct) {
        return struct.get(rearWheelOffset$LAYOUT, rearWheelOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Offset_B12_t *rearWheelOffset
     * }
     */
    public static void rearWheelOffset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rearWheelOffset$LAYOUT, rearWheelOffset$OFFSET, fieldValue);
    }

    private static final GroupLayout positionOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("positionOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Node_XY_24b_t positionOffset
     * }
     */
    public static final GroupLayout positionOffset$layout() {
        return positionOffset$LAYOUT;
    }

    private static final long positionOffset$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Node_XY_24b_t positionOffset
     * }
     */
    public static final long positionOffset$offset() {
        return positionOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Node_XY_24b_t positionOffset
     * }
     */
    public static MemorySegment positionOffset(MemorySegment struct) {
        return struct.asSlice(positionOffset$OFFSET, positionOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Node_XY_24b_t positionOffset
     * }
     */
    public static void positionOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, positionOffset$OFFSET, positionOffset$LAYOUT.byteSize());
    }

    private static final AddressLayout elevationOffset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("elevationOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VertOffset_B07_t *elevationOffset
     * }
     */
    public static final AddressLayout elevationOffset$layout() {
        return elevationOffset$LAYOUT;
    }

    private static final long elevationOffset$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VertOffset_B07_t *elevationOffset
     * }
     */
    public static final long elevationOffset$offset() {
        return elevationOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VertOffset_B07_t *elevationOffset
     * }
     */
    public static MemorySegment elevationOffset(MemorySegment struct) {
        return struct.get(elevationOffset$LAYOUT, elevationOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VertOffset_B07_t *elevationOffset
     * }
     */
    public static void elevationOffset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(elevationOffset$LAYOUT, elevationOffset$OFFSET, fieldValue);
    }

    private static final AddressLayout crumbData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("crumbData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TrailerHistoryPointList *crumbData
     * }
     */
    public static final AddressLayout crumbData$layout() {
        return crumbData$LAYOUT;
    }

    private static final long crumbData$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TrailerHistoryPointList *crumbData
     * }
     */
    public static final long crumbData$offset() {
        return crumbData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TrailerHistoryPointList *crumbData
     * }
     */
    public static MemorySegment crumbData(MemorySegment struct) {
        return struct.get(crumbData$LAYOUT, crumbData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TrailerHistoryPointList *crumbData
     * }
     */
    public static void crumbData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(crumbData$LAYOUT, crumbData$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

