// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TRRLocationType1 {
 *     TRRLength_t tRRLength;
 *     ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t frontSidePosition;
 *     LaneOffset_t laneOffset;
 *     Speed_t *tRRMovement;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TRRLocationType1 {

    TRRLocationType1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("tRRLength"),
        ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ.layout().withName("frontSidePosition"),
        MessageFrame_h.C_LONG.withName("laneOffset"),
        MessageFrame_h.C_POINTER.withName("tRRMovement"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TRRLocationType1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong tRRLength$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tRRLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TRRLength_t tRRLength
     * }
     */
    public static final OfLong tRRLength$layout() {
        return tRRLength$LAYOUT;
    }

    private static final long tRRLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TRRLength_t tRRLength
     * }
     */
    public static final long tRRLength$offset() {
        return tRRLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TRRLength_t tRRLength
     * }
     */
    public static long tRRLength(MemorySegment struct) {
        return struct.get(tRRLength$LAYOUT, tRRLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TRRLength_t tRRLength
     * }
     */
    public static void tRRLength(MemorySegment struct, long fieldValue) {
        struct.set(tRRLength$LAYOUT, tRRLength$OFFSET, fieldValue);
    }

    private static final GroupLayout frontSidePosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("frontSidePosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t frontSidePosition
     * }
     */
    public static final GroupLayout frontSidePosition$layout() {
        return frontSidePosition$LAYOUT;
    }

    private static final long frontSidePosition$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t frontSidePosition
     * }
     */
    public static final long frontSidePosition$offset() {
        return frontSidePosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t frontSidePosition
     * }
     */
    public static MemorySegment frontSidePosition(MemorySegment struct) {
        return struct.asSlice(frontSidePosition$OFFSET, frontSidePosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ManeuverSharingAndCoordinatingMessage_PositionOffsetXYZ_t frontSidePosition
     * }
     */
    public static void frontSidePosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, frontSidePosition$OFFSET, frontSidePosition$LAYOUT.byteSize());
    }

    private static final OfLong laneOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("laneOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static final OfLong laneOffset$layout() {
        return laneOffset$LAYOUT;
    }

    private static final long laneOffset$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static final long laneOffset$offset() {
        return laneOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static long laneOffset(MemorySegment struct) {
        return struct.get(laneOffset$LAYOUT, laneOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneOffset_t laneOffset
     * }
     */
    public static void laneOffset(MemorySegment struct, long fieldValue) {
        struct.set(laneOffset$LAYOUT, laneOffset$OFFSET, fieldValue);
    }

    private static final AddressLayout tRRMovement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tRRMovement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *tRRMovement
     * }
     */
    public static final AddressLayout tRRMovement$layout() {
        return tRRMovement$LAYOUT;
    }

    private static final long tRRMovement$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *tRRMovement
     * }
     */
    public static final long tRRMovement$offset() {
        return tRRMovement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *tRRMovement
     * }
     */
    public static MemorySegment tRRMovement(MemorySegment struct) {
        return struct.get(tRRMovement$LAYOUT, tRRMovement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *tRRMovement
     * }
     */
    public static void tRRMovement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tRRMovement$LAYOUT, tRRMovement$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

