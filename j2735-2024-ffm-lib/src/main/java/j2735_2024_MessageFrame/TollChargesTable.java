// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TollChargesTable {
 *     struct TollChargesTable__tollTypeCharge {
 *         TollChargesTable__tollTypeCharge_PR present;
 *         union TollChargesTable__tollTypeCharge_u {
 *             ChargesTable_t pointCharges;
 *             struct TollChargesTable__tollTypeCharge__perLaneCharges {
 *                 struct {
 *                     struct LaneChargesTable **array;
 *                     int count;
 *                     int size;
 *                     void (*free)(struct LaneChargesTable *);
 *                 } list;
 *                 asn_struct_ctx_t _asn_ctx;
 *             } perLaneCharges;
 *             struct TollChargesTable__tollTypeCharge__closedNetworkCharges {
 *                 struct {
 *                     struct ClosedNetworkChargesTable **array;
 *                     int count;
 *                     int size;
 *                     void (*free)(struct ClosedNetworkChargesTable *);
 *                 } list;
 *                 asn_struct_ctx_t _asn_ctx;
 *             } closedNetworkCharges;
 *             TimeChargesTable_t timeBasedCharges;
 *         } choice;
 *         asn_struct_ctx_t _asn_ctx;
 *     } tollTypeCharge;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TollChargesTable {

    TollChargesTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        TollChargesTable__tollTypeCharge.layout().withName("tollTypeCharge"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TollChargesTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct TollChargesTable__tollTypeCharge {
     *     TollChargesTable__tollTypeCharge_PR present;
     *     union TollChargesTable__tollTypeCharge_u {
     *         ChargesTable_t pointCharges;
     *         struct TollChargesTable__tollTypeCharge__perLaneCharges {
     *             struct {
     *                 struct LaneChargesTable **array;
     *                 int count;
     *                 int size;
     *                 void (*free)(struct LaneChargesTable *);
     *             } list;
     *             asn_struct_ctx_t _asn_ctx;
     *         } perLaneCharges;
     *         struct TollChargesTable__tollTypeCharge__closedNetworkCharges {
     *             struct {
     *                 struct ClosedNetworkChargesTable **array;
     *                 int count;
     *                 int size;
     *                 void (*free)(struct ClosedNetworkChargesTable *);
     *             } list;
     *             asn_struct_ctx_t _asn_ctx;
     *         } closedNetworkCharges;
     *         TimeChargesTable_t timeBasedCharges;
     *     } choice;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class TollChargesTable__tollTypeCharge {

        TollChargesTable__tollTypeCharge() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_INT.withName("present"),
            MemoryLayout.paddingLayout(4),
            TollChargesTable__tollTypeCharge_u.layout().withName("choice"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("TollChargesTable__tollTypeCharge");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TollChargesTable__tollTypeCharge_PR present
         * }
         */
        public static final OfInt present$layout() {
            return present$LAYOUT;
        }

        private static final long present$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TollChargesTable__tollTypeCharge_PR present
         * }
         */
        public static final long present$offset() {
            return present$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TollChargesTable__tollTypeCharge_PR present
         * }
         */
        public static int present(MemorySegment struct) {
            return struct.get(present$LAYOUT, present$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TollChargesTable__tollTypeCharge_PR present
         * }
         */
        public static void present(MemorySegment struct, int fieldValue) {
            struct.set(present$LAYOUT, present$OFFSET, fieldValue);
        }

        /**
         * {@snippet lang=c :
         * union TollChargesTable__tollTypeCharge_u {
         *     ChargesTable_t pointCharges;
         *     struct TollChargesTable__tollTypeCharge__perLaneCharges {
         *         struct {
         *             struct LaneChargesTable **array;
         *             int count;
         *             int size;
         *             void (*free)(struct LaneChargesTable *);
         *         } list;
         *         asn_struct_ctx_t _asn_ctx;
         *     } perLaneCharges;
         *     struct TollChargesTable__tollTypeCharge__closedNetworkCharges {
         *         struct {
         *             struct ClosedNetworkChargesTable **array;
         *             int count;
         *             int size;
         *             void (*free)(struct ClosedNetworkChargesTable *);
         *         } list;
         *         asn_struct_ctx_t _asn_ctx;
         *     } closedNetworkCharges;
         *     TimeChargesTable_t timeBasedCharges;
         * }
         * }
         */
        public static class TollChargesTable__tollTypeCharge_u {

            TollChargesTable__tollTypeCharge_u() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
                ChargesTable.layout().withName("pointCharges"),
                TollChargesTable__tollTypeCharge__perLaneCharges.layout().withName("perLaneCharges"),
                TollChargesTable__tollTypeCharge__closedNetworkCharges.layout().withName("closedNetworkCharges"),
                TimeChargesTable.layout().withName("timeBasedCharges")
            ).withName("TollChargesTable__tollTypeCharge_u");

            /**
             * The layout of this union
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final GroupLayout pointCharges$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pointCharges"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * ChargesTable_t pointCharges
             * }
             */
            public static final GroupLayout pointCharges$layout() {
                return pointCharges$LAYOUT;
            }

            private static final long pointCharges$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * ChargesTable_t pointCharges
             * }
             */
            public static final long pointCharges$offset() {
                return pointCharges$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * ChargesTable_t pointCharges
             * }
             */
            public static MemorySegment pointCharges(MemorySegment union) {
                return union.asSlice(pointCharges$OFFSET, pointCharges$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * ChargesTable_t pointCharges
             * }
             */
            public static void pointCharges(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, pointCharges$OFFSET, pointCharges$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__perLaneCharges {
             *     struct {
             *         struct LaneChargesTable **array;
             *         int count;
             *         int size;
             *         void (*free)(struct LaneChargesTable *);
             *     } list;
             *     asn_struct_ctx_t _asn_ctx;
             * }
             * }
             */
            public static class TollChargesTable__tollTypeCharge__perLaneCharges {

                TollChargesTable__tollTypeCharge__perLaneCharges() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    list.layout().withName("list"),
                    asn_struct_ctx_s.layout().withName("_asn_ctx")
                ).withName("TollChargesTable__tollTypeCharge__perLaneCharges");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                /**
                 * {@snippet lang=c :
                 * struct {
                 *     struct LaneChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct LaneChargesTable *);
                 * }
                 * }
                 */
                public static class list {

                    list() {
                        // Should not be called directly
                    }

                    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                        MessageFrame_h.C_POINTER.withName("array"),
                        MessageFrame_h.C_INT.withName("count"),
                        MessageFrame_h.C_INT.withName("size"),
                        MessageFrame_h.C_POINTER.withName("free")
                    ).withName("$anon$48:5");

                    /**
                     * The layout of this struct
                     */
                    public static final GroupLayout layout() {
                        return $LAYOUT;
                    }

                    private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * struct LaneChargesTable **array
                     * }
                     */
                    public static final AddressLayout array$layout() {
                        return array$LAYOUT;
                    }

                    private static final long array$OFFSET = 0;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * struct LaneChargesTable **array
                     * }
                     */
                    public static final long array$offset() {
                        return array$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * struct LaneChargesTable **array
                     * }
                     */
                    public static MemorySegment array(MemorySegment struct) {
                        return struct.get(array$LAYOUT, array$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * struct LaneChargesTable **array
                     * }
                     */
                    public static void array(MemorySegment struct, MemorySegment fieldValue) {
                        struct.set(array$LAYOUT, array$OFFSET, fieldValue);
                    }

                    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static final OfInt count$layout() {
                        return count$LAYOUT;
                    }

                    private static final long count$OFFSET = 8;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static final long count$offset() {
                        return count$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static int count(MemorySegment struct) {
                        return struct.get(count$LAYOUT, count$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static void count(MemorySegment struct, int fieldValue) {
                        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
                    }

                    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static final OfInt size$layout() {
                        return size$LAYOUT;
                    }

                    private static final long size$OFFSET = 12;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static final long size$offset() {
                        return size$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static int size(MemorySegment struct) {
                        return struct.get(size$LAYOUT, size$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static void size(MemorySegment struct, int fieldValue) {
                        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
                    }

                    /**
                     * {@snippet lang=c :
                     * void (*free)(struct LaneChargesTable *)
                     * }
                     */
                    public static class free {

                        free() {
                            // Should not be called directly
                        }

                        /**
                         * The function pointer signature, expressed as a functional interface
                         */
                        public interface Function {
                            void apply(MemorySegment _x0);
                        }

                        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                            MessageFrame_h.C_POINTER
                        );

                        /**
                         * The descriptor of this function pointer
                         */
                        public static FunctionDescriptor descriptor() {
                            return $DESC;
                        }

                        private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

                        /**
                         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
                         * The lifetime of the returned segment is managed by {@code arena}
                         */
                        public static MemorySegment allocate(Function fi, Arena arena) {
                            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
                        }

                        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

                        /**
                         * Invoke the upcall stub {@code funcPtr}, with given parameters
                         */
                        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                            try {
                                 DOWN$MH.invokeExact(funcPtr, _x0);
                            } catch (Throwable ex$) {
                                throw new AssertionError("should not reach here", ex$);
                            }
                        }
                    }

                    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * void (*free)(struct LaneChargesTable *)
                     * }
                     */
                    public static final AddressLayout free$layout() {
                        return free$LAYOUT;
                    }

                    private static final long free$OFFSET = 16;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * void (*free)(struct LaneChargesTable *)
                     * }
                     */
                    public static final long free$offset() {
                        return free$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * void (*free)(struct LaneChargesTable *)
                     * }
                     */
                    public static MemorySegment free(MemorySegment struct) {
                        return struct.get(free$LAYOUT, free$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * void (*free)(struct LaneChargesTable *)
                     * }
                     */
                    public static void free(MemorySegment struct, MemorySegment fieldValue) {
                        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
                    }

                    /**
                     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                     */
                    public static MemorySegment asSlice(MemorySegment array, long index) {
                        return array.asSlice(layout().byteSize() * index);
                    }

                    /**
                     * The size (in bytes) of this struct
                     */
                    public static long sizeof() { return layout().byteSize(); }

                    /**
                     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                     */
                    public static MemorySegment allocate(SegmentAllocator allocator) {
                        return allocator.allocate(layout());
                    }

                    /**
                     * Allocate an array of size {@code elementCount} using {@code allocator}.
                     * The returned segment has size {@code elementCount * layout().byteSize()}.
                     */
                    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                    }

                    /**
                     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                     * The returned segment has size {@code layout().byteSize()}
                     */
                    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                        return reinterpret(addr, 1, arena, cleanup);
                    }

                    /**
                     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                     * The returned segment has size {@code elementCount * layout().byteSize()}
                     */
                    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                    }
                }

                private static final GroupLayout list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct LaneChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct LaneChargesTable *);
                 * } list
                 * }
                 */
                public static final GroupLayout list$layout() {
                    return list$LAYOUT;
                }

                private static final long list$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct LaneChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct LaneChargesTable *);
                 * } list
                 * }
                 */
                public static final long list$offset() {
                    return list$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct LaneChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct LaneChargesTable *);
                 * } list
                 * }
                 */
                public static MemorySegment list(MemorySegment struct) {
                    return struct.asSlice(list$OFFSET, list$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct LaneChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct LaneChargesTable *);
                 * } list
                 * }
                 */
                public static void list(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, list$OFFSET, list$LAYOUT.byteSize());
                }

                private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static final GroupLayout _asn_ctx$layout() {
                    return _asn_ctx$LAYOUT;
                }

                private static final long _asn_ctx$OFFSET = 24;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static final long _asn_ctx$offset() {
                    return _asn_ctx$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static MemorySegment _asn_ctx(MemorySegment struct) {
                    return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout perLaneCharges$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("perLaneCharges"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__perLaneCharges perLaneCharges
             * }
             */
            public static final GroupLayout perLaneCharges$layout() {
                return perLaneCharges$LAYOUT;
            }

            private static final long perLaneCharges$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__perLaneCharges perLaneCharges
             * }
             */
            public static final long perLaneCharges$offset() {
                return perLaneCharges$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__perLaneCharges perLaneCharges
             * }
             */
            public static MemorySegment perLaneCharges(MemorySegment union) {
                return union.asSlice(perLaneCharges$OFFSET, perLaneCharges$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__perLaneCharges perLaneCharges
             * }
             */
            public static void perLaneCharges(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, perLaneCharges$OFFSET, perLaneCharges$LAYOUT.byteSize());
            }

            /**
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__closedNetworkCharges {
             *     struct {
             *         struct ClosedNetworkChargesTable **array;
             *         int count;
             *         int size;
             *         void (*free)(struct ClosedNetworkChargesTable *);
             *     } list;
             *     asn_struct_ctx_t _asn_ctx;
             * }
             * }
             */
            public static class TollChargesTable__tollTypeCharge__closedNetworkCharges {

                TollChargesTable__tollTypeCharge__closedNetworkCharges() {
                    // Should not be called directly
                }

                private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                    list.layout().withName("list"),
                    asn_struct_ctx_s.layout().withName("_asn_ctx")
                ).withName("TollChargesTable__tollTypeCharge__closedNetworkCharges");

                /**
                 * The layout of this struct
                 */
                public static final GroupLayout layout() {
                    return $LAYOUT;
                }

                /**
                 * {@snippet lang=c :
                 * struct {
                 *     struct ClosedNetworkChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct ClosedNetworkChargesTable *);
                 * }
                 * }
                 */
                public static class list {

                    list() {
                        // Should not be called directly
                    }

                    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                        MessageFrame_h.C_POINTER.withName("array"),
                        MessageFrame_h.C_INT.withName("count"),
                        MessageFrame_h.C_INT.withName("size"),
                        MessageFrame_h.C_POINTER.withName("free")
                    ).withName("$anon$54:5");

                    /**
                     * The layout of this struct
                     */
                    public static final GroupLayout layout() {
                        return $LAYOUT;
                    }

                    private static final AddressLayout array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("array"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * struct ClosedNetworkChargesTable **array
                     * }
                     */
                    public static final AddressLayout array$layout() {
                        return array$LAYOUT;
                    }

                    private static final long array$OFFSET = 0;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * struct ClosedNetworkChargesTable **array
                     * }
                     */
                    public static final long array$offset() {
                        return array$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * struct ClosedNetworkChargesTable **array
                     * }
                     */
                    public static MemorySegment array(MemorySegment struct) {
                        return struct.get(array$LAYOUT, array$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * struct ClosedNetworkChargesTable **array
                     * }
                     */
                    public static void array(MemorySegment struct, MemorySegment fieldValue) {
                        struct.set(array$LAYOUT, array$OFFSET, fieldValue);
                    }

                    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static final OfInt count$layout() {
                        return count$LAYOUT;
                    }

                    private static final long count$OFFSET = 8;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static final long count$offset() {
                        return count$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static int count(MemorySegment struct) {
                        return struct.get(count$LAYOUT, count$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * int count
                     * }
                     */
                    public static void count(MemorySegment struct, int fieldValue) {
                        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
                    }

                    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static final OfInt size$layout() {
                        return size$LAYOUT;
                    }

                    private static final long size$OFFSET = 12;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static final long size$offset() {
                        return size$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static int size(MemorySegment struct) {
                        return struct.get(size$LAYOUT, size$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * int size
                     * }
                     */
                    public static void size(MemorySegment struct, int fieldValue) {
                        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
                    }

                    /**
                     * {@snippet lang=c :
                     * void (*free)(struct ClosedNetworkChargesTable *)
                     * }
                     */
                    public static class free {

                        free() {
                            // Should not be called directly
                        }

                        /**
                         * The function pointer signature, expressed as a functional interface
                         */
                        public interface Function {
                            void apply(MemorySegment _x0);
                        }

                        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
                            MessageFrame_h.C_POINTER
                        );

                        /**
                         * The descriptor of this function pointer
                         */
                        public static FunctionDescriptor descriptor() {
                            return $DESC;
                        }

                        private static final MethodHandle UP$MH = MessageFrame_h.upcallHandle(Function.class, "apply", $DESC);

                        /**
                         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
                         * The lifetime of the returned segment is managed by {@code arena}
                         */
                        public static MemorySegment allocate(Function fi, Arena arena) {
                            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
                        }

                        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

                        /**
                         * Invoke the upcall stub {@code funcPtr}, with given parameters
                         */
                        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
                            try {
                                 DOWN$MH.invokeExact(funcPtr, _x0);
                            } catch (Throwable ex$) {
                                throw new AssertionError("should not reach here", ex$);
                            }
                        }
                    }

                    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

                    /**
                     * Layout for field:
                     * {@snippet lang=c :
                     * void (*free)(struct ClosedNetworkChargesTable *)
                     * }
                     */
                    public static final AddressLayout free$layout() {
                        return free$LAYOUT;
                    }

                    private static final long free$OFFSET = 16;

                    /**
                     * Offset for field:
                     * {@snippet lang=c :
                     * void (*free)(struct ClosedNetworkChargesTable *)
                     * }
                     */
                    public static final long free$offset() {
                        return free$OFFSET;
                    }

                    /**
                     * Getter for field:
                     * {@snippet lang=c :
                     * void (*free)(struct ClosedNetworkChargesTable *)
                     * }
                     */
                    public static MemorySegment free(MemorySegment struct) {
                        return struct.get(free$LAYOUT, free$OFFSET);
                    }

                    /**
                     * Setter for field:
                     * {@snippet lang=c :
                     * void (*free)(struct ClosedNetworkChargesTable *)
                     * }
                     */
                    public static void free(MemorySegment struct, MemorySegment fieldValue) {
                        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
                    }

                    /**
                     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                     */
                    public static MemorySegment asSlice(MemorySegment array, long index) {
                        return array.asSlice(layout().byteSize() * index);
                    }

                    /**
                     * The size (in bytes) of this struct
                     */
                    public static long sizeof() { return layout().byteSize(); }

                    /**
                     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                     */
                    public static MemorySegment allocate(SegmentAllocator allocator) {
                        return allocator.allocate(layout());
                    }

                    /**
                     * Allocate an array of size {@code elementCount} using {@code allocator}.
                     * The returned segment has size {@code elementCount * layout().byteSize()}.
                     */
                    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                    }

                    /**
                     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                     * The returned segment has size {@code layout().byteSize()}
                     */
                    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                        return reinterpret(addr, 1, arena, cleanup);
                    }

                    /**
                     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                     * The returned segment has size {@code elementCount * layout().byteSize()}
                     */
                    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                    }
                }

                private static final GroupLayout list$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("list"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct ClosedNetworkChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct ClosedNetworkChargesTable *);
                 * } list
                 * }
                 */
                public static final GroupLayout list$layout() {
                    return list$LAYOUT;
                }

                private static final long list$OFFSET = 0;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct ClosedNetworkChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct ClosedNetworkChargesTable *);
                 * } list
                 * }
                 */
                public static final long list$offset() {
                    return list$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct ClosedNetworkChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct ClosedNetworkChargesTable *);
                 * } list
                 * }
                 */
                public static MemorySegment list(MemorySegment struct) {
                    return struct.asSlice(list$OFFSET, list$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * struct {
                 *     struct ClosedNetworkChargesTable **array;
                 *     int count;
                 *     int size;
                 *     void (*free)(struct ClosedNetworkChargesTable *);
                 * } list
                 * }
                 */
                public static void list(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, list$OFFSET, list$LAYOUT.byteSize());
                }

                private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

                /**
                 * Layout for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static final GroupLayout _asn_ctx$layout() {
                    return _asn_ctx$LAYOUT;
                }

                private static final long _asn_ctx$OFFSET = 24;

                /**
                 * Offset for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static final long _asn_ctx$offset() {
                    return _asn_ctx$OFFSET;
                }

                /**
                 * Getter for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static MemorySegment _asn_ctx(MemorySegment struct) {
                    return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
                }

                /**
                 * Setter for field:
                 * {@snippet lang=c :
                 * asn_struct_ctx_t _asn_ctx
                 * }
                 */
                public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
                    MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
                }

                /**
                 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
                 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
                 */
                public static MemorySegment asSlice(MemorySegment array, long index) {
                    return array.asSlice(layout().byteSize() * index);
                }

                /**
                 * The size (in bytes) of this struct
                 */
                public static long sizeof() { return layout().byteSize(); }

                /**
                 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
                 */
                public static MemorySegment allocate(SegmentAllocator allocator) {
                    return allocator.allocate(layout());
                }

                /**
                 * Allocate an array of size {@code elementCount} using {@code allocator}.
                 * The returned segment has size {@code elementCount * layout().byteSize()}.
                 */
                public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                    return reinterpret(addr, 1, arena, cleanup);
                }

                /**
                 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
                 * The returned segment has size {@code elementCount * layout().byteSize()}
                 */
                public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                    return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
                }
            }

            private static final GroupLayout closedNetworkCharges$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("closedNetworkCharges"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__closedNetworkCharges closedNetworkCharges
             * }
             */
            public static final GroupLayout closedNetworkCharges$layout() {
                return closedNetworkCharges$LAYOUT;
            }

            private static final long closedNetworkCharges$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__closedNetworkCharges closedNetworkCharges
             * }
             */
            public static final long closedNetworkCharges$offset() {
                return closedNetworkCharges$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__closedNetworkCharges closedNetworkCharges
             * }
             */
            public static MemorySegment closedNetworkCharges(MemorySegment union) {
                return union.asSlice(closedNetworkCharges$OFFSET, closedNetworkCharges$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * struct TollChargesTable__tollTypeCharge__closedNetworkCharges closedNetworkCharges
             * }
             */
            public static void closedNetworkCharges(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, closedNetworkCharges$OFFSET, closedNetworkCharges$LAYOUT.byteSize());
            }

            private static final GroupLayout timeBasedCharges$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timeBasedCharges"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * TimeChargesTable_t timeBasedCharges
             * }
             */
            public static final GroupLayout timeBasedCharges$layout() {
                return timeBasedCharges$LAYOUT;
            }

            private static final long timeBasedCharges$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * TimeChargesTable_t timeBasedCharges
             * }
             */
            public static final long timeBasedCharges$offset() {
                return timeBasedCharges$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * TimeChargesTable_t timeBasedCharges
             * }
             */
            public static MemorySegment timeBasedCharges(MemorySegment union) {
                return union.asSlice(timeBasedCharges$OFFSET, timeBasedCharges$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * TimeChargesTable_t timeBasedCharges
             * }
             */
            public static void timeBasedCharges(MemorySegment union, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, union, timeBasedCharges$OFFSET, timeBasedCharges$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this union
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * union TollChargesTable__tollTypeCharge_u choice
         * }
         */
        public static final GroupLayout choice$layout() {
            return choice$LAYOUT;
        }

        private static final long choice$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * union TollChargesTable__tollTypeCharge_u choice
         * }
         */
        public static final long choice$offset() {
            return choice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * union TollChargesTable__tollTypeCharge_u choice
         * }
         */
        public static MemorySegment choice(MemorySegment struct) {
            return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * union TollChargesTable__tollTypeCharge_u choice
         * }
         */
        public static void choice(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 120;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout tollTypeCharge$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tollTypeCharge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TollChargesTable__tollTypeCharge tollTypeCharge
     * }
     */
    public static final GroupLayout tollTypeCharge$layout() {
        return tollTypeCharge$LAYOUT;
    }

    private static final long tollTypeCharge$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TollChargesTable__tollTypeCharge tollTypeCharge
     * }
     */
    public static final long tollTypeCharge$offset() {
        return tollTypeCharge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TollChargesTable__tollTypeCharge tollTypeCharge
     * }
     */
    public static MemorySegment tollTypeCharge(MemorySegment struct) {
        return struct.asSlice(tollTypeCharge$OFFSET, tollTypeCharge$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TollChargesTable__tollTypeCharge tollTypeCharge
     * }
     */
    public static void tollTypeCharge(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tollTypeCharge$OFFSET, tollTypeCharge$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

