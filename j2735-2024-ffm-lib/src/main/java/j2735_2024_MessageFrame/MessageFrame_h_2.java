// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class MessageFrame_h_2 extends MessageFrame_h_3 {

    MessageFrame_h_2() {
        // Should not be called directly
    }
    private static final int RptVehicleEvents_PR_hazardLights = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_hazardLights = 3
     * }
     */
    public static int RptVehicleEvents_PR_hazardLights() {
        return RptVehicleEvents_PR_hazardLights;
    }
    private static final int RptVehicleEvents_PR_kinematicEvents = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_kinematicEvents = 4
     * }
     */
    public static int RptVehicleEvents_PR_kinematicEvents() {
        return RptVehicleEvents_PR_kinematicEvents;
    }
    private static final int RptVehicleEvents_PR_wiperStatusChange = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_wiperStatusChange = 5
     * }
     */
    public static int RptVehicleEvents_PR_wiperStatusChange() {
        return RptVehicleEvents_PR_wiperStatusChange;
    }
    private static final int RptVehicleEvents_PR_lowSpeed = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_lowSpeed = 6
     * }
     */
    public static int RptVehicleEvents_PR_lowSpeed() {
        return RptVehicleEvents_PR_lowSpeed;
    }
    private static final int RptVehicleEvents_PR_resumedSpeed = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_resumedSpeed = 7
     * }
     */
    public static int RptVehicleEvents_PR_resumedSpeed() {
        return RptVehicleEvents_PR_resumedSpeed;
    }
    private static final int RptVehicleEvents_PR_vehEntrsExitsRegion = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_vehEntrsExitsRegion = 8
     * }
     */
    public static int RptVehicleEvents_PR_vehEntrsExitsRegion() {
        return RptVehicleEvents_PR_vehEntrsExitsRegion;
    }
    private static final int RptVehicleEvents_PR_emerVehDetect = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_emerVehDetect = 9
     * }
     */
    public static int RptVehicleEvents_PR_emerVehDetect() {
        return RptVehicleEvents_PR_emerVehDetect;
    }
    private static final int RptVehicleEvents_PR_emerVehLightBar = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_emerVehLightBar = 10
     * }
     */
    public static int RptVehicleEvents_PR_emerVehLightBar() {
        return RptVehicleEvents_PR_emerVehLightBar;
    }
    private static final int RptVehicleEvents_PR_reqTspEvp = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_reqTspEvp = 11
     * }
     */
    public static int RptVehicleEvents_PR_reqTspEvp() {
        return RptVehicleEvents_PR_reqTspEvp;
    }
    private static final int RptVehicleEvents_PR_transitVehPassCnt = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_transitVehPassCnt = 12
     * }
     */
    public static int RptVehicleEvents_PR_transitVehPassCnt() {
        return RptVehicleEvents_PR_transitVehPassCnt;
    }
    private static final int RptVehicleEvents_PR_transitVehDoor = (int)13L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_transitVehDoor = 13
     * }
     */
    public static int RptVehicleEvents_PR_transitVehDoor() {
        return RptVehicleEvents_PR_transitVehDoor;
    }
    private static final int RptVehicleEvents_PR_v2xMsgRecption = (int)14L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_v2xMsgRecption = 14
     * }
     */
    public static int RptVehicleEvents_PR_v2xMsgRecption() {
        return RptVehicleEvents_PR_v2xMsgRecption;
    }
    private static final int RptVehicleEvents_PR_driverAlertsAndWarnings = (int)15L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_driverAlertsAndWarnings = 15
     * }
     */
    public static int RptVehicleEvents_PR_driverAlertsAndWarnings() {
        return RptVehicleEvents_PR_driverAlertsAndWarnings;
    }

    private static class asn_DEF_RptVehicleEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptVehicleEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleEvents
     * }
     */
    public static GroupLayout asn_DEF_RptVehicleEvents$layout() {
        return asn_DEF_RptVehicleEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleEvents
     * }
     */
    public static MemorySegment asn_DEF_RptVehicleEvents() {
        return asn_DEF_RptVehicleEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleEvents
     * }
     */
    public static void asn_DEF_RptVehicleEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptVehicleEvents$constants.SEGMENT, 0L, asn_DEF_RptVehicleEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptVehicleEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptVehicleEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptVehicleEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptVehicleEvents_specs_1$layout() {
        return asn_SPC_RptVehicleEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptVehicleEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptVehicleEvents_specs_1() {
        return asn_SPC_RptVehicleEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptVehicleEvents_specs_1
     * }
     */
    public static void asn_SPC_RptVehicleEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptVehicleEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptVehicleEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptVehicleEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(15, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptVehicleEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 15 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static SequenceLayout asn_MBR_RptVehicleEvents_1$layout() {
        return asn_MBR_RptVehicleEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static long[] asn_MBR_RptVehicleEvents_1$dimensions() {
        return asn_MBR_RptVehicleEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static MemorySegment asn_MBR_RptVehicleEvents_1() {
        return asn_MBR_RptVehicleEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static void asn_MBR_RptVehicleEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVehicleEvents_1$constants.SEGMENT, 0L, asn_MBR_RptVehicleEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static MemorySegment asn_MBR_RptVehicleEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptVehicleEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptVehicleEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleEvents_1[15]
     * }
     */
    public static void asn_MBR_RptVehicleEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVehicleEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptVehicleEvents_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptVehicleEvents_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleEvents_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptVehicleEvents_constr_1$layout() {
        return asn_PER_type_RptVehicleEvents_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleEvents_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptVehicleEvents_constr_1() {
        return asn_PER_type_RptVehicleEvents_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleEvents_constr_1
     * }
     */
    public static void asn_PER_type_RptVehicleEvents_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptVehicleEvents_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptVehicleEvents_constr_1$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long ProbeDataReport_MeanVariation_t
     * }
     */
    public static final OfLong ProbeDataReport_MeanVariation_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ProbeDataReport_MeanVariation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ProbeDataReport_MeanVariation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReport_MeanVariation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ProbeDataReport_MeanVariation_constr_1$layout() {
        return asn_PER_type_ProbeDataReport_MeanVariation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReport_MeanVariation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ProbeDataReport_MeanVariation_constr_1() {
        return asn_PER_type_ProbeDataReport_MeanVariation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReport_MeanVariation_constr_1
     * }
     */
    public static void asn_PER_type_ProbeDataReport_MeanVariation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ProbeDataReport_MeanVariation_constr_1$constants.SEGMENT, 0L, asn_PER_type_ProbeDataReport_MeanVariation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ProbeDataReport_MeanVariation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ProbeDataReport_MeanVariation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReport_MeanVariation
     * }
     */
    public static GroupLayout asn_DEF_ProbeDataReport_MeanVariation$layout() {
        return asn_DEF_ProbeDataReport_MeanVariation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReport_MeanVariation
     * }
     */
    public static MemorySegment asn_DEF_ProbeDataReport_MeanVariation() {
        return asn_DEF_ProbeDataReport_MeanVariation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReport_MeanVariation
     * }
     */
    public static void asn_DEF_ProbeDataReport_MeanVariation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ProbeDataReport_MeanVariation$constants.SEGMENT, 0L, asn_DEF_ProbeDataReport_MeanVariation$constants.LAYOUT.byteSize());
    }

    private static class ProbeDataReport_MeanVariation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ProbeDataReport_MeanVariation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_free$descriptor() {
        return ProbeDataReport_MeanVariation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ProbeDataReport_MeanVariation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_free$handle() {
        return ProbeDataReport_MeanVariation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ProbeDataReport_MeanVariation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_free$address() {
        return ProbeDataReport_MeanVariation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ProbeDataReport_MeanVariation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ProbeDataReport_MeanVariation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ProbeDataReport_MeanVariation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_print$descriptor() {
        return ProbeDataReport_MeanVariation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_print$handle() {
        return ProbeDataReport_MeanVariation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_print$address() {
        return ProbeDataReport_MeanVariation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ProbeDataReport_MeanVariation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ProbeDataReport_MeanVariation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_constraint$descriptor() {
        return ProbeDataReport_MeanVariation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_constraint$handle() {
        return ProbeDataReport_MeanVariation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_constraint$address() {
        return ProbeDataReport_MeanVariation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ProbeDataReport_MeanVariation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ProbeDataReport_MeanVariation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ProbeDataReport_MeanVariation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_decode_ber$descriptor() {
        return ProbeDataReport_MeanVariation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_decode_ber$handle() {
        return ProbeDataReport_MeanVariation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_ber$address() {
        return ProbeDataReport_MeanVariation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ProbeDataReport_MeanVariation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_der$descriptor() {
        return ProbeDataReport_MeanVariation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_der$handle() {
        return ProbeDataReport_MeanVariation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_der$address() {
        return ProbeDataReport_MeanVariation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ProbeDataReport_MeanVariation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_decode_xer$descriptor() {
        return ProbeDataReport_MeanVariation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_decode_xer$handle() {
        return ProbeDataReport_MeanVariation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_xer$address() {
        return ProbeDataReport_MeanVariation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ProbeDataReport_MeanVariation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_xer$descriptor() {
        return ProbeDataReport_MeanVariation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_xer$handle() {
        return ProbeDataReport_MeanVariation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_xer$address() {
        return ProbeDataReport_MeanVariation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ProbeDataReport_MeanVariation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_jer$descriptor() {
        return ProbeDataReport_MeanVariation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_jer$handle() {
        return ProbeDataReport_MeanVariation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_jer$address() {
        return ProbeDataReport_MeanVariation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ProbeDataReport_MeanVariation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_decode_oer$descriptor() {
        return ProbeDataReport_MeanVariation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_decode_oer$handle() {
        return ProbeDataReport_MeanVariation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_oer$address() {
        return ProbeDataReport_MeanVariation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ProbeDataReport_MeanVariation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_oer$descriptor() {
        return ProbeDataReport_MeanVariation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_oer$handle() {
        return ProbeDataReport_MeanVariation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_oer$address() {
        return ProbeDataReport_MeanVariation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ProbeDataReport_MeanVariation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_decode_uper$descriptor() {
        return ProbeDataReport_MeanVariation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_decode_uper$handle() {
        return ProbeDataReport_MeanVariation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_uper$address() {
        return ProbeDataReport_MeanVariation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ProbeDataReport_MeanVariation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_uper$descriptor() {
        return ProbeDataReport_MeanVariation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_uper$handle() {
        return ProbeDataReport_MeanVariation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_uper$address() {
        return ProbeDataReport_MeanVariation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ProbeDataReport_MeanVariation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_decode_aper$descriptor() {
        return ProbeDataReport_MeanVariation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_decode_aper$handle() {
        return ProbeDataReport_MeanVariation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_aper$address() {
        return ProbeDataReport_MeanVariation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ProbeDataReport_MeanVariation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ProbeDataReport_MeanVariation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProbeDataReport_MeanVariation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ProbeDataReport_MeanVariation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ProbeDataReport_MeanVariation_encode_aper$descriptor() {
        return ProbeDataReport_MeanVariation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ProbeDataReport_MeanVariation_encode_aper$handle() {
        return ProbeDataReport_MeanVariation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_aper$address() {
        return ProbeDataReport_MeanVariation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ProbeDataReport_MeanVariation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ProbeDataReport_MeanVariation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ProbeDataReport_MeanVariation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProbeDataReport_MeanVariation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_RptRoadRoughness$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptRoadRoughness").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadRoughness
     * }
     */
    public static GroupLayout asn_DEF_RptRoadRoughness$layout() {
        return asn_DEF_RptRoadRoughness$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadRoughness
     * }
     */
    public static MemorySegment asn_DEF_RptRoadRoughness() {
        return asn_DEF_RptRoadRoughness$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadRoughness
     * }
     */
    public static void asn_DEF_RptRoadRoughness(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptRoadRoughness$constants.SEGMENT, 0L, asn_DEF_RptRoadRoughness$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptRoadRoughness_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptRoadRoughness_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptRoadRoughness_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptRoadRoughness_specs_1$layout() {
        return asn_SPC_RptRoadRoughness_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptRoadRoughness_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptRoadRoughness_specs_1() {
        return asn_SPC_RptRoadRoughness_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptRoadRoughness_specs_1
     * }
     */
    public static void asn_SPC_RptRoadRoughness_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptRoadRoughness_specs_1$constants.SEGMENT, 0L, asn_SPC_RptRoadRoughness_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptRoadRoughness_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptRoadRoughness_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_RptRoadRoughness_1$layout() {
        return asn_MBR_RptRoadRoughness_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static long[] asn_MBR_RptRoadRoughness_1$dimensions() {
        return asn_MBR_RptRoadRoughness_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptRoadRoughness_1() {
        return asn_MBR_RptRoadRoughness_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static void asn_MBR_RptRoadRoughness_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptRoadRoughness_1$constants.SEGMENT, 0L, asn_MBR_RptRoadRoughness_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptRoadRoughness_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptRoadRoughness_1$constants.HANDLE.invokeExact(asn_MBR_RptRoadRoughness_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadRoughness_1[4]
     * }
     */
    public static void asn_MBR_RptRoadRoughness_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptRoadRoughness_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RptTrafficMetrics_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_NOTHING = 0
     * }
     */
    public static int RptTrafficMetrics_PR_NOTHING() {
        return RptTrafficMetrics_PR_NOTHING;
    }
    private static final int RptTrafficMetrics_PR_trfsigApproachDelay = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigApproachDelay = 1
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigApproachDelay() {
        return RptTrafficMetrics_PR_trfsigApproachDelay;
    }
    private static final int RptTrafficMetrics_PR_trfsigApproachSpeed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigApproachSpeed = 2
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigApproachSpeed() {
        return RptTrafficMetrics_PR_trfsigApproachSpeed;
    }
    private static final int RptTrafficMetrics_PR_trfsigArrivalGreen = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigArrivalGreen = 3
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigArrivalGreen() {
        return RptTrafficMetrics_PR_trfsigArrivalGreen;
    }
    private static final int RptTrafficMetrics_PR_trfsigArrivalRed = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigArrivalRed = 4
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigArrivalRed() {
        return RptTrafficMetrics_PR_trfsigArrivalRed;
    }
    private static final int RptTrafficMetrics_PR_trfsigPedDelay = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigPedDelay = 5
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigPedDelay() {
        return RptTrafficMetrics_PR_trfsigPedDelay;
    }
    private static final int RptTrafficMetrics_PR_trfsigSpatMismatch = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigSpatMismatch = 6
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigSpatMismatch() {
        return RptTrafficMetrics_PR_trfsigSpatMismatch;
    }
    private static final int RptTrafficMetrics_PR_trfsigSpatTimingError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptTrafficMetrics_PR.RptTrafficMetrics_PR_trfsigSpatTimingError = 7
     * }
     */
    public static int RptTrafficMetrics_PR_trfsigSpatTimingError() {
        return RptTrafficMetrics_PR_trfsigSpatTimingError;
    }

    private static class asn_DEF_RptTrafficMetrics$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptTrafficMetrics").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficMetrics
     * }
     */
    public static GroupLayout asn_DEF_RptTrafficMetrics$layout() {
        return asn_DEF_RptTrafficMetrics$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficMetrics
     * }
     */
    public static MemorySegment asn_DEF_RptTrafficMetrics() {
        return asn_DEF_RptTrafficMetrics$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficMetrics
     * }
     */
    public static void asn_DEF_RptTrafficMetrics(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptTrafficMetrics$constants.SEGMENT, 0L, asn_DEF_RptTrafficMetrics$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptTrafficMetrics_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptTrafficMetrics_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptTrafficMetrics_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptTrafficMetrics_specs_1$layout() {
        return asn_SPC_RptTrafficMetrics_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptTrafficMetrics_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptTrafficMetrics_specs_1() {
        return asn_SPC_RptTrafficMetrics_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptTrafficMetrics_specs_1
     * }
     */
    public static void asn_SPC_RptTrafficMetrics_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptTrafficMetrics_specs_1$constants.SEGMENT, 0L, asn_SPC_RptTrafficMetrics_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptTrafficMetrics_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(7, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptTrafficMetrics_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 7 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static SequenceLayout asn_MBR_RptTrafficMetrics_1$layout() {
        return asn_MBR_RptTrafficMetrics_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static long[] asn_MBR_RptTrafficMetrics_1$dimensions() {
        return asn_MBR_RptTrafficMetrics_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptTrafficMetrics_1() {
        return asn_MBR_RptTrafficMetrics_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static void asn_MBR_RptTrafficMetrics_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTrafficMetrics_1$constants.SEGMENT, 0L, asn_MBR_RptTrafficMetrics_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptTrafficMetrics_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptTrafficMetrics_1$constants.HANDLE.invokeExact(asn_MBR_RptTrafficMetrics_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficMetrics_1[7]
     * }
     */
    public static void asn_MBR_RptTrafficMetrics_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTrafficMetrics_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptTrafficMetrics_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptTrafficMetrics_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptTrafficMetrics_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptTrafficMetrics_constr_1$layout() {
        return asn_PER_type_RptTrafficMetrics_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptTrafficMetrics_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptTrafficMetrics_constr_1() {
        return asn_PER_type_RptTrafficMetrics_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptTrafficMetrics_constr_1
     * }
     */
    public static void asn_PER_type_RptTrafficMetrics_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptTrafficMetrics_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptTrafficMetrics_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptTrafficSigEncounters$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptTrafficSigEncounters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficSigEncounters
     * }
     */
    public static GroupLayout asn_DEF_RptTrafficSigEncounters$layout() {
        return asn_DEF_RptTrafficSigEncounters$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficSigEncounters
     * }
     */
    public static MemorySegment asn_DEF_RptTrafficSigEncounters() {
        return asn_DEF_RptTrafficSigEncounters$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTrafficSigEncounters
     * }
     */
    public static void asn_DEF_RptTrafficSigEncounters(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptTrafficSigEncounters$constants.SEGMENT, 0L, asn_DEF_RptTrafficSigEncounters$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptTrafficSigEncounters_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptTrafficSigEncounters_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTrafficSigEncounters_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptTrafficSigEncounters_specs_1$layout() {
        return asn_SPC_RptTrafficSigEncounters_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTrafficSigEncounters_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptTrafficSigEncounters_specs_1() {
        return asn_SPC_RptTrafficSigEncounters_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTrafficSigEncounters_specs_1
     * }
     */
    public static void asn_SPC_RptTrafficSigEncounters_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptTrafficSigEncounters_specs_1$constants.SEGMENT, 0L, asn_SPC_RptTrafficSigEncounters_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptTrafficSigEncounters_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptTrafficSigEncounters_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RptTrafficSigEncounters_1$layout() {
        return asn_MBR_RptTrafficSigEncounters_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static long[] asn_MBR_RptTrafficSigEncounters_1$dimensions() {
        return asn_MBR_RptTrafficSigEncounters_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptTrafficSigEncounters_1() {
        return asn_MBR_RptTrafficSigEncounters_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static void asn_MBR_RptTrafficSigEncounters_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTrafficSigEncounters_1$constants.SEGMENT, 0L, asn_MBR_RptTrafficSigEncounters_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptTrafficSigEncounters_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptTrafficSigEncounters_1$constants.HANDLE.invokeExact(asn_MBR_RptTrafficSigEncounters_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTrafficSigEncounters_1[2]
     * }
     */
    public static void asn_MBR_RptTrafficSigEncounters_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTrafficSigEncounters_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RptRoadwayEvents_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_NOTHING = 0
     * }
     */
    public static int RptRoadwayEvents_PR_NOTHING() {
        return RptRoadwayEvents_PR_NOTHING;
    }
    private static final int RptRoadwayEvents_PR_obstacleDetected = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_obstacleDetected = 1
     * }
     */
    public static int RptRoadwayEvents_PR_obstacleDetected() {
        return RptRoadwayEvents_PR_obstacleDetected;
    }
    private static final int RptRoadwayEvents_PR_adverseRoadSurface = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_adverseRoadSurface = 2
     * }
     */
    public static int RptRoadwayEvents_PR_adverseRoadSurface() {
        return RptRoadwayEvents_PR_adverseRoadSurface;
    }
    private static final int RptRoadwayEvents_PR_trfsigEncounters = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_trfsigEncounters = 3
     * }
     */
    public static int RptRoadwayEvents_PR_trfsigEncounters() {
        return RptRoadwayEvents_PR_trfsigEncounters;
    }
    private static final int RptRoadwayEvents_PR_trfsigLightOut = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_trfsigLightOut = 4
     * }
     */
    public static int RptRoadwayEvents_PR_trfsigLightOut() {
        return RptRoadwayEvents_PR_trfsigLightOut;
    }
    private static final int RptRoadwayEvents_PR_trfsigRoadGeoMismatch = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_trfsigRoadGeoMismatch = 5
     * }
     */
    public static int RptRoadwayEvents_PR_trfsigRoadGeoMismatch() {
        return RptRoadwayEvents_PR_trfsigRoadGeoMismatch;
    }
    private static final int RptRoadwayEvents_PR_roadsignDetection = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_roadsignDetection = 6
     * }
     */
    public static int RptRoadwayEvents_PR_roadsignDetection() {
        return RptRoadwayEvents_PR_roadsignDetection;
    }
    private static final int RptRoadwayEvents_PR_lowRoadsignReflect = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_lowRoadsignReflect = 7
     * }
     */
    public static int RptRoadwayEvents_PR_lowRoadsignReflect() {
        return RptRoadwayEvents_PR_lowRoadsignReflect;
    }
    private static final int RptRoadwayEvents_PR_lowLaneMarkReflect = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_lowLaneMarkReflect = 8
     * }
     */
    public static int RptRoadwayEvents_PR_lowLaneMarkReflect() {
        return RptRoadwayEvents_PR_lowLaneMarkReflect;
    }
    private static final int RptRoadwayEvents_PR_roadsignIncnstncy = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_roadsignIncnstncy = 9
     * }
     */
    public static int RptRoadwayEvents_PR_roadsignIncnstncy() {
        return RptRoadwayEvents_PR_roadsignIncnstncy;
    }
    private static final int RptRoadwayEvents_PR_laneGeoIncnstncy = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_laneGeoIncnstncy = 10
     * }
     */
    public static int RptRoadwayEvents_PR_laneGeoIncnstncy() {
        return RptRoadwayEvents_PR_laneGeoIncnstncy;
    }
    private static final int RptRoadwayEvents_PR_incidentDetect = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_incidentDetect = 11
     * }
     */
    public static int RptRoadwayEvents_PR_incidentDetect() {
        return RptRoadwayEvents_PR_incidentDetect;
    }
    private static final int RptRoadwayEvents_PR_workZoneCharDetect = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_workZoneCharDetect = 12
     * }
     */
    public static int RptRoadwayEvents_PR_workZoneCharDetect() {
        return RptRoadwayEvents_PR_workZoneCharDetect;
    }
    private static final int RptRoadwayEvents_PR_inclWeatherDetect = (int)13L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_inclWeatherDetect = 13
     * }
     */
    public static int RptRoadwayEvents_PR_inclWeatherDetect() {
        return RptRoadwayEvents_PR_inclWeatherDetect;
    }
    private static final int RptRoadwayEvents_PR_railrdCrossActiv = (int)14L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_railrdCrossActiv = 14
     * }
     */
    public static int RptRoadwayEvents_PR_railrdCrossActiv() {
        return RptRoadwayEvents_PR_railrdCrossActiv;
    }
    private static final int RptRoadwayEvents_PR_drawBridgeActiv = (int)15L;
    /**
     * {@snippet lang=c :
     * enum RptRoadwayEvents_PR.RptRoadwayEvents_PR_drawBridgeActiv = 15
     * }
     */
    public static int RptRoadwayEvents_PR_drawBridgeActiv() {
        return RptRoadwayEvents_PR_drawBridgeActiv;
    }

    private static class asn_DEF_RptRoadwayEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptRoadwayEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadwayEvents
     * }
     */
    public static GroupLayout asn_DEF_RptRoadwayEvents$layout() {
        return asn_DEF_RptRoadwayEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadwayEvents
     * }
     */
    public static MemorySegment asn_DEF_RptRoadwayEvents() {
        return asn_DEF_RptRoadwayEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptRoadwayEvents
     * }
     */
    public static void asn_DEF_RptRoadwayEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptRoadwayEvents$constants.SEGMENT, 0L, asn_DEF_RptRoadwayEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptRoadwayEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptRoadwayEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptRoadwayEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptRoadwayEvents_specs_1$layout() {
        return asn_SPC_RptRoadwayEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptRoadwayEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptRoadwayEvents_specs_1() {
        return asn_SPC_RptRoadwayEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptRoadwayEvents_specs_1
     * }
     */
    public static void asn_SPC_RptRoadwayEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptRoadwayEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptRoadwayEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptRoadwayEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(15, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptRoadwayEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 15 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static SequenceLayout asn_MBR_RptRoadwayEvents_1$layout() {
        return asn_MBR_RptRoadwayEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static long[] asn_MBR_RptRoadwayEvents_1$dimensions() {
        return asn_MBR_RptRoadwayEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static MemorySegment asn_MBR_RptRoadwayEvents_1() {
        return asn_MBR_RptRoadwayEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static void asn_MBR_RptRoadwayEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptRoadwayEvents_1$constants.SEGMENT, 0L, asn_MBR_RptRoadwayEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static MemorySegment asn_MBR_RptRoadwayEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptRoadwayEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptRoadwayEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptRoadwayEvents_1[15]
     * }
     */
    public static void asn_MBR_RptRoadwayEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptRoadwayEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptRoadwayEvents_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptRoadwayEvents_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptRoadwayEvents_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptRoadwayEvents_constr_1$layout() {
        return asn_PER_type_RptRoadwayEvents_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptRoadwayEvents_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptRoadwayEvents_constr_1() {
        return asn_PER_type_RptRoadwayEvents_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptRoadwayEvents_constr_1
     * }
     */
    public static void asn_PER_type_RptRoadwayEvents_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptRoadwayEvents_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptRoadwayEvents_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int RptCommSysPerfEvents_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_NOTHING = 0
     * }
     */
    public static int RptCommSysPerfEvents_PR_NOTHING() {
        return RptCommSysPerfEvents_PR_NOTHING;
    }
    private static final int RptCommSysPerfEvents_PR_j2945_1ChanBusy = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_j2945_1ChanBusy = 1
     * }
     */
    public static int RptCommSysPerfEvents_PR_j2945_1ChanBusy() {
        return RptCommSysPerfEvents_PR_j2945_1ChanBusy;
    }
    private static final int RptCommSysPerfEvents_PR_rfDataRsuInfo = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_rfDataRsuInfo = 2
     * }
     */
    public static int RptCommSysPerfEvents_PR_rfDataRsuInfo() {
        return RptCommSysPerfEvents_PR_rfDataRsuInfo;
    }
    private static final int RptCommSysPerfEvents_PR_numOfRsusObserved = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_numOfRsusObserved = 3
     * }
     */
    public static int RptCommSysPerfEvents_PR_numOfRsusObserved() {
        return RptCommSysPerfEvents_PR_numOfRsusObserved;
    }
    private static final int RptCommSysPerfEvents_PR_rfV2xJamDetect = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_rfV2xJamDetect = 4
     * }
     */
    public static int RptCommSysPerfEvents_PR_rfV2xJamDetect() {
        return RptCommSysPerfEvents_PR_rfV2xJamDetect;
    }
    private static final int RptCommSysPerfEvents_PR_j2945_1VehDens = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_j2945_1VehDens = 5
     * }
     */
    public static int RptCommSysPerfEvents_PR_j2945_1VehDens() {
        return RptCommSysPerfEvents_PR_j2945_1VehDens;
    }
    private static final int RptCommSysPerfEvents_PR_j2945_1CqiBelow = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_j2945_1CqiBelow = 6
     * }
     */
    public static int RptCommSysPerfEvents_PR_j2945_1CqiBelow() {
        return RptCommSysPerfEvents_PR_j2945_1CqiBelow;
    }
    private static final int RptCommSysPerfEvents_PR_j2945_1TrackingError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_j2945_1TrackingError = 7
     * }
     */
    public static int RptCommSysPerfEvents_PR_j2945_1TrackingError() {
        return RptCommSysPerfEvents_PR_j2945_1TrackingError;
    }
    private static final int RptCommSysPerfEvents_PR_gnssHdopExceeds = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_gnssHdopExceeds = 8
     * }
     */
    public static int RptCommSysPerfEvents_PR_gnssHdopExceeds() {
        return RptCommSysPerfEvents_PR_gnssHdopExceeds;
    }
    private static final int RptCommSysPerfEvents_PR_gnssErrElipse = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_gnssErrElipse = 9
     * }
     */
    public static int RptCommSysPerfEvents_PR_gnssErrElipse() {
        return RptCommSysPerfEvents_PR_gnssErrElipse;
    }
    private static final int RptCommSysPerfEvents_PR_gnssSatsBelow = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_gnssSatsBelow = 10
     * }
     */
    public static int RptCommSysPerfEvents_PR_gnssSatsBelow() {
        return RptCommSysPerfEvents_PR_gnssSatsBelow;
    }
    private static final int RptCommSysPerfEvents_PR_jammingDetect = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RptCommSysPerfEvents_PR.RptCommSysPerfEvents_PR_jammingDetect = 11
     * }
     */
    public static int RptCommSysPerfEvents_PR_jammingDetect() {
        return RptCommSysPerfEvents_PR_jammingDetect;
    }

    private static class asn_DEF_RptCommSysPerfEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptCommSysPerfEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptCommSysPerfEvents
     * }
     */
    public static GroupLayout asn_DEF_RptCommSysPerfEvents$layout() {
        return asn_DEF_RptCommSysPerfEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptCommSysPerfEvents
     * }
     */
    public static MemorySegment asn_DEF_RptCommSysPerfEvents() {
        return asn_DEF_RptCommSysPerfEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptCommSysPerfEvents
     * }
     */
    public static void asn_DEF_RptCommSysPerfEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptCommSysPerfEvents$constants.SEGMENT, 0L, asn_DEF_RptCommSysPerfEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptCommSysPerfEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptCommSysPerfEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptCommSysPerfEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptCommSysPerfEvents_specs_1$layout() {
        return asn_SPC_RptCommSysPerfEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptCommSysPerfEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptCommSysPerfEvents_specs_1() {
        return asn_SPC_RptCommSysPerfEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptCommSysPerfEvents_specs_1
     * }
     */
    public static void asn_SPC_RptCommSysPerfEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptCommSysPerfEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptCommSysPerfEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptCommSysPerfEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(11, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptCommSysPerfEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 11 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static SequenceLayout asn_MBR_RptCommSysPerfEvents_1$layout() {
        return asn_MBR_RptCommSysPerfEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static long[] asn_MBR_RptCommSysPerfEvents_1$dimensions() {
        return asn_MBR_RptCommSysPerfEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static MemorySegment asn_MBR_RptCommSysPerfEvents_1() {
        return asn_MBR_RptCommSysPerfEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static void asn_MBR_RptCommSysPerfEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptCommSysPerfEvents_1$constants.SEGMENT, 0L, asn_MBR_RptCommSysPerfEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static MemorySegment asn_MBR_RptCommSysPerfEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptCommSysPerfEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptCommSysPerfEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptCommSysPerfEvents_1[11]
     * }
     */
    public static void asn_MBR_RptCommSysPerfEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptCommSysPerfEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptCommSysPerfEvents_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptCommSysPerfEvents_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptCommSysPerfEvents_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptCommSysPerfEvents_constr_1$layout() {
        return asn_PER_type_RptCommSysPerfEvents_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptCommSysPerfEvents_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptCommSysPerfEvents_constr_1() {
        return asn_PER_type_RptCommSysPerfEvents_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptCommSysPerfEvents_constr_1
     * }
     */
    public static void asn_PER_type_RptCommSysPerfEvents_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptCommSysPerfEvents_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptCommSysPerfEvents_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int RptInstantaneousRecordData_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptInstantaneousRecordData_PR.RptInstantaneousRecordData_PR_NOTHING = 0
     * }
     */
    public static int RptInstantaneousRecordData_PR_NOTHING() {
        return RptInstantaneousRecordData_PR_NOTHING;
    }
    private static final int RptInstantaneousRecordData_PR_intervalEvents = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptInstantaneousRecordData_PR.RptInstantaneousRecordData_PR_intervalEvents = 1
     * }
     */
    public static int RptInstantaneousRecordData_PR_intervalEvents() {
        return RptInstantaneousRecordData_PR_intervalEvents;
    }
    private static final int RptInstantaneousRecordData_PR_vehEvents = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptInstantaneousRecordData_PR.RptInstantaneousRecordData_PR_vehEvents = 2
     * }
     */
    public static int RptInstantaneousRecordData_PR_vehEvents() {
        return RptInstantaneousRecordData_PR_vehEvents;
    }
    private static final int RptInstantaneousRecordData_PR_roadwayEvents = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptInstantaneousRecordData_PR.RptInstantaneousRecordData_PR_roadwayEvents = 3
     * }
     */
    public static int RptInstantaneousRecordData_PR_roadwayEvents() {
        return RptInstantaneousRecordData_PR_roadwayEvents;
    }
    private static final int RptInstantaneousRecordData_PR_commSysPerfEvents = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptInstantaneousRecordData_PR.RptInstantaneousRecordData_PR_commSysPerfEvents = 4
     * }
     */
    public static int RptInstantaneousRecordData_PR_commSysPerfEvents() {
        return RptInstantaneousRecordData_PR_commSysPerfEvents;
    }

    private static class asn_DEF_RptInstantaneousRecordData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptInstantaneousRecordData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecordData
     * }
     */
    public static GroupLayout asn_DEF_RptInstantaneousRecordData$layout() {
        return asn_DEF_RptInstantaneousRecordData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecordData
     * }
     */
    public static MemorySegment asn_DEF_RptInstantaneousRecordData() {
        return asn_DEF_RptInstantaneousRecordData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecordData
     * }
     */
    public static void asn_DEF_RptInstantaneousRecordData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptInstantaneousRecordData$constants.SEGMENT, 0L, asn_DEF_RptInstantaneousRecordData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptInstantaneousRecordData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptInstantaneousRecordData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptInstantaneousRecordData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptInstantaneousRecordData_specs_1$layout() {
        return asn_SPC_RptInstantaneousRecordData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptInstantaneousRecordData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptInstantaneousRecordData_specs_1() {
        return asn_SPC_RptInstantaneousRecordData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptInstantaneousRecordData_specs_1
     * }
     */
    public static void asn_SPC_RptInstantaneousRecordData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptInstantaneousRecordData_specs_1$constants.SEGMENT, 0L, asn_SPC_RptInstantaneousRecordData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptInstantaneousRecordData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptInstantaneousRecordData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_RptInstantaneousRecordData_1$layout() {
        return asn_MBR_RptInstantaneousRecordData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static long[] asn_MBR_RptInstantaneousRecordData_1$dimensions() {
        return asn_MBR_RptInstantaneousRecordData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecordData_1() {
        return asn_MBR_RptInstantaneousRecordData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecordData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecordData_1$constants.SEGMENT, 0L, asn_MBR_RptInstantaneousRecordData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecordData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptInstantaneousRecordData_1$constants.HANDLE.invokeExact(asn_MBR_RptInstantaneousRecordData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecordData_1[4]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecordData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecordData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptInstantaneousRecordData_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptInstantaneousRecordData_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecordData_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptInstantaneousRecordData_constr_1$layout() {
        return asn_PER_type_RptInstantaneousRecordData_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecordData_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptInstantaneousRecordData_constr_1() {
        return asn_PER_type_RptInstantaneousRecordData_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecordData_constr_1
     * }
     */
    public static void asn_PER_type_RptInstantaneousRecordData_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptInstantaneousRecordData_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptInstantaneousRecordData_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptAveragedRecord$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptAveragedRecord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedRecord
     * }
     */
    public static GroupLayout asn_DEF_RptAveragedRecord$layout() {
        return asn_DEF_RptAveragedRecord$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedRecord
     * }
     */
    public static MemorySegment asn_DEF_RptAveragedRecord() {
        return asn_DEF_RptAveragedRecord$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedRecord
     * }
     */
    public static void asn_DEF_RptAveragedRecord(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptAveragedRecord$constants.SEGMENT, 0L, asn_DEF_RptAveragedRecord$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptAveragedRecord_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptAveragedRecord_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedRecord_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptAveragedRecord_specs_1$layout() {
        return asn_SPC_RptAveragedRecord_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedRecord_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptAveragedRecord_specs_1() {
        return asn_SPC_RptAveragedRecord_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedRecord_specs_1
     * }
     */
    public static void asn_SPC_RptAveragedRecord_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptAveragedRecord_specs_1$constants.SEGMENT, 0L, asn_SPC_RptAveragedRecord_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptAveragedRecord_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(7, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptAveragedRecord_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 7 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static SequenceLayout asn_MBR_RptAveragedRecord_1$layout() {
        return asn_MBR_RptAveragedRecord_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static long[] asn_MBR_RptAveragedRecord_1$dimensions() {
        return asn_MBR_RptAveragedRecord_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptAveragedRecord_1() {
        return asn_MBR_RptAveragedRecord_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static void asn_MBR_RptAveragedRecord_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAveragedRecord_1$constants.SEGMENT, 0L, asn_MBR_RptAveragedRecord_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptAveragedRecord_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptAveragedRecord_1$constants.HANDLE.invokeExact(asn_MBR_RptAveragedRecord_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedRecord_1[7]
     * }
     */
    public static void asn_MBR_RptAveragedRecord_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAveragedRecord_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptEmissions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptEmissions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEmissions
     * }
     */
    public static GroupLayout asn_DEF_RptEmissions$layout() {
        return asn_DEF_RptEmissions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEmissions
     * }
     */
    public static MemorySegment asn_DEF_RptEmissions() {
        return asn_DEF_RptEmissions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEmissions
     * }
     */
    public static void asn_DEF_RptEmissions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptEmissions$constants.SEGMENT, 0L, asn_DEF_RptEmissions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptEmissions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptEmissions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptEmissions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptEmissions_specs_1$layout() {
        return asn_SPC_RptEmissions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptEmissions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptEmissions_specs_1() {
        return asn_SPC_RptEmissions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptEmissions_specs_1
     * }
     */
    public static void asn_SPC_RptEmissions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptEmissions_specs_1$constants.SEGMENT, 0L, asn_SPC_RptEmissions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptEmissions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(9, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptEmissions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 9 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static SequenceLayout asn_MBR_RptEmissions_1$layout() {
        return asn_MBR_RptEmissions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static long[] asn_MBR_RptEmissions_1$dimensions() {
        return asn_MBR_RptEmissions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static MemorySegment asn_MBR_RptEmissions_1() {
        return asn_MBR_RptEmissions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static void asn_MBR_RptEmissions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptEmissions_1$constants.SEGMENT, 0L, asn_MBR_RptEmissions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static MemorySegment asn_MBR_RptEmissions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptEmissions_1$constants.HANDLE.invokeExact(asn_MBR_RptEmissions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEmissions_1[9]
     * }
     */
    public static void asn_MBR_RptEmissions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptEmissions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptSummaryRecord$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptSummaryRecord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptSummaryRecord
     * }
     */
    public static GroupLayout asn_DEF_RptSummaryRecord$layout() {
        return asn_DEF_RptSummaryRecord$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptSummaryRecord
     * }
     */
    public static MemorySegment asn_DEF_RptSummaryRecord() {
        return asn_DEF_RptSummaryRecord$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptSummaryRecord
     * }
     */
    public static void asn_DEF_RptSummaryRecord(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptSummaryRecord$constants.SEGMENT, 0L, asn_DEF_RptSummaryRecord$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptSummaryRecord_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptSummaryRecord_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptSummaryRecord_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptSummaryRecord_specs_1$layout() {
        return asn_SPC_RptSummaryRecord_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptSummaryRecord_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptSummaryRecord_specs_1() {
        return asn_SPC_RptSummaryRecord_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptSummaryRecord_specs_1
     * }
     */
    public static void asn_SPC_RptSummaryRecord_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptSummaryRecord_specs_1$constants.SEGMENT, 0L, asn_SPC_RptSummaryRecord_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptSummaryRecord_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(12, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptSummaryRecord_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 12 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static SequenceLayout asn_MBR_RptSummaryRecord_1$layout() {
        return asn_MBR_RptSummaryRecord_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static long[] asn_MBR_RptSummaryRecord_1$dimensions() {
        return asn_MBR_RptSummaryRecord_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static MemorySegment asn_MBR_RptSummaryRecord_1() {
        return asn_MBR_RptSummaryRecord_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static void asn_MBR_RptSummaryRecord_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptSummaryRecord_1$constants.SEGMENT, 0L, asn_MBR_RptSummaryRecord_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static MemorySegment asn_MBR_RptSummaryRecord_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptSummaryRecord_1$constants.HANDLE.invokeExact(asn_MBR_RptSummaryRecord_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptSummaryRecord_1[12]
     * }
     */
    public static void asn_MBR_RptSummaryRecord_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptSummaryRecord_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptLocOfStops$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptLocOfStops").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptLocOfStops
     * }
     */
    public static GroupLayout asn_DEF_RptLocOfStops$layout() {
        return asn_DEF_RptLocOfStops$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptLocOfStops
     * }
     */
    public static MemorySegment asn_DEF_RptLocOfStops() {
        return asn_DEF_RptLocOfStops$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptLocOfStops
     * }
     */
    public static void asn_DEF_RptLocOfStops(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptLocOfStops$constants.SEGMENT, 0L, asn_DEF_RptLocOfStops$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptLocOfStops_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptLocOfStops_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptLocOfStops_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptLocOfStops_specs_1$layout() {
        return asn_SPC_RptLocOfStops_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptLocOfStops_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptLocOfStops_specs_1() {
        return asn_SPC_RptLocOfStops_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptLocOfStops_specs_1
     * }
     */
    public static void asn_SPC_RptLocOfStops_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptLocOfStops_specs_1$constants.SEGMENT, 0L, asn_SPC_RptLocOfStops_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptLocOfStops_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptLocOfStops_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_RptLocOfStops_1$layout() {
        return asn_MBR_RptLocOfStops_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static long[] asn_MBR_RptLocOfStops_1$dimensions() {
        return asn_MBR_RptLocOfStops_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptLocOfStops_1() {
        return asn_MBR_RptLocOfStops_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static void asn_MBR_RptLocOfStops_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptLocOfStops_1$constants.SEGMENT, 0L, asn_MBR_RptLocOfStops_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptLocOfStops_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptLocOfStops_1$constants.HANDLE.invokeExact(asn_MBR_RptLocOfStops_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptLocOfStops_1[3]
     * }
     */
    public static void asn_MBR_RptLocOfStops_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptLocOfStops_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RptAvgAndSummaryRecordData_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptAvgAndSummaryRecordData_PR.RptAvgAndSummaryRecordData_PR_NOTHING = 0
     * }
     */
    public static int RptAvgAndSummaryRecordData_PR_NOTHING() {
        return RptAvgAndSummaryRecordData_PR_NOTHING;
    }
    private static final int RptAvgAndSummaryRecordData_PR_averagedRecord = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptAvgAndSummaryRecordData_PR.RptAvgAndSummaryRecordData_PR_averagedRecord = 1
     * }
     */
    public static int RptAvgAndSummaryRecordData_PR_averagedRecord() {
        return RptAvgAndSummaryRecordData_PR_averagedRecord;
    }
    private static final int RptAvgAndSummaryRecordData_PR_summaryRecord = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptAvgAndSummaryRecordData_PR.RptAvgAndSummaryRecordData_PR_summaryRecord = 2
     * }
     */
    public static int RptAvgAndSummaryRecordData_PR_summaryRecord() {
        return RptAvgAndSummaryRecordData_PR_summaryRecord;
    }

    private static class asn_DEF_RptAvgAndSummaryRecordData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptAvgAndSummaryRecordData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAvgAndSummaryRecordData
     * }
     */
    public static GroupLayout asn_DEF_RptAvgAndSummaryRecordData$layout() {
        return asn_DEF_RptAvgAndSummaryRecordData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAvgAndSummaryRecordData
     * }
     */
    public static MemorySegment asn_DEF_RptAvgAndSummaryRecordData() {
        return asn_DEF_RptAvgAndSummaryRecordData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAvgAndSummaryRecordData
     * }
     */
    public static void asn_DEF_RptAvgAndSummaryRecordData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptAvgAndSummaryRecordData$constants.SEGMENT, 0L, asn_DEF_RptAvgAndSummaryRecordData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptAvgAndSummaryRecordData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptAvgAndSummaryRecordData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptAvgAndSummaryRecordData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptAvgAndSummaryRecordData_specs_1$layout() {
        return asn_SPC_RptAvgAndSummaryRecordData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptAvgAndSummaryRecordData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptAvgAndSummaryRecordData_specs_1() {
        return asn_SPC_RptAvgAndSummaryRecordData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptAvgAndSummaryRecordData_specs_1
     * }
     */
    public static void asn_SPC_RptAvgAndSummaryRecordData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptAvgAndSummaryRecordData_specs_1$constants.SEGMENT, 0L, asn_SPC_RptAvgAndSummaryRecordData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptAvgAndSummaryRecordData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptAvgAndSummaryRecordData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RptAvgAndSummaryRecordData_1$layout() {
        return asn_MBR_RptAvgAndSummaryRecordData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static long[] asn_MBR_RptAvgAndSummaryRecordData_1$dimensions() {
        return asn_MBR_RptAvgAndSummaryRecordData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptAvgAndSummaryRecordData_1() {
        return asn_MBR_RptAvgAndSummaryRecordData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static void asn_MBR_RptAvgAndSummaryRecordData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAvgAndSummaryRecordData_1$constants.SEGMENT, 0L, asn_MBR_RptAvgAndSummaryRecordData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptAvgAndSummaryRecordData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptAvgAndSummaryRecordData_1$constants.HANDLE.invokeExact(asn_MBR_RptAvgAndSummaryRecordData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAvgAndSummaryRecordData_1[2]
     * }
     */
    public static void asn_MBR_RptAvgAndSummaryRecordData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAvgAndSummaryRecordData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptAvgAndSummaryRecordData_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptAvgAndSummaryRecordData_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptAvgAndSummaryRecordData_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptAvgAndSummaryRecordData_constr_1$layout() {
        return asn_PER_type_RptAvgAndSummaryRecordData_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptAvgAndSummaryRecordData_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptAvgAndSummaryRecordData_constr_1() {
        return asn_PER_type_RptAvgAndSummaryRecordData_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptAvgAndSummaryRecordData_constr_1
     * }
     */
    public static void asn_PER_type_RptAvgAndSummaryRecordData_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptAvgAndSummaryRecordData_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptAvgAndSummaryRecordData_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptAveragedAndSummaryRecord$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptAveragedAndSummaryRecord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedAndSummaryRecord
     * }
     */
    public static GroupLayout asn_DEF_RptAveragedAndSummaryRecord$layout() {
        return asn_DEF_RptAveragedAndSummaryRecord$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedAndSummaryRecord
     * }
     */
    public static MemorySegment asn_DEF_RptAveragedAndSummaryRecord() {
        return asn_DEF_RptAveragedAndSummaryRecord$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptAveragedAndSummaryRecord
     * }
     */
    public static void asn_DEF_RptAveragedAndSummaryRecord(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptAveragedAndSummaryRecord$constants.SEGMENT, 0L, asn_DEF_RptAveragedAndSummaryRecord$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptAveragedAndSummaryRecord_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptAveragedAndSummaryRecord_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedAndSummaryRecord_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptAveragedAndSummaryRecord_specs_1$layout() {
        return asn_SPC_RptAveragedAndSummaryRecord_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedAndSummaryRecord_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptAveragedAndSummaryRecord_specs_1() {
        return asn_SPC_RptAveragedAndSummaryRecord_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptAveragedAndSummaryRecord_specs_1
     * }
     */
    public static void asn_SPC_RptAveragedAndSummaryRecord_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptAveragedAndSummaryRecord_specs_1$constants.SEGMENT, 0L, asn_SPC_RptAveragedAndSummaryRecord_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptAveragedAndSummaryRecord_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(7, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptAveragedAndSummaryRecord_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 7 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static SequenceLayout asn_MBR_RptAveragedAndSummaryRecord_1$layout() {
        return asn_MBR_RptAveragedAndSummaryRecord_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static long[] asn_MBR_RptAveragedAndSummaryRecord_1$dimensions() {
        return asn_MBR_RptAveragedAndSummaryRecord_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptAveragedAndSummaryRecord_1() {
        return asn_MBR_RptAveragedAndSummaryRecord_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static void asn_MBR_RptAveragedAndSummaryRecord_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAveragedAndSummaryRecord_1$constants.SEGMENT, 0L, asn_MBR_RptAveragedAndSummaryRecord_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static MemorySegment asn_MBR_RptAveragedAndSummaryRecord_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptAveragedAndSummaryRecord_1$constants.HANDLE.invokeExact(asn_MBR_RptAveragedAndSummaryRecord_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptAveragedAndSummaryRecord_1[7]
     * }
     */
    public static void asn_MBR_RptAveragedAndSummaryRecord_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptAveragedAndSummaryRecord_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_VehTypeChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehTypeChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeChargesTable
     * }
     */
    public static GroupLayout asn_DEF_VehTypeChargesTable$layout() {
        return asn_DEF_VehTypeChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeChargesTable
     * }
     */
    public static MemorySegment asn_DEF_VehTypeChargesTable() {
        return asn_DEF_VehTypeChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeChargesTable
     * }
     */
    public static void asn_DEF_VehTypeChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehTypeChargesTable$constants.SEGMENT, 0L, asn_DEF_VehTypeChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehTypeChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehTypeChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_VehTypeChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehTypeChargesTable_specs_1$layout() {
        return asn_SPC_VehTypeChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_VehTypeChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehTypeChargesTable_specs_1() {
        return asn_SPC_VehTypeChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_VehTypeChargesTable_specs_1
     * }
     */
    public static void asn_SPC_VehTypeChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehTypeChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_VehTypeChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_VehTypeChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_VehTypeChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_VehTypeChargesTable_1$layout() {
        return asn_MBR_VehTypeChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static long[] asn_MBR_VehTypeChargesTable_1$dimensions() {
        return asn_MBR_VehTypeChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_VehTypeChargesTable_1() {
        return asn_MBR_VehTypeChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static void asn_MBR_VehTypeChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehTypeChargesTable_1$constants.SEGMENT, 0L, asn_MBR_VehTypeChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_VehTypeChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_VehTypeChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_VehTypeChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeChargesTable_1[1]
     * }
     */
    public static void asn_MBR_VehTypeChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehTypeChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_VehTypeChargesTable_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VehTypeChargesTable_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehTypeChargesTable_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VehTypeChargesTable_constr_1$layout() {
        return asn_PER_type_VehTypeChargesTable_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehTypeChargesTable_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VehTypeChargesTable_constr_1() {
        return asn_PER_type_VehTypeChargesTable_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehTypeChargesTable_constr_1
     * }
     */
    public static void asn_PER_type_VehTypeChargesTable_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VehTypeChargesTable_constr_1$constants.SEGMENT, 0L, asn_PER_type_VehTypeChargesTable_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int VehicleTypes_motorcycles = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_motorcycles = 1
     * }
     */
    public static int VehicleTypes_motorcycles() {
        return VehicleTypes_motorcycles;
    }
    private static final int VehicleTypes_passengerCars = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_passengerCars = 2
     * }
     */
    public static int VehicleTypes_passengerCars() {
        return VehicleTypes_passengerCars;
    }
    private static final int VehicleTypes_fourTireSingleUnit = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_fourTireSingleUnit = 3
     * }
     */
    public static int VehicleTypes_fourTireSingleUnit() {
        return VehicleTypes_fourTireSingleUnit;
    }
    private static final int VehicleTypes_buses = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_buses = 4
     * }
     */
    public static int VehicleTypes_buses() {
        return VehicleTypes_buses;
    }
    private static final int VehicleTypes_twoAxleSixTireSingleUnit = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_twoAxleSixTireSingleUnit = 5
     * }
     */
    public static int VehicleTypes_twoAxleSixTireSingleUnit() {
        return VehicleTypes_twoAxleSixTireSingleUnit;
    }
    private static final int VehicleTypes_threeAxleSingleUnit = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_threeAxleSingleUnit = 6
     * }
     */
    public static int VehicleTypes_threeAxleSingleUnit() {
        return VehicleTypes_threeAxleSingleUnit;
    }
    private static final int VehicleTypes_fourOrMoreAxleSingleUnit = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_fourOrMoreAxleSingleUnit = 7
     * }
     */
    public static int VehicleTypes_fourOrMoreAxleSingleUnit() {
        return VehicleTypes_fourOrMoreAxleSingleUnit;
    }
    private static final int VehicleTypes_fourOrLessAxleSingleTrailer = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_fourOrLessAxleSingleTrailer = 8
     * }
     */
    public static int VehicleTypes_fourOrLessAxleSingleTrailer() {
        return VehicleTypes_fourOrLessAxleSingleTrailer;
    }
    private static final int VehicleTypes_fiveAxleTractorSemitrailer = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_fiveAxleTractorSemitrailer = 9
     * }
     */
    public static int VehicleTypes_fiveAxleTractorSemitrailer() {
        return VehicleTypes_fiveAxleTractorSemitrailer;
    }
    private static final int VehicleTypes_sixOrMoreAxleSingleTrailer = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_sixOrMoreAxleSingleTrailer = 10
     * }
     */
    public static int VehicleTypes_sixOrMoreAxleSingleTrailer() {
        return VehicleTypes_sixOrMoreAxleSingleTrailer;
    }
    private static final int VehicleTypes_fiveOrLessAxleMultiTrailer = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_fiveOrLessAxleMultiTrailer = 11
     * }
     */
    public static int VehicleTypes_fiveOrLessAxleMultiTrailer() {
        return VehicleTypes_fiveOrLessAxleMultiTrailer;
    }
    private static final int VehicleTypes_sixAxleMultiTrailer = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_sixAxleMultiTrailer = 12
     * }
     */
    public static int VehicleTypes_sixAxleMultiTrailer() {
        return VehicleTypes_sixAxleMultiTrailer;
    }
    private static final int VehicleTypes_sevenOrMoreAxleMultiTrailer = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VehicleTypes.VehicleTypes_sevenOrMoreAxleMultiTrailer = 13
     * }
     */
    public static int VehicleTypes_sevenOrMoreAxleMultiTrailer() {
        return VehicleTypes_sevenOrMoreAxleMultiTrailer;
    }
    /**
     * {@snippet lang=c :
     * typedef long VehicleTypes_t
     * }
     */
    public static final OfLong VehicleTypes_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_VehicleTypes_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VehicleTypes_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleTypes_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VehicleTypes_constr_1$layout() {
        return asn_PER_type_VehicleTypes_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleTypes_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VehicleTypes_constr_1() {
        return asn_PER_type_VehicleTypes_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleTypes_constr_1
     * }
     */
    public static void asn_PER_type_VehicleTypes_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VehicleTypes_constr_1$constants.SEGMENT, 0L, asn_PER_type_VehicleTypes_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VehicleTypes$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleTypes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleTypes
     * }
     */
    public static GroupLayout asn_DEF_VehicleTypes$layout() {
        return asn_DEF_VehicleTypes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleTypes
     * }
     */
    public static MemorySegment asn_DEF_VehicleTypes() {
        return asn_DEF_VehicleTypes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleTypes
     * }
     */
    public static void asn_DEF_VehicleTypes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleTypes$constants.SEGMENT, 0L, asn_DEF_VehicleTypes$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehicleTypes_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehicleTypes_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleTypes_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehicleTypes_specs_1$layout() {
        return asn_SPC_VehicleTypes_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleTypes_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehicleTypes_specs_1() {
        return asn_SPC_VehicleTypes_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleTypes_specs_1
     * }
     */
    public static void asn_SPC_VehicleTypes_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehicleTypes_specs_1$constants.SEGMENT, 0L, asn_SPC_VehicleTypes_specs_1$constants.LAYOUT.byteSize());
    }

    private static class VehicleTypes_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VehicleTypes_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor VehicleTypes_free$descriptor() {
        return VehicleTypes_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VehicleTypes_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle VehicleTypes_free$handle() {
        return VehicleTypes_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VehicleTypes_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment VehicleTypes_free$address() {
        return VehicleTypes_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VehicleTypes_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void VehicleTypes_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = VehicleTypes_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleTypes_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_print$descriptor() {
        return VehicleTypes_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleTypes_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_print$handle() {
        return VehicleTypes_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleTypes_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_print$address() {
        return VehicleTypes_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleTypes_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int VehicleTypes_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleTypes_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleTypes_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_constraint$descriptor() {
        return VehicleTypes_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleTypes_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_constraint$handle() {
        return VehicleTypes_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleTypes_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_constraint$address() {
        return VehicleTypes_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleTypes_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int VehicleTypes_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleTypes_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor VehicleTypes_decode_ber$descriptor() {
        return VehicleTypes_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle VehicleTypes_decode_ber$handle() {
        return VehicleTypes_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleTypes_decode_ber$address() {
        return VehicleTypes_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleTypes_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = VehicleTypes_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_der$descriptor() {
        return VehicleTypes_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_der$handle() {
        return VehicleTypes_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_der$address() {
        return VehicleTypes_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleTypes_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleTypes_decode_xer$descriptor() {
        return VehicleTypes_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleTypes_decode_xer$handle() {
        return VehicleTypes_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleTypes_decode_xer$address() {
        return VehicleTypes_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleTypes_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleTypes_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_xer$descriptor() {
        return VehicleTypes_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_xer$handle() {
        return VehicleTypes_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_xer$address() {
        return VehicleTypes_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleTypes_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_jer$descriptor() {
        return VehicleTypes_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_jer$handle() {
        return VehicleTypes_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_jer$address() {
        return VehicleTypes_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = VehicleTypes_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleTypes_decode_oer$descriptor() {
        return VehicleTypes_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleTypes_decode_oer$handle() {
        return VehicleTypes_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleTypes_decode_oer$address() {
        return VehicleTypes_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleTypes_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleTypes_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_oer$descriptor() {
        return VehicleTypes_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_oer$handle() {
        return VehicleTypes_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_oer$address() {
        return VehicleTypes_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleTypes_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_decode_uper$descriptor() {
        return VehicleTypes_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleTypes_decode_uper$handle() {
        return VehicleTypes_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleTypes_decode_uper$address() {
        return VehicleTypes_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleTypes_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleTypes_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_uper$descriptor() {
        return VehicleTypes_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_uper$handle() {
        return VehicleTypes_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_uper$address() {
        return VehicleTypes_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleTypes_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_decode_aper$descriptor() {
        return VehicleTypes_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleTypes_decode_aper$handle() {
        return VehicleTypes_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleTypes_decode_aper$address() {
        return VehicleTypes_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleTypes_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleTypes_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleTypes_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleTypes_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleTypes_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleTypes_encode_aper$descriptor() {
        return VehicleTypes_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleTypes_encode_aper$handle() {
        return VehicleTypes_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_aper$address() {
        return VehicleTypes_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleTypes_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleTypes_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleTypes_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleTypes_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long Int2Unsigned_t
     * }
     */
    public static final OfLong Int2Unsigned_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Int2Unsigned_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Int2Unsigned_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Int2Unsigned_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Int2Unsigned_constr_1$layout() {
        return asn_PER_type_Int2Unsigned_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Int2Unsigned_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Int2Unsigned_constr_1() {
        return asn_PER_type_Int2Unsigned_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Int2Unsigned_constr_1
     * }
     */
    public static void asn_PER_type_Int2Unsigned_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Int2Unsigned_constr_1$constants.SEGMENT, 0L, asn_PER_type_Int2Unsigned_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Int2Unsigned$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Int2Unsigned").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Int2Unsigned
     * }
     */
    public static GroupLayout asn_DEF_Int2Unsigned$layout() {
        return asn_DEF_Int2Unsigned$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Int2Unsigned
     * }
     */
    public static MemorySegment asn_DEF_Int2Unsigned() {
        return asn_DEF_Int2Unsigned$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Int2Unsigned
     * }
     */
    public static void asn_DEF_Int2Unsigned(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Int2Unsigned$constants.SEGMENT, 0L, asn_DEF_Int2Unsigned$constants.LAYOUT.byteSize());
    }

    private static class Int2Unsigned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Int2Unsigned_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_free$descriptor() {
        return Int2Unsigned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Int2Unsigned_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Int2Unsigned_free$handle() {
        return Int2Unsigned_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Int2Unsigned_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Int2Unsigned_free$address() {
        return Int2Unsigned_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Int2Unsigned_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Int2Unsigned_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Int2Unsigned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Int2Unsigned_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_print$descriptor() {
        return Int2Unsigned_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Int2Unsigned_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_print$handle() {
        return Int2Unsigned_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Int2Unsigned_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_print$address() {
        return Int2Unsigned_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Int2Unsigned_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Int2Unsigned_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Int2Unsigned_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Int2Unsigned_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_constraint$descriptor() {
        return Int2Unsigned_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Int2Unsigned_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_constraint$handle() {
        return Int2Unsigned_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Int2Unsigned_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_constraint$address() {
        return Int2Unsigned_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Int2Unsigned_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Int2Unsigned_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Int2Unsigned_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_decode_ber$descriptor() {
        return Int2Unsigned_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Int2Unsigned_decode_ber$handle() {
        return Int2Unsigned_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_ber$address() {
        return Int2Unsigned_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Int2Unsigned_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_der$descriptor() {
        return Int2Unsigned_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_der$handle() {
        return Int2Unsigned_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_der$address() {
        return Int2Unsigned_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Int2Unsigned_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_decode_xer$descriptor() {
        return Int2Unsigned_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Int2Unsigned_decode_xer$handle() {
        return Int2Unsigned_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_xer$address() {
        return Int2Unsigned_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Int2Unsigned_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_xer$descriptor() {
        return Int2Unsigned_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_xer$handle() {
        return Int2Unsigned_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_xer$address() {
        return Int2Unsigned_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Int2Unsigned_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_jer$descriptor() {
        return Int2Unsigned_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_jer$handle() {
        return Int2Unsigned_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_jer$address() {
        return Int2Unsigned_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Int2Unsigned_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_decode_oer$descriptor() {
        return Int2Unsigned_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Int2Unsigned_decode_oer$handle() {
        return Int2Unsigned_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_oer$address() {
        return Int2Unsigned_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Int2Unsigned_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_oer$descriptor() {
        return Int2Unsigned_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_oer$handle() {
        return Int2Unsigned_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_oer$address() {
        return Int2Unsigned_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Int2Unsigned_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_decode_uper$descriptor() {
        return Int2Unsigned_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Int2Unsigned_decode_uper$handle() {
        return Int2Unsigned_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_uper$address() {
        return Int2Unsigned_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Int2Unsigned_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_uper$descriptor() {
        return Int2Unsigned_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_uper$handle() {
        return Int2Unsigned_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_uper$address() {
        return Int2Unsigned_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Int2Unsigned_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_decode_aper$descriptor() {
        return Int2Unsigned_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Int2Unsigned_decode_aper$handle() {
        return Int2Unsigned_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_aper$address() {
        return Int2Unsigned_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Int2Unsigned_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Int2Unsigned_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Int2Unsigned_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Int2Unsigned_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Int2Unsigned_encode_aper$descriptor() {
        return Int2Unsigned_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Int2Unsigned_encode_aper$handle() {
        return Int2Unsigned_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_aper$address() {
        return Int2Unsigned_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Int2Unsigned_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Int2Unsigned_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Int2Unsigned_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Int2Unsigned_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_PER_type_PayUnit_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_PayUnit_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PayUnit_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_PayUnit_constr_1$layout() {
        return asn_PER_type_PayUnit_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PayUnit_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_PayUnit_constr_1() {
        return asn_PER_type_PayUnit_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PayUnit_constr_1
     * }
     */
    public static void asn_PER_type_PayUnit_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_PayUnit_constr_1$constants.SEGMENT, 0L, asn_PER_type_PayUnit_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_PayUnit$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PayUnit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PayUnit
     * }
     */
    public static GroupLayout asn_DEF_PayUnit$layout() {
        return asn_DEF_PayUnit$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PayUnit
     * }
     */
    public static MemorySegment asn_DEF_PayUnit() {
        return asn_DEF_PayUnit$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PayUnit
     * }
     */
    public static void asn_DEF_PayUnit(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PayUnit$constants.SEGMENT, 0L, asn_DEF_PayUnit$constants.LAYOUT.byteSize());
    }

    private static class PayUnit_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PayUnit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor PayUnit_free$descriptor() {
        return PayUnit_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PayUnit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle PayUnit_free$handle() {
        return PayUnit_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PayUnit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment PayUnit_free$address() {
        return PayUnit_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PayUnit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void PayUnit_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = PayUnit_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PayUnit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_print$descriptor() {
        return PayUnit_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PayUnit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_print$handle() {
        return PayUnit_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PayUnit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_print$address() {
        return PayUnit_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PayUnit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int PayUnit_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PayUnit_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PayUnit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_constraint$descriptor() {
        return PayUnit_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PayUnit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_constraint$handle() {
        return PayUnit_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PayUnit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_constraint$address() {
        return PayUnit_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PayUnit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int PayUnit_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PayUnit_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor PayUnit_decode_ber$descriptor() {
        return PayUnit_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle PayUnit_decode_ber$handle() {
        return PayUnit_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PayUnit_decode_ber$address() {
        return PayUnit_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PayUnit_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = PayUnit_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_der$descriptor() {
        return PayUnit_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_encode_der$handle() {
        return PayUnit_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_der$address() {
        return PayUnit_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PayUnit_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PayUnit_decode_xer$descriptor() {
        return PayUnit_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle PayUnit_decode_xer$handle() {
        return PayUnit_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PayUnit_decode_xer$address() {
        return PayUnit_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PayUnit_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PayUnit_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_xer$descriptor() {
        return PayUnit_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_encode_xer$handle() {
        return PayUnit_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_xer$address() {
        return PayUnit_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PayUnit_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_jer$descriptor() {
        return PayUnit_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_encode_jer$handle() {
        return PayUnit_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_jer$address() {
        return PayUnit_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = PayUnit_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PayUnit_decode_oer$descriptor() {
        return PayUnit_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle PayUnit_decode_oer$handle() {
        return PayUnit_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PayUnit_decode_oer$address() {
        return PayUnit_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PayUnit_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PayUnit_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_oer$descriptor() {
        return PayUnit_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PayUnit_encode_oer$handle() {
        return PayUnit_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_oer$address() {
        return PayUnit_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PayUnit_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PayUnit_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PayUnit_decode_uper$descriptor() {
        return PayUnit_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PayUnit_decode_uper$handle() {
        return PayUnit_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PayUnit_decode_uper$address() {
        return PayUnit_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PayUnit_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PayUnit_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_uper$descriptor() {
        return PayUnit_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PayUnit_encode_uper$handle() {
        return PayUnit_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PayUnit_encode_uper$address() {
        return PayUnit_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PayUnit_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PayUnit_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PayUnit_decode_aper$descriptor() {
        return PayUnit_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PayUnit_decode_aper$handle() {
        return PayUnit_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PayUnit_decode_aper$address() {
        return PayUnit_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PayUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PayUnit_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PayUnit_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PayUnit_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PayUnit_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PayUnit_encode_aper$descriptor() {
        return PayUnit_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PayUnit_encode_aper$handle() {
        return PayUnit_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PayUnit_encode_aper$address() {
        return PayUnit_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PayUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PayUnit_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PayUnit_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PayUnit_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_PaymentFee$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PaymentFee").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PaymentFee
     * }
     */
    public static GroupLayout asn_DEF_PaymentFee$layout() {
        return asn_DEF_PaymentFee$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PaymentFee
     * }
     */
    public static MemorySegment asn_DEF_PaymentFee() {
        return asn_DEF_PaymentFee$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PaymentFee
     * }
     */
    public static void asn_DEF_PaymentFee(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PaymentFee$constants.SEGMENT, 0L, asn_DEF_PaymentFee$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_PaymentFee_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_PaymentFee_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PaymentFee_specs_1
     * }
     */
    public static GroupLayout asn_SPC_PaymentFee_specs_1$layout() {
        return asn_SPC_PaymentFee_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PaymentFee_specs_1
     * }
     */
    public static MemorySegment asn_SPC_PaymentFee_specs_1() {
        return asn_SPC_PaymentFee_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PaymentFee_specs_1
     * }
     */
    public static void asn_SPC_PaymentFee_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_PaymentFee_specs_1$constants.SEGMENT, 0L, asn_SPC_PaymentFee_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_PaymentFee_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_PaymentFee_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_PaymentFee_1$layout() {
        return asn_MBR_PaymentFee_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static long[] asn_MBR_PaymentFee_1$dimensions() {
        return asn_MBR_PaymentFee_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static MemorySegment asn_MBR_PaymentFee_1() {
        return asn_MBR_PaymentFee_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static void asn_MBR_PaymentFee_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PaymentFee_1$constants.SEGMENT, 0L, asn_MBR_PaymentFee_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static MemorySegment asn_MBR_PaymentFee_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_PaymentFee_1$constants.HANDLE.invokeExact(asn_MBR_PaymentFee_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PaymentFee_1[2]
     * }
     */
    public static void asn_MBR_PaymentFee_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PaymentFee_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_VehTypeCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehTypeCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeCharges
     * }
     */
    public static GroupLayout asn_DEF_VehTypeCharges$layout() {
        return asn_DEF_VehTypeCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeCharges
     * }
     */
    public static MemorySegment asn_DEF_VehTypeCharges() {
        return asn_DEF_VehTypeCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehTypeCharges
     * }
     */
    public static void asn_DEF_VehTypeCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehTypeCharges$constants.SEGMENT, 0L, asn_DEF_VehTypeCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehTypeCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehTypeCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehTypeCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehTypeCharges_specs_1$layout() {
        return asn_SPC_VehTypeCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehTypeCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehTypeCharges_specs_1() {
        return asn_SPC_VehTypeCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehTypeCharges_specs_1
     * }
     */
    public static void asn_SPC_VehTypeCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehTypeCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_VehTypeCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_VehTypeCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_VehTypeCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_VehTypeCharges_1$layout() {
        return asn_MBR_VehTypeCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static long[] asn_MBR_VehTypeCharges_1$dimensions() {
        return asn_MBR_VehTypeCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static MemorySegment asn_MBR_VehTypeCharges_1() {
        return asn_MBR_VehTypeCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static void asn_MBR_VehTypeCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehTypeCharges_1$constants.SEGMENT, 0L, asn_MBR_VehTypeCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static MemorySegment asn_MBR_VehTypeCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_VehTypeCharges_1$constants.HANDLE.invokeExact(asn_MBR_VehTypeCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehTypeCharges_1[3]
     * }
     */
    public static void asn_MBR_VehTypeCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehTypeCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int EngineCharacteristics_noEntry = (int)0L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_noEntry = 0
     * }
     */
    public static int EngineCharacteristics_noEntry() {
        return EngineCharacteristics_noEntry;
    }
    private static final int EngineCharacteristics_noEngine = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_noEngine = 1
     * }
     */
    public static int EngineCharacteristics_noEngine() {
        return EngineCharacteristics_noEngine;
    }
    private static final int EngineCharacteristics_petrolUnleaded = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_petrolUnleaded = 2
     * }
     */
    public static int EngineCharacteristics_petrolUnleaded() {
        return EngineCharacteristics_petrolUnleaded;
    }
    private static final int EngineCharacteristics_petrolLeaded = (int)3L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_petrolLeaded = 3
     * }
     */
    public static int EngineCharacteristics_petrolLeaded() {
        return EngineCharacteristics_petrolLeaded;
    }
    private static final int EngineCharacteristics_diesel = (int)4L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_diesel = 4
     * }
     */
    public static int EngineCharacteristics_diesel() {
        return EngineCharacteristics_diesel;
    }
    private static final int EngineCharacteristics_lpg = (int)5L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_lpg = 5
     * }
     */
    public static int EngineCharacteristics_lpg() {
        return EngineCharacteristics_lpg;
    }
    private static final int EngineCharacteristics_battery = (int)6L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_battery = 6
     * }
     */
    public static int EngineCharacteristics_battery() {
        return EngineCharacteristics_battery;
    }
    private static final int EngineCharacteristics_solar = (int)7L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_solar = 7
     * }
     */
    public static int EngineCharacteristics_solar() {
        return EngineCharacteristics_solar;
    }
    private static final int EngineCharacteristics_hybrid = (int)8L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybrid = 8
     * }
     */
    public static int EngineCharacteristics_hybrid() {
        return EngineCharacteristics_hybrid;
    }
    private static final int EngineCharacteristics_hydrogen = (int)9L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hydrogen = 9
     * }
     */
    public static int EngineCharacteristics_hydrogen() {
        return EngineCharacteristics_hydrogen;
    }
    private static final int EngineCharacteristics_multiFuel = (int)10L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_multiFuel = 10
     * }
     */
    public static int EngineCharacteristics_multiFuel() {
        return EngineCharacteristics_multiFuel;
    }
    private static final int EngineCharacteristics_bivalentPetrolLpg = (int)11L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bivalentPetrolLpg = 11
     * }
     */
    public static int EngineCharacteristics_bivalentPetrolLpg() {
        return EngineCharacteristics_bivalentPetrolLpg;
    }
    private static final int EngineCharacteristics_bivalentPetrolCng = (int)12L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bivalentPetrolCng = 12
     * }
     */
    public static int EngineCharacteristics_bivalentPetrolCng() {
        return EngineCharacteristics_bivalentPetrolCng;
    }
    private static final int EngineCharacteristics_combinedPetrolElectric = (int)13L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedPetrolElectric = 13
     * }
     */
    public static int EngineCharacteristics_combinedPetrolElectric() {
        return EngineCharacteristics_combinedPetrolElectric;
    }
    private static final int EngineCharacteristics_cng = (int)14L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_cng = 14
     * }
     */
    public static int EngineCharacteristics_cng() {
        return EngineCharacteristics_cng;
    }
    private static final int EngineCharacteristics_lng = (int)15L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_lng = 15
     * }
     */
    public static int EngineCharacteristics_lng() {
        return EngineCharacteristics_lng;
    }
    private static final int EngineCharacteristics_combinedDieselElectric = (int)16L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedDieselElectric = 16
     * }
     */
    public static int EngineCharacteristics_combinedDieselElectric() {
        return EngineCharacteristics_combinedDieselElectric;
    }
    private static final int EngineCharacteristics_combinedHydrogenElectric = (int)17L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedHydrogenElectric = 17
     * }
     */
    public static int EngineCharacteristics_combinedHydrogenElectric() {
        return EngineCharacteristics_combinedHydrogenElectric;
    }
    private static final int EngineCharacteristics_bivalentHydrogenPetrol = (int)18L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bivalentHydrogenPetrol = 18
     * }
     */
    public static int EngineCharacteristics_bivalentHydrogenPetrol() {
        return EngineCharacteristics_bivalentHydrogenPetrol;
    }
    private static final int EngineCharacteristics_bivalentHydrogenPetrolElectricEngine = (int)19L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bivalentHydrogenPetrolElectricEngine = 19
     * }
     */
    public static int EngineCharacteristics_bivalentHydrogenPetrolElectricEngine() {
        return EngineCharacteristics_bivalentHydrogenPetrolElectricEngine;
    }
    private static final int EngineCharacteristics_fuelCellHydrogen = (int)20L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_fuelCellHydrogen = 20
     * }
     */
    public static int EngineCharacteristics_fuelCellHydrogen() {
        return EngineCharacteristics_fuelCellHydrogen;
    }
    private static final int EngineCharacteristics_fuelCellPetrol = (int)21L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_fuelCellPetrol = 21
     * }
     */
    public static int EngineCharacteristics_fuelCellPetrol() {
        return EngineCharacteristics_fuelCellPetrol;
    }
    private static final int EngineCharacteristics_fuelCellMethanol = (int)22L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_fuelCellMethanol = 22
     * }
     */
    public static int EngineCharacteristics_fuelCellMethanol() {
        return EngineCharacteristics_fuelCellMethanol;
    }
    private static final int EngineCharacteristics_fuelCellEthanol = (int)23L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_fuelCellEthanol = 23
     * }
     */
    public static int EngineCharacteristics_fuelCellEthanol() {
        return EngineCharacteristics_fuelCellEthanol;
    }
    private static final int EngineCharacteristics_fuelCellDiesel = (int)24L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_fuelCellDiesel = 24
     * }
     */
    public static int EngineCharacteristics_fuelCellDiesel() {
        return EngineCharacteristics_fuelCellDiesel;
    }
    private static final int EngineCharacteristics_combinedMultiFuelElectricEngine = (int)25L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedMultiFuelElectricEngine = 25
     * }
     */
    public static int EngineCharacteristics_combinedMultiFuelElectricEngine() {
        return EngineCharacteristics_combinedMultiFuelElectricEngine;
    }
    private static final int EngineCharacteristics_combinedCngElectricEngine = (int)26L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedCngElectricEngine = 26
     * }
     */
    public static int EngineCharacteristics_combinedCngElectricEngine() {
        return EngineCharacteristics_combinedCngElectricEngine;
    }
    private static final int EngineCharacteristics_combinedLngElectricEngine = (int)27L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedLngElectricEngine = 27
     * }
     */
    public static int EngineCharacteristics_combinedLngElectricEngine() {
        return EngineCharacteristics_combinedLngElectricEngine;
    }
    private static final int EngineCharacteristics_petrolEthanol = (int)28L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_petrolEthanol = 28
     * }
     */
    public static int EngineCharacteristics_petrolEthanol() {
        return EngineCharacteristics_petrolEthanol;
    }
    private static final int EngineCharacteristics_combinedLpgElectricEngine = (int)29L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedLpgElectricEngine = 29
     * }
     */
    public static int EngineCharacteristics_combinedLpgElectricEngine() {
        return EngineCharacteristics_combinedLpgElectricEngine;
    }
    private static final int EngineCharacteristics_hybridPetrolExternalBattery = (int)30L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridPetrolExternalBattery = 30
     * }
     */
    public static int EngineCharacteristics_hybridPetrolExternalBattery() {
        return EngineCharacteristics_hybridPetrolExternalBattery;
    }
    private static final int EngineCharacteristics_hybridDieselExternalBattery = (int)31L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridDieselExternalBattery = 31
     * }
     */
    public static int EngineCharacteristics_hybridDieselExternalBattery() {
        return EngineCharacteristics_hybridDieselExternalBattery;
    }
    private static final int EngineCharacteristics_hybridLpgExternalBattery = (int)32L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridLpgExternalBattery = 32
     * }
     */
    public static int EngineCharacteristics_hybridLpgExternalBattery() {
        return EngineCharacteristics_hybridLpgExternalBattery;
    }
    private static final int EngineCharacteristics_hybridHydrogenExternalBattery = (int)33L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridHydrogenExternalBattery = 33
     * }
     */
    public static int EngineCharacteristics_hybridHydrogenExternalBattery() {
        return EngineCharacteristics_hybridHydrogenExternalBattery;
    }
    private static final int EngineCharacteristics_hybridMultiFuelExternalBattery = (int)34L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridMultiFuelExternalBattery = 34
     * }
     */
    public static int EngineCharacteristics_hybridMultiFuelExternalBattery() {
        return EngineCharacteristics_hybridMultiFuelExternalBattery;
    }
    private static final int EngineCharacteristics_hybridCngExternalBattery = (int)35L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridCngExternalBattery = 35
     * }
     */
    public static int EngineCharacteristics_hybridCngExternalBattery() {
        return EngineCharacteristics_hybridCngExternalBattery;
    }
    private static final int EngineCharacteristics_hybridLngExternalBattery = (int)36L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridLngExternalBattery = 36
     * }
     */
    public static int EngineCharacteristics_hybridLngExternalBattery() {
        return EngineCharacteristics_hybridLngExternalBattery;
    }
    private static final int EngineCharacteristics_hybridBivalentHydrogenPetrolExternalBattery = (int)37L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridBivalentHydrogenPetrolExternalBattery = 37
     * }
     */
    public static int EngineCharacteristics_hybridBivalentHydrogenPetrolExternalBattery() {
        return EngineCharacteristics_hybridBivalentHydrogenPetrolExternalBattery;
    }
    private static final int EngineCharacteristics_hydrogenCng = (int)38L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hydrogenCng = 38
     * }
     */
    public static int EngineCharacteristics_hydrogenCng() {
        return EngineCharacteristics_hydrogenCng;
    }
    private static final int EngineCharacteristics_hydrogenLng = (int)39L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hydrogenLng = 39
     * }
     */
    public static int EngineCharacteristics_hydrogenLng() {
        return EngineCharacteristics_hydrogenLng;
    }
    private static final int EngineCharacteristics_hybridHydrogenCngExternalBattery = (int)40L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridHydrogenCngExternalBattery = 40
     * }
     */
    public static int EngineCharacteristics_hybridHydrogenCngExternalBattery() {
        return EngineCharacteristics_hybridHydrogenCngExternalBattery;
    }
    private static final int EngineCharacteristics_hybridHydrogenLngExternalBattery = (int)41L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridHydrogenLngExternalBattery = 41
     * }
     */
    public static int EngineCharacteristics_hybridHydrogenLngExternalBattery() {
        return EngineCharacteristics_hybridHydrogenLngExternalBattery;
    }
    private static final int EngineCharacteristics_ethanol = (int)42L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_ethanol = 42
     * }
     */
    public static int EngineCharacteristics_ethanol() {
        return EngineCharacteristics_ethanol;
    }
    private static final int EngineCharacteristics_hybridFuelCellHydrogen = (int)43L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridFuelCellHydrogen = 43
     * }
     */
    public static int EngineCharacteristics_hybridFuelCellHydrogen() {
        return EngineCharacteristics_hybridFuelCellHydrogen;
    }
    private static final int EngineCharacteristics_hybridFuelCellHydrogenExternalBattery = (int)44L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_hybridFuelCellHydrogenExternalBattery = 44
     * }
     */
    public static int EngineCharacteristics_hybridFuelCellHydrogenExternalBattery() {
        return EngineCharacteristics_hybridFuelCellHydrogenExternalBattery;
    }
    private static final int EngineCharacteristics_dualFuelLngDiesel = (int)45L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_dualFuelLngDiesel = 45
     * }
     */
    public static int EngineCharacteristics_dualFuelLngDiesel() {
        return EngineCharacteristics_dualFuelLngDiesel;
    }
    private static final int EngineCharacteristics_electricExternal = (int)46L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_electricExternal = 46
     * }
     */
    public static int EngineCharacteristics_electricExternal() {
        return EngineCharacteristics_electricExternal;
    }
    private static final int EngineCharacteristics_biogas = (int)47L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_biogas = 47
     * }
     */
    public static int EngineCharacteristics_biogas() {
        return EngineCharacteristics_biogas;
    }
    private static final int EngineCharacteristics_bioDiesel = (int)48L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bioDiesel = 48
     * }
     */
    public static int EngineCharacteristics_bioDiesel() {
        return EngineCharacteristics_bioDiesel;
    }
    private static final int EngineCharacteristics_bioPetrol = (int)49L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bioPetrol = 49
     * }
     */
    public static int EngineCharacteristics_bioPetrol() {
        return EngineCharacteristics_bioPetrol;
    }
    private static final int EngineCharacteristics_bivalentPetrolBiogas = (int)50L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_bivalentPetrolBiogas = 50
     * }
     */
    public static int EngineCharacteristics_bivalentPetrolBiogas() {
        return EngineCharacteristics_bivalentPetrolBiogas;
    }
    private static final int EngineCharacteristics_combinedBiogasElectricEngine = (int)51L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_combinedBiogasElectricEngine = 51
     * }
     */
    public static int EngineCharacteristics_combinedBiogasElectricEngine() {
        return EngineCharacteristics_combinedBiogasElectricEngine;
    }
    private static final int EngineCharacteristics_dualFuelCngDiesel = (int)52L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_dualFuelCngDiesel = 52
     * }
     */
    public static int EngineCharacteristics_dualFuelCngDiesel() {
        return EngineCharacteristics_dualFuelCngDiesel;
    }
    private static final int EngineCharacteristics_other = (int)255L;
    /**
     * {@snippet lang=c :
     * enum EngineCharacteristics.EngineCharacteristics_other = 255
     * }
     */
    public static int EngineCharacteristics_other() {
        return EngineCharacteristics_other;
    }
    /**
     * {@snippet lang=c :
     * typedef long EngineCharacteristics_t
     * }
     */
    public static final OfLong EngineCharacteristics_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EngineCharacteristics_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EngineCharacteristics_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EngineCharacteristics_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EngineCharacteristics_constr_1$layout() {
        return asn_PER_type_EngineCharacteristics_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EngineCharacteristics_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EngineCharacteristics_constr_1() {
        return asn_PER_type_EngineCharacteristics_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EngineCharacteristics_constr_1
     * }
     */
    public static void asn_PER_type_EngineCharacteristics_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EngineCharacteristics_constr_1$constants.SEGMENT, 0L, asn_PER_type_EngineCharacteristics_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EngineCharacteristics$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EngineCharacteristics").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineCharacteristics
     * }
     */
    public static GroupLayout asn_DEF_EngineCharacteristics$layout() {
        return asn_DEF_EngineCharacteristics$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineCharacteristics
     * }
     */
    public static MemorySegment asn_DEF_EngineCharacteristics() {
        return asn_DEF_EngineCharacteristics$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineCharacteristics
     * }
     */
    public static void asn_DEF_EngineCharacteristics(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EngineCharacteristics$constants.SEGMENT, 0L, asn_DEF_EngineCharacteristics$constants.LAYOUT.byteSize());
    }

    private static class EngineCharacteristics_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EngineCharacteristics_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_free$descriptor() {
        return EngineCharacteristics_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EngineCharacteristics_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EngineCharacteristics_free$handle() {
        return EngineCharacteristics_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EngineCharacteristics_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EngineCharacteristics_free$address() {
        return EngineCharacteristics_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EngineCharacteristics_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EngineCharacteristics_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EngineCharacteristics_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EngineCharacteristics_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_print$descriptor() {
        return EngineCharacteristics_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EngineCharacteristics_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_print$handle() {
        return EngineCharacteristics_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EngineCharacteristics_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_print$address() {
        return EngineCharacteristics_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EngineCharacteristics_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EngineCharacteristics_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EngineCharacteristics_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EngineCharacteristics_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_constraint$descriptor() {
        return EngineCharacteristics_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EngineCharacteristics_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_constraint$handle() {
        return EngineCharacteristics_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EngineCharacteristics_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_constraint$address() {
        return EngineCharacteristics_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EngineCharacteristics_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EngineCharacteristics_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EngineCharacteristics_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_decode_ber$descriptor() {
        return EngineCharacteristics_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EngineCharacteristics_decode_ber$handle() {
        return EngineCharacteristics_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_ber$address() {
        return EngineCharacteristics_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EngineCharacteristics_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_der$descriptor() {
        return EngineCharacteristics_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_der$handle() {
        return EngineCharacteristics_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_der$address() {
        return EngineCharacteristics_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EngineCharacteristics_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_decode_xer$descriptor() {
        return EngineCharacteristics_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EngineCharacteristics_decode_xer$handle() {
        return EngineCharacteristics_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_xer$address() {
        return EngineCharacteristics_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EngineCharacteristics_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_xer$descriptor() {
        return EngineCharacteristics_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_xer$handle() {
        return EngineCharacteristics_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_xer$address() {
        return EngineCharacteristics_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EngineCharacteristics_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_jer$descriptor() {
        return EngineCharacteristics_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_jer$handle() {
        return EngineCharacteristics_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_jer$address() {
        return EngineCharacteristics_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EngineCharacteristics_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_decode_oer$descriptor() {
        return EngineCharacteristics_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EngineCharacteristics_decode_oer$handle() {
        return EngineCharacteristics_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_oer$address() {
        return EngineCharacteristics_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EngineCharacteristics_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_oer$descriptor() {
        return EngineCharacteristics_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_oer$handle() {
        return EngineCharacteristics_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_oer$address() {
        return EngineCharacteristics_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EngineCharacteristics_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_decode_uper$descriptor() {
        return EngineCharacteristics_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EngineCharacteristics_decode_uper$handle() {
        return EngineCharacteristics_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_uper$address() {
        return EngineCharacteristics_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EngineCharacteristics_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_uper$descriptor() {
        return EngineCharacteristics_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_uper$handle() {
        return EngineCharacteristics_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_uper$address() {
        return EngineCharacteristics_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EngineCharacteristics_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_decode_aper$descriptor() {
        return EngineCharacteristics_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EngineCharacteristics_decode_aper$handle() {
        return EngineCharacteristics_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_aper$address() {
        return EngineCharacteristics_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EngineCharacteristics_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EngineCharacteristics_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EngineCharacteristics_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EngineCharacteristics_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EngineCharacteristics_encode_aper$descriptor() {
        return EngineCharacteristics_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EngineCharacteristics_encode_aper$handle() {
        return EngineCharacteristics_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_aper$address() {
        return EngineCharacteristics_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EngineCharacteristics_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EngineCharacteristics_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EngineCharacteristics_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EngineCharacteristics_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_SpecialCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SpecialCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SpecialCharges
     * }
     */
    public static GroupLayout asn_DEF_SpecialCharges$layout() {
        return asn_DEF_SpecialCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SpecialCharges
     * }
     */
    public static MemorySegment asn_DEF_SpecialCharges() {
        return asn_DEF_SpecialCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SpecialCharges
     * }
     */
    public static void asn_DEF_SpecialCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SpecialCharges$constants.SEGMENT, 0L, asn_DEF_SpecialCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_SpecialCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_SpecialCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SpecialCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_SpecialCharges_specs_1$layout() {
        return asn_SPC_SpecialCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SpecialCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_SpecialCharges_specs_1() {
        return asn_SPC_SpecialCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SpecialCharges_specs_1
     * }
     */
    public static void asn_SPC_SpecialCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_SpecialCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_SpecialCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_SpecialCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(7, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_SpecialCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 7 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static SequenceLayout asn_MBR_SpecialCharges_1$layout() {
        return asn_MBR_SpecialCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static long[] asn_MBR_SpecialCharges_1$dimensions() {
        return asn_MBR_SpecialCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static MemorySegment asn_MBR_SpecialCharges_1() {
        return asn_MBR_SpecialCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static void asn_MBR_SpecialCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SpecialCharges_1$constants.SEGMENT, 0L, asn_MBR_SpecialCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static MemorySegment asn_MBR_SpecialCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_SpecialCharges_1$constants.HANDLE.invokeExact(asn_MBR_SpecialCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SpecialCharges_1[7]
     * }
     */
    public static void asn_MBR_SpecialCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SpecialCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_OperatorDefined$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_OperatorDefined").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_OperatorDefined
     * }
     */
    public static GroupLayout asn_DEF_OperatorDefined$layout() {
        return asn_DEF_OperatorDefined$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_OperatorDefined
     * }
     */
    public static MemorySegment asn_DEF_OperatorDefined() {
        return asn_DEF_OperatorDefined$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_OperatorDefined
     * }
     */
    public static void asn_DEF_OperatorDefined(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_OperatorDefined$constants.SEGMENT, 0L, asn_DEF_OperatorDefined$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_OperatorDefined_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_OperatorDefined_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_OperatorDefined_specs_1
     * }
     */
    public static GroupLayout asn_SPC_OperatorDefined_specs_1$layout() {
        return asn_SPC_OperatorDefined_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_OperatorDefined_specs_1
     * }
     */
    public static MemorySegment asn_SPC_OperatorDefined_specs_1() {
        return asn_SPC_OperatorDefined_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_OperatorDefined_specs_1
     * }
     */
    public static void asn_SPC_OperatorDefined_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_OperatorDefined_specs_1$constants.SEGMENT, 0L, asn_SPC_OperatorDefined_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_OperatorDefined_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(16, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_OperatorDefined_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 16 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static SequenceLayout asn_MBR_OperatorDefined_1$layout() {
        return asn_MBR_OperatorDefined_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static long[] asn_MBR_OperatorDefined_1$dimensions() {
        return asn_MBR_OperatorDefined_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static MemorySegment asn_MBR_OperatorDefined_1() {
        return asn_MBR_OperatorDefined_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static void asn_MBR_OperatorDefined_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_OperatorDefined_1$constants.SEGMENT, 0L, asn_MBR_OperatorDefined_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static MemorySegment asn_MBR_OperatorDefined_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_OperatorDefined_1$constants.HANDLE.invokeExact(asn_MBR_OperatorDefined_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_OperatorDefined_1[16]
     * }
     */
    public static void asn_MBR_OperatorDefined_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_OperatorDefined_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_AxlesChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AxlesChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesChargesTable
     * }
     */
    public static GroupLayout asn_DEF_AxlesChargesTable$layout() {
        return asn_DEF_AxlesChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesChargesTable
     * }
     */
    public static MemorySegment asn_DEF_AxlesChargesTable() {
        return asn_DEF_AxlesChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesChargesTable
     * }
     */
    public static void asn_DEF_AxlesChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AxlesChargesTable$constants.SEGMENT, 0L, asn_DEF_AxlesChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AxlesChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AxlesChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_AxlesChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AxlesChargesTable_specs_1$layout() {
        return asn_SPC_AxlesChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_AxlesChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AxlesChargesTable_specs_1() {
        return asn_SPC_AxlesChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_AxlesChargesTable_specs_1
     * }
     */
    public static void asn_SPC_AxlesChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AxlesChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_AxlesChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AxlesChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AxlesChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_AxlesChargesTable_1$layout() {
        return asn_MBR_AxlesChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static long[] asn_MBR_AxlesChargesTable_1$dimensions() {
        return asn_MBR_AxlesChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_AxlesChargesTable_1() {
        return asn_MBR_AxlesChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static void asn_MBR_AxlesChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxlesChargesTable_1$constants.SEGMENT, 0L, asn_MBR_AxlesChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_AxlesChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AxlesChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_AxlesChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesChargesTable_1[1]
     * }
     */
    public static void asn_MBR_AxlesChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxlesChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_AxlesChargesTable_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_AxlesChargesTable_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AxlesChargesTable_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_AxlesChargesTable_constr_1$layout() {
        return asn_PER_type_AxlesChargesTable_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AxlesChargesTable_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_AxlesChargesTable_constr_1() {
        return asn_PER_type_AxlesChargesTable_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AxlesChargesTable_constr_1
     * }
     */
    public static void asn_PER_type_AxlesChargesTable_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_AxlesChargesTable_constr_1$constants.SEGMENT, 0L, asn_PER_type_AxlesChargesTable_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_AxlesCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AxlesCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesCharges
     * }
     */
    public static GroupLayout asn_DEF_AxlesCharges$layout() {
        return asn_DEF_AxlesCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesCharges
     * }
     */
    public static MemorySegment asn_DEF_AxlesCharges() {
        return asn_DEF_AxlesCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxlesCharges
     * }
     */
    public static void asn_DEF_AxlesCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AxlesCharges$constants.SEGMENT, 0L, asn_DEF_AxlesCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AxlesCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AxlesCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxlesCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AxlesCharges_specs_1$layout() {
        return asn_SPC_AxlesCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxlesCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AxlesCharges_specs_1() {
        return asn_SPC_AxlesCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxlesCharges_specs_1
     * }
     */
    public static void asn_SPC_AxlesCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AxlesCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_AxlesCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AxlesCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AxlesCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_AxlesCharges_1$layout() {
        return asn_MBR_AxlesCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static long[] asn_MBR_AxlesCharges_1$dimensions() {
        return asn_MBR_AxlesCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AxlesCharges_1() {
        return asn_MBR_AxlesCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static void asn_MBR_AxlesCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxlesCharges_1$constants.SEGMENT, 0L, asn_MBR_AxlesCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AxlesCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AxlesCharges_1$constants.HANDLE.invokeExact(asn_MBR_AxlesCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxlesCharges_1[2]
     * }
     */
    public static void asn_MBR_AxlesCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxlesCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_WeightChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WeightChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightChargesTable
     * }
     */
    public static GroupLayout asn_DEF_WeightChargesTable$layout() {
        return asn_DEF_WeightChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightChargesTable
     * }
     */
    public static MemorySegment asn_DEF_WeightChargesTable() {
        return asn_DEF_WeightChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightChargesTable
     * }
     */
    public static void asn_DEF_WeightChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WeightChargesTable$constants.SEGMENT, 0L, asn_DEF_WeightChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WeightChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WeightChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_WeightChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WeightChargesTable_specs_1$layout() {
        return asn_SPC_WeightChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_WeightChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WeightChargesTable_specs_1() {
        return asn_SPC_WeightChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_WeightChargesTable_specs_1
     * }
     */
    public static void asn_SPC_WeightChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WeightChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_WeightChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WeightChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WeightChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_WeightChargesTable_1$layout() {
        return asn_MBR_WeightChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static long[] asn_MBR_WeightChargesTable_1$dimensions() {
        return asn_MBR_WeightChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_WeightChargesTable_1() {
        return asn_MBR_WeightChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static void asn_MBR_WeightChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeightChargesTable_1$constants.SEGMENT, 0L, asn_MBR_WeightChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_WeightChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WeightChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_WeightChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightChargesTable_1[1]
     * }
     */
    public static void asn_MBR_WeightChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeightChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_WeightChargesTable_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_WeightChargesTable_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightChargesTable_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_WeightChargesTable_constr_1$layout() {
        return asn_PER_type_WeightChargesTable_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightChargesTable_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_WeightChargesTable_constr_1() {
        return asn_PER_type_WeightChargesTable_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightChargesTable_constr_1
     * }
     */
    public static void asn_PER_type_WeightChargesTable_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_WeightChargesTable_constr_1$constants.SEGMENT, 0L, asn_PER_type_WeightChargesTable_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int TotalWeightCharges__weightLimitUnits_pounds = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TotalWeightCharges__weightLimitUnits.TotalWeightCharges__weightLimitUnits_pounds = 0
     * }
     */
    public static int TotalWeightCharges__weightLimitUnits_pounds() {
        return TotalWeightCharges__weightLimitUnits_pounds;
    }
    private static final int TotalWeightCharges__weightLimitUnits_kilograms = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TotalWeightCharges__weightLimitUnits.TotalWeightCharges__weightLimitUnits_kilograms = 1
     * }
     */
    public static int TotalWeightCharges__weightLimitUnits_kilograms() {
        return TotalWeightCharges__weightLimitUnits_kilograms;
    }

    private static class asn_DEF_TotalWeightCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TotalWeightCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalWeightCharges
     * }
     */
    public static GroupLayout asn_DEF_TotalWeightCharges$layout() {
        return asn_DEF_TotalWeightCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalWeightCharges
     * }
     */
    public static MemorySegment asn_DEF_TotalWeightCharges() {
        return asn_DEF_TotalWeightCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalWeightCharges
     * }
     */
    public static void asn_DEF_TotalWeightCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TotalWeightCharges$constants.SEGMENT, 0L, asn_DEF_TotalWeightCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TotalWeightCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TotalWeightCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TotalWeightCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TotalWeightCharges_specs_1$layout() {
        return asn_SPC_TotalWeightCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TotalWeightCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TotalWeightCharges_specs_1() {
        return asn_SPC_TotalWeightCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TotalWeightCharges_specs_1
     * }
     */
    public static void asn_SPC_TotalWeightCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TotalWeightCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_TotalWeightCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TotalWeightCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TotalWeightCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_TotalWeightCharges_1$layout() {
        return asn_MBR_TotalWeightCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static long[] asn_MBR_TotalWeightCharges_1$dimensions() {
        return asn_MBR_TotalWeightCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TotalWeightCharges_1() {
        return asn_MBR_TotalWeightCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static void asn_MBR_TotalWeightCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TotalWeightCharges_1$constants.SEGMENT, 0L, asn_MBR_TotalWeightCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TotalWeightCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TotalWeightCharges_1$constants.HANDLE.invokeExact(asn_MBR_TotalWeightCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TotalWeightCharges_1[3]
     * }
     */
    public static void asn_MBR_TotalWeightCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TotalWeightCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int PerAxleWeightCharges__weightLimitUnits_pounds = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PerAxleWeightCharges__weightLimitUnits.PerAxleWeightCharges__weightLimitUnits_pounds = 0
     * }
     */
    public static int PerAxleWeightCharges__weightLimitUnits_pounds() {
        return PerAxleWeightCharges__weightLimitUnits_pounds;
    }
    private static final int PerAxleWeightCharges__weightLimitUnits_kilograms = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PerAxleWeightCharges__weightLimitUnits.PerAxleWeightCharges__weightLimitUnits_kilograms = 1
     * }
     */
    public static int PerAxleWeightCharges__weightLimitUnits_kilograms() {
        return PerAxleWeightCharges__weightLimitUnits_kilograms;
    }

    private static class asn_DEF_PerAxleWeightCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PerAxleWeightCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PerAxleWeightCharges
     * }
     */
    public static GroupLayout asn_DEF_PerAxleWeightCharges$layout() {
        return asn_DEF_PerAxleWeightCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PerAxleWeightCharges
     * }
     */
    public static MemorySegment asn_DEF_PerAxleWeightCharges() {
        return asn_DEF_PerAxleWeightCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PerAxleWeightCharges
     * }
     */
    public static void asn_DEF_PerAxleWeightCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PerAxleWeightCharges$constants.SEGMENT, 0L, asn_DEF_PerAxleWeightCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_PerAxleWeightCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_PerAxleWeightCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PerAxleWeightCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_PerAxleWeightCharges_specs_1$layout() {
        return asn_SPC_PerAxleWeightCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PerAxleWeightCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_PerAxleWeightCharges_specs_1() {
        return asn_SPC_PerAxleWeightCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PerAxleWeightCharges_specs_1
     * }
     */
    public static void asn_SPC_PerAxleWeightCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_PerAxleWeightCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_PerAxleWeightCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_PerAxleWeightCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_PerAxleWeightCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_PerAxleWeightCharges_1$layout() {
        return asn_MBR_PerAxleWeightCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static long[] asn_MBR_PerAxleWeightCharges_1$dimensions() {
        return asn_MBR_PerAxleWeightCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static MemorySegment asn_MBR_PerAxleWeightCharges_1() {
        return asn_MBR_PerAxleWeightCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static void asn_MBR_PerAxleWeightCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PerAxleWeightCharges_1$constants.SEGMENT, 0L, asn_MBR_PerAxleWeightCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static MemorySegment asn_MBR_PerAxleWeightCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_PerAxleWeightCharges_1$constants.HANDLE.invokeExact(asn_MBR_PerAxleWeightCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PerAxleWeightCharges_1[4]
     * }
     */
    public static void asn_MBR_PerAxleWeightCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PerAxleWeightCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int WeightCharges_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WeightCharges_PR.WeightCharges_PR_NOTHING = 0
     * }
     */
    public static int WeightCharges_PR_NOTHING() {
        return WeightCharges_PR_NOTHING;
    }
    private static final int WeightCharges_PR_totalWeightCharges = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WeightCharges_PR.WeightCharges_PR_totalWeightCharges = 1
     * }
     */
    public static int WeightCharges_PR_totalWeightCharges() {
        return WeightCharges_PR_totalWeightCharges;
    }
    private static final int WeightCharges_PR_perAxleWeightCharges = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WeightCharges_PR.WeightCharges_PR_perAxleWeightCharges = 2
     * }
     */
    public static int WeightCharges_PR_perAxleWeightCharges() {
        return WeightCharges_PR_perAxleWeightCharges;
    }

    private static class asn_DEF_WeightCharges$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WeightCharges").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightCharges
     * }
     */
    public static GroupLayout asn_DEF_WeightCharges$layout() {
        return asn_DEF_WeightCharges$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightCharges
     * }
     */
    public static MemorySegment asn_DEF_WeightCharges() {
        return asn_DEF_WeightCharges$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeightCharges
     * }
     */
    public static void asn_DEF_WeightCharges(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WeightCharges$constants.SEGMENT, 0L, asn_DEF_WeightCharges$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WeightCharges_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WeightCharges_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_WeightCharges_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WeightCharges_specs_1$layout() {
        return asn_SPC_WeightCharges_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_WeightCharges_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WeightCharges_specs_1() {
        return asn_SPC_WeightCharges_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_WeightCharges_specs_1
     * }
     */
    public static void asn_SPC_WeightCharges_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WeightCharges_specs_1$constants.SEGMENT, 0L, asn_SPC_WeightCharges_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WeightCharges_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WeightCharges_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_WeightCharges_1$layout() {
        return asn_MBR_WeightCharges_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static long[] asn_MBR_WeightCharges_1$dimensions() {
        return asn_MBR_WeightCharges_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static MemorySegment asn_MBR_WeightCharges_1() {
        return asn_MBR_WeightCharges_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static void asn_MBR_WeightCharges_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeightCharges_1$constants.SEGMENT, 0L, asn_MBR_WeightCharges_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static MemorySegment asn_MBR_WeightCharges_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WeightCharges_1$constants.HANDLE.invokeExact(asn_MBR_WeightCharges_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeightCharges_1[2]
     * }
     */
    public static void asn_MBR_WeightCharges_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeightCharges_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_WeightCharges_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_WeightCharges_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightCharges_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_WeightCharges_constr_1$layout() {
        return asn_PER_type_WeightCharges_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightCharges_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_WeightCharges_constr_1() {
        return asn_PER_type_WeightCharges_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WeightCharges_constr_1
     * }
     */
    public static void asn_PER_type_WeightCharges_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_WeightCharges_constr_1$constants.SEGMENT, 0L, asn_PER_type_WeightCharges_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int ChargesTable_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ChargesTable_PR.ChargesTable_PR_NOTHING = 0
     * }
     */
    public static int ChargesTable_PR_NOTHING() {
        return ChargesTable_PR_NOTHING;
    }
    private static final int ChargesTable_PR_vehTypeBased = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ChargesTable_PR.ChargesTable_PR_vehTypeBased = 1
     * }
     */
    public static int ChargesTable_PR_vehTypeBased() {
        return ChargesTable_PR_vehTypeBased;
    }
    private static final int ChargesTable_PR_numAxlesBased = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ChargesTable_PR.ChargesTable_PR_numAxlesBased = 2
     * }
     */
    public static int ChargesTable_PR_numAxlesBased() {
        return ChargesTable_PR_numAxlesBased;
    }
    private static final int ChargesTable_PR_weightBased = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ChargesTable_PR.ChargesTable_PR_weightBased = 3
     * }
     */
    public static int ChargesTable_PR_weightBased() {
        return ChargesTable_PR_weightBased;
    }

    private static class asn_DEF_ChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ChargesTable
     * }
     */
    public static GroupLayout asn_DEF_ChargesTable$layout() {
        return asn_DEF_ChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ChargesTable
     * }
     */
    public static MemorySegment asn_DEF_ChargesTable() {
        return asn_DEF_ChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ChargesTable
     * }
     */
    public static void asn_DEF_ChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ChargesTable$constants.SEGMENT, 0L, asn_DEF_ChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ChargesTable_specs_1$layout() {
        return asn_SPC_ChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ChargesTable_specs_1() {
        return asn_SPC_ChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ChargesTable_specs_1
     * }
     */
    public static void asn_SPC_ChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_ChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_ChargesTable_1$layout() {
        return asn_MBR_ChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static long[] asn_MBR_ChargesTable_1$dimensions() {
        return asn_MBR_ChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ChargesTable_1() {
        return asn_MBR_ChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static void asn_MBR_ChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ChargesTable_1$constants.SEGMENT, 0L, asn_MBR_ChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_ChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ChargesTable_1[3]
     * }
     */
    public static void asn_MBR_ChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ChargesTable_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ChargesTable_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ChargesTable_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ChargesTable_constr_1$layout() {
        return asn_PER_type_ChargesTable_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ChargesTable_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ChargesTable_constr_1() {
        return asn_PER_type_ChargesTable_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ChargesTable_constr_1
     * }
     */
    public static void asn_PER_type_ChargesTable_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ChargesTable_constr_1$constants.SEGMENT, 0L, asn_PER_type_ChargesTable_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TimeChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TimeChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeChargesTable
     * }
     */
    public static GroupLayout asn_DEF_TimeChargesTable$layout() {
        return asn_DEF_TimeChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeChargesTable
     * }
     */
    public static MemorySegment asn_DEF_TimeChargesTable() {
        return asn_DEF_TimeChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeChargesTable
     * }
     */
    public static void asn_DEF_TimeChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TimeChargesTable$constants.SEGMENT, 0L, asn_DEF_TimeChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TimeChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TimeChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimeChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TimeChargesTable_specs_1$layout() {
        return asn_SPC_TimeChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimeChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TimeChargesTable_specs_1() {
        return asn_SPC_TimeChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimeChargesTable_specs_1
     * }
     */
    public static void asn_SPC_TimeChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TimeChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_TimeChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TimeChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TimeChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TimeChargesTable_1$layout() {
        return asn_MBR_TimeChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static long[] asn_MBR_TimeChargesTable_1$dimensions() {
        return asn_MBR_TimeChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TimeChargesTable_1() {
        return asn_MBR_TimeChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static void asn_MBR_TimeChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TimeChargesTable_1$constants.SEGMENT, 0L, asn_MBR_TimeChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TimeChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TimeChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_TimeChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimeChargesTable_1[2]
     * }
     */
    public static void asn_MBR_TimeChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TimeChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int TollChargesTable__tollTypeCharge_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TollChargesTable__tollTypeCharge_PR.TollChargesTable__tollTypeCharge_PR_NOTHING = 0
     * }
     */
    public static int TollChargesTable__tollTypeCharge_PR_NOTHING() {
        return TollChargesTable__tollTypeCharge_PR_NOTHING;
    }
    private static final int TollChargesTable__tollTypeCharge_PR_pointCharges = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TollChargesTable__tollTypeCharge_PR.TollChargesTable__tollTypeCharge_PR_pointCharges = 1
     * }
     */
    public static int TollChargesTable__tollTypeCharge_PR_pointCharges() {
        return TollChargesTable__tollTypeCharge_PR_pointCharges;
    }
    private static final int TollChargesTable__tollTypeCharge_PR_perLaneCharges = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TollChargesTable__tollTypeCharge_PR.TollChargesTable__tollTypeCharge_PR_perLaneCharges = 2
     * }
     */
    public static int TollChargesTable__tollTypeCharge_PR_perLaneCharges() {
        return TollChargesTable__tollTypeCharge_PR_perLaneCharges;
    }
    private static final int TollChargesTable__tollTypeCharge_PR_closedNetworkCharges = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TollChargesTable__tollTypeCharge_PR.TollChargesTable__tollTypeCharge_PR_closedNetworkCharges = 3
     * }
     */
    public static int TollChargesTable__tollTypeCharge_PR_closedNetworkCharges() {
        return TollChargesTable__tollTypeCharge_PR_closedNetworkCharges;
    }
    private static final int TollChargesTable__tollTypeCharge_PR_timeBasedCharges = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TollChargesTable__tollTypeCharge_PR.TollChargesTable__tollTypeCharge_PR_timeBasedCharges = 4
     * }
     */
    public static int TollChargesTable__tollTypeCharge_PR_timeBasedCharges() {
        return TollChargesTable__tollTypeCharge_PR_timeBasedCharges;
    }

    private static class asn_DEF_TollChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargesTable
     * }
     */
    public static GroupLayout asn_DEF_TollChargesTable$layout() {
        return asn_DEF_TollChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargesTable
     * }
     */
    public static MemorySegment asn_DEF_TollChargesTable() {
        return asn_DEF_TollChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargesTable
     * }
     */
    public static void asn_DEF_TollChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollChargesTable$constants.SEGMENT, 0L, asn_DEF_TollChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollChargesTable_specs_1$layout() {
        return asn_SPC_TollChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollChargesTable_specs_1() {
        return asn_SPC_TollChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargesTable_specs_1
     * }
     */
    public static void asn_SPC_TollChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_TollChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_TollChargesTable_1$layout() {
        return asn_MBR_TollChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static long[] asn_MBR_TollChargesTable_1$dimensions() {
        return asn_MBR_TollChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TollChargesTable_1() {
        return asn_MBR_TollChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static void asn_MBR_TollChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollChargesTable_1$constants.SEGMENT, 0L, asn_MBR_TollChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TollChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_TollChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargesTable_1[1]
     * }
     */
    public static void asn_MBR_TollChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_LaneChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_LaneChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LaneChargesTable
     * }
     */
    public static GroupLayout asn_DEF_LaneChargesTable$layout() {
        return asn_DEF_LaneChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LaneChargesTable
     * }
     */
    public static MemorySegment asn_DEF_LaneChargesTable() {
        return asn_DEF_LaneChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LaneChargesTable
     * }
     */
    public static void asn_DEF_LaneChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_LaneChargesTable$constants.SEGMENT, 0L, asn_DEF_LaneChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_LaneChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_LaneChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LaneChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_LaneChargesTable_specs_1$layout() {
        return asn_SPC_LaneChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LaneChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_LaneChargesTable_specs_1() {
        return asn_SPC_LaneChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LaneChargesTable_specs_1
     * }
     */
    public static void asn_SPC_LaneChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_LaneChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_LaneChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_LaneChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_LaneChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_LaneChargesTable_1$layout() {
        return asn_MBR_LaneChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static long[] asn_MBR_LaneChargesTable_1$dimensions() {
        return asn_MBR_LaneChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_LaneChargesTable_1() {
        return asn_MBR_LaneChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static void asn_MBR_LaneChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_LaneChargesTable_1$constants.SEGMENT, 0L, asn_MBR_LaneChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_LaneChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_LaneChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_LaneChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LaneChargesTable_1[2]
     * }
     */
    public static void asn_MBR_LaneChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_LaneChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long TollPointID_t
     * }
     */
    public static final OfLong TollPointID_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TollPointID_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TollPointID_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TollPointID_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TollPointID_constr_1$layout() {
        return asn_PER_type_TollPointID_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TollPointID_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TollPointID_constr_1() {
        return asn_PER_type_TollPointID_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TollPointID_constr_1
     * }
     */
    public static void asn_PER_type_TollPointID_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TollPointID_constr_1$constants.SEGMENT, 0L, asn_PER_type_TollPointID_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TollPointID$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollPointID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointID
     * }
     */
    public static GroupLayout asn_DEF_TollPointID$layout() {
        return asn_DEF_TollPointID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointID
     * }
     */
    public static MemorySegment asn_DEF_TollPointID() {
        return asn_DEF_TollPointID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointID
     * }
     */
    public static void asn_DEF_TollPointID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollPointID$constants.SEGMENT, 0L, asn_DEF_TollPointID$constants.LAYOUT.byteSize());
    }

    private static class TollPointID_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TollPointID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TollPointID_free$descriptor() {
        return TollPointID_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TollPointID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TollPointID_free$handle() {
        return TollPointID_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TollPointID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TollPointID_free$address() {
        return TollPointID_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TollPointID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TollPointID_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TollPointID_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TollPointID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_print$descriptor() {
        return TollPointID_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TollPointID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_print$handle() {
        return TollPointID_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TollPointID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_print$address() {
        return TollPointID_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TollPointID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TollPointID_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TollPointID_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TollPointID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_constraint$descriptor() {
        return TollPointID_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TollPointID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_constraint$handle() {
        return TollPointID_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TollPointID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_constraint$address() {
        return TollPointID_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TollPointID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TollPointID_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TollPointID_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TollPointID_decode_ber$descriptor() {
        return TollPointID_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TollPointID_decode_ber$handle() {
        return TollPointID_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TollPointID_decode_ber$address() {
        return TollPointID_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TollPointID_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TollPointID_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_der$descriptor() {
        return TollPointID_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_encode_der$handle() {
        return TollPointID_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_der$address() {
        return TollPointID_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TollPointID_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TollPointID_decode_xer$descriptor() {
        return TollPointID_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TollPointID_decode_xer$handle() {
        return TollPointID_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TollPointID_decode_xer$address() {
        return TollPointID_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TollPointID_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TollPointID_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_xer$descriptor() {
        return TollPointID_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_encode_xer$handle() {
        return TollPointID_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_xer$address() {
        return TollPointID_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TollPointID_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_jer$descriptor() {
        return TollPointID_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_encode_jer$handle() {
        return TollPointID_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_jer$address() {
        return TollPointID_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TollPointID_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TollPointID_decode_oer$descriptor() {
        return TollPointID_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TollPointID_decode_oer$handle() {
        return TollPointID_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TollPointID_decode_oer$address() {
        return TollPointID_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TollPointID_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TollPointID_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_oer$descriptor() {
        return TollPointID_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TollPointID_encode_oer$handle() {
        return TollPointID_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_oer$address() {
        return TollPointID_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TollPointID_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TollPointID_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TollPointID_decode_uper$descriptor() {
        return TollPointID_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TollPointID_decode_uper$handle() {
        return TollPointID_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TollPointID_decode_uper$address() {
        return TollPointID_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TollPointID_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TollPointID_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_uper$descriptor() {
        return TollPointID_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TollPointID_encode_uper$handle() {
        return TollPointID_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TollPointID_encode_uper$address() {
        return TollPointID_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TollPointID_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TollPointID_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TollPointID_decode_aper$descriptor() {
        return TollPointID_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TollPointID_decode_aper$handle() {
        return TollPointID_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TollPointID_decode_aper$address() {
        return TollPointID_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TollPointID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TollPointID_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TollPointID_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TollPointID_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TollPointID_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TollPointID_encode_aper$descriptor() {
        return TollPointID_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TollPointID_encode_aper$handle() {
        return TollPointID_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TollPointID_encode_aper$address() {
        return TollPointID_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TollPointID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TollPointID_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TollPointID_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TollPointID_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_ExitInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ExitInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitInfo
     * }
     */
    public static GroupLayout asn_DEF_ExitInfo$layout() {
        return asn_DEF_ExitInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitInfo
     * }
     */
    public static MemorySegment asn_DEF_ExitInfo() {
        return asn_DEF_ExitInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitInfo
     * }
     */
    public static void asn_DEF_ExitInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ExitInfo$constants.SEGMENT, 0L, asn_DEF_ExitInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ExitInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ExitInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ExitInfo_specs_1$layout() {
        return asn_SPC_ExitInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ExitInfo_specs_1() {
        return asn_SPC_ExitInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitInfo_specs_1
     * }
     */
    public static void asn_SPC_ExitInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ExitInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_ExitInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ExitInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ExitInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_ExitInfo_1$layout() {
        return asn_MBR_ExitInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static long[] asn_MBR_ExitInfo_1$dimensions() {
        return asn_MBR_ExitInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ExitInfo_1() {
        return asn_MBR_ExitInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static void asn_MBR_ExitInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExitInfo_1$constants.SEGMENT, 0L, asn_MBR_ExitInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ExitInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ExitInfo_1$constants.HANDLE.invokeExact(asn_MBR_ExitInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitInfo_1[3]
     * }
     */
    public static void asn_MBR_ExitInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExitInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_EntryChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EntryChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EntryChargesTable
     * }
     */
    public static GroupLayout asn_DEF_EntryChargesTable$layout() {
        return asn_DEF_EntryChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EntryChargesTable
     * }
     */
    public static MemorySegment asn_DEF_EntryChargesTable() {
        return asn_DEF_EntryChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EntryChargesTable
     * }
     */
    public static void asn_DEF_EntryChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EntryChargesTable$constants.SEGMENT, 0L, asn_DEF_EntryChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_EntryChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_EntryChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EntryChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_EntryChargesTable_specs_1$layout() {
        return asn_SPC_EntryChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EntryChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_EntryChargesTable_specs_1() {
        return asn_SPC_EntryChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EntryChargesTable_specs_1
     * }
     */
    public static void asn_SPC_EntryChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_EntryChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_EntryChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_EntryChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_EntryChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_EntryChargesTable_1$layout() {
        return asn_MBR_EntryChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static long[] asn_MBR_EntryChargesTable_1$dimensions() {
        return asn_MBR_EntryChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_EntryChargesTable_1() {
        return asn_MBR_EntryChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static void asn_MBR_EntryChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_EntryChargesTable_1$constants.SEGMENT, 0L, asn_MBR_EntryChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_EntryChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_EntryChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_EntryChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EntryChargesTable_1[2]
     * }
     */
    public static void asn_MBR_EntryChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_EntryChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ExitChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ExitChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitChargesTable
     * }
     */
    public static GroupLayout asn_DEF_ExitChargesTable$layout() {
        return asn_DEF_ExitChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitChargesTable
     * }
     */
    public static MemorySegment asn_DEF_ExitChargesTable() {
        return asn_DEF_ExitChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExitChargesTable
     * }
     */
    public static void asn_DEF_ExitChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ExitChargesTable$constants.SEGMENT, 0L, asn_DEF_ExitChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ExitChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ExitChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ExitChargesTable_specs_1$layout() {
        return asn_SPC_ExitChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ExitChargesTable_specs_1() {
        return asn_SPC_ExitChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExitChargesTable_specs_1
     * }
     */
    public static void asn_SPC_ExitChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ExitChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_ExitChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ExitChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ExitChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_ExitChargesTable_1$layout() {
        return asn_MBR_ExitChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static long[] asn_MBR_ExitChargesTable_1$dimensions() {
        return asn_MBR_ExitChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ExitChargesTable_1() {
        return asn_MBR_ExitChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static void asn_MBR_ExitChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExitChargesTable_1$constants.SEGMENT, 0L, asn_MBR_ExitChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ExitChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ExitChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_ExitChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExitChargesTable_1[2]
     * }
     */
    public static void asn_MBR_ExitChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExitChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int ClosedNetworkChargesTable_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ClosedNetworkChargesTable_PR.ClosedNetworkChargesTable_PR_NOTHING = 0
     * }
     */
    public static int ClosedNetworkChargesTable_PR_NOTHING() {
        return ClosedNetworkChargesTable_PR_NOTHING;
    }
    private static final int ClosedNetworkChargesTable_PR_entryChargesTable = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ClosedNetworkChargesTable_PR.ClosedNetworkChargesTable_PR_entryChargesTable = 1
     * }
     */
    public static int ClosedNetworkChargesTable_PR_entryChargesTable() {
        return ClosedNetworkChargesTable_PR_entryChargesTable;
    }
    private static final int ClosedNetworkChargesTable_PR_exitChargesTable = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ClosedNetworkChargesTable_PR.ClosedNetworkChargesTable_PR_exitChargesTable = 2
     * }
     */
    public static int ClosedNetworkChargesTable_PR_exitChargesTable() {
        return ClosedNetworkChargesTable_PR_exitChargesTable;
    }

    private static class asn_DEF_ClosedNetworkChargesTable$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ClosedNetworkChargesTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClosedNetworkChargesTable
     * }
     */
    public static GroupLayout asn_DEF_ClosedNetworkChargesTable$layout() {
        return asn_DEF_ClosedNetworkChargesTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClosedNetworkChargesTable
     * }
     */
    public static MemorySegment asn_DEF_ClosedNetworkChargesTable() {
        return asn_DEF_ClosedNetworkChargesTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClosedNetworkChargesTable
     * }
     */
    public static void asn_DEF_ClosedNetworkChargesTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ClosedNetworkChargesTable$constants.SEGMENT, 0L, asn_DEF_ClosedNetworkChargesTable$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ClosedNetworkChargesTable_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ClosedNetworkChargesTable_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ClosedNetworkChargesTable_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ClosedNetworkChargesTable_specs_1$layout() {
        return asn_SPC_ClosedNetworkChargesTable_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ClosedNetworkChargesTable_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ClosedNetworkChargesTable_specs_1() {
        return asn_SPC_ClosedNetworkChargesTable_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ClosedNetworkChargesTable_specs_1
     * }
     */
    public static void asn_SPC_ClosedNetworkChargesTable_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ClosedNetworkChargesTable_specs_1$constants.SEGMENT, 0L, asn_SPC_ClosedNetworkChargesTable_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ClosedNetworkChargesTable_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ClosedNetworkChargesTable_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_ClosedNetworkChargesTable_1$layout() {
        return asn_MBR_ClosedNetworkChargesTable_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static long[] asn_MBR_ClosedNetworkChargesTable_1$dimensions() {
        return asn_MBR_ClosedNetworkChargesTable_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ClosedNetworkChargesTable_1() {
        return asn_MBR_ClosedNetworkChargesTable_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static void asn_MBR_ClosedNetworkChargesTable_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ClosedNetworkChargesTable_1$constants.SEGMENT, 0L, asn_MBR_ClosedNetworkChargesTable_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ClosedNetworkChargesTable_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ClosedNetworkChargesTable_1$constants.HANDLE.invokeExact(asn_MBR_ClosedNetworkChargesTable_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ClosedNetworkChargesTable_1[2]
     * }
     */
    public static void asn_MBR_ClosedNetworkChargesTable_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ClosedNetworkChargesTable_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ClosedNetworkChargesTable_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ClosedNetworkChargesTable_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClosedNetworkChargesTable_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ClosedNetworkChargesTable_constr_1$layout() {
        return asn_PER_type_ClosedNetworkChargesTable_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClosedNetworkChargesTable_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ClosedNetworkChargesTable_constr_1() {
        return asn_PER_type_ClosedNetworkChargesTable_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClosedNetworkChargesTable_constr_1
     * }
     */
    public static void asn_PER_type_ClosedNetworkChargesTable_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ClosedNetworkChargesTable_constr_1$constants.SEGMENT, 0L, asn_PER_type_ClosedNetworkChargesTable_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TollAdvertisementMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollAdvertisementMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementMessage
     * }
     */
    public static GroupLayout asn_DEF_TollAdvertisementMessage$layout() {
        return asn_DEF_TollAdvertisementMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementMessage
     * }
     */
    public static MemorySegment asn_DEF_TollAdvertisementMessage() {
        return asn_DEF_TollAdvertisementMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementMessage
     * }
     */
    public static void asn_DEF_TollAdvertisementMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollAdvertisementMessage$constants.SEGMENT, 0L, asn_DEF_TollAdvertisementMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollAdvertisementMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollAdvertisementMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollAdvertisementMessage_specs_1$layout() {
        return asn_SPC_TollAdvertisementMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollAdvertisementMessage_specs_1() {
        return asn_SPC_TollAdvertisementMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementMessage_specs_1
     * }
     */
    public static void asn_SPC_TollAdvertisementMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollAdvertisementMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_TollAdvertisementMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollAdvertisementMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollAdvertisementMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TollAdvertisementMessage_1$layout() {
        return asn_MBR_TollAdvertisementMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static long[] asn_MBR_TollAdvertisementMessage_1$dimensions() {
        return asn_MBR_TollAdvertisementMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TollAdvertisementMessage_1() {
        return asn_MBR_TollAdvertisementMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static void asn_MBR_TollAdvertisementMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollAdvertisementMessage_1$constants.SEGMENT, 0L, asn_MBR_TollAdvertisementMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TollAdvertisementMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollAdvertisementMessage_1$constants.HANDLE.invokeExact(asn_MBR_TollAdvertisementMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementMessage_1[2]
     * }
     */
    public static void asn_MBR_TollAdvertisementMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollAdvertisementMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TollChargerInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollChargerInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargerInfo
     * }
     */
    public static GroupLayout asn_DEF_TollChargerInfo$layout() {
        return asn_DEF_TollChargerInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargerInfo
     * }
     */
    public static MemorySegment asn_DEF_TollChargerInfo() {
        return asn_DEF_TollChargerInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollChargerInfo
     * }
     */
    public static void asn_DEF_TollChargerInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollChargerInfo$constants.SEGMENT, 0L, asn_DEF_TollChargerInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollChargerInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollChargerInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargerInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollChargerInfo_specs_1$layout() {
        return asn_SPC_TollChargerInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargerInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollChargerInfo_specs_1() {
        return asn_SPC_TollChargerInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollChargerInfo_specs_1
     * }
     */
    public static void asn_SPC_TollChargerInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollChargerInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_TollChargerInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollChargerInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollChargerInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_TollChargerInfo_1$layout() {
        return asn_MBR_TollChargerInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static long[] asn_MBR_TollChargerInfo_1$dimensions() {
        return asn_MBR_TollChargerInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TollChargerInfo_1() {
        return asn_MBR_TollChargerInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static void asn_MBR_TollChargerInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollChargerInfo_1$constants.SEGMENT, 0L, asn_MBR_TollChargerInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TollChargerInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollChargerInfo_1$constants.HANDLE.invokeExact(asn_MBR_TollChargerInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollChargerInfo_1[3]
     * }
     */
    public static void asn_MBR_TollChargerInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollChargerInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TollPointMap$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollPointMap").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointMap
     * }
     */
    public static GroupLayout asn_DEF_TollPointMap$layout() {
        return asn_DEF_TollPointMap$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointMap
     * }
     */
    public static MemorySegment asn_DEF_TollPointMap() {
        return asn_DEF_TollPointMap$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollPointMap
     * }
     */
    public static void asn_DEF_TollPointMap(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollPointMap$constants.SEGMENT, 0L, asn_DEF_TollPointMap$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollPointMap_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollPointMap_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollPointMap_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollPointMap_specs_1$layout() {
        return asn_SPC_TollPointMap_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollPointMap_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollPointMap_specs_1() {
        return asn_SPC_TollPointMap_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollPointMap_specs_1
     * }
     */
    public static void asn_SPC_TollPointMap_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollPointMap_specs_1$constants.SEGMENT, 0L, asn_SPC_TollPointMap_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollPointMap_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollPointMap_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_TollPointMap_1$layout() {
        return asn_MBR_TollPointMap_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static long[] asn_MBR_TollPointMap_1$dimensions() {
        return asn_MBR_TollPointMap_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static MemorySegment asn_MBR_TollPointMap_1() {
        return asn_MBR_TollPointMap_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static void asn_MBR_TollPointMap_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollPointMap_1$constants.SEGMENT, 0L, asn_MBR_TollPointMap_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static MemorySegment asn_MBR_TollPointMap_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollPointMap_1$constants.HANDLE.invokeExact(asn_MBR_TollPointMap_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollPointMap_1[6]
     * }
     */
    public static void asn_MBR_TollPointMap_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollPointMap_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_AckPolicy$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AckPolicy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AckPolicy
     * }
     */
    public static GroupLayout asn_DEF_AckPolicy$layout() {
        return asn_DEF_AckPolicy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AckPolicy
     * }
     */
    public static MemorySegment asn_DEF_AckPolicy() {
        return asn_DEF_AckPolicy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AckPolicy
     * }
     */
    public static void asn_DEF_AckPolicy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AckPolicy$constants.SEGMENT, 0L, asn_DEF_AckPolicy$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AckPolicy_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AckPolicy_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AckPolicy_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AckPolicy_specs_1$layout() {
        return asn_SPC_AckPolicy_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AckPolicy_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AckPolicy_specs_1() {
        return asn_SPC_AckPolicy_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AckPolicy_specs_1
     * }
     */
    public static void asn_SPC_AckPolicy_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AckPolicy_specs_1$constants.SEGMENT, 0L, asn_SPC_AckPolicy_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AckPolicy_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AckPolicy_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_AckPolicy_1$layout() {
        return asn_MBR_AckPolicy_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static long[] asn_MBR_AckPolicy_1$dimensions() {
        return asn_MBR_AckPolicy_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AckPolicy_1() {
        return asn_MBR_AckPolicy_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static void asn_MBR_AckPolicy_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AckPolicy_1$constants.SEGMENT, 0L, asn_MBR_AckPolicy_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AckPolicy_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AckPolicy_1$constants.HANDLE.invokeExact(asn_MBR_AckPolicy_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AckPolicy_1[2]
     * }
     */
    public static void asn_MBR_AckPolicy_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AckPolicy_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TollAdvertisementInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollAdvertisementInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementInfo
     * }
     */
    public static GroupLayout asn_DEF_TollAdvertisementInfo$layout() {
        return asn_DEF_TollAdvertisementInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementInfo
     * }
     */
    public static MemorySegment asn_DEF_TollAdvertisementInfo() {
        return asn_DEF_TollAdvertisementInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollAdvertisementInfo
     * }
     */
    public static void asn_DEF_TollAdvertisementInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollAdvertisementInfo$constants.SEGMENT, 0L, asn_DEF_TollAdvertisementInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollAdvertisementInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollAdvertisementInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollAdvertisementInfo_specs_1$layout() {
        return asn_SPC_TollAdvertisementInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollAdvertisementInfo_specs_1() {
        return asn_SPC_TollAdvertisementInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollAdvertisementInfo_specs_1
     * }
     */
    public static void asn_SPC_TollAdvertisementInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollAdvertisementInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_TollAdvertisementInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollAdvertisementInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(10, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollAdvertisementInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 10 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static SequenceLayout asn_MBR_TollAdvertisementInfo_1$layout() {
        return asn_MBR_TollAdvertisementInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static long[] asn_MBR_TollAdvertisementInfo_1$dimensions() {
        return asn_MBR_TollAdvertisementInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static MemorySegment asn_MBR_TollAdvertisementInfo_1() {
        return asn_MBR_TollAdvertisementInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static void asn_MBR_TollAdvertisementInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollAdvertisementInfo_1$constants.SEGMENT, 0L, asn_MBR_TollAdvertisementInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static MemorySegment asn_MBR_TollAdvertisementInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollAdvertisementInfo_1$constants.HANDLE.invokeExact(asn_MBR_TollAdvertisementInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollAdvertisementInfo_1[10]
     * }
     */
    public static void asn_MBR_TollAdvertisementInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollAdvertisementInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TumInstructions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TumInstructions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumInstructions
     * }
     */
    public static GroupLayout asn_DEF_TumInstructions$layout() {
        return asn_DEF_TumInstructions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumInstructions
     * }
     */
    public static MemorySegment asn_DEF_TumInstructions() {
        return asn_DEF_TumInstructions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumInstructions
     * }
     */
    public static void asn_DEF_TumInstructions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TumInstructions$constants.SEGMENT, 0L, asn_DEF_TumInstructions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TumInstructions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TumInstructions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumInstructions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TumInstructions_specs_1$layout() {
        return asn_SPC_TumInstructions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumInstructions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TumInstructions_specs_1() {
        return asn_SPC_TumInstructions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumInstructions_specs_1
     * }
     */
    public static void asn_SPC_TumInstructions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TumInstructions_specs_1$constants.SEGMENT, 0L, asn_SPC_TumInstructions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TumInstructions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TumInstructions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TumInstructions_1$layout() {
        return asn_MBR_TumInstructions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static long[] asn_MBR_TumInstructions_1$dimensions() {
        return asn_MBR_TumInstructions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TumInstructions_1() {
        return asn_MBR_TumInstructions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static void asn_MBR_TumInstructions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumInstructions_1$constants.SEGMENT, 0L, asn_MBR_TumInstructions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TumInstructions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TumInstructions_1$constants.HANDLE.invokeExact(asn_MBR_TumInstructions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumInstructions_1[2]
     * }
     */
    public static void asn_MBR_TumInstructions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumInstructions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TumHash_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TumHash_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumHash_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TumHash_constr_1$layout() {
        return asn_PER_type_TumHash_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumHash_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TumHash_constr_1() {
        return asn_PER_type_TumHash_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumHash_constr_1
     * }
     */
    public static void asn_PER_type_TumHash_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TumHash_constr_1$constants.SEGMENT, 0L, asn_PER_type_TumHash_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TumHash$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TumHash").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumHash
     * }
     */
    public static GroupLayout asn_DEF_TumHash$layout() {
        return asn_DEF_TumHash$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumHash
     * }
     */
    public static MemorySegment asn_DEF_TumHash() {
        return asn_DEF_TumHash$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumHash
     * }
     */
    public static void asn_DEF_TumHash(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TumHash$constants.SEGMENT, 0L, asn_DEF_TumHash$constants.LAYOUT.byteSize());
    }

    private static class TumHash_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TumHash_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TumHash_free$descriptor() {
        return TumHash_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TumHash_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TumHash_free$handle() {
        return TumHash_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TumHash_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TumHash_free$address() {
        return TumHash_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TumHash_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TumHash_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TumHash_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TumHash_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_print$descriptor() {
        return TumHash_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TumHash_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TumHash_print$handle() {
        return TumHash_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TumHash_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_print$address() {
        return TumHash_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TumHash_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TumHash_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TumHash_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TumHash_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_constraint$descriptor() {
        return TumHash_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TumHash_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TumHash_constraint$handle() {
        return TumHash_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TumHash_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TumHash_constraint$address() {
        return TumHash_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TumHash_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TumHash_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TumHash_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TumHash_decode_ber$descriptor() {
        return TumHash_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TumHash_decode_ber$handle() {
        return TumHash_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TumHash_decode_ber$address() {
        return TumHash_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TumHash_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TumHash_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_der$descriptor() {
        return TumHash_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TumHash_encode_der$handle() {
        return TumHash_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_der$address() {
        return TumHash_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TumHash_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TumHash_decode_xer$descriptor() {
        return TumHash_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TumHash_decode_xer$handle() {
        return TumHash_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TumHash_decode_xer$address() {
        return TumHash_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TumHash_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TumHash_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_xer$descriptor() {
        return TumHash_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TumHash_encode_xer$handle() {
        return TumHash_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_xer$address() {
        return TumHash_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TumHash_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_jer$descriptor() {
        return TumHash_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TumHash_encode_jer$handle() {
        return TumHash_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_jer$address() {
        return TumHash_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TumHash_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TumHash_decode_oer$descriptor() {
        return TumHash_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TumHash_decode_oer$handle() {
        return TumHash_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TumHash_decode_oer$address() {
        return TumHash_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TumHash_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TumHash_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_oer$descriptor() {
        return TumHash_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TumHash_encode_oer$handle() {
        return TumHash_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_oer$address() {
        return TumHash_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TumHash_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TumHash_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TumHash_decode_uper$descriptor() {
        return TumHash_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TumHash_decode_uper$handle() {
        return TumHash_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TumHash_decode_uper$address() {
        return TumHash_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TumHash_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TumHash_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_uper$descriptor() {
        return TumHash_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TumHash_encode_uper$handle() {
        return TumHash_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TumHash_encode_uper$address() {
        return TumHash_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TumHash_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TumHash_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TumHash_decode_aper$descriptor() {
        return TumHash_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TumHash_decode_aper$handle() {
        return TumHash_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TumHash_decode_aper$address() {
        return TumHash_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TumHash_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TumHash_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TumHash_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TumHash_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TumHash_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TumHash_encode_aper$descriptor() {
        return TumHash_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TumHash_encode_aper$handle() {
        return TumHash_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TumHash_encode_aper$address() {
        return TumHash_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TumHash_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TumHash_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TumHash_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TumHash_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_PER_type_EncryptedTumData_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EncryptedTumData_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EncryptedTumData_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EncryptedTumData_constr_1$layout() {
        return asn_PER_type_EncryptedTumData_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EncryptedTumData_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EncryptedTumData_constr_1() {
        return asn_PER_type_EncryptedTumData_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EncryptedTumData_constr_1
     * }
     */
    public static void asn_PER_type_EncryptedTumData_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EncryptedTumData_constr_1$constants.SEGMENT, 0L, asn_PER_type_EncryptedTumData_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EncryptedTumData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EncryptedTumData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EncryptedTumData
     * }
     */
    public static GroupLayout asn_DEF_EncryptedTumData$layout() {
        return asn_DEF_EncryptedTumData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EncryptedTumData
     * }
     */
    public static MemorySegment asn_DEF_EncryptedTumData() {
        return asn_DEF_EncryptedTumData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EncryptedTumData
     * }
     */
    public static void asn_DEF_EncryptedTumData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EncryptedTumData$constants.SEGMENT, 0L, asn_DEF_EncryptedTumData$constants.LAYOUT.byteSize());
    }

    private static class EncryptedTumData_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EncryptedTumData_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_free$descriptor() {
        return EncryptedTumData_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EncryptedTumData_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EncryptedTumData_free$handle() {
        return EncryptedTumData_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EncryptedTumData_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EncryptedTumData_free$address() {
        return EncryptedTumData_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EncryptedTumData_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EncryptedTumData_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EncryptedTumData_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EncryptedTumData_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_print$descriptor() {
        return EncryptedTumData_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EncryptedTumData_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_print$handle() {
        return EncryptedTumData_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EncryptedTumData_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_print$address() {
        return EncryptedTumData_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EncryptedTumData_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EncryptedTumData_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EncryptedTumData_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EncryptedTumData_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_constraint$descriptor() {
        return EncryptedTumData_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EncryptedTumData_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_constraint$handle() {
        return EncryptedTumData_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EncryptedTumData_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_constraint$address() {
        return EncryptedTumData_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EncryptedTumData_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EncryptedTumData_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EncryptedTumData_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_decode_ber$descriptor() {
        return EncryptedTumData_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EncryptedTumData_decode_ber$handle() {
        return EncryptedTumData_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_ber$address() {
        return EncryptedTumData_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EncryptedTumData_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_der$descriptor() {
        return EncryptedTumData_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_der$handle() {
        return EncryptedTumData_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_der$address() {
        return EncryptedTumData_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EncryptedTumData_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_decode_xer$descriptor() {
        return EncryptedTumData_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EncryptedTumData_decode_xer$handle() {
        return EncryptedTumData_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_xer$address() {
        return EncryptedTumData_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EncryptedTumData_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_xer$descriptor() {
        return EncryptedTumData_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_xer$handle() {
        return EncryptedTumData_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_xer$address() {
        return EncryptedTumData_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EncryptedTumData_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_jer$descriptor() {
        return EncryptedTumData_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_jer$handle() {
        return EncryptedTumData_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_jer$address() {
        return EncryptedTumData_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EncryptedTumData_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_decode_oer$descriptor() {
        return EncryptedTumData_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EncryptedTumData_decode_oer$handle() {
        return EncryptedTumData_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_oer$address() {
        return EncryptedTumData_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EncryptedTumData_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_oer$descriptor() {
        return EncryptedTumData_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_oer$handle() {
        return EncryptedTumData_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_oer$address() {
        return EncryptedTumData_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EncryptedTumData_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_decode_uper$descriptor() {
        return EncryptedTumData_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EncryptedTumData_decode_uper$handle() {
        return EncryptedTumData_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_uper$address() {
        return EncryptedTumData_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EncryptedTumData_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_uper$descriptor() {
        return EncryptedTumData_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_uper$handle() {
        return EncryptedTumData_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_uper$address() {
        return EncryptedTumData_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EncryptedTumData_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_decode_aper$descriptor() {
        return EncryptedTumData_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EncryptedTumData_decode_aper$handle() {
        return EncryptedTumData_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_aper$address() {
        return EncryptedTumData_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EncryptedTumData_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EncryptedTumData_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EncryptedTumData_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EncryptedTumData_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EncryptedTumData_encode_aper$descriptor() {
        return EncryptedTumData_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EncryptedTumData_encode_aper$handle() {
        return EncryptedTumData_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_aper$address() {
        return EncryptedTumData_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EncryptedTumData_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EncryptedTumData_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EncryptedTumData_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EncryptedTumData_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_TollUsageMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollUsageMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageMessage
     * }
     */
    public static GroupLayout asn_DEF_TollUsageMessage$layout() {
        return asn_DEF_TollUsageMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageMessage
     * }
     */
    public static MemorySegment asn_DEF_TollUsageMessage() {
        return asn_DEF_TollUsageMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageMessage
     * }
     */
    public static void asn_DEF_TollUsageMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollUsageMessage$constants.SEGMENT, 0L, asn_DEF_TollUsageMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollUsageMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollUsageMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollUsageMessage_specs_1$layout() {
        return asn_SPC_TollUsageMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollUsageMessage_specs_1() {
        return asn_SPC_TollUsageMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageMessage_specs_1
     * }
     */
    public static void asn_SPC_TollUsageMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollUsageMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_TollUsageMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollUsageMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollUsageMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_TollUsageMessage_1$layout() {
        return asn_MBR_TollUsageMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static long[] asn_MBR_TollUsageMessage_1$dimensions() {
        return asn_MBR_TollUsageMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static MemorySegment asn_MBR_TollUsageMessage_1() {
        return asn_MBR_TollUsageMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static void asn_MBR_TollUsageMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollUsageMessage_1$constants.SEGMENT, 0L, asn_MBR_TollUsageMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static MemorySegment asn_MBR_TollUsageMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollUsageMessage_1$constants.HANDLE.invokeExact(asn_MBR_TollUsageMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageMessage_1[6]
     * }
     */
    public static void asn_MBR_TollUsageMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollUsageMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TumAck$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TumAck").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAck
     * }
     */
    public static GroupLayout asn_DEF_TumAck$layout() {
        return asn_DEF_TumAck$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAck
     * }
     */
    public static MemorySegment asn_DEF_TumAck() {
        return asn_DEF_TumAck$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAck
     * }
     */
    public static void asn_DEF_TumAck(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TumAck$constants.SEGMENT, 0L, asn_DEF_TumAck$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TumAck_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TumAck_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TumAck_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TumAck_specs_1$layout() {
        return asn_SPC_TumAck_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TumAck_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TumAck_specs_1() {
        return asn_SPC_TumAck_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TumAck_specs_1
     * }
     */
    public static void asn_SPC_TumAck_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TumAck_specs_1$constants.SEGMENT, 0L, asn_SPC_TumAck_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TumAck_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TumAck_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_TumAck_1$layout() {
        return asn_MBR_TumAck_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static long[] asn_MBR_TumAck_1$dimensions() {
        return asn_MBR_TumAck_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TumAck_1() {
        return asn_MBR_TumAck_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static void asn_MBR_TumAck_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumAck_1$constants.SEGMENT, 0L, asn_MBR_TumAck_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TumAck_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TumAck_1$constants.HANDLE.invokeExact(asn_MBR_TumAck_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAck_1[1]
     * }
     */
    public static void asn_MBR_TumAck_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumAck_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TumAck_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TumAck_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumAck_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TumAck_constr_1$layout() {
        return asn_PER_type_TumAck_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumAck_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TumAck_constr_1() {
        return asn_PER_type_TumAck_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TumAck_constr_1
     * }
     */
    public static void asn_PER_type_TumAck_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TumAck_constr_1$constants.SEGMENT, 0L, asn_PER_type_TumAck_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TumAckHash$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TumAckHash").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAckHash
     * }
     */
    public static GroupLayout asn_DEF_TumAckHash$layout() {
        return asn_DEF_TumAckHash$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAckHash
     * }
     */
    public static MemorySegment asn_DEF_TumAckHash() {
        return asn_DEF_TumAckHash$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TumAckHash
     * }
     */
    public static void asn_DEF_TumAckHash(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TumAckHash$constants.SEGMENT, 0L, asn_DEF_TumAckHash$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TumAckHash_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TumAckHash_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumAckHash_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TumAckHash_specs_1$layout() {
        return asn_SPC_TumAckHash_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumAckHash_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TumAckHash_specs_1() {
        return asn_SPC_TumAckHash_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TumAckHash_specs_1
     * }
     */
    public static void asn_SPC_TumAckHash_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TumAckHash_specs_1$constants.SEGMENT, 0L, asn_SPC_TumAckHash_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TumAckHash_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TumAckHash_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_TumAckHash_1$layout() {
        return asn_MBR_TumAckHash_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static long[] asn_MBR_TumAckHash_1$dimensions() {
        return asn_MBR_TumAckHash_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TumAckHash_1() {
        return asn_MBR_TumAckHash_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static void asn_MBR_TumAckHash_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumAckHash_1$constants.SEGMENT, 0L, asn_MBR_TumAckHash_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TumAckHash_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TumAckHash_1$constants.HANDLE.invokeExact(asn_MBR_TumAckHash_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TumAckHash_1[3]
     * }
     */
    public static void asn_MBR_TumAckHash_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TumAckHash_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TollUsageAckMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TollUsageAckMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageAckMessage
     * }
     */
    public static GroupLayout asn_DEF_TollUsageAckMessage$layout() {
        return asn_DEF_TollUsageAckMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageAckMessage
     * }
     */
    public static MemorySegment asn_DEF_TollUsageAckMessage() {
        return asn_DEF_TollUsageAckMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TollUsageAckMessage
     * }
     */
    public static void asn_DEF_TollUsageAckMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TollUsageAckMessage$constants.SEGMENT, 0L, asn_DEF_TollUsageAckMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TollUsageAckMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TollUsageAckMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageAckMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TollUsageAckMessage_specs_1$layout() {
        return asn_SPC_TollUsageAckMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageAckMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TollUsageAckMessage_specs_1() {
        return asn_SPC_TollUsageAckMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TollUsageAckMessage_specs_1
     * }
     */
    public static void asn_SPC_TollUsageAckMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TollUsageAckMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_TollUsageAckMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TollUsageAckMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TollUsageAckMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TollUsageAckMessage_1$layout() {
        return asn_MBR_TollUsageAckMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static long[] asn_MBR_TollUsageAckMessage_1$dimensions() {
        return asn_MBR_TollUsageAckMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TollUsageAckMessage_1() {
        return asn_MBR_TollUsageAckMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static void asn_MBR_TollUsageAckMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollUsageAckMessage_1$constants.SEGMENT, 0L, asn_MBR_TollUsageAckMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TollUsageAckMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TollUsageAckMessage_1$constants.HANDLE.invokeExact(asn_MBR_TollUsageAckMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TollUsageAckMessage_1[2]
     * }
     */
    public static void asn_MBR_TollUsageAckMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TollUsageAckMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CooperativeControlMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CooperativeControlMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage
     * }
     */
    public static GroupLayout asn_DEF_CooperativeControlMessage$layout() {
        return asn_DEF_CooperativeControlMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage
     * }
     */
    public static MemorySegment asn_DEF_CooperativeControlMessage() {
        return asn_DEF_CooperativeControlMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage
     * }
     */
    public static void asn_DEF_CooperativeControlMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CooperativeControlMessage$constants.SEGMENT, 0L, asn_DEF_CooperativeControlMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CooperativeControlMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CooperativeControlMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CooperativeControlMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CooperativeControlMessage_specs_1$layout() {
        return asn_SPC_CooperativeControlMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CooperativeControlMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CooperativeControlMessage_specs_1() {
        return asn_SPC_CooperativeControlMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CooperativeControlMessage_specs_1
     * }
     */
    public static void asn_SPC_CooperativeControlMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CooperativeControlMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_CooperativeControlMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CooperativeControlMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CooperativeControlMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CooperativeControlMessage_1$layout() {
        return asn_MBR_CooperativeControlMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static long[] asn_MBR_CooperativeControlMessage_1$dimensions() {
        return asn_MBR_CooperativeControlMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CooperativeControlMessage_1() {
        return asn_MBR_CooperativeControlMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static void asn_MBR_CooperativeControlMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CooperativeControlMessage_1$constants.SEGMENT, 0L, asn_MBR_CooperativeControlMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CooperativeControlMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CooperativeControlMessage_1$constants.HANDLE.invokeExact(asn_MBR_CooperativeControlMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CooperativeControlMessage_1[2]
     * }
     */
    public static void asn_MBR_CooperativeControlMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CooperativeControlMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long CooperativeControlMessage_PartII_Id_t
     * }
     */
    public static final OfLong CooperativeControlMessage_PartII_Id_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$layout() {
        return asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1() {
        return asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1
     * }
     */
    public static void asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$constants.SEGMENT, 0L, asn_PER_type_CooperativeControlMessage_PartII_Id_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CooperativeControlMessage_PartII_Id$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CooperativeControlMessage_PartII_Id").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PartII_Id
     * }
     */
    public static GroupLayout asn_DEF_CooperativeControlMessage_PartII_Id$layout() {
        return asn_DEF_CooperativeControlMessage_PartII_Id$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PartII_Id
     * }
     */
    public static MemorySegment asn_DEF_CooperativeControlMessage_PartII_Id() {
        return asn_DEF_CooperativeControlMessage_PartII_Id$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PartII_Id
     * }
     */
    public static void asn_DEF_CooperativeControlMessage_PartII_Id(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CooperativeControlMessage_PartII_Id$constants.SEGMENT, 0L, asn_DEF_CooperativeControlMessage_PartII_Id$constants.LAYOUT.byteSize());
    }

    private static class CooperativeControlMessage_PartII_Id_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PartII_Id_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_free$descriptor() {
        return CooperativeControlMessage_PartII_Id_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PartII_Id_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_free$handle() {
        return CooperativeControlMessage_PartII_Id_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PartII_Id_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_free$address() {
        return CooperativeControlMessage_PartII_Id_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CooperativeControlMessage_PartII_Id_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CooperativeControlMessage_PartII_Id_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CooperativeControlMessage_PartII_Id_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_print$descriptor() {
        return CooperativeControlMessage_PartII_Id_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_print$handle() {
        return CooperativeControlMessage_PartII_Id_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_print$address() {
        return CooperativeControlMessage_PartII_Id_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_PartII_Id_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PartII_Id_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_constraint$descriptor() {
        return CooperativeControlMessage_PartII_Id_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_constraint$handle() {
        return CooperativeControlMessage_PartII_Id_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_constraint$address() {
        return CooperativeControlMessage_PartII_Id_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_PartII_Id_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_PartII_Id_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PartII_Id_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_decode_ber$descriptor() {
        return CooperativeControlMessage_PartII_Id_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_decode_ber$handle() {
        return CooperativeControlMessage_PartII_Id_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_ber$address() {
        return CooperativeControlMessage_PartII_Id_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CooperativeControlMessage_PartII_Id_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_der$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_der$handle() {
        return CooperativeControlMessage_PartII_Id_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_der$address() {
        return CooperativeControlMessage_PartII_Id_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_decode_xer$descriptor() {
        return CooperativeControlMessage_PartII_Id_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_decode_xer$handle() {
        return CooperativeControlMessage_PartII_Id_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_xer$address() {
        return CooperativeControlMessage_PartII_Id_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_PartII_Id_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_xer$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_xer$handle() {
        return CooperativeControlMessage_PartII_Id_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_xer$address() {
        return CooperativeControlMessage_PartII_Id_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_jer$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_jer$handle() {
        return CooperativeControlMessage_PartII_Id_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_jer$address() {
        return CooperativeControlMessage_PartII_Id_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_decode_oer$descriptor() {
        return CooperativeControlMessage_PartII_Id_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_decode_oer$handle() {
        return CooperativeControlMessage_PartII_Id_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_oer$address() {
        return CooperativeControlMessage_PartII_Id_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_PartII_Id_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_oer$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_oer$handle() {
        return CooperativeControlMessage_PartII_Id_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_oer$address() {
        return CooperativeControlMessage_PartII_Id_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_decode_uper$descriptor() {
        return CooperativeControlMessage_PartII_Id_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_decode_uper$handle() {
        return CooperativeControlMessage_PartII_Id_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_uper$address() {
        return CooperativeControlMessage_PartII_Id_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PartII_Id_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_uper$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_uper$handle() {
        return CooperativeControlMessage_PartII_Id_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_uper$address() {
        return CooperativeControlMessage_PartII_Id_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_decode_aper$descriptor() {
        return CooperativeControlMessage_PartII_Id_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_decode_aper$handle() {
        return CooperativeControlMessage_PartII_Id_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_aper$address() {
        return CooperativeControlMessage_PartII_Id_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PartII_Id_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PartII_Id_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PartII_Id_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PartII_Id_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PartII_Id_encode_aper$descriptor() {
        return CooperativeControlMessage_PartII_Id_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PartII_Id_encode_aper$handle() {
        return CooperativeControlMessage_PartII_Id_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_aper$address() {
        return CooperativeControlMessage_PartII_Id_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PartII_Id_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PartII_Id_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PartII_Id_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PartII_Id_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int LongitudinalControlState_unavailable = (int)0L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_unavailable = 0
     * }
     */
    public static int LongitudinalControlState_unavailable() {
        return LongitudinalControlState_unavailable;
    }
    private static final int LongitudinalControlState_manual = (int)1L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_manual = 1
     * }
     */
    public static int LongitudinalControlState_manual() {
        return LongitudinalControlState_manual;
    }
    private static final int LongitudinalControlState_cc = (int)2L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_cc = 2
     * }
     */
    public static int LongitudinalControlState_cc() {
        return LongitudinalControlState_cc;
    }
    private static final int LongitudinalControlState_acc = (int)3L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_acc = 3
     * }
     */
    public static int LongitudinalControlState_acc() {
        return LongitudinalControlState_acc;
    }
    private static final int LongitudinalControlState_caccOne = (int)4L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_caccOne = 4
     * }
     */
    public static int LongitudinalControlState_caccOne() {
        return LongitudinalControlState_caccOne;
    }
    private static final int LongitudinalControlState_caccMultiple = (int)5L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_caccMultiple = 5
     * }
     */
    public static int LongitudinalControlState_caccMultiple() {
        return LongitudinalControlState_caccMultiple;
    }
    private static final int LongitudinalControlState_sensorAuto = (int)6L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_sensorAuto = 6
     * }
     */
    public static int LongitudinalControlState_sensorAuto() {
        return LongitudinalControlState_sensorAuto;
    }
    private static final int LongitudinalControlState_fusedAuto = (int)7L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_fusedAuto = 7
     * }
     */
    public static int LongitudinalControlState_fusedAuto() {
        return LongitudinalControlState_fusedAuto;
    }
    private static final int LongitudinalControlState_manualOver = (int)8L;
    /**
     * {@snippet lang=c :
     * enum LongitudinalControlState.LongitudinalControlState_manualOver = 8
     * }
     */
    public static int LongitudinalControlState_manualOver() {
        return LongitudinalControlState_manualOver;
    }
    /**
     * {@snippet lang=c :
     * typedef long LongitudinalControlState_t
     * }
     */
    public static final OfLong LongitudinalControlState_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_LongitudinalControlState_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_LongitudinalControlState_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_LongitudinalControlState_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_LongitudinalControlState_constr_1$layout() {
        return asn_PER_type_LongitudinalControlState_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_LongitudinalControlState_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_LongitudinalControlState_constr_1() {
        return asn_PER_type_LongitudinalControlState_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_LongitudinalControlState_constr_1
     * }
     */
    public static void asn_PER_type_LongitudinalControlState_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_LongitudinalControlState_constr_1$constants.SEGMENT, 0L, asn_PER_type_LongitudinalControlState_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_LongitudinalControlState$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_LongitudinalControlState").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LongitudinalControlState
     * }
     */
    public static GroupLayout asn_DEF_LongitudinalControlState$layout() {
        return asn_DEF_LongitudinalControlState$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LongitudinalControlState
     * }
     */
    public static MemorySegment asn_DEF_LongitudinalControlState() {
        return asn_DEF_LongitudinalControlState$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LongitudinalControlState
     * }
     */
    public static void asn_DEF_LongitudinalControlState(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_LongitudinalControlState$constants.SEGMENT, 0L, asn_DEF_LongitudinalControlState$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_LongitudinalControlState_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_LongitudinalControlState_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_LongitudinalControlState_specs_1
     * }
     */
    public static GroupLayout asn_SPC_LongitudinalControlState_specs_1$layout() {
        return asn_SPC_LongitudinalControlState_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_LongitudinalControlState_specs_1
     * }
     */
    public static MemorySegment asn_SPC_LongitudinalControlState_specs_1() {
        return asn_SPC_LongitudinalControlState_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_LongitudinalControlState_specs_1
     * }
     */
    public static void asn_SPC_LongitudinalControlState_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_LongitudinalControlState_specs_1$constants.SEGMENT, 0L, asn_SPC_LongitudinalControlState_specs_1$constants.LAYOUT.byteSize());
    }

    private static class LongitudinalControlState_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void LongitudinalControlState_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_free$descriptor() {
        return LongitudinalControlState_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void LongitudinalControlState_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle LongitudinalControlState_free$handle() {
        return LongitudinalControlState_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void LongitudinalControlState_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment LongitudinalControlState_free$address() {
        return LongitudinalControlState_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void LongitudinalControlState_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void LongitudinalControlState_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = LongitudinalControlState_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LongitudinalControlState_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_print$descriptor() {
        return LongitudinalControlState_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LongitudinalControlState_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_print$handle() {
        return LongitudinalControlState_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LongitudinalControlState_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_print$address() {
        return LongitudinalControlState_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LongitudinalControlState_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int LongitudinalControlState_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = LongitudinalControlState_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int LongitudinalControlState_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_constraint$descriptor() {
        return LongitudinalControlState_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int LongitudinalControlState_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_constraint$handle() {
        return LongitudinalControlState_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int LongitudinalControlState_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_constraint$address() {
        return LongitudinalControlState_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int LongitudinalControlState_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int LongitudinalControlState_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = LongitudinalControlState_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_decode_ber$descriptor() {
        return LongitudinalControlState_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle LongitudinalControlState_decode_ber$handle() {
        return LongitudinalControlState_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_ber$address() {
        return LongitudinalControlState_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = LongitudinalControlState_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_der$descriptor() {
        return LongitudinalControlState_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_der$handle() {
        return LongitudinalControlState_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_der$address() {
        return LongitudinalControlState_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = LongitudinalControlState_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_decode_xer$descriptor() {
        return LongitudinalControlState_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle LongitudinalControlState_decode_xer$handle() {
        return LongitudinalControlState_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_xer$address() {
        return LongitudinalControlState_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = LongitudinalControlState_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_xer$descriptor() {
        return LongitudinalControlState_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_xer$handle() {
        return LongitudinalControlState_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_xer$address() {
        return LongitudinalControlState_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = LongitudinalControlState_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_jer$descriptor() {
        return LongitudinalControlState_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_jer$handle() {
        return LongitudinalControlState_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_jer$address() {
        return LongitudinalControlState_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = LongitudinalControlState_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_decode_oer$descriptor() {
        return LongitudinalControlState_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle LongitudinalControlState_decode_oer$handle() {
        return LongitudinalControlState_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_oer$address() {
        return LongitudinalControlState_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = LongitudinalControlState_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_oer$descriptor() {
        return LongitudinalControlState_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_oer$handle() {
        return LongitudinalControlState_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_oer$address() {
        return LongitudinalControlState_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = LongitudinalControlState_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_decode_uper$descriptor() {
        return LongitudinalControlState_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle LongitudinalControlState_decode_uper$handle() {
        return LongitudinalControlState_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_uper$address() {
        return LongitudinalControlState_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = LongitudinalControlState_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_uper$descriptor() {
        return LongitudinalControlState_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_uper$handle() {
        return LongitudinalControlState_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_uper$address() {
        return LongitudinalControlState_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = LongitudinalControlState_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_decode_aper$descriptor() {
        return LongitudinalControlState_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle LongitudinalControlState_decode_aper$handle() {
        return LongitudinalControlState_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_aper$address() {
        return LongitudinalControlState_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t LongitudinalControlState_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = LongitudinalControlState_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LongitudinalControlState_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("LongitudinalControlState_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor LongitudinalControlState_encode_aper$descriptor() {
        return LongitudinalControlState_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle LongitudinalControlState_encode_aper$handle() {
        return LongitudinalControlState_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_aper$address() {
        return LongitudinalControlState_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t LongitudinalControlState_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment LongitudinalControlState_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = LongitudinalControlState_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LongitudinalControlState_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long SeparationDistance_t
     * }
     */
    public static final OfLong SeparationDistance_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_SeparationDistance_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_SeparationDistance_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SeparationDistance_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_SeparationDistance_constr_1$layout() {
        return asn_PER_type_SeparationDistance_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SeparationDistance_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_SeparationDistance_constr_1() {
        return asn_PER_type_SeparationDistance_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SeparationDistance_constr_1
     * }
     */
    public static void asn_PER_type_SeparationDistance_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_SeparationDistance_constr_1$constants.SEGMENT, 0L, asn_PER_type_SeparationDistance_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_SeparationDistance$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SeparationDistance").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SeparationDistance
     * }
     */
    public static GroupLayout asn_DEF_SeparationDistance$layout() {
        return asn_DEF_SeparationDistance$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SeparationDistance
     * }
     */
    public static MemorySegment asn_DEF_SeparationDistance() {
        return asn_DEF_SeparationDistance$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SeparationDistance
     * }
     */
    public static void asn_DEF_SeparationDistance(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SeparationDistance$constants.SEGMENT, 0L, asn_DEF_SeparationDistance$constants.LAYOUT.byteSize());
    }

    private static class SeparationDistance_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SeparationDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor SeparationDistance_free$descriptor() {
        return SeparationDistance_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SeparationDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle SeparationDistance_free$handle() {
        return SeparationDistance_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SeparationDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment SeparationDistance_free$address() {
        return SeparationDistance_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SeparationDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void SeparationDistance_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = SeparationDistance_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SeparationDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_print$descriptor() {
        return SeparationDistance_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SeparationDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_print$handle() {
        return SeparationDistance_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SeparationDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_print$address() {
        return SeparationDistance_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SeparationDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int SeparationDistance_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SeparationDistance_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SeparationDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_constraint$descriptor() {
        return SeparationDistance_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SeparationDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_constraint$handle() {
        return SeparationDistance_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SeparationDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_constraint$address() {
        return SeparationDistance_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SeparationDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int SeparationDistance_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SeparationDistance_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor SeparationDistance_decode_ber$descriptor() {
        return SeparationDistance_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle SeparationDistance_decode_ber$handle() {
        return SeparationDistance_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SeparationDistance_decode_ber$address() {
        return SeparationDistance_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SeparationDistance_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = SeparationDistance_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_der$descriptor() {
        return SeparationDistance_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_der$handle() {
        return SeparationDistance_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_der$address() {
        return SeparationDistance_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SeparationDistance_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SeparationDistance_decode_xer$descriptor() {
        return SeparationDistance_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle SeparationDistance_decode_xer$handle() {
        return SeparationDistance_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SeparationDistance_decode_xer$address() {
        return SeparationDistance_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SeparationDistance_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SeparationDistance_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_xer$descriptor() {
        return SeparationDistance_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_xer$handle() {
        return SeparationDistance_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_xer$address() {
        return SeparationDistance_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SeparationDistance_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_jer$descriptor() {
        return SeparationDistance_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_jer$handle() {
        return SeparationDistance_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_jer$address() {
        return SeparationDistance_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = SeparationDistance_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SeparationDistance_decode_oer$descriptor() {
        return SeparationDistance_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle SeparationDistance_decode_oer$handle() {
        return SeparationDistance_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SeparationDistance_decode_oer$address() {
        return SeparationDistance_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SeparationDistance_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SeparationDistance_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_oer$descriptor() {
        return SeparationDistance_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_oer$handle() {
        return SeparationDistance_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_oer$address() {
        return SeparationDistance_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SeparationDistance_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_decode_uper$descriptor() {
        return SeparationDistance_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SeparationDistance_decode_uper$handle() {
        return SeparationDistance_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SeparationDistance_decode_uper$address() {
        return SeparationDistance_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SeparationDistance_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SeparationDistance_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_uper$descriptor() {
        return SeparationDistance_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_uper$handle() {
        return SeparationDistance_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_uper$address() {
        return SeparationDistance_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SeparationDistance_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_decode_aper$descriptor() {
        return SeparationDistance_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SeparationDistance_decode_aper$handle() {
        return SeparationDistance_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SeparationDistance_decode_aper$address() {
        return SeparationDistance_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SeparationDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SeparationDistance_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SeparationDistance_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SeparationDistance_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SeparationDistance_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SeparationDistance_encode_aper$descriptor() {
        return SeparationDistance_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SeparationDistance_encode_aper$handle() {
        return SeparationDistance_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_aper$address() {
        return SeparationDistance_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SeparationDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SeparationDistance_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SeparationDistance_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SeparationDistance_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t FrontCutIn_t
     * }
     */
    public static final OfInt FrontCutIn_t = MessageFrame_h.C_INT;

    private static class asn_DEF_FrontCutIn$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_FrontCutIn").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FrontCutIn
     * }
     */
    public static GroupLayout asn_DEF_FrontCutIn$layout() {
        return asn_DEF_FrontCutIn$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FrontCutIn
     * }
     */
    public static MemorySegment asn_DEF_FrontCutIn() {
        return asn_DEF_FrontCutIn$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FrontCutIn
     * }
     */
    public static void asn_DEF_FrontCutIn(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_FrontCutIn$constants.SEGMENT, 0L, asn_DEF_FrontCutIn$constants.LAYOUT.byteSize());
    }

    private static class FrontCutIn_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FrontCutIn_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor FrontCutIn_free$descriptor() {
        return FrontCutIn_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FrontCutIn_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle FrontCutIn_free$handle() {
        return FrontCutIn_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FrontCutIn_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment FrontCutIn_free$address() {
        return FrontCutIn_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FrontCutIn_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void FrontCutIn_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = FrontCutIn_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int FrontCutIn_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_print$descriptor() {
        return FrontCutIn_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int FrontCutIn_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_print$handle() {
        return FrontCutIn_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int FrontCutIn_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_print$address() {
        return FrontCutIn_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int FrontCutIn_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int FrontCutIn_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FrontCutIn_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int FrontCutIn_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_constraint$descriptor() {
        return FrontCutIn_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int FrontCutIn_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_constraint$handle() {
        return FrontCutIn_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int FrontCutIn_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_constraint$address() {
        return FrontCutIn_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int FrontCutIn_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int FrontCutIn_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FrontCutIn_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor FrontCutIn_decode_ber$descriptor() {
        return FrontCutIn_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle FrontCutIn_decode_ber$handle() {
        return FrontCutIn_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment FrontCutIn_decode_ber$address() {
        return FrontCutIn_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment FrontCutIn_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = FrontCutIn_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_der$descriptor() {
        return FrontCutIn_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_der$handle() {
        return FrontCutIn_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_der$address() {
        return FrontCutIn_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = FrontCutIn_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor FrontCutIn_decode_xer$descriptor() {
        return FrontCutIn_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle FrontCutIn_decode_xer$handle() {
        return FrontCutIn_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment FrontCutIn_decode_xer$address() {
        return FrontCutIn_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment FrontCutIn_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = FrontCutIn_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_xer$descriptor() {
        return FrontCutIn_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_xer$handle() {
        return FrontCutIn_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_xer$address() {
        return FrontCutIn_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = FrontCutIn_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_jer$descriptor() {
        return FrontCutIn_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_jer$handle() {
        return FrontCutIn_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_jer$address() {
        return FrontCutIn_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = FrontCutIn_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor FrontCutIn_decode_oer$descriptor() {
        return FrontCutIn_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle FrontCutIn_decode_oer$handle() {
        return FrontCutIn_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment FrontCutIn_decode_oer$address() {
        return FrontCutIn_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment FrontCutIn_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = FrontCutIn_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_oer$descriptor() {
        return FrontCutIn_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_oer$handle() {
        return FrontCutIn_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_oer$address() {
        return FrontCutIn_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FrontCutIn_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_decode_uper$descriptor() {
        return FrontCutIn_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle FrontCutIn_decode_uper$handle() {
        return FrontCutIn_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FrontCutIn_decode_uper$address() {
        return FrontCutIn_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FrontCutIn_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FrontCutIn_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_uper$descriptor() {
        return FrontCutIn_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_uper$handle() {
        return FrontCutIn_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_uper$address() {
        return FrontCutIn_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FrontCutIn_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_decode_aper$descriptor() {
        return FrontCutIn_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle FrontCutIn_decode_aper$handle() {
        return FrontCutIn_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FrontCutIn_decode_aper$address() {
        return FrontCutIn_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FrontCutIn_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FrontCutIn_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FrontCutIn_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FrontCutIn_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FrontCutIn_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor FrontCutIn_encode_aper$descriptor() {
        return FrontCutIn_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle FrontCutIn_encode_aper$handle() {
        return FrontCutIn_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_aper$address() {
        return FrontCutIn_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FrontCutIn_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FrontCutIn_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FrontCutIn_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FrontCutIn_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_LightVehicleCCMExtensions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_LightVehicleCCMExtensions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LightVehicleCCMExtensions
     * }
     */
    public static GroupLayout asn_DEF_LightVehicleCCMExtensions$layout() {
        return asn_DEF_LightVehicleCCMExtensions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LightVehicleCCMExtensions
     * }
     */
    public static MemorySegment asn_DEF_LightVehicleCCMExtensions() {
        return asn_DEF_LightVehicleCCMExtensions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_LightVehicleCCMExtensions
     * }
     */
    public static void asn_DEF_LightVehicleCCMExtensions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_LightVehicleCCMExtensions$constants.SEGMENT, 0L, asn_DEF_LightVehicleCCMExtensions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_LightVehicleCCMExtensions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_LightVehicleCCMExtensions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LightVehicleCCMExtensions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_LightVehicleCCMExtensions_specs_1$layout() {
        return asn_SPC_LightVehicleCCMExtensions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LightVehicleCCMExtensions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_LightVehicleCCMExtensions_specs_1() {
        return asn_SPC_LightVehicleCCMExtensions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_LightVehicleCCMExtensions_specs_1
     * }
     */
    public static void asn_SPC_LightVehicleCCMExtensions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_LightVehicleCCMExtensions_specs_1$constants.SEGMENT, 0L, asn_SPC_LightVehicleCCMExtensions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_LightVehicleCCMExtensions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_LightVehicleCCMExtensions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_LightVehicleCCMExtensions_1$layout() {
        return asn_MBR_LightVehicleCCMExtensions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static long[] asn_MBR_LightVehicleCCMExtensions_1$dimensions() {
        return asn_MBR_LightVehicleCCMExtensions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static MemorySegment asn_MBR_LightVehicleCCMExtensions_1() {
        return asn_MBR_LightVehicleCCMExtensions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static void asn_MBR_LightVehicleCCMExtensions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_LightVehicleCCMExtensions_1$constants.SEGMENT, 0L, asn_MBR_LightVehicleCCMExtensions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static MemorySegment asn_MBR_LightVehicleCCMExtensions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_LightVehicleCCMExtensions_1$constants.HANDLE.invokeExact(asn_MBR_LightVehicleCCMExtensions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_LightVehicleCCMExtensions_1[6]
     * }
     */
    public static void asn_MBR_LightVehicleCCMExtensions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_LightVehicleCCMExtensions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long TimeConstant_t
     * }
     */
    public static final OfLong TimeConstant_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TimeConstant_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TimeConstant_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeConstant_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TimeConstant_constr_1$layout() {
        return asn_PER_type_TimeConstant_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeConstant_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TimeConstant_constr_1() {
        return asn_PER_type_TimeConstant_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeConstant_constr_1
     * }
     */
    public static void asn_PER_type_TimeConstant_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TimeConstant_constr_1$constants.SEGMENT, 0L, asn_PER_type_TimeConstant_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TimeConstant$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TimeConstant").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeConstant
     * }
     */
    public static GroupLayout asn_DEF_TimeConstant$layout() {
        return asn_DEF_TimeConstant$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeConstant
     * }
     */
    public static MemorySegment asn_DEF_TimeConstant() {
        return asn_DEF_TimeConstant$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeConstant
     * }
     */
    public static void asn_DEF_TimeConstant(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TimeConstant$constants.SEGMENT, 0L, asn_DEF_TimeConstant$constants.LAYOUT.byteSize());
    }

    private static class TimeConstant_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TimeConstant_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TimeConstant_free$descriptor() {
        return TimeConstant_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TimeConstant_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TimeConstant_free$handle() {
        return TimeConstant_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TimeConstant_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TimeConstant_free$address() {
        return TimeConstant_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TimeConstant_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TimeConstant_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TimeConstant_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeConstant_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_print$descriptor() {
        return TimeConstant_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeConstant_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_print$handle() {
        return TimeConstant_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeConstant_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_print$address() {
        return TimeConstant_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeConstant_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TimeConstant_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeConstant_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeConstant_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_constraint$descriptor() {
        return TimeConstant_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeConstant_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_constraint$handle() {
        return TimeConstant_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeConstant_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_constraint$address() {
        return TimeConstant_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeConstant_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TimeConstant_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeConstant_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TimeConstant_decode_ber$descriptor() {
        return TimeConstant_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TimeConstant_decode_ber$handle() {
        return TimeConstant_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeConstant_decode_ber$address() {
        return TimeConstant_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeConstant_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TimeConstant_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_der$descriptor() {
        return TimeConstant_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_encode_der$handle() {
        return TimeConstant_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_der$address() {
        return TimeConstant_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeConstant_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeConstant_decode_xer$descriptor() {
        return TimeConstant_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TimeConstant_decode_xer$handle() {
        return TimeConstant_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeConstant_decode_xer$address() {
        return TimeConstant_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeConstant_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeConstant_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_xer$descriptor() {
        return TimeConstant_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_encode_xer$handle() {
        return TimeConstant_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_xer$address() {
        return TimeConstant_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeConstant_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_jer$descriptor() {
        return TimeConstant_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_encode_jer$handle() {
        return TimeConstant_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_jer$address() {
        return TimeConstant_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TimeConstant_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeConstant_decode_oer$descriptor() {
        return TimeConstant_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TimeConstant_decode_oer$handle() {
        return TimeConstant_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeConstant_decode_oer$address() {
        return TimeConstant_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeConstant_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeConstant_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_oer$descriptor() {
        return TimeConstant_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeConstant_encode_oer$handle() {
        return TimeConstant_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_oer$address() {
        return TimeConstant_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeConstant_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeConstant_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeConstant_decode_uper$descriptor() {
        return TimeConstant_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeConstant_decode_uper$handle() {
        return TimeConstant_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeConstant_decode_uper$address() {
        return TimeConstant_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeConstant_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeConstant_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_uper$descriptor() {
        return TimeConstant_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeConstant_encode_uper$handle() {
        return TimeConstant_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeConstant_encode_uper$address() {
        return TimeConstant_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeConstant_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeConstant_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeConstant_decode_aper$descriptor() {
        return TimeConstant_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeConstant_decode_aper$handle() {
        return TimeConstant_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeConstant_decode_aper$address() {
        return TimeConstant_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeConstant_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeConstant_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeConstant_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeConstant_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeConstant_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeConstant_encode_aper$descriptor() {
        return TimeConstant_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeConstant_encode_aper$handle() {
        return TimeConstant_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeConstant_encode_aper$address() {
        return TimeConstant_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeConstant_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeConstant_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeConstant_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeConstant_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_AccelTimeConstant$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AccelTimeConstant").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AccelTimeConstant
     * }
     */
    public static GroupLayout asn_DEF_AccelTimeConstant$layout() {
        return asn_DEF_AccelTimeConstant$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AccelTimeConstant
     * }
     */
    public static MemorySegment asn_DEF_AccelTimeConstant() {
        return asn_DEF_AccelTimeConstant$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AccelTimeConstant
     * }
     */
    public static void asn_DEF_AccelTimeConstant(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AccelTimeConstant$constants.SEGMENT, 0L, asn_DEF_AccelTimeConstant$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AccelTimeConstant_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AccelTimeConstant_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AccelTimeConstant_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AccelTimeConstant_specs_1$layout() {
        return asn_SPC_AccelTimeConstant_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AccelTimeConstant_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AccelTimeConstant_specs_1() {
        return asn_SPC_AccelTimeConstant_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AccelTimeConstant_specs_1
     * }
     */
    public static void asn_SPC_AccelTimeConstant_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AccelTimeConstant_specs_1$constants.SEGMENT, 0L, asn_SPC_AccelTimeConstant_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AccelTimeConstant_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AccelTimeConstant_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_AccelTimeConstant_1$layout() {
        return asn_MBR_AccelTimeConstant_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static long[] asn_MBR_AccelTimeConstant_1$dimensions() {
        return asn_MBR_AccelTimeConstant_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AccelTimeConstant_1() {
        return asn_MBR_AccelTimeConstant_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static void asn_MBR_AccelTimeConstant_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AccelTimeConstant_1$constants.SEGMENT, 0L, asn_MBR_AccelTimeConstant_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static MemorySegment asn_MBR_AccelTimeConstant_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AccelTimeConstant_1$constants.HANDLE.invokeExact(asn_MBR_AccelTimeConstant_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AccelTimeConstant_1[2]
     * }
     */
    public static void asn_MBR_AccelTimeConstant_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AccelTimeConstant_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long RoadGrade_t
     * }
     */
    public static final OfLong RoadGrade_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_RoadGrade_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RoadGrade_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadGrade_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RoadGrade_constr_1$layout() {
        return asn_PER_type_RoadGrade_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadGrade_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RoadGrade_constr_1() {
        return asn_PER_type_RoadGrade_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadGrade_constr_1
     * }
     */
    public static void asn_PER_type_RoadGrade_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RoadGrade_constr_1$constants.SEGMENT, 0L, asn_PER_type_RoadGrade_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RoadGrade$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RoadGrade").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadGrade
     * }
     */
    public static GroupLayout asn_DEF_RoadGrade$layout() {
        return asn_DEF_RoadGrade$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadGrade
     * }
     */
    public static MemorySegment asn_DEF_RoadGrade() {
        return asn_DEF_RoadGrade$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadGrade
     * }
     */
    public static void asn_DEF_RoadGrade(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RoadGrade$constants.SEGMENT, 0L, asn_DEF_RoadGrade$constants.LAYOUT.byteSize());
    }

    private static class RoadGrade_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RoadGrade_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor RoadGrade_free$descriptor() {
        return RoadGrade_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RoadGrade_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle RoadGrade_free$handle() {
        return RoadGrade_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RoadGrade_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment RoadGrade_free$address() {
        return RoadGrade_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RoadGrade_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void RoadGrade_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = RoadGrade_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RoadGrade_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_print$descriptor() {
        return RoadGrade_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RoadGrade_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_print$handle() {
        return RoadGrade_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RoadGrade_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_print$address() {
        return RoadGrade_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RoadGrade_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int RoadGrade_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RoadGrade_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RoadGrade_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_constraint$descriptor() {
        return RoadGrade_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RoadGrade_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_constraint$handle() {
        return RoadGrade_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RoadGrade_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_constraint$address() {
        return RoadGrade_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RoadGrade_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int RoadGrade_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RoadGrade_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor RoadGrade_decode_ber$descriptor() {
        return RoadGrade_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle RoadGrade_decode_ber$handle() {
        return RoadGrade_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RoadGrade_decode_ber$address() {
        return RoadGrade_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RoadGrade_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = RoadGrade_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_der$descriptor() {
        return RoadGrade_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_encode_der$handle() {
        return RoadGrade_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_der$address() {
        return RoadGrade_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RoadGrade_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RoadGrade_decode_xer$descriptor() {
        return RoadGrade_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle RoadGrade_decode_xer$handle() {
        return RoadGrade_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RoadGrade_decode_xer$address() {
        return RoadGrade_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RoadGrade_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RoadGrade_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_xer$descriptor() {
        return RoadGrade_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_encode_xer$handle() {
        return RoadGrade_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_xer$address() {
        return RoadGrade_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RoadGrade_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_jer$descriptor() {
        return RoadGrade_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_encode_jer$handle() {
        return RoadGrade_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_jer$address() {
        return RoadGrade_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = RoadGrade_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RoadGrade_decode_oer$descriptor() {
        return RoadGrade_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle RoadGrade_decode_oer$handle() {
        return RoadGrade_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RoadGrade_decode_oer$address() {
        return RoadGrade_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RoadGrade_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RoadGrade_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_oer$descriptor() {
        return RoadGrade_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RoadGrade_encode_oer$handle() {
        return RoadGrade_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_oer$address() {
        return RoadGrade_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RoadGrade_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RoadGrade_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RoadGrade_decode_uper$descriptor() {
        return RoadGrade_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RoadGrade_decode_uper$handle() {
        return RoadGrade_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RoadGrade_decode_uper$address() {
        return RoadGrade_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RoadGrade_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RoadGrade_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_uper$descriptor() {
        return RoadGrade_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RoadGrade_encode_uper$handle() {
        return RoadGrade_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RoadGrade_encode_uper$address() {
        return RoadGrade_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RoadGrade_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RoadGrade_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RoadGrade_decode_aper$descriptor() {
        return RoadGrade_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RoadGrade_decode_aper$handle() {
        return RoadGrade_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RoadGrade_decode_aper$address() {
        return RoadGrade_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RoadGrade_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RoadGrade_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RoadGrade_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RoadGrade_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RoadGrade_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RoadGrade_encode_aper$descriptor() {
        return RoadGrade_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RoadGrade_encode_aper$handle() {
        return RoadGrade_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RoadGrade_encode_aper$address() {
        return RoadGrade_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RoadGrade_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RoadGrade_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RoadGrade_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoadGrade_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long BrakePedalPosition_t
     * }
     */
    public static final OfLong BrakePedalPosition_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_BrakePedalPosition_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_BrakePedalPosition_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BrakePedalPosition_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_BrakePedalPosition_constr_1$layout() {
        return asn_PER_type_BrakePedalPosition_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BrakePedalPosition_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_BrakePedalPosition_constr_1() {
        return asn_PER_type_BrakePedalPosition_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BrakePedalPosition_constr_1
     * }
     */
    public static void asn_PER_type_BrakePedalPosition_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_BrakePedalPosition_constr_1$constants.SEGMENT, 0L, asn_PER_type_BrakePedalPosition_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_BrakePedalPosition$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BrakePedalPosition").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BrakePedalPosition
     * }
     */
    public static GroupLayout asn_DEF_BrakePedalPosition$layout() {
        return asn_DEF_BrakePedalPosition$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BrakePedalPosition
     * }
     */
    public static MemorySegment asn_DEF_BrakePedalPosition() {
        return asn_DEF_BrakePedalPosition$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BrakePedalPosition
     * }
     */
    public static void asn_DEF_BrakePedalPosition(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BrakePedalPosition$constants.SEGMENT, 0L, asn_DEF_BrakePedalPosition$constants.LAYOUT.byteSize());
    }

    private static class BrakePedalPosition_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BrakePedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_free$descriptor() {
        return BrakePedalPosition_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BrakePedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle BrakePedalPosition_free$handle() {
        return BrakePedalPosition_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BrakePedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment BrakePedalPosition_free$address() {
        return BrakePedalPosition_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BrakePedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void BrakePedalPosition_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = BrakePedalPosition_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BrakePedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_print$descriptor() {
        return BrakePedalPosition_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BrakePedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_print$handle() {
        return BrakePedalPosition_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BrakePedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_print$address() {
        return BrakePedalPosition_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BrakePedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int BrakePedalPosition_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BrakePedalPosition_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BrakePedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_constraint$descriptor() {
        return BrakePedalPosition_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BrakePedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_constraint$handle() {
        return BrakePedalPosition_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BrakePedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_constraint$address() {
        return BrakePedalPosition_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BrakePedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int BrakePedalPosition_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BrakePedalPosition_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_decode_ber$descriptor() {
        return BrakePedalPosition_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle BrakePedalPosition_decode_ber$handle() {
        return BrakePedalPosition_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_ber$address() {
        return BrakePedalPosition_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = BrakePedalPosition_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_der$descriptor() {
        return BrakePedalPosition_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_der$handle() {
        return BrakePedalPosition_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_der$address() {
        return BrakePedalPosition_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BrakePedalPosition_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_decode_xer$descriptor() {
        return BrakePedalPosition_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle BrakePedalPosition_decode_xer$handle() {
        return BrakePedalPosition_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_xer$address() {
        return BrakePedalPosition_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BrakePedalPosition_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_xer$descriptor() {
        return BrakePedalPosition_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_xer$handle() {
        return BrakePedalPosition_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_xer$address() {
        return BrakePedalPosition_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BrakePedalPosition_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_jer$descriptor() {
        return BrakePedalPosition_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_jer$handle() {
        return BrakePedalPosition_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_jer$address() {
        return BrakePedalPosition_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = BrakePedalPosition_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_decode_oer$descriptor() {
        return BrakePedalPosition_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BrakePedalPosition_decode_oer$handle() {
        return BrakePedalPosition_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_oer$address() {
        return BrakePedalPosition_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BrakePedalPosition_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_oer$descriptor() {
        return BrakePedalPosition_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_oer$handle() {
        return BrakePedalPosition_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_oer$address() {
        return BrakePedalPosition_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BrakePedalPosition_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_decode_uper$descriptor() {
        return BrakePedalPosition_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BrakePedalPosition_decode_uper$handle() {
        return BrakePedalPosition_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_uper$address() {
        return BrakePedalPosition_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BrakePedalPosition_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_uper$descriptor() {
        return BrakePedalPosition_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_uper$handle() {
        return BrakePedalPosition_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_uper$address() {
        return BrakePedalPosition_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BrakePedalPosition_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_decode_aper$descriptor() {
        return BrakePedalPosition_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BrakePedalPosition_decode_aper$handle() {
        return BrakePedalPosition_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_aper$address() {
        return BrakePedalPosition_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BrakePedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BrakePedalPosition_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BrakePedalPosition_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BrakePedalPosition_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BrakePedalPosition_encode_aper$descriptor() {
        return BrakePedalPosition_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BrakePedalPosition_encode_aper$handle() {
        return BrakePedalPosition_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_aper$address() {
        return BrakePedalPosition_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BrakePedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BrakePedalPosition_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BrakePedalPosition_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BrakePedalPosition_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long AcceleratorPedalPosition_t
     * }
     */
    public static final OfLong AcceleratorPedalPosition_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_AcceleratorPedalPosition_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_AcceleratorPedalPosition_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AcceleratorPedalPosition_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_AcceleratorPedalPosition_constr_1$layout() {
        return asn_PER_type_AcceleratorPedalPosition_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AcceleratorPedalPosition_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_AcceleratorPedalPosition_constr_1() {
        return asn_PER_type_AcceleratorPedalPosition_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AcceleratorPedalPosition_constr_1
     * }
     */
    public static void asn_PER_type_AcceleratorPedalPosition_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_AcceleratorPedalPosition_constr_1$constants.SEGMENT, 0L, asn_PER_type_AcceleratorPedalPosition_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_AcceleratorPedalPosition$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AcceleratorPedalPosition").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AcceleratorPedalPosition
     * }
     */
    public static GroupLayout asn_DEF_AcceleratorPedalPosition$layout() {
        return asn_DEF_AcceleratorPedalPosition$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AcceleratorPedalPosition
     * }
     */
    public static MemorySegment asn_DEF_AcceleratorPedalPosition() {
        return asn_DEF_AcceleratorPedalPosition$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AcceleratorPedalPosition
     * }
     */
    public static void asn_DEF_AcceleratorPedalPosition(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AcceleratorPedalPosition$constants.SEGMENT, 0L, asn_DEF_AcceleratorPedalPosition$constants.LAYOUT.byteSize());
    }

    private static class AcceleratorPedalPosition_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AcceleratorPedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_free$descriptor() {
        return AcceleratorPedalPosition_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AcceleratorPedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_free$handle() {
        return AcceleratorPedalPosition_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AcceleratorPedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_free$address() {
        return AcceleratorPedalPosition_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AcceleratorPedalPosition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void AcceleratorPedalPosition_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = AcceleratorPedalPosition_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_print$descriptor() {
        return AcceleratorPedalPosition_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_print$handle() {
        return AcceleratorPedalPosition_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_print$address() {
        return AcceleratorPedalPosition_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int AcceleratorPedalPosition_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AcceleratorPedalPosition_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_constraint$descriptor() {
        return AcceleratorPedalPosition_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_constraint$handle() {
        return AcceleratorPedalPosition_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_constraint$address() {
        return AcceleratorPedalPosition_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AcceleratorPedalPosition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int AcceleratorPedalPosition_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AcceleratorPedalPosition_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_decode_ber$descriptor() {
        return AcceleratorPedalPosition_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_decode_ber$handle() {
        return AcceleratorPedalPosition_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_ber$address() {
        return AcceleratorPedalPosition_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = AcceleratorPedalPosition_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_der$descriptor() {
        return AcceleratorPedalPosition_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_der$handle() {
        return AcceleratorPedalPosition_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_der$address() {
        return AcceleratorPedalPosition_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AcceleratorPedalPosition_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_decode_xer$descriptor() {
        return AcceleratorPedalPosition_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_decode_xer$handle() {
        return AcceleratorPedalPosition_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_xer$address() {
        return AcceleratorPedalPosition_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AcceleratorPedalPosition_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_xer$descriptor() {
        return AcceleratorPedalPosition_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_xer$handle() {
        return AcceleratorPedalPosition_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_xer$address() {
        return AcceleratorPedalPosition_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AcceleratorPedalPosition_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_jer$descriptor() {
        return AcceleratorPedalPosition_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_jer$handle() {
        return AcceleratorPedalPosition_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_jer$address() {
        return AcceleratorPedalPosition_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = AcceleratorPedalPosition_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_decode_oer$descriptor() {
        return AcceleratorPedalPosition_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_decode_oer$handle() {
        return AcceleratorPedalPosition_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_oer$address() {
        return AcceleratorPedalPosition_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AcceleratorPedalPosition_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_oer$descriptor() {
        return AcceleratorPedalPosition_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_oer$handle() {
        return AcceleratorPedalPosition_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_oer$address() {
        return AcceleratorPedalPosition_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AcceleratorPedalPosition_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_decode_uper$descriptor() {
        return AcceleratorPedalPosition_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_decode_uper$handle() {
        return AcceleratorPedalPosition_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_uper$address() {
        return AcceleratorPedalPosition_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AcceleratorPedalPosition_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_uper$descriptor() {
        return AcceleratorPedalPosition_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_uper$handle() {
        return AcceleratorPedalPosition_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_uper$address() {
        return AcceleratorPedalPosition_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AcceleratorPedalPosition_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_decode_aper$descriptor() {
        return AcceleratorPedalPosition_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_decode_aper$handle() {
        return AcceleratorPedalPosition_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_aper$address() {
        return AcceleratorPedalPosition_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AcceleratorPedalPosition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AcceleratorPedalPosition_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceleratorPedalPosition_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AcceleratorPedalPosition_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AcceleratorPedalPosition_encode_aper$descriptor() {
        return AcceleratorPedalPosition_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AcceleratorPedalPosition_encode_aper$handle() {
        return AcceleratorPedalPosition_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_aper$address() {
        return AcceleratorPedalPosition_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AcceleratorPedalPosition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AcceleratorPedalPosition_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AcceleratorPedalPosition_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceleratorPedalPosition_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long Torque_t
     * }
     */
    public static final OfLong Torque_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Torque_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Torque_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Torque_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Torque_constr_1$layout() {
        return asn_PER_type_Torque_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Torque_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Torque_constr_1() {
        return asn_PER_type_Torque_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Torque_constr_1
     * }
     */
    public static void asn_PER_type_Torque_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Torque_constr_1$constants.SEGMENT, 0L, asn_PER_type_Torque_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Torque$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Torque").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Torque
     * }
     */
    public static GroupLayout asn_DEF_Torque$layout() {
        return asn_DEF_Torque$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Torque
     * }
     */
    public static MemorySegment asn_DEF_Torque() {
        return asn_DEF_Torque$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Torque
     * }
     */
    public static void asn_DEF_Torque(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Torque$constants.SEGMENT, 0L, asn_DEF_Torque$constants.LAYOUT.byteSize());
    }

    private static class Torque_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Torque_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Torque_free$descriptor() {
        return Torque_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Torque_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Torque_free$handle() {
        return Torque_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Torque_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Torque_free$address() {
        return Torque_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Torque_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Torque_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Torque_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Torque_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_print$descriptor() {
        return Torque_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Torque_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Torque_print$handle() {
        return Torque_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Torque_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_print$address() {
        return Torque_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Torque_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Torque_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Torque_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Torque_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_constraint$descriptor() {
        return Torque_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Torque_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Torque_constraint$handle() {
        return Torque_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Torque_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Torque_constraint$address() {
        return Torque_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Torque_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Torque_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Torque_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Torque_decode_ber$descriptor() {
        return Torque_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Torque_decode_ber$handle() {
        return Torque_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Torque_decode_ber$address() {
        return Torque_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Torque_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Torque_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_encode_der$descriptor() {
        return Torque_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Torque_encode_der$handle() {
        return Torque_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_der$address() {
        return Torque_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Torque_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Torque_decode_xer$descriptor() {
        return Torque_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Torque_decode_xer$handle() {
        return Torque_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Torque_decode_xer$address() {
        return Torque_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Torque_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Torque_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_encode_xer$descriptor() {
        return Torque_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Torque_encode_xer$handle() {
        return Torque_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_xer$address() {
        return Torque_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Torque_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_encode_jer$descriptor() {
        return Torque_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Torque_encode_jer$handle() {
        return Torque_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_jer$address() {
        return Torque_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Torque_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Torque_decode_oer$descriptor() {
        return Torque_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Torque_decode_oer$handle() {
        return Torque_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Torque_decode_oer$address() {
        return Torque_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Torque_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Torque_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Torque_encode_oer$descriptor() {
        return Torque_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Torque_encode_oer$handle() {
        return Torque_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_oer$address() {
        return Torque_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Torque_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Torque_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Torque_decode_uper$descriptor() {
        return Torque_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Torque_decode_uper$handle() {
        return Torque_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Torque_decode_uper$address() {
        return Torque_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Torque_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Torque_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Torque_encode_uper$descriptor() {
        return Torque_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Torque_encode_uper$handle() {
        return Torque_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Torque_encode_uper$address() {
        return Torque_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Torque_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Torque_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Torque_decode_aper$descriptor() {
        return Torque_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Torque_decode_aper$handle() {
        return Torque_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Torque_decode_aper$address() {
        return Torque_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Torque_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Torque_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Torque_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Torque_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Torque_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Torque_encode_aper$descriptor() {
        return Torque_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Torque_encode_aper$handle() {
        return Torque_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Torque_encode_aper$address() {
        return Torque_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Torque_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Torque_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Torque_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Torque_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TotalMass_t
     * }
     */
    public static final OfLong TotalMass_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TotalMass_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TotalMass_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TotalMass_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TotalMass_constr_1$layout() {
        return asn_PER_type_TotalMass_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TotalMass_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TotalMass_constr_1() {
        return asn_PER_type_TotalMass_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TotalMass_constr_1
     * }
     */
    public static void asn_PER_type_TotalMass_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TotalMass_constr_1$constants.SEGMENT, 0L, asn_PER_type_TotalMass_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TotalMass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TotalMass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalMass
     * }
     */
    public static GroupLayout asn_DEF_TotalMass$layout() {
        return asn_DEF_TotalMass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalMass
     * }
     */
    public static MemorySegment asn_DEF_TotalMass() {
        return asn_DEF_TotalMass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TotalMass
     * }
     */
    public static void asn_DEF_TotalMass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TotalMass$constants.SEGMENT, 0L, asn_DEF_TotalMass$constants.LAYOUT.byteSize());
    }

    private static class TotalMass_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TotalMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TotalMass_free$descriptor() {
        return TotalMass_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TotalMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TotalMass_free$handle() {
        return TotalMass_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TotalMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TotalMass_free$address() {
        return TotalMass_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TotalMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TotalMass_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TotalMass_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TotalMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_print$descriptor() {
        return TotalMass_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TotalMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_print$handle() {
        return TotalMass_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TotalMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_print$address() {
        return TotalMass_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TotalMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TotalMass_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TotalMass_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TotalMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_constraint$descriptor() {
        return TotalMass_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TotalMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_constraint$handle() {
        return TotalMass_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TotalMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_constraint$address() {
        return TotalMass_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TotalMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TotalMass_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TotalMass_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TotalMass_decode_ber$descriptor() {
        return TotalMass_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TotalMass_decode_ber$handle() {
        return TotalMass_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TotalMass_decode_ber$address() {
        return TotalMass_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TotalMass_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TotalMass_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_der$descriptor() {
        return TotalMass_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_encode_der$handle() {
        return TotalMass_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_der$address() {
        return TotalMass_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TotalMass_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TotalMass_decode_xer$descriptor() {
        return TotalMass_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TotalMass_decode_xer$handle() {
        return TotalMass_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TotalMass_decode_xer$address() {
        return TotalMass_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TotalMass_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TotalMass_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_xer$descriptor() {
        return TotalMass_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_encode_xer$handle() {
        return TotalMass_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_xer$address() {
        return TotalMass_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TotalMass_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_jer$descriptor() {
        return TotalMass_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_encode_jer$handle() {
        return TotalMass_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_jer$address() {
        return TotalMass_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TotalMass_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TotalMass_decode_oer$descriptor() {
        return TotalMass_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TotalMass_decode_oer$handle() {
        return TotalMass_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TotalMass_decode_oer$address() {
        return TotalMass_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TotalMass_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TotalMass_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_oer$descriptor() {
        return TotalMass_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TotalMass_encode_oer$handle() {
        return TotalMass_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_oer$address() {
        return TotalMass_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TotalMass_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TotalMass_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TotalMass_decode_uper$descriptor() {
        return TotalMass_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TotalMass_decode_uper$handle() {
        return TotalMass_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TotalMass_decode_uper$address() {
        return TotalMass_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TotalMass_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TotalMass_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_uper$descriptor() {
        return TotalMass_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TotalMass_encode_uper$handle() {
        return TotalMass_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TotalMass_encode_uper$address() {
        return TotalMass_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TotalMass_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TotalMass_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TotalMass_decode_aper$descriptor() {
        return TotalMass_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TotalMass_decode_aper$handle() {
        return TotalMass_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TotalMass_decode_aper$address() {
        return TotalMass_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TotalMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TotalMass_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TotalMass_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TotalMass_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TotalMass_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TotalMass_encode_aper$descriptor() {
        return TotalMass_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TotalMass_encode_aper$handle() {
        return TotalMass_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TotalMass_encode_aper$address() {
        return TotalMass_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TotalMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TotalMass_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TotalMass_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TotalMass_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long MaxAvailableAcceleration_t
     * }
     */
    public static final OfLong MaxAvailableAcceleration_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_MaxAvailableAcceleration_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_MaxAvailableAcceleration_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableAcceleration_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_MaxAvailableAcceleration_constr_1$layout() {
        return asn_PER_type_MaxAvailableAcceleration_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableAcceleration_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_MaxAvailableAcceleration_constr_1() {
        return asn_PER_type_MaxAvailableAcceleration_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableAcceleration_constr_1
     * }
     */
    public static void asn_PER_type_MaxAvailableAcceleration_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_MaxAvailableAcceleration_constr_1$constants.SEGMENT, 0L, asn_PER_type_MaxAvailableAcceleration_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_MaxAvailableAcceleration$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_MaxAvailableAcceleration").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableAcceleration
     * }
     */
    public static GroupLayout asn_DEF_MaxAvailableAcceleration$layout() {
        return asn_DEF_MaxAvailableAcceleration$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableAcceleration
     * }
     */
    public static MemorySegment asn_DEF_MaxAvailableAcceleration() {
        return asn_DEF_MaxAvailableAcceleration$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableAcceleration
     * }
     */
    public static void asn_DEF_MaxAvailableAcceleration(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_MaxAvailableAcceleration$constants.SEGMENT, 0L, asn_DEF_MaxAvailableAcceleration$constants.LAYOUT.byteSize());
    }

    private static class MaxAvailableAcceleration_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void MaxAvailableAcceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_free$descriptor() {
        return MaxAvailableAcceleration_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void MaxAvailableAcceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_free$handle() {
        return MaxAvailableAcceleration_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void MaxAvailableAcceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_free$address() {
        return MaxAvailableAcceleration_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void MaxAvailableAcceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void MaxAvailableAcceleration_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MaxAvailableAcceleration_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_print$descriptor() {
        return MaxAvailableAcceleration_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_print$handle() {
        return MaxAvailableAcceleration_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_print$address() {
        return MaxAvailableAcceleration_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int MaxAvailableAcceleration_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableAcceleration_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_constraint$descriptor() {
        return MaxAvailableAcceleration_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_constraint$handle() {
        return MaxAvailableAcceleration_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_constraint$address() {
        return MaxAvailableAcceleration_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MaxAvailableAcceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int MaxAvailableAcceleration_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableAcceleration_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_decode_ber$descriptor() {
        return MaxAvailableAcceleration_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_decode_ber$handle() {
        return MaxAvailableAcceleration_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_ber$address() {
        return MaxAvailableAcceleration_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = MaxAvailableAcceleration_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_der$descriptor() {
        return MaxAvailableAcceleration_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_der$handle() {
        return MaxAvailableAcceleration_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_der$address() {
        return MaxAvailableAcceleration_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MaxAvailableAcceleration_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_decode_xer$descriptor() {
        return MaxAvailableAcceleration_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_decode_xer$handle() {
        return MaxAvailableAcceleration_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_xer$address() {
        return MaxAvailableAcceleration_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MaxAvailableAcceleration_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_xer$descriptor() {
        return MaxAvailableAcceleration_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_xer$handle() {
        return MaxAvailableAcceleration_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_xer$address() {
        return MaxAvailableAcceleration_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MaxAvailableAcceleration_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_jer$descriptor() {
        return MaxAvailableAcceleration_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_jer$handle() {
        return MaxAvailableAcceleration_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_jer$address() {
        return MaxAvailableAcceleration_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = MaxAvailableAcceleration_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_decode_oer$descriptor() {
        return MaxAvailableAcceleration_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_decode_oer$handle() {
        return MaxAvailableAcceleration_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_oer$address() {
        return MaxAvailableAcceleration_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MaxAvailableAcceleration_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_oer$descriptor() {
        return MaxAvailableAcceleration_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_oer$handle() {
        return MaxAvailableAcceleration_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_oer$address() {
        return MaxAvailableAcceleration_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableAcceleration_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_decode_uper$descriptor() {
        return MaxAvailableAcceleration_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_decode_uper$handle() {
        return MaxAvailableAcceleration_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_uper$address() {
        return MaxAvailableAcceleration_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableAcceleration_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_uper$descriptor() {
        return MaxAvailableAcceleration_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_uper$handle() {
        return MaxAvailableAcceleration_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_uper$address() {
        return MaxAvailableAcceleration_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableAcceleration_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_decode_aper$descriptor() {
        return MaxAvailableAcceleration_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_decode_aper$handle() {
        return MaxAvailableAcceleration_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_aper$address() {
        return MaxAvailableAcceleration_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableAcceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableAcceleration_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableAcceleration_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableAcceleration_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableAcceleration_encode_aper$descriptor() {
        return MaxAvailableAcceleration_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MaxAvailableAcceleration_encode_aper$handle() {
        return MaxAvailableAcceleration_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_aper$address() {
        return MaxAvailableAcceleration_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableAcceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableAcceleration_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableAcceleration_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableAcceleration_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long MaxAvailableDeceleration_t
     * }
     */
    public static final OfLong MaxAvailableDeceleration_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_MaxAvailableDeceleration_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_MaxAvailableDeceleration_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableDeceleration_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_MaxAvailableDeceleration_constr_1$layout() {
        return asn_PER_type_MaxAvailableDeceleration_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableDeceleration_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_MaxAvailableDeceleration_constr_1() {
        return asn_PER_type_MaxAvailableDeceleration_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MaxAvailableDeceleration_constr_1
     * }
     */
    public static void asn_PER_type_MaxAvailableDeceleration_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_MaxAvailableDeceleration_constr_1$constants.SEGMENT, 0L, asn_PER_type_MaxAvailableDeceleration_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_MaxAvailableDeceleration$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_MaxAvailableDeceleration").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableDeceleration
     * }
     */
    public static GroupLayout asn_DEF_MaxAvailableDeceleration$layout() {
        return asn_DEF_MaxAvailableDeceleration$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableDeceleration
     * }
     */
    public static MemorySegment asn_DEF_MaxAvailableDeceleration() {
        return asn_DEF_MaxAvailableDeceleration$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MaxAvailableDeceleration
     * }
     */
    public static void asn_DEF_MaxAvailableDeceleration(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_MaxAvailableDeceleration$constants.SEGMENT, 0L, asn_DEF_MaxAvailableDeceleration$constants.LAYOUT.byteSize());
    }

    private static class MaxAvailableDeceleration_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void MaxAvailableDeceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_free$descriptor() {
        return MaxAvailableDeceleration_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void MaxAvailableDeceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_free$handle() {
        return MaxAvailableDeceleration_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void MaxAvailableDeceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_free$address() {
        return MaxAvailableDeceleration_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void MaxAvailableDeceleration_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void MaxAvailableDeceleration_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MaxAvailableDeceleration_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_print$descriptor() {
        return MaxAvailableDeceleration_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_print$handle() {
        return MaxAvailableDeceleration_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_print$address() {
        return MaxAvailableDeceleration_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int MaxAvailableDeceleration_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableDeceleration_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_constraint$descriptor() {
        return MaxAvailableDeceleration_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_constraint$handle() {
        return MaxAvailableDeceleration_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_constraint$address() {
        return MaxAvailableDeceleration_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MaxAvailableDeceleration_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int MaxAvailableDeceleration_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableDeceleration_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_decode_ber$descriptor() {
        return MaxAvailableDeceleration_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_decode_ber$handle() {
        return MaxAvailableDeceleration_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_ber$address() {
        return MaxAvailableDeceleration_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = MaxAvailableDeceleration_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_der$descriptor() {
        return MaxAvailableDeceleration_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_der$handle() {
        return MaxAvailableDeceleration_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_der$address() {
        return MaxAvailableDeceleration_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MaxAvailableDeceleration_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_decode_xer$descriptor() {
        return MaxAvailableDeceleration_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_decode_xer$handle() {
        return MaxAvailableDeceleration_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_xer$address() {
        return MaxAvailableDeceleration_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MaxAvailableDeceleration_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_xer$descriptor() {
        return MaxAvailableDeceleration_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_xer$handle() {
        return MaxAvailableDeceleration_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_xer$address() {
        return MaxAvailableDeceleration_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MaxAvailableDeceleration_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_jer$descriptor() {
        return MaxAvailableDeceleration_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_jer$handle() {
        return MaxAvailableDeceleration_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_jer$address() {
        return MaxAvailableDeceleration_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = MaxAvailableDeceleration_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_decode_oer$descriptor() {
        return MaxAvailableDeceleration_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_decode_oer$handle() {
        return MaxAvailableDeceleration_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_oer$address() {
        return MaxAvailableDeceleration_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MaxAvailableDeceleration_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_oer$descriptor() {
        return MaxAvailableDeceleration_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_oer$handle() {
        return MaxAvailableDeceleration_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_oer$address() {
        return MaxAvailableDeceleration_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableDeceleration_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_decode_uper$descriptor() {
        return MaxAvailableDeceleration_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_decode_uper$handle() {
        return MaxAvailableDeceleration_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_uper$address() {
        return MaxAvailableDeceleration_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableDeceleration_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_uper$descriptor() {
        return MaxAvailableDeceleration_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_uper$handle() {
        return MaxAvailableDeceleration_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_uper$address() {
        return MaxAvailableDeceleration_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableDeceleration_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_decode_aper$descriptor() {
        return MaxAvailableDeceleration_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_decode_aper$handle() {
        return MaxAvailableDeceleration_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_aper$address() {
        return MaxAvailableDeceleration_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MaxAvailableDeceleration_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MaxAvailableDeceleration_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MaxAvailableDeceleration_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MaxAvailableDeceleration_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MaxAvailableDeceleration_encode_aper$descriptor() {
        return MaxAvailableDeceleration_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MaxAvailableDeceleration_encode_aper$handle() {
        return MaxAvailableDeceleration_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_aper$address() {
        return MaxAvailableDeceleration_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MaxAvailableDeceleration_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MaxAvailableDeceleration_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MaxAvailableDeceleration_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MaxAvailableDeceleration_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CCMFaultMode_unavailable = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_unavailable = 0
     * }
     */
    public static int CCMFaultMode_unavailable() {
        return CCMFaultMode_unavailable;
    }
    private static final int CCMFaultMode_commFault = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_commFault = 1
     * }
     */
    public static int CCMFaultMode_commFault() {
        return CCMFaultMode_commFault;
    }
    private static final int CCMFaultMode_radarFault = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_radarFault = 2
     * }
     */
    public static int CCMFaultMode_radarFault() {
        return CCMFaultMode_radarFault;
    }
    private static final int CCMFaultMode_lidarFault = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_lidarFault = 3
     * }
     */
    public static int CCMFaultMode_lidarFault() {
        return CCMFaultMode_lidarFault;
    }
    private static final int CCMFaultMode_engingBrkCtlFault = (int)4L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_engingBrkCtlFault = 4
     * }
     */
    public static int CCMFaultMode_engingBrkCtlFault() {
        return CCMFaultMode_engingBrkCtlFault;
    }
    private static final int CCMFaultMode_serviceBrkCtlFault = (int)5L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_serviceBrkCtlFault = 5
     * }
     */
    public static int CCMFaultMode_serviceBrkCtlFault() {
        return CCMFaultMode_serviceBrkCtlFault;
    }
    private static final int CCMFaultMode_transRetarderFault = (int)6L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_transRetarderFault = 6
     * }
     */
    public static int CCMFaultMode_transRetarderFault() {
        return CCMFaultMode_transRetarderFault;
    }
    private static final int CCMFaultMode_engineCtlFault = (int)7L;
    /**
     * {@snippet lang=c :
     * enum CCMFaultMode.CCMFaultMode_engineCtlFault = 7
     * }
     */
    public static int CCMFaultMode_engineCtlFault() {
        return CCMFaultMode_engineCtlFault;
    }

    private static class asn_PER_type_CCMFaultMode_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CCMFaultMode_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CCMFaultMode_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CCMFaultMode_constr_1$layout() {
        return asn_PER_type_CCMFaultMode_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CCMFaultMode_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CCMFaultMode_constr_1() {
        return asn_PER_type_CCMFaultMode_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CCMFaultMode_constr_1
     * }
     */
    public static void asn_PER_type_CCMFaultMode_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CCMFaultMode_constr_1$constants.SEGMENT, 0L, asn_PER_type_CCMFaultMode_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CCMFaultMode$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CCMFaultMode").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMFaultMode
     * }
     */
    public static GroupLayout asn_DEF_CCMFaultMode$layout() {
        return asn_DEF_CCMFaultMode$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMFaultMode
     * }
     */
    public static MemorySegment asn_DEF_CCMFaultMode() {
        return asn_DEF_CCMFaultMode$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMFaultMode
     * }
     */
    public static void asn_DEF_CCMFaultMode(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CCMFaultMode$constants.SEGMENT, 0L, asn_DEF_CCMFaultMode$constants.LAYOUT.byteSize());
    }

    private static class CCMFaultMode_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CCMFaultMode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_free$descriptor() {
        return CCMFaultMode_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CCMFaultMode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CCMFaultMode_free$handle() {
        return CCMFaultMode_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CCMFaultMode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CCMFaultMode_free$address() {
        return CCMFaultMode_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CCMFaultMode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CCMFaultMode_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CCMFaultMode_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CCMFaultMode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_print$descriptor() {
        return CCMFaultMode_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CCMFaultMode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_print$handle() {
        return CCMFaultMode_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CCMFaultMode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_print$address() {
        return CCMFaultMode_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CCMFaultMode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CCMFaultMode_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CCMFaultMode_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CCMFaultMode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_constraint$descriptor() {
        return CCMFaultMode_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CCMFaultMode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_constraint$handle() {
        return CCMFaultMode_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CCMFaultMode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_constraint$address() {
        return CCMFaultMode_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CCMFaultMode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CCMFaultMode_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CCMFaultMode_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_decode_ber$descriptor() {
        return CCMFaultMode_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CCMFaultMode_decode_ber$handle() {
        return CCMFaultMode_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_ber$address() {
        return CCMFaultMode_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CCMFaultMode_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_der$descriptor() {
        return CCMFaultMode_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_der$handle() {
        return CCMFaultMode_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_der$address() {
        return CCMFaultMode_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CCMFaultMode_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_decode_xer$descriptor() {
        return CCMFaultMode_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CCMFaultMode_decode_xer$handle() {
        return CCMFaultMode_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_xer$address() {
        return CCMFaultMode_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CCMFaultMode_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_xer$descriptor() {
        return CCMFaultMode_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_xer$handle() {
        return CCMFaultMode_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_xer$address() {
        return CCMFaultMode_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CCMFaultMode_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_jer$descriptor() {
        return CCMFaultMode_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_jer$handle() {
        return CCMFaultMode_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_jer$address() {
        return CCMFaultMode_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CCMFaultMode_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_decode_oer$descriptor() {
        return CCMFaultMode_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CCMFaultMode_decode_oer$handle() {
        return CCMFaultMode_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_oer$address() {
        return CCMFaultMode_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CCMFaultMode_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_oer$descriptor() {
        return CCMFaultMode_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_oer$handle() {
        return CCMFaultMode_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_oer$address() {
        return CCMFaultMode_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CCMFaultMode_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_decode_uper$descriptor() {
        return CCMFaultMode_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CCMFaultMode_decode_uper$handle() {
        return CCMFaultMode_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_uper$address() {
        return CCMFaultMode_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CCMFaultMode_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_uper$descriptor() {
        return CCMFaultMode_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_uper$handle() {
        return CCMFaultMode_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_uper$address() {
        return CCMFaultMode_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CCMFaultMode_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_decode_aper$descriptor() {
        return CCMFaultMode_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CCMFaultMode_decode_aper$handle() {
        return CCMFaultMode_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_aper$address() {
        return CCMFaultMode_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CCMFaultMode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CCMFaultMode_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CCMFaultMode_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CCMFaultMode_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CCMFaultMode_encode_aper$descriptor() {
        return CCMFaultMode_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CCMFaultMode_encode_aper$handle() {
        return CCMFaultMode_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_aper$address() {
        return CCMFaultMode_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CCMFaultMode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CCMFaultMode_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CCMFaultMode_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CCMFaultMode_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CooperativeControlMessage_ManeuverID_unavailable = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_unavailable = 0
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_unavailable() {
        return CooperativeControlMessage_ManeuverID_unavailable;
    }
    private static final int CooperativeControlMessage_ManeuverID_stayAtRestManCtl = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_stayAtRestManCtl = 1
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_stayAtRestManCtl() {
        return CooperativeControlMessage_ManeuverID_stayAtRestManCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_stayAtRestAutoLonCtl = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_stayAtRestAutoLonCtl = 2
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_stayAtRestAutoLonCtl() {
        return CooperativeControlMessage_ManeuverID_stayAtRestAutoLonCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_autoSpdCtlFollowRefTrafAccel = (int)4L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_autoSpdCtlFollowRefTrafAccel = 4
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_autoSpdCtlFollowRefTrafAccel() {
        return CooperativeControlMessage_ManeuverID_autoSpdCtlFollowRefTrafAccel;
    }
    private static final int CooperativeControlMessage_ManeuverID_transManToAutoSpdCtl = (int)5L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_transManToAutoSpdCtl = 5
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_transManToAutoSpdCtl() {
        return CooperativeControlMessage_ManeuverID_transManToAutoSpdCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_stringForm = (int)6L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_stringForm = 6
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_stringForm() {
        return CooperativeControlMessage_ManeuverID_stringForm;
    }
    private static final int CooperativeControlMessage_ManeuverID_autoJoinString = (int)7L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_autoJoinString = 7
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_autoJoinString() {
        return CooperativeControlMessage_ManeuverID_autoJoinString;
    }
    private static final int CooperativeControlMessage_ManeuverID_autoCtl = (int)8L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_autoCtl = 8
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_autoCtl() {
        return CooperativeControlMessage_ManeuverID_autoCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_increaseGapAutoCtl = (int)9L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_increaseGapAutoCtl = 9
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_increaseGapAutoCtl() {
        return CooperativeControlMessage_ManeuverID_increaseGapAutoCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_leftLnChgEndString = (int)10L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_leftLnChgEndString = 10
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_leftLnChgEndString() {
        return CooperativeControlMessage_ManeuverID_leftLnChgEndString;
    }
    private static final int CooperativeControlMessage_ManeuverID_rightLnChgEndString = (int)11L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_rightLnChgEndString = 11
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_rightLnChgEndString() {
        return CooperativeControlMessage_ManeuverID_rightLnChgEndString;
    }
    private static final int CooperativeControlMessage_ManeuverID_virtualGapIncDiffLane = (int)12L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_virtualGapIncDiffLane = 12
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_virtualGapIncDiffLane() {
        return CooperativeControlMessage_ManeuverID_virtualGapIncDiffLane;
    }
    private static final int CooperativeControlMessage_ManeuverID_virtualGapRedDiffLane = (int)13L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_virtualGapRedDiffLane = 13
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_virtualGapRedDiffLane() {
        return CooperativeControlMessage_ManeuverID_virtualGapRedDiffLane;
    }
    private static final int CooperativeControlMessage_ManeuverID_emgcyIncInterVehDistToStop = (int)14L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_emgcyIncInterVehDistToStop = 14
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_emgcyIncInterVehDistToStop() {
        return CooperativeControlMessage_ManeuverID_emgcyIncInterVehDistToStop;
    }
    private static final int CooperativeControlMessage_ManeuverID_vehMrgToStringFrmOnramp = (int)15L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_vehMrgToStringFrmOnramp = 15
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_vehMrgToStringFrmOnramp() {
        return CooperativeControlMessage_ManeuverID_vehMrgToStringFrmOnramp;
    }
    private static final int CooperativeControlMessage_ManeuverID_leftLnChgJoinString = (int)16L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_leftLnChgJoinString = 16
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_leftLnChgJoinString() {
        return CooperativeControlMessage_ManeuverID_leftLnChgJoinString;
    }
    private static final int CooperativeControlMessage_ManeuverID_rightLnChgJoinString = (int)17L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_rightLnChgJoinString = 17
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_rightLnChgJoinString() {
        return CooperativeControlMessage_ManeuverID_rightLnChgJoinString;
    }
    private static final int CooperativeControlMessage_ManeuverID_collisionAvoidLnChgOnly = (int)19L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_collisionAvoidLnChgOnly = 19
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_collisionAvoidLnChgOnly() {
        return CooperativeControlMessage_ManeuverID_collisionAvoidLnChgOnly;
    }
    private static final int CooperativeControlMessage_ManeuverID_collisionAvoidLnChgWthSpdRed = (int)20L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_collisionAvoidLnChgWthSpdRed = 20
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_collisionAvoidLnChgWthSpdRed() {
        return CooperativeControlMessage_ManeuverID_collisionAvoidLnChgWthSpdRed;
    }
    private static final int CooperativeControlMessage_ManeuverID_collisionAvoidEmgcyStp = (int)21L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_collisionAvoidEmgcyStp = 21
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_collisionAvoidEmgcyStp() {
        return CooperativeControlMessage_ManeuverID_collisionAvoidEmgcyStp;
    }
    private static final int CooperativeControlMessage_ManeuverID_autoDecelFollowSpdProfile = (int)28L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_autoDecelFollowSpdProfile = 28
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_autoDecelFollowSpdProfile() {
        return CooperativeControlMessage_ManeuverID_autoDecelFollowSpdProfile;
    }
    private static final int CooperativeControlMessage_ManeuverID_stoppingClosedloopVehFollowCtl = (int)31L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_stoppingClosedloopVehFollowCtl = 31
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_stoppingClosedloopVehFollowCtl() {
        return CooperativeControlMessage_ManeuverID_stoppingClosedloopVehFollowCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_stoppngOpenloopDecelCmd = (int)32L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_stoppngOpenloopDecelCmd = 32
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_stoppngOpenloopDecelCmd() {
        return CooperativeControlMessage_ManeuverID_stoppngOpenloopDecelCmd;
    }
    private static final int CooperativeControlMessage_ManeuverID_brakeToStopManCtl = (int)33L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_brakeToStopManCtl = 33
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_brakeToStopManCtl() {
        return CooperativeControlMessage_ManeuverID_brakeToStopManCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_incGapContString = (int)34L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_incGapContString = 34
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_incGapContString() {
        return CooperativeControlMessage_ManeuverID_incGapContString;
    }
    private static final int CooperativeControlMessage_ManeuverID_incGapRedSpdToStp = (int)35L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_incGapRedSpdToStp = 35
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_incGapRedSpdToStp() {
        return CooperativeControlMessage_ManeuverID_incGapRedSpdToStp;
    }
    private static final int CooperativeControlMessage_ManeuverID_cruiseCtl = (int)36L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_cruiseCtl = 36
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_cruiseCtl() {
        return CooperativeControlMessage_ManeuverID_cruiseCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_adapCruiseCtl = (int)41L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_adapCruiseCtl = 41
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_adapCruiseCtl() {
        return CooperativeControlMessage_ManeuverID_adapCruiseCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_coopAdapCruiseCtl = (int)42L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_coopAdapCruiseCtl = 42
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_coopAdapCruiseCtl() {
        return CooperativeControlMessage_ManeuverID_coopAdapCruiseCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_manCtl = (int)46L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_manCtl = 46
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_manCtl() {
        return CooperativeControlMessage_ManeuverID_manCtl;
    }
    private static final int CooperativeControlMessage_ManeuverID_coordAutoBrkForStringWthSvcBrkEngBrk = (int)47L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_coordAutoBrkForStringWthSvcBrkEngBrk = 47
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_coordAutoBrkForStringWthSvcBrkEngBrk() {
        return CooperativeControlMessage_ManeuverID_coordAutoBrkForStringWthSvcBrkEngBrk;
    }
    private static final int CooperativeControlMessage_ManeuverID_emgcyBrkForStringOnePlusVehWthSvcBrk = (int)48L;
    /**
     * {@snippet lang=c :
     * enum CooperativeControlMessage_ManeuverID.CooperativeControlMessage_ManeuverID_emgcyBrkForStringOnePlusVehWthSvcBrk = 48
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_emgcyBrkForStringOnePlusVehWthSvcBrk() {
        return CooperativeControlMessage_ManeuverID_emgcyBrkForStringOnePlusVehWthSvcBrk;
    }
    /**
     * {@snippet lang=c :
     * typedef long CooperativeControlMessage_ManeuverID_t
     * }
     */
    public static final OfLong CooperativeControlMessage_ManeuverID_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$layout() {
        return asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1() {
        return asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1
     * }
     */
    public static void asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$constants.SEGMENT, 0L, asn_PER_type_CooperativeControlMessage_ManeuverID_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CooperativeControlMessage_ManeuverID$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CooperativeControlMessage_ManeuverID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_ManeuverID
     * }
     */
    public static GroupLayout asn_DEF_CooperativeControlMessage_ManeuverID$layout() {
        return asn_DEF_CooperativeControlMessage_ManeuverID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_ManeuverID
     * }
     */
    public static MemorySegment asn_DEF_CooperativeControlMessage_ManeuverID() {
        return asn_DEF_CooperativeControlMessage_ManeuverID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_ManeuverID
     * }
     */
    public static void asn_DEF_CooperativeControlMessage_ManeuverID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CooperativeControlMessage_ManeuverID$constants.SEGMENT, 0L, asn_DEF_CooperativeControlMessage_ManeuverID$constants.LAYOUT.byteSize());
    }

    private static class CooperativeControlMessage_ManeuverID_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_ManeuverID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_free$descriptor() {
        return CooperativeControlMessage_ManeuverID_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_ManeuverID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_free$handle() {
        return CooperativeControlMessage_ManeuverID_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_ManeuverID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_free$address() {
        return CooperativeControlMessage_ManeuverID_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CooperativeControlMessage_ManeuverID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CooperativeControlMessage_ManeuverID_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CooperativeControlMessage_ManeuverID_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_print$descriptor() {
        return CooperativeControlMessage_ManeuverID_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_print$handle() {
        return CooperativeControlMessage_ManeuverID_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_print$address() {
        return CooperativeControlMessage_ManeuverID_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_ManeuverID_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_constraint$descriptor() {
        return CooperativeControlMessage_ManeuverID_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_constraint$handle() {
        return CooperativeControlMessage_ManeuverID_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_constraint$address() {
        return CooperativeControlMessage_ManeuverID_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_ManeuverID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_ManeuverID_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_ManeuverID_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_decode_ber$descriptor() {
        return CooperativeControlMessage_ManeuverID_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_decode_ber$handle() {
        return CooperativeControlMessage_ManeuverID_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_ber$address() {
        return CooperativeControlMessage_ManeuverID_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CooperativeControlMessage_ManeuverID_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_der$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_der$handle() {
        return CooperativeControlMessage_ManeuverID_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_der$address() {
        return CooperativeControlMessage_ManeuverID_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_decode_xer$descriptor() {
        return CooperativeControlMessage_ManeuverID_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_decode_xer$handle() {
        return CooperativeControlMessage_ManeuverID_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_xer$address() {
        return CooperativeControlMessage_ManeuverID_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_ManeuverID_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_xer$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_xer$handle() {
        return CooperativeControlMessage_ManeuverID_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_xer$address() {
        return CooperativeControlMessage_ManeuverID_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_jer$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_jer$handle() {
        return CooperativeControlMessage_ManeuverID_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_jer$address() {
        return CooperativeControlMessage_ManeuverID_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_decode_oer$descriptor() {
        return CooperativeControlMessage_ManeuverID_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_decode_oer$handle() {
        return CooperativeControlMessage_ManeuverID_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_oer$address() {
        return CooperativeControlMessage_ManeuverID_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_ManeuverID_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_oer$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_oer$handle() {
        return CooperativeControlMessage_ManeuverID_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_oer$address() {
        return CooperativeControlMessage_ManeuverID_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_decode_uper$descriptor() {
        return CooperativeControlMessage_ManeuverID_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_decode_uper$handle() {
        return CooperativeControlMessage_ManeuverID_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_uper$address() {
        return CooperativeControlMessage_ManeuverID_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_ManeuverID_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_uper$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_uper$handle() {
        return CooperativeControlMessage_ManeuverID_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_uper$address() {
        return CooperativeControlMessage_ManeuverID_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_decode_aper$descriptor() {
        return CooperativeControlMessage_ManeuverID_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_decode_aper$handle() {
        return CooperativeControlMessage_ManeuverID_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_aper$address() {
        return CooperativeControlMessage_ManeuverID_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_ManeuverID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_ManeuverID_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_ManeuverID_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_ManeuverID_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_ManeuverID_encode_aper$descriptor() {
        return CooperativeControlMessage_ManeuverID_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_ManeuverID_encode_aper$handle() {
        return CooperativeControlMessage_ManeuverID_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_aper$address() {
        return CooperativeControlMessage_ManeuverID_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_ManeuverID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_ManeuverID_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_ManeuverID_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_ManeuverID_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_HeavyTruckCCMExtensions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_HeavyTruckCCMExtensions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_HeavyTruckCCMExtensions
     * }
     */
    public static GroupLayout asn_DEF_HeavyTruckCCMExtensions$layout() {
        return asn_DEF_HeavyTruckCCMExtensions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_HeavyTruckCCMExtensions
     * }
     */
    public static MemorySegment asn_DEF_HeavyTruckCCMExtensions() {
        return asn_DEF_HeavyTruckCCMExtensions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_HeavyTruckCCMExtensions
     * }
     */
    public static void asn_DEF_HeavyTruckCCMExtensions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_HeavyTruckCCMExtensions$constants.SEGMENT, 0L, asn_DEF_HeavyTruckCCMExtensions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_HeavyTruckCCMExtensions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_HeavyTruckCCMExtensions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_HeavyTruckCCMExtensions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_HeavyTruckCCMExtensions_specs_1$layout() {
        return asn_SPC_HeavyTruckCCMExtensions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_HeavyTruckCCMExtensions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_HeavyTruckCCMExtensions_specs_1() {
        return asn_SPC_HeavyTruckCCMExtensions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_HeavyTruckCCMExtensions_specs_1
     * }
     */
    public static void asn_SPC_HeavyTruckCCMExtensions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_HeavyTruckCCMExtensions_specs_1$constants.SEGMENT, 0L, asn_SPC_HeavyTruckCCMExtensions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_HeavyTruckCCMExtensions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(18, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_HeavyTruckCCMExtensions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 18 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static SequenceLayout asn_MBR_HeavyTruckCCMExtensions_1$layout() {
        return asn_MBR_HeavyTruckCCMExtensions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static long[] asn_MBR_HeavyTruckCCMExtensions_1$dimensions() {
        return asn_MBR_HeavyTruckCCMExtensions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static MemorySegment asn_MBR_HeavyTruckCCMExtensions_1() {
        return asn_MBR_HeavyTruckCCMExtensions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static void asn_MBR_HeavyTruckCCMExtensions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_HeavyTruckCCMExtensions_1$constants.SEGMENT, 0L, asn_MBR_HeavyTruckCCMExtensions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static MemorySegment asn_MBR_HeavyTruckCCMExtensions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_HeavyTruckCCMExtensions_1$constants.HANDLE.invokeExact(asn_MBR_HeavyTruckCCMExtensions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_HeavyTruckCCMExtensions_1[18]
     * }
     */
    public static void asn_MBR_HeavyTruckCCMExtensions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_HeavyTruckCCMExtensions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long Yaw_t
     * }
     */
    public static final OfLong Yaw_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Yaw_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Yaw_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Yaw_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Yaw_constr_1$layout() {
        return asn_PER_type_Yaw_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Yaw_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Yaw_constr_1() {
        return asn_PER_type_Yaw_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Yaw_constr_1
     * }
     */
    public static void asn_PER_type_Yaw_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Yaw_constr_1$constants.SEGMENT, 0L, asn_PER_type_Yaw_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Yaw$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Yaw").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Yaw
     * }
     */
    public static GroupLayout asn_DEF_Yaw$layout() {
        return asn_DEF_Yaw$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Yaw
     * }
     */
    public static MemorySegment asn_DEF_Yaw() {
        return asn_DEF_Yaw$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Yaw
     * }
     */
    public static void asn_DEF_Yaw(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Yaw$constants.SEGMENT, 0L, asn_DEF_Yaw$constants.LAYOUT.byteSize());
    }

    private static class Yaw_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Yaw_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Yaw_free$descriptor() {
        return Yaw_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Yaw_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Yaw_free$handle() {
        return Yaw_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Yaw_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Yaw_free$address() {
        return Yaw_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Yaw_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Yaw_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Yaw_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Yaw_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_print$descriptor() {
        return Yaw_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Yaw_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Yaw_print$handle() {
        return Yaw_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Yaw_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_print$address() {
        return Yaw_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Yaw_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Yaw_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Yaw_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Yaw_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_constraint$descriptor() {
        return Yaw_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Yaw_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Yaw_constraint$handle() {
        return Yaw_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Yaw_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Yaw_constraint$address() {
        return Yaw_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Yaw_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Yaw_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Yaw_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Yaw_decode_ber$descriptor() {
        return Yaw_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Yaw_decode_ber$handle() {
        return Yaw_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Yaw_decode_ber$address() {
        return Yaw_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Yaw_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Yaw_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_der$descriptor() {
        return Yaw_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Yaw_encode_der$handle() {
        return Yaw_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_der$address() {
        return Yaw_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Yaw_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Yaw_decode_xer$descriptor() {
        return Yaw_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Yaw_decode_xer$handle() {
        return Yaw_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Yaw_decode_xer$address() {
        return Yaw_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Yaw_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Yaw_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_xer$descriptor() {
        return Yaw_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Yaw_encode_xer$handle() {
        return Yaw_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_xer$address() {
        return Yaw_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Yaw_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_jer$descriptor() {
        return Yaw_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Yaw_encode_jer$handle() {
        return Yaw_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_jer$address() {
        return Yaw_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Yaw_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Yaw_decode_oer$descriptor() {
        return Yaw_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Yaw_decode_oer$handle() {
        return Yaw_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Yaw_decode_oer$address() {
        return Yaw_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Yaw_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Yaw_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_oer$descriptor() {
        return Yaw_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Yaw_encode_oer$handle() {
        return Yaw_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_oer$address() {
        return Yaw_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Yaw_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Yaw_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Yaw_decode_uper$descriptor() {
        return Yaw_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Yaw_decode_uper$handle() {
        return Yaw_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Yaw_decode_uper$address() {
        return Yaw_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Yaw_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Yaw_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_uper$descriptor() {
        return Yaw_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Yaw_encode_uper$handle() {
        return Yaw_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Yaw_encode_uper$address() {
        return Yaw_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Yaw_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Yaw_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Yaw_decode_aper$descriptor() {
        return Yaw_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Yaw_decode_aper$handle() {
        return Yaw_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Yaw_decode_aper$address() {
        return Yaw_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Yaw_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Yaw_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Yaw_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Yaw_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Yaw_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Yaw_encode_aper$descriptor() {
        return Yaw_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Yaw_encode_aper$handle() {
        return Yaw_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Yaw_encode_aper$address() {
        return Yaw_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Yaw_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Yaw_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Yaw_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Yaw_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long Pitch_t
     * }
     */
    public static final OfLong Pitch_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Pitch_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Pitch_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Pitch_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Pitch_constr_1$layout() {
        return asn_PER_type_Pitch_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Pitch_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Pitch_constr_1() {
        return asn_PER_type_Pitch_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Pitch_constr_1
     * }
     */
    public static void asn_PER_type_Pitch_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Pitch_constr_1$constants.SEGMENT, 0L, asn_PER_type_Pitch_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Pitch$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Pitch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Pitch
     * }
     */
    public static GroupLayout asn_DEF_Pitch$layout() {
        return asn_DEF_Pitch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Pitch
     * }
     */
    public static MemorySegment asn_DEF_Pitch() {
        return asn_DEF_Pitch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Pitch
     * }
     */
    public static void asn_DEF_Pitch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Pitch$constants.SEGMENT, 0L, asn_DEF_Pitch$constants.LAYOUT.byteSize());
    }

    private static class Pitch_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Pitch_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Pitch_free$descriptor() {
        return Pitch_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Pitch_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Pitch_free$handle() {
        return Pitch_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Pitch_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Pitch_free$address() {
        return Pitch_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Pitch_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Pitch_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Pitch_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Pitch_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_print$descriptor() {
        return Pitch_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Pitch_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Pitch_print$handle() {
        return Pitch_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Pitch_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_print$address() {
        return Pitch_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Pitch_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Pitch_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Pitch_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Pitch_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_constraint$descriptor() {
        return Pitch_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Pitch_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Pitch_constraint$handle() {
        return Pitch_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Pitch_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Pitch_constraint$address() {
        return Pitch_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Pitch_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Pitch_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Pitch_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Pitch_decode_ber$descriptor() {
        return Pitch_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Pitch_decode_ber$handle() {
        return Pitch_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Pitch_decode_ber$address() {
        return Pitch_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Pitch_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Pitch_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_der$descriptor() {
        return Pitch_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Pitch_encode_der$handle() {
        return Pitch_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_der$address() {
        return Pitch_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Pitch_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Pitch_decode_xer$descriptor() {
        return Pitch_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Pitch_decode_xer$handle() {
        return Pitch_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Pitch_decode_xer$address() {
        return Pitch_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Pitch_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Pitch_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_xer$descriptor() {
        return Pitch_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Pitch_encode_xer$handle() {
        return Pitch_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_xer$address() {
        return Pitch_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Pitch_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_jer$descriptor() {
        return Pitch_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Pitch_encode_jer$handle() {
        return Pitch_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_jer$address() {
        return Pitch_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Pitch_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Pitch_decode_oer$descriptor() {
        return Pitch_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Pitch_decode_oer$handle() {
        return Pitch_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Pitch_decode_oer$address() {
        return Pitch_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Pitch_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Pitch_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_oer$descriptor() {
        return Pitch_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Pitch_encode_oer$handle() {
        return Pitch_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_oer$address() {
        return Pitch_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Pitch_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Pitch_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Pitch_decode_uper$descriptor() {
        return Pitch_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Pitch_decode_uper$handle() {
        return Pitch_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Pitch_decode_uper$address() {
        return Pitch_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Pitch_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Pitch_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_uper$descriptor() {
        return Pitch_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Pitch_encode_uper$handle() {
        return Pitch_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Pitch_encode_uper$address() {
        return Pitch_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Pitch_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Pitch_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Pitch_decode_aper$descriptor() {
        return Pitch_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Pitch_decode_aper$handle() {
        return Pitch_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Pitch_decode_aper$address() {
        return Pitch_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Pitch_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Pitch_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Pitch_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Pitch_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Pitch_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Pitch_encode_aper$descriptor() {
        return Pitch_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Pitch_encode_aper$handle() {
        return Pitch_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Pitch_encode_aper$address() {
        return Pitch_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Pitch_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Pitch_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Pitch_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Pitch_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long Roll_t
     * }
     */
    public static final OfLong Roll_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Roll_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Roll_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Roll_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Roll_constr_1$layout() {
        return asn_PER_type_Roll_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Roll_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Roll_constr_1() {
        return asn_PER_type_Roll_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Roll_constr_1
     * }
     */
    public static void asn_PER_type_Roll_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Roll_constr_1$constants.SEGMENT, 0L, asn_PER_type_Roll_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Roll$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Roll").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Roll
     * }
     */
    public static GroupLayout asn_DEF_Roll$layout() {
        return asn_DEF_Roll$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Roll
     * }
     */
    public static MemorySegment asn_DEF_Roll() {
        return asn_DEF_Roll$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Roll
     * }
     */
    public static void asn_DEF_Roll(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Roll$constants.SEGMENT, 0L, asn_DEF_Roll$constants.LAYOUT.byteSize());
    }

    private static class Roll_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Roll_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Roll_free$descriptor() {
        return Roll_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Roll_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Roll_free$handle() {
        return Roll_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Roll_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Roll_free$address() {
        return Roll_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Roll_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Roll_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Roll_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Roll_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_print$descriptor() {
        return Roll_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Roll_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Roll_print$handle() {
        return Roll_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Roll_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_print$address() {
        return Roll_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Roll_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Roll_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Roll_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Roll_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_constraint$descriptor() {
        return Roll_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Roll_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Roll_constraint$handle() {
        return Roll_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Roll_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Roll_constraint$address() {
        return Roll_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Roll_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Roll_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Roll_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Roll_decode_ber$descriptor() {
        return Roll_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Roll_decode_ber$handle() {
        return Roll_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Roll_decode_ber$address() {
        return Roll_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Roll_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Roll_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_encode_der$descriptor() {
        return Roll_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Roll_encode_der$handle() {
        return Roll_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_der$address() {
        return Roll_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Roll_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Roll_decode_xer$descriptor() {
        return Roll_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Roll_decode_xer$handle() {
        return Roll_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Roll_decode_xer$address() {
        return Roll_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Roll_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Roll_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_encode_xer$descriptor() {
        return Roll_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Roll_encode_xer$handle() {
        return Roll_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_xer$address() {
        return Roll_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Roll_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_encode_jer$descriptor() {
        return Roll_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Roll_encode_jer$handle() {
        return Roll_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_jer$address() {
        return Roll_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Roll_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Roll_decode_oer$descriptor() {
        return Roll_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Roll_decode_oer$handle() {
        return Roll_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Roll_decode_oer$address() {
        return Roll_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Roll_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Roll_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Roll_encode_oer$descriptor() {
        return Roll_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Roll_encode_oer$handle() {
        return Roll_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_oer$address() {
        return Roll_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Roll_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Roll_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Roll_decode_uper$descriptor() {
        return Roll_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Roll_decode_uper$handle() {
        return Roll_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Roll_decode_uper$address() {
        return Roll_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Roll_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Roll_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Roll_encode_uper$descriptor() {
        return Roll_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Roll_encode_uper$handle() {
        return Roll_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Roll_encode_uper$address() {
        return Roll_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Roll_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Roll_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Roll_decode_aper$descriptor() {
        return Roll_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Roll_decode_aper$handle() {
        return Roll_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Roll_decode_aper$address() {
        return Roll_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Roll_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Roll_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Roll_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Roll_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Roll_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Roll_encode_aper$descriptor() {
        return Roll_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Roll_encode_aper$handle() {
        return Roll_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Roll_encode_aper$address() {
        return Roll_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Roll_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Roll_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Roll_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Roll_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long CooperativeControlMessage_PitchRate_t
     * }
     */
    public static final OfLong CooperativeControlMessage_PitchRate_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CooperativeControlMessage_PitchRate_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PitchRate_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$layout() {
        return asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PitchRate_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CooperativeControlMessage_PitchRate_constr_1() {
        return asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_PitchRate_constr_1
     * }
     */
    public static void asn_PER_type_CooperativeControlMessage_PitchRate_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$constants.SEGMENT, 0L, asn_PER_type_CooperativeControlMessage_PitchRate_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CooperativeControlMessage_PitchRate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CooperativeControlMessage_PitchRate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PitchRate
     * }
     */
    public static GroupLayout asn_DEF_CooperativeControlMessage_PitchRate$layout() {
        return asn_DEF_CooperativeControlMessage_PitchRate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PitchRate
     * }
     */
    public static MemorySegment asn_DEF_CooperativeControlMessage_PitchRate() {
        return asn_DEF_CooperativeControlMessage_PitchRate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_PitchRate
     * }
     */
    public static void asn_DEF_CooperativeControlMessage_PitchRate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CooperativeControlMessage_PitchRate$constants.SEGMENT, 0L, asn_DEF_CooperativeControlMessage_PitchRate$constants.LAYOUT.byteSize());
    }

    private static class CooperativeControlMessage_PitchRate_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_free$descriptor() {
        return CooperativeControlMessage_PitchRate_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_free$handle() {
        return CooperativeControlMessage_PitchRate_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_free$address() {
        return CooperativeControlMessage_PitchRate_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CooperativeControlMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CooperativeControlMessage_PitchRate_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CooperativeControlMessage_PitchRate_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_print$descriptor() {
        return CooperativeControlMessage_PitchRate_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_print$handle() {
        return CooperativeControlMessage_PitchRate_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_print$address() {
        return CooperativeControlMessage_PitchRate_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_PitchRate_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PitchRate_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_constraint$descriptor() {
        return CooperativeControlMessage_PitchRate_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_constraint$handle() {
        return CooperativeControlMessage_PitchRate_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_constraint$address() {
        return CooperativeControlMessage_PitchRate_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_PitchRate_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PitchRate_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_decode_ber$descriptor() {
        return CooperativeControlMessage_PitchRate_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_decode_ber$handle() {
        return CooperativeControlMessage_PitchRate_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_ber$address() {
        return CooperativeControlMessage_PitchRate_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CooperativeControlMessage_PitchRate_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_der$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_der$handle() {
        return CooperativeControlMessage_PitchRate_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_der$address() {
        return CooperativeControlMessage_PitchRate_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_decode_xer$descriptor() {
        return CooperativeControlMessage_PitchRate_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_decode_xer$handle() {
        return CooperativeControlMessage_PitchRate_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_xer$address() {
        return CooperativeControlMessage_PitchRate_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_PitchRate_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_xer$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_xer$handle() {
        return CooperativeControlMessage_PitchRate_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_xer$address() {
        return CooperativeControlMessage_PitchRate_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_jer$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_jer$handle() {
        return CooperativeControlMessage_PitchRate_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_jer$address() {
        return CooperativeControlMessage_PitchRate_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_decode_oer$descriptor() {
        return CooperativeControlMessage_PitchRate_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_decode_oer$handle() {
        return CooperativeControlMessage_PitchRate_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_oer$address() {
        return CooperativeControlMessage_PitchRate_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_PitchRate_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_oer$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_oer$handle() {
        return CooperativeControlMessage_PitchRate_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_oer$address() {
        return CooperativeControlMessage_PitchRate_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_decode_uper$descriptor() {
        return CooperativeControlMessage_PitchRate_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_decode_uper$handle() {
        return CooperativeControlMessage_PitchRate_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_uper$address() {
        return CooperativeControlMessage_PitchRate_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PitchRate_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_uper$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_uper$handle() {
        return CooperativeControlMessage_PitchRate_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_uper$address() {
        return CooperativeControlMessage_PitchRate_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_decode_aper$descriptor() {
        return CooperativeControlMessage_PitchRate_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_decode_aper$handle() {
        return CooperativeControlMessage_PitchRate_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_aper$address() {
        return CooperativeControlMessage_PitchRate_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_PitchRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_PitchRate_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_PitchRate_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_PitchRate_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_PitchRate_encode_aper$descriptor() {
        return CooperativeControlMessage_PitchRate_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_PitchRate_encode_aper$handle() {
        return CooperativeControlMessage_PitchRate_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_aper$address() {
        return CooperativeControlMessage_PitchRate_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_PitchRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_PitchRate_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_PitchRate_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_PitchRate_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long CooperativeControlMessage_RollRate_t
     * }
     */
    public static final OfLong CooperativeControlMessage_RollRate_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CooperativeControlMessage_RollRate_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CooperativeControlMessage_RollRate_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_RollRate_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CooperativeControlMessage_RollRate_constr_1$layout() {
        return asn_PER_type_CooperativeControlMessage_RollRate_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_RollRate_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CooperativeControlMessage_RollRate_constr_1() {
        return asn_PER_type_CooperativeControlMessage_RollRate_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CooperativeControlMessage_RollRate_constr_1
     * }
     */
    public static void asn_PER_type_CooperativeControlMessage_RollRate_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CooperativeControlMessage_RollRate_constr_1$constants.SEGMENT, 0L, asn_PER_type_CooperativeControlMessage_RollRate_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CooperativeControlMessage_RollRate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CooperativeControlMessage_RollRate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_RollRate
     * }
     */
    public static GroupLayout asn_DEF_CooperativeControlMessage_RollRate$layout() {
        return asn_DEF_CooperativeControlMessage_RollRate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_RollRate
     * }
     */
    public static MemorySegment asn_DEF_CooperativeControlMessage_RollRate() {
        return asn_DEF_CooperativeControlMessage_RollRate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CooperativeControlMessage_RollRate
     * }
     */
    public static void asn_DEF_CooperativeControlMessage_RollRate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CooperativeControlMessage_RollRate$constants.SEGMENT, 0L, asn_DEF_CooperativeControlMessage_RollRate$constants.LAYOUT.byteSize());
    }

    private static class CooperativeControlMessage_RollRate_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_RollRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_free$descriptor() {
        return CooperativeControlMessage_RollRate_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_RollRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_free$handle() {
        return CooperativeControlMessage_RollRate_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CooperativeControlMessage_RollRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_free$address() {
        return CooperativeControlMessage_RollRate_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CooperativeControlMessage_RollRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CooperativeControlMessage_RollRate_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CooperativeControlMessage_RollRate_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_print$descriptor() {
        return CooperativeControlMessage_RollRate_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_print$handle() {
        return CooperativeControlMessage_RollRate_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_print$address() {
        return CooperativeControlMessage_RollRate_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_RollRate_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_RollRate_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_constraint$descriptor() {
        return CooperativeControlMessage_RollRate_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_constraint$handle() {
        return CooperativeControlMessage_RollRate_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_constraint$address() {
        return CooperativeControlMessage_RollRate_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CooperativeControlMessage_RollRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CooperativeControlMessage_RollRate_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_RollRate_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_decode_ber$descriptor() {
        return CooperativeControlMessage_RollRate_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_decode_ber$handle() {
        return CooperativeControlMessage_RollRate_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_ber$address() {
        return CooperativeControlMessage_RollRate_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CooperativeControlMessage_RollRate_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_der$descriptor() {
        return CooperativeControlMessage_RollRate_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_der$handle() {
        return CooperativeControlMessage_RollRate_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_der$address() {
        return CooperativeControlMessage_RollRate_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_RollRate_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_decode_xer$descriptor() {
        return CooperativeControlMessage_RollRate_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_decode_xer$handle() {
        return CooperativeControlMessage_RollRate_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_xer$address() {
        return CooperativeControlMessage_RollRate_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_RollRate_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_xer$descriptor() {
        return CooperativeControlMessage_RollRate_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_xer$handle() {
        return CooperativeControlMessage_RollRate_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_xer$address() {
        return CooperativeControlMessage_RollRate_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CooperativeControlMessage_RollRate_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_jer$descriptor() {
        return CooperativeControlMessage_RollRate_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_jer$handle() {
        return CooperativeControlMessage_RollRate_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_jer$address() {
        return CooperativeControlMessage_RollRate_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CooperativeControlMessage_RollRate_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_decode_oer$descriptor() {
        return CooperativeControlMessage_RollRate_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_decode_oer$handle() {
        return CooperativeControlMessage_RollRate_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_oer$address() {
        return CooperativeControlMessage_RollRate_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CooperativeControlMessage_RollRate_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_oer$descriptor() {
        return CooperativeControlMessage_RollRate_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_oer$handle() {
        return CooperativeControlMessage_RollRate_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_oer$address() {
        return CooperativeControlMessage_RollRate_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_RollRate_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_decode_uper$descriptor() {
        return CooperativeControlMessage_RollRate_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_decode_uper$handle() {
        return CooperativeControlMessage_RollRate_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_uper$address() {
        return CooperativeControlMessage_RollRate_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_RollRate_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_uper$descriptor() {
        return CooperativeControlMessage_RollRate_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_uper$handle() {
        return CooperativeControlMessage_RollRate_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_uper$address() {
        return CooperativeControlMessage_RollRate_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_RollRate_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_decode_aper$descriptor() {
        return CooperativeControlMessage_RollRate_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_decode_aper$handle() {
        return CooperativeControlMessage_RollRate_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_aper$address() {
        return CooperativeControlMessage_RollRate_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CooperativeControlMessage_RollRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CooperativeControlMessage_RollRate_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CooperativeControlMessage_RollRate_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CooperativeControlMessage_RollRate_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CooperativeControlMessage_RollRate_encode_aper$descriptor() {
        return CooperativeControlMessage_RollRate_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CooperativeControlMessage_RollRate_encode_aper$handle() {
        return CooperativeControlMessage_RollRate_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_aper$address() {
        return CooperativeControlMessage_RollRate_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CooperativeControlMessage_RollRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CooperativeControlMessage_RollRate_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CooperativeControlMessage_RollRate_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CooperativeControlMessage_RollRate_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_AxesMovement$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AxesMovement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxesMovement
     * }
     */
    public static GroupLayout asn_DEF_AxesMovement$layout() {
        return asn_DEF_AxesMovement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxesMovement
     * }
     */
    public static MemorySegment asn_DEF_AxesMovement() {
        return asn_DEF_AxesMovement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AxesMovement
     * }
     */
    public static void asn_DEF_AxesMovement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AxesMovement$constants.SEGMENT, 0L, asn_DEF_AxesMovement$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AxesMovement_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AxesMovement_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxesMovement_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AxesMovement_specs_1$layout() {
        return asn_SPC_AxesMovement_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxesMovement_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AxesMovement_specs_1() {
        return asn_SPC_AxesMovement_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AxesMovement_specs_1
     * }
     */
    public static void asn_SPC_AxesMovement_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AxesMovement_specs_1$constants.SEGMENT, 0L, asn_SPC_AxesMovement_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AxesMovement_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AxesMovement_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_AxesMovement_1$layout() {
        return asn_MBR_AxesMovement_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static long[] asn_MBR_AxesMovement_1$dimensions() {
        return asn_MBR_AxesMovement_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static MemorySegment asn_MBR_AxesMovement_1() {
        return asn_MBR_AxesMovement_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static void asn_MBR_AxesMovement_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxesMovement_1$constants.SEGMENT, 0L, asn_MBR_AxesMovement_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static MemorySegment asn_MBR_AxesMovement_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AxesMovement_1$constants.HANDLE.invokeExact(asn_MBR_AxesMovement_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AxesMovement_1[6]
     * }
     */
    public static void asn_MBR_AxesMovement_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AxesMovement_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int CCMpartIIExtension__partII_Value_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CCMpartIIExtension__partII_Value_PR.CCMpartIIExtension__partII_Value_PR_NOTHING = 0
     * }
     */
    public static int CCMpartIIExtension__partII_Value_PR_NOTHING() {
        return CCMpartIIExtension__partII_Value_PR_NOTHING;
    }
    private static final int CCMpartIIExtension__partII_Value_PR_VehicleSafetyExtensions = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CCMpartIIExtension__partII_Value_PR.CCMpartIIExtension__partII_Value_PR_VehicleSafetyExtensions = 1
     * }
     */
    public static int CCMpartIIExtension__partII_Value_PR_VehicleSafetyExtensions() {
        return CCMpartIIExtension__partII_Value_PR_VehicleSafetyExtensions;
    }
    private static final int CCMpartIIExtension__partII_Value_PR_LightVehicleCCMExtensions = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CCMpartIIExtension__partII_Value_PR.CCMpartIIExtension__partII_Value_PR_LightVehicleCCMExtensions = 2
     * }
     */
    public static int CCMpartIIExtension__partII_Value_PR_LightVehicleCCMExtensions() {
        return CCMpartIIExtension__partII_Value_PR_LightVehicleCCMExtensions;
    }
    private static final int CCMpartIIExtension__partII_Value_PR_HeavyTruckCCMExtensions = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CCMpartIIExtension__partII_Value_PR.CCMpartIIExtension__partII_Value_PR_HeavyTruckCCMExtensions = 3
     * }
     */
    public static int CCMpartIIExtension__partII_Value_PR_HeavyTruckCCMExtensions() {
        return CCMpartIIExtension__partII_Value_PR_HeavyTruckCCMExtensions;
    }

    private static class asn_DEF_CCMpartIIExtension$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CCMpartIIExtension").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMpartIIExtension
     * }
     */
    public static GroupLayout asn_DEF_CCMpartIIExtension$layout() {
        return asn_DEF_CCMpartIIExtension$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMpartIIExtension
     * }
     */
    public static MemorySegment asn_DEF_CCMpartIIExtension() {
        return asn_DEF_CCMpartIIExtension$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CCMpartIIExtension
     * }
     */
    public static void asn_DEF_CCMpartIIExtension(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CCMpartIIExtension$constants.SEGMENT, 0L, asn_DEF_CCMpartIIExtension$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CCMpartIIExtension_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CCMpartIIExtension_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CCMpartIIExtension_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CCMpartIIExtension_specs_1$layout() {
        return asn_SPC_CCMpartIIExtension_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CCMpartIIExtension_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CCMpartIIExtension_specs_1() {
        return asn_SPC_CCMpartIIExtension_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CCMpartIIExtension_specs_1
     * }
     */
    public static void asn_SPC_CCMpartIIExtension_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CCMpartIIExtension_specs_1$constants.SEGMENT, 0L, asn_SPC_CCMpartIIExtension_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CCMpartIIExtension_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CCMpartIIExtension_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CCMpartIIExtension_1$layout() {
        return asn_MBR_CCMpartIIExtension_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static long[] asn_MBR_CCMpartIIExtension_1$dimensions() {
        return asn_MBR_CCMpartIIExtension_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CCMpartIIExtension_1() {
        return asn_MBR_CCMpartIIExtension_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static void asn_MBR_CCMpartIIExtension_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CCMpartIIExtension_1$constants.SEGMENT, 0L, asn_MBR_CCMpartIIExtension_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CCMpartIIExtension_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CCMpartIIExtension_1$constants.HANDLE.invokeExact(asn_MBR_CCMpartIIExtension_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CCMpartIIExtension_1[2]
     * }
     */
    public static void asn_MBR_CCMpartIIExtension_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CCMpartIIExtension_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int EquipmentType_unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum EquipmentType.EquipmentType_unknown = 0
     * }
     */
    public static int EquipmentType_unknown() {
        return EquipmentType_unknown;
    }
    private static final int EquipmentType_rsu = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EquipmentType.EquipmentType_rsu = 1
     * }
     */
    public static int EquipmentType_rsu() {
        return EquipmentType_rsu;
    }
    private static final int EquipmentType_obu = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EquipmentType.EquipmentType_obu = 2
     * }
     */
    public static int EquipmentType_obu() {
        return EquipmentType_obu;
    }
    private static final int EquipmentType_vru = (int)3L;
    /**
     * {@snippet lang=c :
     * enum EquipmentType.EquipmentType_vru = 3
     * }
     */
    public static int EquipmentType_vru() {
        return EquipmentType_vru;
    }
    /**
     * {@snippet lang=c :
     * typedef long EquipmentType_t
     * }
     */
    public static final OfLong EquipmentType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EquipmentType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EquipmentType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EquipmentType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EquipmentType_constr_1$layout() {
        return asn_PER_type_EquipmentType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EquipmentType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EquipmentType_constr_1() {
        return asn_PER_type_EquipmentType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EquipmentType_constr_1
     * }
     */
    public static void asn_PER_type_EquipmentType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EquipmentType_constr_1$constants.SEGMENT, 0L, asn_PER_type_EquipmentType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EquipmentType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EquipmentType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EquipmentType
     * }
     */
    public static GroupLayout asn_DEF_EquipmentType$layout() {
        return asn_DEF_EquipmentType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EquipmentType
     * }
     */
    public static MemorySegment asn_DEF_EquipmentType() {
        return asn_DEF_EquipmentType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EquipmentType
     * }
     */
    public static void asn_DEF_EquipmentType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EquipmentType$constants.SEGMENT, 0L, asn_DEF_EquipmentType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_EquipmentType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_EquipmentType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EquipmentType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_EquipmentType_specs_1$layout() {
        return asn_SPC_EquipmentType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EquipmentType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_EquipmentType_specs_1() {
        return asn_SPC_EquipmentType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EquipmentType_specs_1
     * }
     */
    public static void asn_SPC_EquipmentType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_EquipmentType_specs_1$constants.SEGMENT, 0L, asn_SPC_EquipmentType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class EquipmentType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EquipmentType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EquipmentType_free$descriptor() {
        return EquipmentType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EquipmentType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EquipmentType_free$handle() {
        return EquipmentType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EquipmentType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EquipmentType_free$address() {
        return EquipmentType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EquipmentType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EquipmentType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EquipmentType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EquipmentType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_print$descriptor() {
        return EquipmentType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EquipmentType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_print$handle() {
        return EquipmentType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EquipmentType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_print$address() {
        return EquipmentType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EquipmentType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EquipmentType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EquipmentType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EquipmentType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_constraint$descriptor() {
        return EquipmentType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EquipmentType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_constraint$handle() {
        return EquipmentType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EquipmentType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_constraint$address() {
        return EquipmentType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EquipmentType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EquipmentType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EquipmentType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EquipmentType_decode_ber$descriptor() {
        return EquipmentType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EquipmentType_decode_ber$handle() {
        return EquipmentType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EquipmentType_decode_ber$address() {
        return EquipmentType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EquipmentType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EquipmentType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_der$descriptor() {
        return EquipmentType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_encode_der$handle() {
        return EquipmentType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_der$address() {
        return EquipmentType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EquipmentType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EquipmentType_decode_xer$descriptor() {
        return EquipmentType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EquipmentType_decode_xer$handle() {
        return EquipmentType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EquipmentType_decode_xer$address() {
        return EquipmentType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EquipmentType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EquipmentType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_xer$descriptor() {
        return EquipmentType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_encode_xer$handle() {
        return EquipmentType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_xer$address() {
        return EquipmentType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EquipmentType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_jer$descriptor() {
        return EquipmentType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_encode_jer$handle() {
        return EquipmentType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_jer$address() {
        return EquipmentType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EquipmentType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EquipmentType_decode_oer$descriptor() {
        return EquipmentType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EquipmentType_decode_oer$handle() {
        return EquipmentType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EquipmentType_decode_oer$address() {
        return EquipmentType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EquipmentType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EquipmentType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_oer$descriptor() {
        return EquipmentType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EquipmentType_encode_oer$handle() {
        return EquipmentType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_oer$address() {
        return EquipmentType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EquipmentType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EquipmentType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EquipmentType_decode_uper$descriptor() {
        return EquipmentType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EquipmentType_decode_uper$handle() {
        return EquipmentType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EquipmentType_decode_uper$address() {
        return EquipmentType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EquipmentType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EquipmentType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_uper$descriptor() {
        return EquipmentType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EquipmentType_encode_uper$handle() {
        return EquipmentType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EquipmentType_encode_uper$address() {
        return EquipmentType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EquipmentType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EquipmentType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EquipmentType_decode_aper$descriptor() {
        return EquipmentType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EquipmentType_decode_aper$handle() {
        return EquipmentType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EquipmentType_decode_aper$address() {
        return EquipmentType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EquipmentType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EquipmentType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EquipmentType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EquipmentType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EquipmentType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EquipmentType_encode_aper$descriptor() {
        return EquipmentType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EquipmentType_encode_aper$handle() {
        return EquipmentType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EquipmentType_encode_aper$address() {
        return EquipmentType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EquipmentType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EquipmentType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EquipmentType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EquipmentType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_DetectedObjectList$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DetectedObjectList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectList
     * }
     */
    public static GroupLayout asn_DEF_DetectedObjectList$layout() {
        return asn_DEF_DetectedObjectList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectList
     * }
     */
    public static MemorySegment asn_DEF_DetectedObjectList() {
        return asn_DEF_DetectedObjectList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectList
     * }
     */
    public static void asn_DEF_DetectedObjectList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DetectedObjectList$constants.SEGMENT, 0L, asn_DEF_DetectedObjectList$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DetectedObjectList_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DetectedObjectList_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_DetectedObjectList_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DetectedObjectList_specs_1$layout() {
        return asn_SPC_DetectedObjectList_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_DetectedObjectList_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DetectedObjectList_specs_1() {
        return asn_SPC_DetectedObjectList_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_DetectedObjectList_specs_1
     * }
     */
    public static void asn_SPC_DetectedObjectList_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DetectedObjectList_specs_1$constants.SEGMENT, 0L, asn_SPC_DetectedObjectList_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DetectedObjectList_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DetectedObjectList_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_DetectedObjectList_1$layout() {
        return asn_MBR_DetectedObjectList_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static long[] asn_MBR_DetectedObjectList_1$dimensions() {
        return asn_MBR_DetectedObjectList_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectList_1() {
        return asn_MBR_DetectedObjectList_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static void asn_MBR_DetectedObjectList_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectList_1$constants.SEGMENT, 0L, asn_MBR_DetectedObjectList_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectList_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DetectedObjectList_1$constants.HANDLE.invokeExact(asn_MBR_DetectedObjectList_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectList_1[1]
     * }
     */
    public static void asn_MBR_DetectedObjectList_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectList_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_DetectedObjectList_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_DetectedObjectList_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DetectedObjectList_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_DetectedObjectList_constr_1$layout() {
        return asn_PER_type_DetectedObjectList_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DetectedObjectList_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_DetectedObjectList_constr_1() {
        return asn_PER_type_DetectedObjectList_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DetectedObjectList_constr_1
     * }
     */
    public static void asn_PER_type_DetectedObjectList_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_DetectedObjectList_constr_1$constants.SEGMENT, 0L, asn_PER_type_DetectedObjectList_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int ObjectType_unknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ObjectType.ObjectType_unknown = 0
     * }
     */
    public static int ObjectType_unknown() {
        return ObjectType_unknown;
    }
    private static final int ObjectType_vehicle = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ObjectType.ObjectType_vehicle = 1
     * }
     */
    public static int ObjectType_vehicle() {
        return ObjectType_vehicle;
    }
    private static final int ObjectType_vru = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ObjectType.ObjectType_vru = 2
     * }
     */
    public static int ObjectType_vru() {
        return ObjectType_vru;
    }
    private static final int ObjectType_animal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ObjectType.ObjectType_animal = 3
     * }
     */
    public static int ObjectType_animal() {
        return ObjectType_animal;
    }
    /**
     * {@snippet lang=c :
     * typedef long ObjectType_t
     * }
     */
    public static final OfLong ObjectType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ObjectType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ObjectType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ObjectType_constr_1$layout() {
        return asn_PER_type_ObjectType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ObjectType_constr_1() {
        return asn_PER_type_ObjectType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectType_constr_1
     * }
     */
    public static void asn_PER_type_ObjectType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ObjectType_constr_1$constants.SEGMENT, 0L, asn_PER_type_ObjectType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ObjectType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ObjectType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectType
     * }
     */
    public static GroupLayout asn_DEF_ObjectType$layout() {
        return asn_DEF_ObjectType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectType
     * }
     */
    public static MemorySegment asn_DEF_ObjectType() {
        return asn_DEF_ObjectType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectType
     * }
     */
    public static void asn_DEF_ObjectType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ObjectType$constants.SEGMENT, 0L, asn_DEF_ObjectType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ObjectType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ObjectType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ObjectType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ObjectType_specs_1$layout() {
        return asn_SPC_ObjectType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ObjectType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ObjectType_specs_1() {
        return asn_SPC_ObjectType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ObjectType_specs_1
     * }
     */
    public static void asn_SPC_ObjectType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ObjectType_specs_1$constants.SEGMENT, 0L, asn_SPC_ObjectType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class ObjectType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ObjectType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ObjectType_free$descriptor() {
        return ObjectType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ObjectType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ObjectType_free$handle() {
        return ObjectType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ObjectType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ObjectType_free$address() {
        return ObjectType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ObjectType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ObjectType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ObjectType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObjectType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_print$descriptor() {
        return ObjectType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObjectType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_print$handle() {
        return ObjectType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObjectType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_print$address() {
        return ObjectType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObjectType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ObjectType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObjectType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_constraint$descriptor() {
        return ObjectType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObjectType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_constraint$handle() {
        return ObjectType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObjectType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_constraint$address() {
        return ObjectType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObjectType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ObjectType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ObjectType_decode_ber$descriptor() {
        return ObjectType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ObjectType_decode_ber$handle() {
        return ObjectType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObjectType_decode_ber$address() {
        return ObjectType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObjectType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ObjectType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_der$descriptor() {
        return ObjectType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_encode_der$handle() {
        return ObjectType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_der$address() {
        return ObjectType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObjectType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObjectType_decode_xer$descriptor() {
        return ObjectType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ObjectType_decode_xer$handle() {
        return ObjectType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectType_decode_xer$address() {
        return ObjectType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObjectType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_xer$descriptor() {
        return ObjectType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_encode_xer$handle() {
        return ObjectType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_xer$address() {
        return ObjectType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObjectType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_jer$descriptor() {
        return ObjectType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_encode_jer$handle() {
        return ObjectType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_jer$address() {
        return ObjectType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ObjectType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObjectType_decode_oer$descriptor() {
        return ObjectType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ObjectType_decode_oer$handle() {
        return ObjectType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectType_decode_oer$address() {
        return ObjectType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObjectType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_oer$descriptor() {
        return ObjectType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectType_encode_oer$handle() {
        return ObjectType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_oer$address() {
        return ObjectType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObjectType_decode_uper$descriptor() {
        return ObjectType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObjectType_decode_uper$handle() {
        return ObjectType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectType_decode_uper$address() {
        return ObjectType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_uper$descriptor() {
        return ObjectType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObjectType_encode_uper$handle() {
        return ObjectType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectType_encode_uper$address() {
        return ObjectType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObjectType_decode_aper$descriptor() {
        return ObjectType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObjectType_decode_aper$handle() {
        return ObjectType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectType_decode_aper$address() {
        return ObjectType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObjectType_encode_aper$descriptor() {
        return ObjectType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObjectType_encode_aper$handle() {
        return ObjectType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectType_encode_aper$address() {
        return ObjectType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long ClassificationConfidence_t
     * }
     */
    public static final OfLong ClassificationConfidence_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ClassificationConfidence_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ClassificationConfidence_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClassificationConfidence_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ClassificationConfidence_constr_1$layout() {
        return asn_PER_type_ClassificationConfidence_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClassificationConfidence_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ClassificationConfidence_constr_1() {
        return asn_PER_type_ClassificationConfidence_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ClassificationConfidence_constr_1
     * }
     */
    public static void asn_PER_type_ClassificationConfidence_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ClassificationConfidence_constr_1$constants.SEGMENT, 0L, asn_PER_type_ClassificationConfidence_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ClassificationConfidence$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ClassificationConfidence").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClassificationConfidence
     * }
     */
    public static GroupLayout asn_DEF_ClassificationConfidence$layout() {
        return asn_DEF_ClassificationConfidence$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClassificationConfidence
     * }
     */
    public static MemorySegment asn_DEF_ClassificationConfidence() {
        return asn_DEF_ClassificationConfidence$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ClassificationConfidence
     * }
     */
    public static void asn_DEF_ClassificationConfidence(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ClassificationConfidence$constants.SEGMENT, 0L, asn_DEF_ClassificationConfidence$constants.LAYOUT.byteSize());
    }

    private static class ClassificationConfidence_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ClassificationConfidence_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_free$descriptor() {
        return ClassificationConfidence_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ClassificationConfidence_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ClassificationConfidence_free$handle() {
        return ClassificationConfidence_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ClassificationConfidence_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ClassificationConfidence_free$address() {
        return ClassificationConfidence_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ClassificationConfidence_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ClassificationConfidence_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ClassificationConfidence_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ClassificationConfidence_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_print$descriptor() {
        return ClassificationConfidence_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ClassificationConfidence_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_print$handle() {
        return ClassificationConfidence_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ClassificationConfidence_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_print$address() {
        return ClassificationConfidence_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ClassificationConfidence_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ClassificationConfidence_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ClassificationConfidence_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ClassificationConfidence_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_constraint$descriptor() {
        return ClassificationConfidence_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ClassificationConfidence_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_constraint$handle() {
        return ClassificationConfidence_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ClassificationConfidence_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_constraint$address() {
        return ClassificationConfidence_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ClassificationConfidence_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ClassificationConfidence_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ClassificationConfidence_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_decode_ber$descriptor() {
        return ClassificationConfidence_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ClassificationConfidence_decode_ber$handle() {
        return ClassificationConfidence_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_ber$address() {
        return ClassificationConfidence_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ClassificationConfidence_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_der$descriptor() {
        return ClassificationConfidence_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_der$handle() {
        return ClassificationConfidence_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_der$address() {
        return ClassificationConfidence_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ClassificationConfidence_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_decode_xer$descriptor() {
        return ClassificationConfidence_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ClassificationConfidence_decode_xer$handle() {
        return ClassificationConfidence_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_xer$address() {
        return ClassificationConfidence_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ClassificationConfidence_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_xer$descriptor() {
        return ClassificationConfidence_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_xer$handle() {
        return ClassificationConfidence_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_xer$address() {
        return ClassificationConfidence_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ClassificationConfidence_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_jer$descriptor() {
        return ClassificationConfidence_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_jer$handle() {
        return ClassificationConfidence_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_jer$address() {
        return ClassificationConfidence_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ClassificationConfidence_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_decode_oer$descriptor() {
        return ClassificationConfidence_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ClassificationConfidence_decode_oer$handle() {
        return ClassificationConfidence_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_oer$address() {
        return ClassificationConfidence_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ClassificationConfidence_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_oer$descriptor() {
        return ClassificationConfidence_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_oer$handle() {
        return ClassificationConfidence_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_oer$address() {
        return ClassificationConfidence_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ClassificationConfidence_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_decode_uper$descriptor() {
        return ClassificationConfidence_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ClassificationConfidence_decode_uper$handle() {
        return ClassificationConfidence_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_uper$address() {
        return ClassificationConfidence_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ClassificationConfidence_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_uper$descriptor() {
        return ClassificationConfidence_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_uper$handle() {
        return ClassificationConfidence_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_uper$address() {
        return ClassificationConfidence_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ClassificationConfidence_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_decode_aper$descriptor() {
        return ClassificationConfidence_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ClassificationConfidence_decode_aper$handle() {
        return ClassificationConfidence_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_aper$address() {
        return ClassificationConfidence_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ClassificationConfidence_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ClassificationConfidence_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClassificationConfidence_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ClassificationConfidence_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ClassificationConfidence_encode_aper$descriptor() {
        return ClassificationConfidence_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ClassificationConfidence_encode_aper$handle() {
        return ClassificationConfidence_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_aper$address() {
        return ClassificationConfidence_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ClassificationConfidence_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ClassificationConfidence_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ClassificationConfidence_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClassificationConfidence_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long ObjectID_t
     * }
     */
    public static final OfLong ObjectID_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ObjectID_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ObjectID_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectID_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ObjectID_constr_1$layout() {
        return asn_PER_type_ObjectID_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectID_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ObjectID_constr_1() {
        return asn_PER_type_ObjectID_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObjectID_constr_1
     * }
     */
    public static void asn_PER_type_ObjectID_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ObjectID_constr_1$constants.SEGMENT, 0L, asn_PER_type_ObjectID_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ObjectID$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ObjectID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectID
     * }
     */
    public static GroupLayout asn_DEF_ObjectID$layout() {
        return asn_DEF_ObjectID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectID
     * }
     */
    public static MemorySegment asn_DEF_ObjectID() {
        return asn_DEF_ObjectID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObjectID
     * }
     */
    public static void asn_DEF_ObjectID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ObjectID$constants.SEGMENT, 0L, asn_DEF_ObjectID$constants.LAYOUT.byteSize());
    }

    private static class ObjectID_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ObjectID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ObjectID_free$descriptor() {
        return ObjectID_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ObjectID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ObjectID_free$handle() {
        return ObjectID_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ObjectID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ObjectID_free$address() {
        return ObjectID_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ObjectID_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ObjectID_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ObjectID_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObjectID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_print$descriptor() {
        return ObjectID_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObjectID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_print$handle() {
        return ObjectID_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObjectID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_print$address() {
        return ObjectID_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObjectID_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ObjectID_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectID_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObjectID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_constraint$descriptor() {
        return ObjectID_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObjectID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_constraint$handle() {
        return ObjectID_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObjectID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_constraint$address() {
        return ObjectID_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObjectID_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ObjectID_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectID_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ObjectID_decode_ber$descriptor() {
        return ObjectID_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ObjectID_decode_ber$handle() {
        return ObjectID_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObjectID_decode_ber$address() {
        return ObjectID_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObjectID_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ObjectID_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_der$descriptor() {
        return ObjectID_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_encode_der$handle() {
        return ObjectID_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_der$address() {
        return ObjectID_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObjectID_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObjectID_decode_xer$descriptor() {
        return ObjectID_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ObjectID_decode_xer$handle() {
        return ObjectID_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectID_decode_xer$address() {
        return ObjectID_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectID_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObjectID_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_xer$descriptor() {
        return ObjectID_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_encode_xer$handle() {
        return ObjectID_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_xer$address() {
        return ObjectID_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObjectID_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_jer$descriptor() {
        return ObjectID_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_encode_jer$handle() {
        return ObjectID_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_jer$address() {
        return ObjectID_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ObjectID_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObjectID_decode_oer$descriptor() {
        return ObjectID_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ObjectID_decode_oer$handle() {
        return ObjectID_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectID_decode_oer$address() {
        return ObjectID_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObjectID_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObjectID_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_oer$descriptor() {
        return ObjectID_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObjectID_encode_oer$handle() {
        return ObjectID_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_oer$address() {
        return ObjectID_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObjectID_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectID_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObjectID_decode_uper$descriptor() {
        return ObjectID_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObjectID_decode_uper$handle() {
        return ObjectID_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectID_decode_uper$address() {
        return ObjectID_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectID_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectID_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_uper$descriptor() {
        return ObjectID_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObjectID_encode_uper$handle() {
        return ObjectID_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectID_encode_uper$address() {
        return ObjectID_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectID_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectID_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObjectID_decode_aper$descriptor() {
        return ObjectID_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObjectID_decode_aper$handle() {
        return ObjectID_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectID_decode_aper$address() {
        return ObjectID_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObjectID_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObjectID_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObjectID_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObjectID_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObjectID_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObjectID_encode_aper$descriptor() {
        return ObjectID_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObjectID_encode_aper$handle() {
        return ObjectID_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectID_encode_aper$address() {
        return ObjectID_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObjectID_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObjectID_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObjectID_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObjectID_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long MeasurementTimeOffset_t
     * }
     */
    public static final OfLong MeasurementTimeOffset_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_MeasurementTimeOffset_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_MeasurementTimeOffset_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MeasurementTimeOffset_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_MeasurementTimeOffset_constr_1$layout() {
        return asn_PER_type_MeasurementTimeOffset_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MeasurementTimeOffset_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_MeasurementTimeOffset_constr_1() {
        return asn_PER_type_MeasurementTimeOffset_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_MeasurementTimeOffset_constr_1
     * }
     */
    public static void asn_PER_type_MeasurementTimeOffset_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_MeasurementTimeOffset_constr_1$constants.SEGMENT, 0L, asn_PER_type_MeasurementTimeOffset_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_MeasurementTimeOffset$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_MeasurementTimeOffset").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MeasurementTimeOffset
     * }
     */
    public static GroupLayout asn_DEF_MeasurementTimeOffset$layout() {
        return asn_DEF_MeasurementTimeOffset$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MeasurementTimeOffset
     * }
     */
    public static MemorySegment asn_DEF_MeasurementTimeOffset() {
        return asn_DEF_MeasurementTimeOffset$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MeasurementTimeOffset
     * }
     */
    public static void asn_DEF_MeasurementTimeOffset(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_MeasurementTimeOffset$constants.SEGMENT, 0L, asn_DEF_MeasurementTimeOffset$constants.LAYOUT.byteSize());
    }

    private static class MeasurementTimeOffset_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void MeasurementTimeOffset_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_free$descriptor() {
        return MeasurementTimeOffset_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void MeasurementTimeOffset_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_free$handle() {
        return MeasurementTimeOffset_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void MeasurementTimeOffset_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_free$address() {
        return MeasurementTimeOffset_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void MeasurementTimeOffset_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void MeasurementTimeOffset_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = MeasurementTimeOffset_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_print$descriptor() {
        return MeasurementTimeOffset_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_print$handle() {
        return MeasurementTimeOffset_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_print$address() {
        return MeasurementTimeOffset_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MeasurementTimeOffset_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int MeasurementTimeOffset_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MeasurementTimeOffset_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_constraint$descriptor() {
        return MeasurementTimeOffset_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_constraint$handle() {
        return MeasurementTimeOffset_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int MeasurementTimeOffset_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_constraint$address() {
        return MeasurementTimeOffset_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int MeasurementTimeOffset_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int MeasurementTimeOffset_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MeasurementTimeOffset_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_decode_ber$descriptor() {
        return MeasurementTimeOffset_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_decode_ber$handle() {
        return MeasurementTimeOffset_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_ber$address() {
        return MeasurementTimeOffset_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = MeasurementTimeOffset_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_der$descriptor() {
        return MeasurementTimeOffset_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_der$handle() {
        return MeasurementTimeOffset_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_der$address() {
        return MeasurementTimeOffset_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MeasurementTimeOffset_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_decode_xer$descriptor() {
        return MeasurementTimeOffset_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_decode_xer$handle() {
        return MeasurementTimeOffset_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_xer$address() {
        return MeasurementTimeOffset_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MeasurementTimeOffset_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_xer$descriptor() {
        return MeasurementTimeOffset_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_xer$handle() {
        return MeasurementTimeOffset_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_xer$address() {
        return MeasurementTimeOffset_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = MeasurementTimeOffset_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_jer$descriptor() {
        return MeasurementTimeOffset_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_jer$handle() {
        return MeasurementTimeOffset_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_jer$address() {
        return MeasurementTimeOffset_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = MeasurementTimeOffset_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_decode_oer$descriptor() {
        return MeasurementTimeOffset_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_decode_oer$handle() {
        return MeasurementTimeOffset_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_oer$address() {
        return MeasurementTimeOffset_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = MeasurementTimeOffset_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_oer$descriptor() {
        return MeasurementTimeOffset_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_oer$handle() {
        return MeasurementTimeOffset_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_oer$address() {
        return MeasurementTimeOffset_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MeasurementTimeOffset_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_decode_uper$descriptor() {
        return MeasurementTimeOffset_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_decode_uper$handle() {
        return MeasurementTimeOffset_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_uper$address() {
        return MeasurementTimeOffset_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MeasurementTimeOffset_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_uper$descriptor() {
        return MeasurementTimeOffset_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_uper$handle() {
        return MeasurementTimeOffset_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_uper$address() {
        return MeasurementTimeOffset_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MeasurementTimeOffset_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_decode_aper$descriptor() {
        return MeasurementTimeOffset_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_decode_aper$handle() {
        return MeasurementTimeOffset_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_aper$address() {
        return MeasurementTimeOffset_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t MeasurementTimeOffset_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = MeasurementTimeOffset_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class MeasurementTimeOffset_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("MeasurementTimeOffset_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor MeasurementTimeOffset_encode_aper$descriptor() {
        return MeasurementTimeOffset_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle MeasurementTimeOffset_encode_aper$handle() {
        return MeasurementTimeOffset_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_aper$address() {
        return MeasurementTimeOffset_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t MeasurementTimeOffset_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment MeasurementTimeOffset_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = MeasurementTimeOffset_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("MeasurementTimeOffset_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long SensorDataSharingMessage_ObjectDistance_t
     * }
     */
    public static final OfLong SensorDataSharingMessage_ObjectDistance_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$layout() {
        return asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1() {
        return asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1
     * }
     */
    public static void asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$constants.SEGMENT, 0L, asn_PER_type_SensorDataSharingMessage_ObjectDistance_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_SensorDataSharingMessage_ObjectDistance$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SensorDataSharingMessage_ObjectDistance").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_ObjectDistance
     * }
     */
    public static GroupLayout asn_DEF_SensorDataSharingMessage_ObjectDistance$layout() {
        return asn_DEF_SensorDataSharingMessage_ObjectDistance$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_ObjectDistance
     * }
     */
    public static MemorySegment asn_DEF_SensorDataSharingMessage_ObjectDistance() {
        return asn_DEF_SensorDataSharingMessage_ObjectDistance$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_ObjectDistance
     * }
     */
    public static void asn_DEF_SensorDataSharingMessage_ObjectDistance(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SensorDataSharingMessage_ObjectDistance$constants.SEGMENT, 0L, asn_DEF_SensorDataSharingMessage_ObjectDistance$constants.LAYOUT.byteSize());
    }

    private static class SensorDataSharingMessage_ObjectDistance_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_ObjectDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_free$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_ObjectDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_free$handle() {
        return SensorDataSharingMessage_ObjectDistance_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_ObjectDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_free$address() {
        return SensorDataSharingMessage_ObjectDistance_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SensorDataSharingMessage_ObjectDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void SensorDataSharingMessage_ObjectDistance_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_print$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_print$handle() {
        return SensorDataSharingMessage_ObjectDistance_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_print$address() {
        return SensorDataSharingMessage_ObjectDistance_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int SensorDataSharingMessage_ObjectDistance_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_constraint$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_constraint$handle() {
        return SensorDataSharingMessage_ObjectDistance_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_constraint$address() {
        return SensorDataSharingMessage_ObjectDistance_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SensorDataSharingMessage_ObjectDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int SensorDataSharingMessage_ObjectDistance_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_decode_ber$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_decode_ber$handle() {
        return SensorDataSharingMessage_ObjectDistance_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_ber$address() {
        return SensorDataSharingMessage_ObjectDistance_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_der$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_der$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_der$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_decode_xer$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_decode_xer$handle() {
        return SensorDataSharingMessage_ObjectDistance_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_xer$address() {
        return SensorDataSharingMessage_ObjectDistance_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_xer$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_xer$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_xer$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_jer$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_jer$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_jer$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_decode_oer$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_decode_oer$handle() {
        return SensorDataSharingMessage_ObjectDistance_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_oer$address() {
        return SensorDataSharingMessage_ObjectDistance_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_oer$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_oer$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_oer$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_decode_uper$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_decode_uper$handle() {
        return SensorDataSharingMessage_ObjectDistance_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_uper$address() {
        return SensorDataSharingMessage_ObjectDistance_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_uper$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_uper$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_uper$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_decode_aper$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_decode_aper$handle() {
        return SensorDataSharingMessage_ObjectDistance_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_aper$address() {
        return SensorDataSharingMessage_ObjectDistance_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SensorDataSharingMessage_ObjectDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_ObjectDistance_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_ObjectDistance_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_ObjectDistance_encode_aper$descriptor() {
        return SensorDataSharingMessage_ObjectDistance_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_ObjectDistance_encode_aper$handle() {
        return SensorDataSharingMessage_ObjectDistance_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_aper$address() {
        return SensorDataSharingMessage_ObjectDistance_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SensorDataSharingMessage_ObjectDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_ObjectDistance_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SensorDataSharingMessage_ObjectDistance_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_ObjectDistance_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ
     * }
     */
    public static GroupLayout asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$layout() {
        return asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ
     * }
     */
    public static MemorySegment asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ() {
        return asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ
     * }
     */
    public static void asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$constants.SEGMENT, 0L, asn_DEF_SensorDataSharingMessage_PositionOffsetXYZ$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1
     * }
     */
    public static GroupLayout asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$layout() {
        return asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1
     * }
     */
    public static MemorySegment asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1() {
        return asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1
     * }
     */
    public static void asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$constants.SEGMENT, 0L, asn_SPC_SensorDataSharingMessage_PositionOffsetXYZ_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$layout() {
        return asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static long[] asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$dimensions() {
        return asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static MemorySegment asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1() {
        return asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static void asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.SEGMENT, 0L, asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static MemorySegment asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.HANDLE.invokeExact(asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1[3]
     * }
     */
    public static void asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SensorDataSharingMessage_PositionOffsetXYZ_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_DetectedObjectCommonData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DetectedObjectCommonData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectCommonData
     * }
     */
    public static GroupLayout asn_DEF_DetectedObjectCommonData$layout() {
        return asn_DEF_DetectedObjectCommonData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectCommonData
     * }
     */
    public static MemorySegment asn_DEF_DetectedObjectCommonData() {
        return asn_DEF_DetectedObjectCommonData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectCommonData
     * }
     */
    public static void asn_DEF_DetectedObjectCommonData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DetectedObjectCommonData$constants.SEGMENT, 0L, asn_DEF_DetectedObjectCommonData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DetectedObjectCommonData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DetectedObjectCommonData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectCommonData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DetectedObjectCommonData_specs_1$layout() {
        return asn_SPC_DetectedObjectCommonData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectCommonData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DetectedObjectCommonData_specs_1() {
        return asn_SPC_DetectedObjectCommonData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectCommonData_specs_1
     * }
     */
    public static void asn_SPC_DetectedObjectCommonData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DetectedObjectCommonData_specs_1$constants.SEGMENT, 0L, asn_SPC_DetectedObjectCommonData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DetectedObjectCommonData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(18, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DetectedObjectCommonData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 18 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static SequenceLayout asn_MBR_DetectedObjectCommonData_1$layout() {
        return asn_MBR_DetectedObjectCommonData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static long[] asn_MBR_DetectedObjectCommonData_1$dimensions() {
        return asn_MBR_DetectedObjectCommonData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectCommonData_1() {
        return asn_MBR_DetectedObjectCommonData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static void asn_MBR_DetectedObjectCommonData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectCommonData_1$constants.SEGMENT, 0L, asn_MBR_DetectedObjectCommonData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectCommonData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DetectedObjectCommonData_1$constants.HANDLE.invokeExact(asn_MBR_DetectedObjectCommonData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectCommonData_1[18]
     * }
     */
    public static void asn_MBR_DetectedObjectCommonData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectCommonData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_DetectedObjectData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DetectedObjectData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectData
     * }
     */
    public static GroupLayout asn_DEF_DetectedObjectData$layout() {
        return asn_DEF_DetectedObjectData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectData
     * }
     */
    public static MemorySegment asn_DEF_DetectedObjectData() {
        return asn_DEF_DetectedObjectData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedObjectData
     * }
     */
    public static void asn_DEF_DetectedObjectData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DetectedObjectData$constants.SEGMENT, 0L, asn_DEF_DetectedObjectData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DetectedObjectData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DetectedObjectData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DetectedObjectData_specs_1$layout() {
        return asn_SPC_DetectedObjectData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DetectedObjectData_specs_1() {
        return asn_SPC_DetectedObjectData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedObjectData_specs_1
     * }
     */
    public static void asn_SPC_DetectedObjectData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DetectedObjectData_specs_1$constants.SEGMENT, 0L, asn_SPC_DetectedObjectData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DetectedObjectData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DetectedObjectData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_DetectedObjectData_1$layout() {
        return asn_MBR_DetectedObjectData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static long[] asn_MBR_DetectedObjectData_1$dimensions() {
        return asn_MBR_DetectedObjectData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectData_1() {
        return asn_MBR_DetectedObjectData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static void asn_MBR_DetectedObjectData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectData_1$constants.SEGMENT, 0L, asn_MBR_DetectedObjectData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DetectedObjectData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DetectedObjectData_1$constants.HANDLE.invokeExact(asn_MBR_DetectedObjectData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedObjectData_1[2]
     * }
     */
    public static void asn_MBR_DetectedObjectData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedObjectData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_DetectedVehicleData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DetectedVehicleData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedVehicleData
     * }
     */
    public static GroupLayout asn_DEF_DetectedVehicleData$layout() {
        return asn_DEF_DetectedVehicleData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedVehicleData
     * }
     */
    public static MemorySegment asn_DEF_DetectedVehicleData() {
        return asn_DEF_DetectedVehicleData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DetectedVehicleData
     * }
     */
    public static void asn_DEF_DetectedVehicleData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DetectedVehicleData$constants.SEGMENT, 0L, asn_DEF_DetectedVehicleData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DetectedVehicleData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DetectedVehicleData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedVehicleData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DetectedVehicleData_specs_1$layout() {
        return asn_SPC_DetectedVehicleData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedVehicleData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DetectedVehicleData_specs_1() {
        return asn_SPC_DetectedVehicleData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DetectedVehicleData_specs_1
     * }
     */
    public static void asn_SPC_DetectedVehicleData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DetectedVehicleData_specs_1$constants.SEGMENT, 0L, asn_SPC_DetectedVehicleData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DetectedVehicleData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(10, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DetectedVehicleData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 10 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static SequenceLayout asn_MBR_DetectedVehicleData_1$layout() {
        return asn_MBR_DetectedVehicleData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static long[] asn_MBR_DetectedVehicleData_1$dimensions() {
        return asn_MBR_DetectedVehicleData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static MemorySegment asn_MBR_DetectedVehicleData_1() {
        return asn_MBR_DetectedVehicleData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static void asn_MBR_DetectedVehicleData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedVehicleData_1$constants.SEGMENT, 0L, asn_MBR_DetectedVehicleData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static MemorySegment asn_MBR_DetectedVehicleData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DetectedVehicleData_1$constants.HANDLE.invokeExact(asn_MBR_DetectedVehicleData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DetectedVehicleData_1[10]
     * }
     */
    public static void asn_MBR_DetectedVehicleData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DetectedVehicleData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long PitchDetected_t
     * }
     */
    public static final OfLong PitchDetected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_PitchDetected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_PitchDetected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PitchDetected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_PitchDetected_constr_1$layout() {
        return asn_PER_type_PitchDetected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PitchDetected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_PitchDetected_constr_1() {
        return asn_PER_type_PitchDetected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PitchDetected_constr_1
     * }
     */
    public static void asn_PER_type_PitchDetected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_PitchDetected_constr_1$constants.SEGMENT, 0L, asn_PER_type_PitchDetected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_PitchDetected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PitchDetected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PitchDetected
     * }
     */
    public static GroupLayout asn_DEF_PitchDetected$layout() {
        return asn_DEF_PitchDetected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PitchDetected
     * }
     */
    public static MemorySegment asn_DEF_PitchDetected() {
        return asn_DEF_PitchDetected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PitchDetected
     * }
     */
    public static void asn_DEF_PitchDetected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PitchDetected$constants.SEGMENT, 0L, asn_DEF_PitchDetected$constants.LAYOUT.byteSize());
    }

    private static class PitchDetected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PitchDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor PitchDetected_free$descriptor() {
        return PitchDetected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PitchDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle PitchDetected_free$handle() {
        return PitchDetected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PitchDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment PitchDetected_free$address() {
        return PitchDetected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PitchDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void PitchDetected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = PitchDetected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PitchDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_print$descriptor() {
        return PitchDetected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PitchDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_print$handle() {
        return PitchDetected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PitchDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_print$address() {
        return PitchDetected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PitchDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int PitchDetected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PitchDetected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PitchDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_constraint$descriptor() {
        return PitchDetected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PitchDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_constraint$handle() {
        return PitchDetected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PitchDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_constraint$address() {
        return PitchDetected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PitchDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int PitchDetected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PitchDetected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor PitchDetected_decode_ber$descriptor() {
        return PitchDetected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle PitchDetected_decode_ber$handle() {
        return PitchDetected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PitchDetected_decode_ber$address() {
        return PitchDetected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PitchDetected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = PitchDetected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_der$descriptor() {
        return PitchDetected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_encode_der$handle() {
        return PitchDetected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_der$address() {
        return PitchDetected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PitchDetected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PitchDetected_decode_xer$descriptor() {
        return PitchDetected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle PitchDetected_decode_xer$handle() {
        return PitchDetected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PitchDetected_decode_xer$address() {
        return PitchDetected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PitchDetected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PitchDetected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_xer$descriptor() {
        return PitchDetected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_encode_xer$handle() {
        return PitchDetected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_xer$address() {
        return PitchDetected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PitchDetected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_jer$descriptor() {
        return PitchDetected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_encode_jer$handle() {
        return PitchDetected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_jer$address() {
        return PitchDetected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = PitchDetected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PitchDetected_decode_oer$descriptor() {
        return PitchDetected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle PitchDetected_decode_oer$handle() {
        return PitchDetected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PitchDetected_decode_oer$address() {
        return PitchDetected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PitchDetected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PitchDetected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_oer$descriptor() {
        return PitchDetected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PitchDetected_encode_oer$handle() {
        return PitchDetected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_oer$address() {
        return PitchDetected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PitchDetected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PitchDetected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PitchDetected_decode_uper$descriptor() {
        return PitchDetected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PitchDetected_decode_uper$handle() {
        return PitchDetected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PitchDetected_decode_uper$address() {
        return PitchDetected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PitchDetected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PitchDetected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_uper$descriptor() {
        return PitchDetected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PitchDetected_encode_uper$handle() {
        return PitchDetected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PitchDetected_encode_uper$address() {
        return PitchDetected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PitchDetected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PitchDetected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PitchDetected_decode_aper$descriptor() {
        return PitchDetected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PitchDetected_decode_aper$handle() {
        return PitchDetected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PitchDetected_decode_aper$address() {
        return PitchDetected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PitchDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PitchDetected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PitchDetected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PitchDetected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PitchDetected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PitchDetected_encode_aper$descriptor() {
        return PitchDetected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PitchDetected_encode_aper$handle() {
        return PitchDetected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PitchDetected_encode_aper$address() {
        return PitchDetected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PitchDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PitchDetected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PitchDetected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PitchDetected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long RollDetected_t
     * }
     */
    public static final OfLong RollDetected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_RollDetected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RollDetected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RollDetected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RollDetected_constr_1$layout() {
        return asn_PER_type_RollDetected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RollDetected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RollDetected_constr_1() {
        return asn_PER_type_RollDetected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RollDetected_constr_1
     * }
     */
    public static void asn_PER_type_RollDetected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RollDetected_constr_1$constants.SEGMENT, 0L, asn_PER_type_RollDetected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RollDetected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RollDetected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RollDetected
     * }
     */
    public static GroupLayout asn_DEF_RollDetected$layout() {
        return asn_DEF_RollDetected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RollDetected
     * }
     */
    public static MemorySegment asn_DEF_RollDetected() {
        return asn_DEF_RollDetected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RollDetected
     * }
     */
    public static void asn_DEF_RollDetected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RollDetected$constants.SEGMENT, 0L, asn_DEF_RollDetected$constants.LAYOUT.byteSize());
    }

    private static class RollDetected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RollDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor RollDetected_free$descriptor() {
        return RollDetected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RollDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle RollDetected_free$handle() {
        return RollDetected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RollDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment RollDetected_free$address() {
        return RollDetected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RollDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void RollDetected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = RollDetected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RollDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_print$descriptor() {
        return RollDetected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RollDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_print$handle() {
        return RollDetected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RollDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_print$address() {
        return RollDetected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RollDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int RollDetected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RollDetected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RollDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_constraint$descriptor() {
        return RollDetected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RollDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_constraint$handle() {
        return RollDetected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RollDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_constraint$address() {
        return RollDetected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RollDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int RollDetected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RollDetected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor RollDetected_decode_ber$descriptor() {
        return RollDetected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle RollDetected_decode_ber$handle() {
        return RollDetected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RollDetected_decode_ber$address() {
        return RollDetected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RollDetected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = RollDetected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_der$descriptor() {
        return RollDetected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_encode_der$handle() {
        return RollDetected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_der$address() {
        return RollDetected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RollDetected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RollDetected_decode_xer$descriptor() {
        return RollDetected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle RollDetected_decode_xer$handle() {
        return RollDetected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RollDetected_decode_xer$address() {
        return RollDetected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RollDetected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RollDetected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_xer$descriptor() {
        return RollDetected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_encode_xer$handle() {
        return RollDetected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_xer$address() {
        return RollDetected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RollDetected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_jer$descriptor() {
        return RollDetected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_encode_jer$handle() {
        return RollDetected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_jer$address() {
        return RollDetected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = RollDetected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RollDetected_decode_oer$descriptor() {
        return RollDetected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle RollDetected_decode_oer$handle() {
        return RollDetected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RollDetected_decode_oer$address() {
        return RollDetected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RollDetected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RollDetected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_oer$descriptor() {
        return RollDetected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RollDetected_encode_oer$handle() {
        return RollDetected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_oer$address() {
        return RollDetected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RollDetected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RollDetected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RollDetected_decode_uper$descriptor() {
        return RollDetected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RollDetected_decode_uper$handle() {
        return RollDetected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RollDetected_decode_uper$address() {
        return RollDetected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RollDetected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RollDetected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_uper$descriptor() {
        return RollDetected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RollDetected_encode_uper$handle() {
        return RollDetected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RollDetected_encode_uper$address() {
        return RollDetected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RollDetected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RollDetected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RollDetected_decode_aper$descriptor() {
        return RollDetected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RollDetected_decode_aper$handle() {
        return RollDetected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RollDetected_decode_aper$address() {
        return RollDetected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RollDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RollDetected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RollDetected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RollDetected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RollDetected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RollDetected_encode_aper$descriptor() {
        return RollDetected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RollDetected_encode_aper$handle() {
        return RollDetected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RollDetected_encode_aper$address() {
        return RollDetected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RollDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RollDetected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RollDetected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RollDetected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long YawDetected_t
     * }
     */
    public static final OfLong YawDetected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_YawDetected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_YawDetected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_YawDetected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_YawDetected_constr_1$layout() {
        return asn_PER_type_YawDetected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_YawDetected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_YawDetected_constr_1() {
        return asn_PER_type_YawDetected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_YawDetected_constr_1
     * }
     */
    public static void asn_PER_type_YawDetected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_YawDetected_constr_1$constants.SEGMENT, 0L, asn_PER_type_YawDetected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_YawDetected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_YawDetected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_YawDetected
     * }
     */
    public static GroupLayout asn_DEF_YawDetected$layout() {
        return asn_DEF_YawDetected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_YawDetected
     * }
     */
    public static MemorySegment asn_DEF_YawDetected() {
        return asn_DEF_YawDetected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_YawDetected
     * }
     */
    public static void asn_DEF_YawDetected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_YawDetected$constants.SEGMENT, 0L, asn_DEF_YawDetected$constants.LAYOUT.byteSize());
    }

    private static class YawDetected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void YawDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor YawDetected_free$descriptor() {
        return YawDetected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void YawDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle YawDetected_free$handle() {
        return YawDetected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void YawDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment YawDetected_free$address() {
        return YawDetected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void YawDetected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void YawDetected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = YawDetected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int YawDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_print$descriptor() {
        return YawDetected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int YawDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_print$handle() {
        return YawDetected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int YawDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_print$address() {
        return YawDetected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int YawDetected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int YawDetected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = YawDetected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int YawDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_constraint$descriptor() {
        return YawDetected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int YawDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_constraint$handle() {
        return YawDetected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int YawDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_constraint$address() {
        return YawDetected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int YawDetected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int YawDetected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = YawDetected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor YawDetected_decode_ber$descriptor() {
        return YawDetected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle YawDetected_decode_ber$handle() {
        return YawDetected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment YawDetected_decode_ber$address() {
        return YawDetected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment YawDetected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = YawDetected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_der$descriptor() {
        return YawDetected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_encode_der$handle() {
        return YawDetected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_der$address() {
        return YawDetected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = YawDetected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor YawDetected_decode_xer$descriptor() {
        return YawDetected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle YawDetected_decode_xer$handle() {
        return YawDetected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment YawDetected_decode_xer$address() {
        return YawDetected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment YawDetected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = YawDetected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_xer$descriptor() {
        return YawDetected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_encode_xer$handle() {
        return YawDetected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_xer$address() {
        return YawDetected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = YawDetected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_jer$descriptor() {
        return YawDetected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_encode_jer$handle() {
        return YawDetected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_jer$address() {
        return YawDetected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = YawDetected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor YawDetected_decode_oer$descriptor() {
        return YawDetected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle YawDetected_decode_oer$handle() {
        return YawDetected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment YawDetected_decode_oer$address() {
        return YawDetected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment YawDetected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = YawDetected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_oer$descriptor() {
        return YawDetected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle YawDetected_encode_oer$handle() {
        return YawDetected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_oer$address() {
        return YawDetected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment YawDetected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = YawDetected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor YawDetected_decode_uper$descriptor() {
        return YawDetected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle YawDetected_decode_uper$handle() {
        return YawDetected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment YawDetected_decode_uper$address() {
        return YawDetected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment YawDetected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = YawDetected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_uper$descriptor() {
        return YawDetected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle YawDetected_encode_uper$handle() {
        return YawDetected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment YawDetected_encode_uper$address() {
        return YawDetected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment YawDetected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = YawDetected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor YawDetected_decode_aper$descriptor() {
        return YawDetected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle YawDetected_decode_aper$handle() {
        return YawDetected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment YawDetected_decode_aper$address() {
        return YawDetected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t YawDetected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment YawDetected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = YawDetected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class YawDetected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("YawDetected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor YawDetected_encode_aper$descriptor() {
        return YawDetected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle YawDetected_encode_aper$handle() {
        return YawDetected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment YawDetected_encode_aper$address() {
        return YawDetected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t YawDetected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment YawDetected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = YawDetected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("YawDetected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_Attitude$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Attitude").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Attitude
     * }
     */
    public static GroupLayout asn_DEF_Attitude$layout() {
        return asn_DEF_Attitude$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Attitude
     * }
     */
    public static MemorySegment asn_DEF_Attitude() {
        return asn_DEF_Attitude$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Attitude
     * }
     */
    public static void asn_DEF_Attitude(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Attitude$constants.SEGMENT, 0L, asn_DEF_Attitude$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Attitude_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Attitude_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Attitude_specs_1
     * }
     */
    public static GroupLayout asn_SPC_Attitude_specs_1$layout() {
        return asn_SPC_Attitude_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Attitude_specs_1
     * }
     */
    public static MemorySegment asn_SPC_Attitude_specs_1() {
        return asn_SPC_Attitude_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Attitude_specs_1
     * }
     */
    public static void asn_SPC_Attitude_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Attitude_specs_1$constants.SEGMENT, 0L, asn_SPC_Attitude_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Attitude_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Attitude_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_Attitude_1$layout() {
        return asn_MBR_Attitude_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static long[] asn_MBR_Attitude_1$dimensions() {
        return asn_MBR_Attitude_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static MemorySegment asn_MBR_Attitude_1() {
        return asn_MBR_Attitude_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static void asn_MBR_Attitude_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Attitude_1$constants.SEGMENT, 0L, asn_MBR_Attitude_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static MemorySegment asn_MBR_Attitude_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_Attitude_1$constants.HANDLE.invokeExact(asn_MBR_Attitude_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Attitude_1[3]
     * }
     */
    public static void asn_MBR_Attitude_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Attitude_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_AttitudeConfidence$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AttitudeConfidence").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AttitudeConfidence
     * }
     */
    public static GroupLayout asn_DEF_AttitudeConfidence$layout() {
        return asn_DEF_AttitudeConfidence$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AttitudeConfidence
     * }
     */
    public static MemorySegment asn_DEF_AttitudeConfidence() {
        return asn_DEF_AttitudeConfidence$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AttitudeConfidence
     * }
     */
    public static void asn_DEF_AttitudeConfidence(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AttitudeConfidence$constants.SEGMENT, 0L, asn_DEF_AttitudeConfidence$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_AttitudeConfidence_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_AttitudeConfidence_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AttitudeConfidence_specs_1
     * }
     */
    public static GroupLayout asn_SPC_AttitudeConfidence_specs_1$layout() {
        return asn_SPC_AttitudeConfidence_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AttitudeConfidence_specs_1
     * }
     */
    public static MemorySegment asn_SPC_AttitudeConfidence_specs_1() {
        return asn_SPC_AttitudeConfidence_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_AttitudeConfidence_specs_1
     * }
     */
    public static void asn_SPC_AttitudeConfidence_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_AttitudeConfidence_specs_1$constants.SEGMENT, 0L, asn_SPC_AttitudeConfidence_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_AttitudeConfidence_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_AttitudeConfidence_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_AttitudeConfidence_1$layout() {
        return asn_MBR_AttitudeConfidence_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static long[] asn_MBR_AttitudeConfidence_1$dimensions() {
        return asn_MBR_AttitudeConfidence_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static MemorySegment asn_MBR_AttitudeConfidence_1() {
        return asn_MBR_AttitudeConfidence_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static void asn_MBR_AttitudeConfidence_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AttitudeConfidence_1$constants.SEGMENT, 0L, asn_MBR_AttitudeConfidence_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static MemorySegment asn_MBR_AttitudeConfidence_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_AttitudeConfidence_1$constants.HANDLE.invokeExact(asn_MBR_AttitudeConfidence_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_AttitudeConfidence_1[3]
     * }
     */
    public static void asn_MBR_AttitudeConfidence_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_AttitudeConfidence_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long SensorDataSharingMessage_PitchRate_t
     * }
     */
    public static final OfLong SensorDataSharingMessage_PitchRate_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$layout() {
        return asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1() {
        return asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1
     * }
     */
    public static void asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$constants.SEGMENT, 0L, asn_PER_type_SensorDataSharingMessage_PitchRate_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_SensorDataSharingMessage_PitchRate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SensorDataSharingMessage_PitchRate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PitchRate
     * }
     */
    public static GroupLayout asn_DEF_SensorDataSharingMessage_PitchRate$layout() {
        return asn_DEF_SensorDataSharingMessage_PitchRate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PitchRate
     * }
     */
    public static MemorySegment asn_DEF_SensorDataSharingMessage_PitchRate() {
        return asn_DEF_SensorDataSharingMessage_PitchRate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SensorDataSharingMessage_PitchRate
     * }
     */
    public static void asn_DEF_SensorDataSharingMessage_PitchRate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SensorDataSharingMessage_PitchRate$constants.SEGMENT, 0L, asn_DEF_SensorDataSharingMessage_PitchRate$constants.LAYOUT.byteSize());
    }

    private static class SensorDataSharingMessage_PitchRate_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_PitchRate_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_PitchRate_free$descriptor() {
        return SensorDataSharingMessage_PitchRate_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_PitchRate_free$handle() {
        return SensorDataSharingMessage_PitchRate_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SensorDataSharingMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_PitchRate_free$address() {
        return SensorDataSharingMessage_PitchRate_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SensorDataSharingMessage_PitchRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void SensorDataSharingMessage_PitchRate_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = SensorDataSharingMessage_PitchRate_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_PitchRate_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_PitchRate_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_PitchRate_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_PitchRate_print$descriptor() {
        return SensorDataSharingMessage_PitchRate_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_PitchRate_print$handle() {
        return SensorDataSharingMessage_PitchRate_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_PitchRate_print$address() {
        return SensorDataSharingMessage_PitchRate_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int SensorDataSharingMessage_PitchRate_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SensorDataSharingMessage_PitchRate_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_PitchRate_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SensorDataSharingMessage_PitchRate_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SensorDataSharingMessage_PitchRate_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor SensorDataSharingMessage_PitchRate_constraint$descriptor() {
        return SensorDataSharingMessage_PitchRate_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle SensorDataSharingMessage_PitchRate_constraint$handle() {
        return SensorDataSharingMessage_PitchRate_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment SensorDataSharingMessage_PitchRate_constraint$address() {
        return SensorDataSharingMessage_PitchRate_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SensorDataSharingMessage_PitchRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int SensorDataSharingMessage_PitchRate_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SensorDataSharingMessage_PitchRate_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SensorDataSharingMessage_PitchRate_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

