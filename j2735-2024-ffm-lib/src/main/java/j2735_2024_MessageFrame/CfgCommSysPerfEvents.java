// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgCommSysPerfEvents {
 *     long *j2945_1ChanBusyThresh;
 *     BOOLEAN_t *rfDataRsuInfo;
 *     long *numRsusObservedThresh;
 *     long *rfV2xJamDetectThresh;
 *     long *j2945_1VehDensThresh;
 *     long *j2945_1CqiBelowThresh;
 *     long *j2945_1TrackErrorThresh;
 *     long *gnssHdopExceedsThresh;
 *     long *gnssSatsBelowThresh;
 *     BOOLEAN_t *gnssJammingDetect;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgCommSysPerfEvents {

    CfgCommSysPerfEvents() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("j2945_1ChanBusyThresh"),
        MessageFrame_h.C_POINTER.withName("rfDataRsuInfo"),
        MessageFrame_h.C_POINTER.withName("numRsusObservedThresh"),
        MessageFrame_h.C_POINTER.withName("rfV2xJamDetectThresh"),
        MessageFrame_h.C_POINTER.withName("j2945_1VehDensThresh"),
        MessageFrame_h.C_POINTER.withName("j2945_1CqiBelowThresh"),
        MessageFrame_h.C_POINTER.withName("j2945_1TrackErrorThresh"),
        MessageFrame_h.C_POINTER.withName("gnssHdopExceedsThresh"),
        MessageFrame_h.C_POINTER.withName("gnssSatsBelowThresh"),
        MessageFrame_h.C_POINTER.withName("gnssJammingDetect"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgCommSysPerfEvents");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout j2945_1ChanBusyThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("j2945_1ChanBusyThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *j2945_1ChanBusyThresh
     * }
     */
    public static final AddressLayout j2945_1ChanBusyThresh$layout() {
        return j2945_1ChanBusyThresh$LAYOUT;
    }

    private static final long j2945_1ChanBusyThresh$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *j2945_1ChanBusyThresh
     * }
     */
    public static final long j2945_1ChanBusyThresh$offset() {
        return j2945_1ChanBusyThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *j2945_1ChanBusyThresh
     * }
     */
    public static MemorySegment j2945_1ChanBusyThresh(MemorySegment struct) {
        return struct.get(j2945_1ChanBusyThresh$LAYOUT, j2945_1ChanBusyThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *j2945_1ChanBusyThresh
     * }
     */
    public static void j2945_1ChanBusyThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(j2945_1ChanBusyThresh$LAYOUT, j2945_1ChanBusyThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout rfDataRsuInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rfDataRsuInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *rfDataRsuInfo
     * }
     */
    public static final AddressLayout rfDataRsuInfo$layout() {
        return rfDataRsuInfo$LAYOUT;
    }

    private static final long rfDataRsuInfo$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *rfDataRsuInfo
     * }
     */
    public static final long rfDataRsuInfo$offset() {
        return rfDataRsuInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *rfDataRsuInfo
     * }
     */
    public static MemorySegment rfDataRsuInfo(MemorySegment struct) {
        return struct.get(rfDataRsuInfo$LAYOUT, rfDataRsuInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *rfDataRsuInfo
     * }
     */
    public static void rfDataRsuInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rfDataRsuInfo$LAYOUT, rfDataRsuInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout numRsusObservedThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("numRsusObservedThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *numRsusObservedThresh
     * }
     */
    public static final AddressLayout numRsusObservedThresh$layout() {
        return numRsusObservedThresh$LAYOUT;
    }

    private static final long numRsusObservedThresh$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *numRsusObservedThresh
     * }
     */
    public static final long numRsusObservedThresh$offset() {
        return numRsusObservedThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *numRsusObservedThresh
     * }
     */
    public static MemorySegment numRsusObservedThresh(MemorySegment struct) {
        return struct.get(numRsusObservedThresh$LAYOUT, numRsusObservedThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *numRsusObservedThresh
     * }
     */
    public static void numRsusObservedThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(numRsusObservedThresh$LAYOUT, numRsusObservedThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout rfV2xJamDetectThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rfV2xJamDetectThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *rfV2xJamDetectThresh
     * }
     */
    public static final AddressLayout rfV2xJamDetectThresh$layout() {
        return rfV2xJamDetectThresh$LAYOUT;
    }

    private static final long rfV2xJamDetectThresh$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *rfV2xJamDetectThresh
     * }
     */
    public static final long rfV2xJamDetectThresh$offset() {
        return rfV2xJamDetectThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *rfV2xJamDetectThresh
     * }
     */
    public static MemorySegment rfV2xJamDetectThresh(MemorySegment struct) {
        return struct.get(rfV2xJamDetectThresh$LAYOUT, rfV2xJamDetectThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *rfV2xJamDetectThresh
     * }
     */
    public static void rfV2xJamDetectThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rfV2xJamDetectThresh$LAYOUT, rfV2xJamDetectThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout j2945_1VehDensThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("j2945_1VehDensThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *j2945_1VehDensThresh
     * }
     */
    public static final AddressLayout j2945_1VehDensThresh$layout() {
        return j2945_1VehDensThresh$LAYOUT;
    }

    private static final long j2945_1VehDensThresh$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *j2945_1VehDensThresh
     * }
     */
    public static final long j2945_1VehDensThresh$offset() {
        return j2945_1VehDensThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *j2945_1VehDensThresh
     * }
     */
    public static MemorySegment j2945_1VehDensThresh(MemorySegment struct) {
        return struct.get(j2945_1VehDensThresh$LAYOUT, j2945_1VehDensThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *j2945_1VehDensThresh
     * }
     */
    public static void j2945_1VehDensThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(j2945_1VehDensThresh$LAYOUT, j2945_1VehDensThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout j2945_1CqiBelowThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("j2945_1CqiBelowThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *j2945_1CqiBelowThresh
     * }
     */
    public static final AddressLayout j2945_1CqiBelowThresh$layout() {
        return j2945_1CqiBelowThresh$LAYOUT;
    }

    private static final long j2945_1CqiBelowThresh$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *j2945_1CqiBelowThresh
     * }
     */
    public static final long j2945_1CqiBelowThresh$offset() {
        return j2945_1CqiBelowThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *j2945_1CqiBelowThresh
     * }
     */
    public static MemorySegment j2945_1CqiBelowThresh(MemorySegment struct) {
        return struct.get(j2945_1CqiBelowThresh$LAYOUT, j2945_1CqiBelowThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *j2945_1CqiBelowThresh
     * }
     */
    public static void j2945_1CqiBelowThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(j2945_1CqiBelowThresh$LAYOUT, j2945_1CqiBelowThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout j2945_1TrackErrorThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("j2945_1TrackErrorThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *j2945_1TrackErrorThresh
     * }
     */
    public static final AddressLayout j2945_1TrackErrorThresh$layout() {
        return j2945_1TrackErrorThresh$LAYOUT;
    }

    private static final long j2945_1TrackErrorThresh$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *j2945_1TrackErrorThresh
     * }
     */
    public static final long j2945_1TrackErrorThresh$offset() {
        return j2945_1TrackErrorThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *j2945_1TrackErrorThresh
     * }
     */
    public static MemorySegment j2945_1TrackErrorThresh(MemorySegment struct) {
        return struct.get(j2945_1TrackErrorThresh$LAYOUT, j2945_1TrackErrorThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *j2945_1TrackErrorThresh
     * }
     */
    public static void j2945_1TrackErrorThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(j2945_1TrackErrorThresh$LAYOUT, j2945_1TrackErrorThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout gnssHdopExceedsThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gnssHdopExceedsThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *gnssHdopExceedsThresh
     * }
     */
    public static final AddressLayout gnssHdopExceedsThresh$layout() {
        return gnssHdopExceedsThresh$LAYOUT;
    }

    private static final long gnssHdopExceedsThresh$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *gnssHdopExceedsThresh
     * }
     */
    public static final long gnssHdopExceedsThresh$offset() {
        return gnssHdopExceedsThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *gnssHdopExceedsThresh
     * }
     */
    public static MemorySegment gnssHdopExceedsThresh(MemorySegment struct) {
        return struct.get(gnssHdopExceedsThresh$LAYOUT, gnssHdopExceedsThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *gnssHdopExceedsThresh
     * }
     */
    public static void gnssHdopExceedsThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gnssHdopExceedsThresh$LAYOUT, gnssHdopExceedsThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout gnssSatsBelowThresh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gnssSatsBelowThresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *gnssSatsBelowThresh
     * }
     */
    public static final AddressLayout gnssSatsBelowThresh$layout() {
        return gnssSatsBelowThresh$LAYOUT;
    }

    private static final long gnssSatsBelowThresh$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *gnssSatsBelowThresh
     * }
     */
    public static final long gnssSatsBelowThresh$offset() {
        return gnssSatsBelowThresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *gnssSatsBelowThresh
     * }
     */
    public static MemorySegment gnssSatsBelowThresh(MemorySegment struct) {
        return struct.get(gnssSatsBelowThresh$LAYOUT, gnssSatsBelowThresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *gnssSatsBelowThresh
     * }
     */
    public static void gnssSatsBelowThresh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gnssSatsBelowThresh$LAYOUT, gnssSatsBelowThresh$OFFSET, fieldValue);
    }

    private static final AddressLayout gnssJammingDetect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gnssJammingDetect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *gnssJammingDetect
     * }
     */
    public static final AddressLayout gnssJammingDetect$layout() {
        return gnssJammingDetect$LAYOUT;
    }

    private static final long gnssJammingDetect$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *gnssJammingDetect
     * }
     */
    public static final long gnssJammingDetect$offset() {
        return gnssJammingDetect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *gnssJammingDetect
     * }
     */
    public static MemorySegment gnssJammingDetect(MemorySegment struct) {
        return struct.get(gnssJammingDetect$LAYOUT, gnssJammingDetect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *gnssJammingDetect
     * }
     */
    public static void gnssJammingDetect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gnssJammingDetect$LAYOUT, gnssJammingDetect$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

