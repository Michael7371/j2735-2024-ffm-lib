// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EmergencyDetails {
 *     SSPindex_t doNotUse;
 *     SirenInUse_t sirenUse;
 *     LightbarInUse_t lightsUse;
 *     MultiVehicleResponse_t multi;
 *     struct PrivilegedEvents *events;
 *     ResponseType_t *responseType;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class EmergencyDetails {

    EmergencyDetails() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("doNotUse"),
        MessageFrame_h.C_LONG.withName("sirenUse"),
        MessageFrame_h.C_LONG.withName("lightsUse"),
        MessageFrame_h.C_LONG.withName("multi"),
        MessageFrame_h.C_POINTER.withName("events"),
        MessageFrame_h.C_POINTER.withName("responseType"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("EmergencyDetails");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong doNotUse$LAYOUT = (OfLong)$LAYOUT.select(groupElement("doNotUse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse
     * }
     */
    public static final OfLong doNotUse$layout() {
        return doNotUse$LAYOUT;
    }

    private static final long doNotUse$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse
     * }
     */
    public static final long doNotUse$offset() {
        return doNotUse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse
     * }
     */
    public static long doNotUse(MemorySegment struct) {
        return struct.get(doNotUse$LAYOUT, doNotUse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SSPindex_t doNotUse
     * }
     */
    public static void doNotUse(MemorySegment struct, long fieldValue) {
        struct.set(doNotUse$LAYOUT, doNotUse$OFFSET, fieldValue);
    }

    private static final OfLong sirenUse$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sirenUse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SirenInUse_t sirenUse
     * }
     */
    public static final OfLong sirenUse$layout() {
        return sirenUse$LAYOUT;
    }

    private static final long sirenUse$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SirenInUse_t sirenUse
     * }
     */
    public static final long sirenUse$offset() {
        return sirenUse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SirenInUse_t sirenUse
     * }
     */
    public static long sirenUse(MemorySegment struct) {
        return struct.get(sirenUse$LAYOUT, sirenUse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SirenInUse_t sirenUse
     * }
     */
    public static void sirenUse(MemorySegment struct, long fieldValue) {
        struct.set(sirenUse$LAYOUT, sirenUse$OFFSET, fieldValue);
    }

    private static final OfLong lightsUse$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lightsUse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LightbarInUse_t lightsUse
     * }
     */
    public static final OfLong lightsUse$layout() {
        return lightsUse$LAYOUT;
    }

    private static final long lightsUse$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LightbarInUse_t lightsUse
     * }
     */
    public static final long lightsUse$offset() {
        return lightsUse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LightbarInUse_t lightsUse
     * }
     */
    public static long lightsUse(MemorySegment struct) {
        return struct.get(lightsUse$LAYOUT, lightsUse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LightbarInUse_t lightsUse
     * }
     */
    public static void lightsUse(MemorySegment struct, long fieldValue) {
        struct.set(lightsUse$LAYOUT, lightsUse$OFFSET, fieldValue);
    }

    private static final OfLong multi$LAYOUT = (OfLong)$LAYOUT.select(groupElement("multi"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MultiVehicleResponse_t multi
     * }
     */
    public static final OfLong multi$layout() {
        return multi$LAYOUT;
    }

    private static final long multi$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MultiVehicleResponse_t multi
     * }
     */
    public static final long multi$offset() {
        return multi$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MultiVehicleResponse_t multi
     * }
     */
    public static long multi(MemorySegment struct) {
        return struct.get(multi$LAYOUT, multi$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MultiVehicleResponse_t multi
     * }
     */
    public static void multi(MemorySegment struct, long fieldValue) {
        struct.set(multi$LAYOUT, multi$OFFSET, fieldValue);
    }

    private static final AddressLayout events$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PrivilegedEvents *events
     * }
     */
    public static final AddressLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PrivilegedEvents *events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PrivilegedEvents *events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.get(events$LAYOUT, events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PrivilegedEvents *events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(events$LAYOUT, events$OFFSET, fieldValue);
    }

    private static final AddressLayout responseType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("responseType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ResponseType_t *responseType
     * }
     */
    public static final AddressLayout responseType$layout() {
        return responseType$LAYOUT;
    }

    private static final long responseType$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ResponseType_t *responseType
     * }
     */
    public static final long responseType$offset() {
        return responseType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ResponseType_t *responseType
     * }
     */
    public static MemorySegment responseType(MemorySegment struct) {
        return struct.get(responseType$LAYOUT, responseType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ResponseType_t *responseType
     * }
     */
    public static void responseType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(responseType$LAYOUT, responseType$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

