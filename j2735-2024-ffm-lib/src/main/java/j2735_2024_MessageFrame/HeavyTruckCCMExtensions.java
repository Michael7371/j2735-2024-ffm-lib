// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct HeavyTruckCCMExtensions {
 *     LongitudinalControlState_t longCntrlState;
 *     TemporaryID_t *targetId;
 *     RoadGrade_t *roadGrade;
 *     BrakePedalPosition_t *brakePedalPos;
 *     AcceleratorPedalPosition_t *accelPedalPos;
 *     Speed_t *desiredSpeed;
 *     Acceleration_t *desiredAccel;
 *     Torque_t *desiredTorque;
 *     Torque_t *desiredTmRetarderTorque;
 *     Torque_t *desiredEngRetarderTorque;
 *     struct AxesMovement *axesMvmt;
 *     SeparationDistance_t *separationDist;
 *     TotalMass_t *totalMass;
 *     MaxAvailableAcceleration_t *maxAvailAccel;
 *     MaxAvailableDeceleration_t *maxAvailDecel;
 *     CCMFaultMode_t *ccmFaultMode;
 *     CooperativeControlMessage_ManeuverID_t *maneuverID;
 *     FrontCutIn_t *frontCutIn;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class HeavyTruckCCMExtensions {

    HeavyTruckCCMExtensions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("longCntrlState"),
        MessageFrame_h.C_POINTER.withName("targetId"),
        MessageFrame_h.C_POINTER.withName("roadGrade"),
        MessageFrame_h.C_POINTER.withName("brakePedalPos"),
        MessageFrame_h.C_POINTER.withName("accelPedalPos"),
        MessageFrame_h.C_POINTER.withName("desiredSpeed"),
        MessageFrame_h.C_POINTER.withName("desiredAccel"),
        MessageFrame_h.C_POINTER.withName("desiredTorque"),
        MessageFrame_h.C_POINTER.withName("desiredTmRetarderTorque"),
        MessageFrame_h.C_POINTER.withName("desiredEngRetarderTorque"),
        MessageFrame_h.C_POINTER.withName("axesMvmt"),
        MessageFrame_h.C_POINTER.withName("separationDist"),
        MessageFrame_h.C_POINTER.withName("totalMass"),
        MessageFrame_h.C_POINTER.withName("maxAvailAccel"),
        MessageFrame_h.C_POINTER.withName("maxAvailDecel"),
        MessageFrame_h.C_POINTER.withName("ccmFaultMode"),
        MessageFrame_h.C_POINTER.withName("maneuverID"),
        MessageFrame_h.C_POINTER.withName("frontCutIn"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("HeavyTruckCCMExtensions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong longCntrlState$LAYOUT = (OfLong)$LAYOUT.select(groupElement("longCntrlState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static final OfLong longCntrlState$layout() {
        return longCntrlState$LAYOUT;
    }

    private static final long longCntrlState$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static final long longCntrlState$offset() {
        return longCntrlState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static long longCntrlState(MemorySegment struct) {
        return struct.get(longCntrlState$LAYOUT, longCntrlState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static void longCntrlState(MemorySegment struct, long fieldValue) {
        struct.set(longCntrlState$LAYOUT, longCntrlState$OFFSET, fieldValue);
    }

    private static final AddressLayout targetId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("targetId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static final AddressLayout targetId$layout() {
        return targetId$LAYOUT;
    }

    private static final long targetId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static final long targetId$offset() {
        return targetId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static MemorySegment targetId(MemorySegment struct) {
        return struct.get(targetId$LAYOUT, targetId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static void targetId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(targetId$LAYOUT, targetId$OFFSET, fieldValue);
    }

    private static final AddressLayout roadGrade$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("roadGrade"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RoadGrade_t *roadGrade
     * }
     */
    public static final AddressLayout roadGrade$layout() {
        return roadGrade$LAYOUT;
    }

    private static final long roadGrade$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RoadGrade_t *roadGrade
     * }
     */
    public static final long roadGrade$offset() {
        return roadGrade$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RoadGrade_t *roadGrade
     * }
     */
    public static MemorySegment roadGrade(MemorySegment struct) {
        return struct.get(roadGrade$LAYOUT, roadGrade$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RoadGrade_t *roadGrade
     * }
     */
    public static void roadGrade(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(roadGrade$LAYOUT, roadGrade$OFFSET, fieldValue);
    }

    private static final AddressLayout brakePedalPos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brakePedalPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BrakePedalPosition_t *brakePedalPos
     * }
     */
    public static final AddressLayout brakePedalPos$layout() {
        return brakePedalPos$LAYOUT;
    }

    private static final long brakePedalPos$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BrakePedalPosition_t *brakePedalPos
     * }
     */
    public static final long brakePedalPos$offset() {
        return brakePedalPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BrakePedalPosition_t *brakePedalPos
     * }
     */
    public static MemorySegment brakePedalPos(MemorySegment struct) {
        return struct.get(brakePedalPos$LAYOUT, brakePedalPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BrakePedalPosition_t *brakePedalPos
     * }
     */
    public static void brakePedalPos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brakePedalPos$LAYOUT, brakePedalPos$OFFSET, fieldValue);
    }

    private static final AddressLayout accelPedalPos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelPedalPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AcceleratorPedalPosition_t *accelPedalPos
     * }
     */
    public static final AddressLayout accelPedalPos$layout() {
        return accelPedalPos$LAYOUT;
    }

    private static final long accelPedalPos$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AcceleratorPedalPosition_t *accelPedalPos
     * }
     */
    public static final long accelPedalPos$offset() {
        return accelPedalPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AcceleratorPedalPosition_t *accelPedalPos
     * }
     */
    public static MemorySegment accelPedalPos(MemorySegment struct) {
        return struct.get(accelPedalPos$LAYOUT, accelPedalPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AcceleratorPedalPosition_t *accelPedalPos
     * }
     */
    public static void accelPedalPos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelPedalPos$LAYOUT, accelPedalPos$OFFSET, fieldValue);
    }

    private static final AddressLayout desiredSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desiredSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *desiredSpeed
     * }
     */
    public static final AddressLayout desiredSpeed$layout() {
        return desiredSpeed$LAYOUT;
    }

    private static final long desiredSpeed$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *desiredSpeed
     * }
     */
    public static final long desiredSpeed$offset() {
        return desiredSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *desiredSpeed
     * }
     */
    public static MemorySegment desiredSpeed(MemorySegment struct) {
        return struct.get(desiredSpeed$LAYOUT, desiredSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *desiredSpeed
     * }
     */
    public static void desiredSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desiredSpeed$LAYOUT, desiredSpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout desiredAccel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desiredAccel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Acceleration_t *desiredAccel
     * }
     */
    public static final AddressLayout desiredAccel$layout() {
        return desiredAccel$LAYOUT;
    }

    private static final long desiredAccel$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Acceleration_t *desiredAccel
     * }
     */
    public static final long desiredAccel$offset() {
        return desiredAccel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Acceleration_t *desiredAccel
     * }
     */
    public static MemorySegment desiredAccel(MemorySegment struct) {
        return struct.get(desiredAccel$LAYOUT, desiredAccel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Acceleration_t *desiredAccel
     * }
     */
    public static void desiredAccel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desiredAccel$LAYOUT, desiredAccel$OFFSET, fieldValue);
    }

    private static final AddressLayout desiredTorque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desiredTorque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Torque_t *desiredTorque
     * }
     */
    public static final AddressLayout desiredTorque$layout() {
        return desiredTorque$LAYOUT;
    }

    private static final long desiredTorque$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Torque_t *desiredTorque
     * }
     */
    public static final long desiredTorque$offset() {
        return desiredTorque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Torque_t *desiredTorque
     * }
     */
    public static MemorySegment desiredTorque(MemorySegment struct) {
        return struct.get(desiredTorque$LAYOUT, desiredTorque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Torque_t *desiredTorque
     * }
     */
    public static void desiredTorque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desiredTorque$LAYOUT, desiredTorque$OFFSET, fieldValue);
    }

    private static final AddressLayout desiredTmRetarderTorque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desiredTmRetarderTorque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Torque_t *desiredTmRetarderTorque
     * }
     */
    public static final AddressLayout desiredTmRetarderTorque$layout() {
        return desiredTmRetarderTorque$LAYOUT;
    }

    private static final long desiredTmRetarderTorque$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Torque_t *desiredTmRetarderTorque
     * }
     */
    public static final long desiredTmRetarderTorque$offset() {
        return desiredTmRetarderTorque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Torque_t *desiredTmRetarderTorque
     * }
     */
    public static MemorySegment desiredTmRetarderTorque(MemorySegment struct) {
        return struct.get(desiredTmRetarderTorque$LAYOUT, desiredTmRetarderTorque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Torque_t *desiredTmRetarderTorque
     * }
     */
    public static void desiredTmRetarderTorque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desiredTmRetarderTorque$LAYOUT, desiredTmRetarderTorque$OFFSET, fieldValue);
    }

    private static final AddressLayout desiredEngRetarderTorque$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("desiredEngRetarderTorque"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Torque_t *desiredEngRetarderTorque
     * }
     */
    public static final AddressLayout desiredEngRetarderTorque$layout() {
        return desiredEngRetarderTorque$LAYOUT;
    }

    private static final long desiredEngRetarderTorque$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Torque_t *desiredEngRetarderTorque
     * }
     */
    public static final long desiredEngRetarderTorque$offset() {
        return desiredEngRetarderTorque$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Torque_t *desiredEngRetarderTorque
     * }
     */
    public static MemorySegment desiredEngRetarderTorque(MemorySegment struct) {
        return struct.get(desiredEngRetarderTorque$LAYOUT, desiredEngRetarderTorque$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Torque_t *desiredEngRetarderTorque
     * }
     */
    public static void desiredEngRetarderTorque(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(desiredEngRetarderTorque$LAYOUT, desiredEngRetarderTorque$OFFSET, fieldValue);
    }

    private static final AddressLayout axesMvmt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("axesMvmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AxesMovement *axesMvmt
     * }
     */
    public static final AddressLayout axesMvmt$layout() {
        return axesMvmt$LAYOUT;
    }

    private static final long axesMvmt$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AxesMovement *axesMvmt
     * }
     */
    public static final long axesMvmt$offset() {
        return axesMvmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AxesMovement *axesMvmt
     * }
     */
    public static MemorySegment axesMvmt(MemorySegment struct) {
        return struct.get(axesMvmt$LAYOUT, axesMvmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AxesMovement *axesMvmt
     * }
     */
    public static void axesMvmt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(axesMvmt$LAYOUT, axesMvmt$OFFSET, fieldValue);
    }

    private static final AddressLayout separationDist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("separationDist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SeparationDistance_t *separationDist
     * }
     */
    public static final AddressLayout separationDist$layout() {
        return separationDist$LAYOUT;
    }

    private static final long separationDist$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SeparationDistance_t *separationDist
     * }
     */
    public static final long separationDist$offset() {
        return separationDist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SeparationDistance_t *separationDist
     * }
     */
    public static MemorySegment separationDist(MemorySegment struct) {
        return struct.get(separationDist$LAYOUT, separationDist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SeparationDistance_t *separationDist
     * }
     */
    public static void separationDist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(separationDist$LAYOUT, separationDist$OFFSET, fieldValue);
    }

    private static final AddressLayout totalMass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("totalMass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TotalMass_t *totalMass
     * }
     */
    public static final AddressLayout totalMass$layout() {
        return totalMass$LAYOUT;
    }

    private static final long totalMass$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TotalMass_t *totalMass
     * }
     */
    public static final long totalMass$offset() {
        return totalMass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TotalMass_t *totalMass
     * }
     */
    public static MemorySegment totalMass(MemorySegment struct) {
        return struct.get(totalMass$LAYOUT, totalMass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TotalMass_t *totalMass
     * }
     */
    public static void totalMass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(totalMass$LAYOUT, totalMass$OFFSET, fieldValue);
    }

    private static final AddressLayout maxAvailAccel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maxAvailAccel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MaxAvailableAcceleration_t *maxAvailAccel
     * }
     */
    public static final AddressLayout maxAvailAccel$layout() {
        return maxAvailAccel$LAYOUT;
    }

    private static final long maxAvailAccel$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MaxAvailableAcceleration_t *maxAvailAccel
     * }
     */
    public static final long maxAvailAccel$offset() {
        return maxAvailAccel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MaxAvailableAcceleration_t *maxAvailAccel
     * }
     */
    public static MemorySegment maxAvailAccel(MemorySegment struct) {
        return struct.get(maxAvailAccel$LAYOUT, maxAvailAccel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MaxAvailableAcceleration_t *maxAvailAccel
     * }
     */
    public static void maxAvailAccel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maxAvailAccel$LAYOUT, maxAvailAccel$OFFSET, fieldValue);
    }

    private static final AddressLayout maxAvailDecel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maxAvailDecel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * MaxAvailableDeceleration_t *maxAvailDecel
     * }
     */
    public static final AddressLayout maxAvailDecel$layout() {
        return maxAvailDecel$LAYOUT;
    }

    private static final long maxAvailDecel$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * MaxAvailableDeceleration_t *maxAvailDecel
     * }
     */
    public static final long maxAvailDecel$offset() {
        return maxAvailDecel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * MaxAvailableDeceleration_t *maxAvailDecel
     * }
     */
    public static MemorySegment maxAvailDecel(MemorySegment struct) {
        return struct.get(maxAvailDecel$LAYOUT, maxAvailDecel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * MaxAvailableDeceleration_t *maxAvailDecel
     * }
     */
    public static void maxAvailDecel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maxAvailDecel$LAYOUT, maxAvailDecel$OFFSET, fieldValue);
    }

    private static final AddressLayout ccmFaultMode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ccmFaultMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CCMFaultMode_t *ccmFaultMode
     * }
     */
    public static final AddressLayout ccmFaultMode$layout() {
        return ccmFaultMode$LAYOUT;
    }

    private static final long ccmFaultMode$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CCMFaultMode_t *ccmFaultMode
     * }
     */
    public static final long ccmFaultMode$offset() {
        return ccmFaultMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CCMFaultMode_t *ccmFaultMode
     * }
     */
    public static MemorySegment ccmFaultMode(MemorySegment struct) {
        return struct.get(ccmFaultMode$LAYOUT, ccmFaultMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CCMFaultMode_t *ccmFaultMode
     * }
     */
    public static void ccmFaultMode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ccmFaultMode$LAYOUT, ccmFaultMode$OFFSET, fieldValue);
    }

    private static final AddressLayout maneuverID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("maneuverID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CooperativeControlMessage_ManeuverID_t *maneuverID
     * }
     */
    public static final AddressLayout maneuverID$layout() {
        return maneuverID$LAYOUT;
    }

    private static final long maneuverID$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CooperativeControlMessage_ManeuverID_t *maneuverID
     * }
     */
    public static final long maneuverID$offset() {
        return maneuverID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CooperativeControlMessage_ManeuverID_t *maneuverID
     * }
     */
    public static MemorySegment maneuverID(MemorySegment struct) {
        return struct.get(maneuverID$LAYOUT, maneuverID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CooperativeControlMessage_ManeuverID_t *maneuverID
     * }
     */
    public static void maneuverID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(maneuverID$LAYOUT, maneuverID$OFFSET, fieldValue);
    }

    private static final AddressLayout frontCutIn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("frontCutIn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static final AddressLayout frontCutIn$layout() {
        return frontCutIn$LAYOUT;
    }

    private static final long frontCutIn$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static final long frontCutIn$offset() {
        return frontCutIn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static MemorySegment frontCutIn(MemorySegment struct) {
        return struct.get(frontCutIn$LAYOUT, frontCutIn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static void frontCutIn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(frontCutIn$LAYOUT, frontCutIn$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

