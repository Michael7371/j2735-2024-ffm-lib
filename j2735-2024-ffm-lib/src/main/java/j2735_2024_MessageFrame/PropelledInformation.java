// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct PropelledInformation {
 *     PropelledInformation_PR present;
 *     union PropelledInformation_u {
 *         HumanPropelledType_t human;
 *         AnimalPropelledType_t animal;
 *         MotorizedPropelledType_t motor;
 *     } choice;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class PropelledInformation {

    PropelledInformation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("present"),
        MemoryLayout.paddingLayout(4),
        PropelledInformation_u.layout().withName("choice"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("PropelledInformation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PropelledInformation_PR present
     * }
     */
    public static final OfInt present$layout() {
        return present$LAYOUT;
    }

    private static final long present$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PropelledInformation_PR present
     * }
     */
    public static final long present$offset() {
        return present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PropelledInformation_PR present
     * }
     */
    public static int present(MemorySegment struct) {
        return struct.get(present$LAYOUT, present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PropelledInformation_PR present
     * }
     */
    public static void present(MemorySegment struct, int fieldValue) {
        struct.set(present$LAYOUT, present$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union PropelledInformation_u {
     *     HumanPropelledType_t human;
     *     AnimalPropelledType_t animal;
     *     MotorizedPropelledType_t motor;
     * }
     * }
     */
    public static class PropelledInformation_u {

        PropelledInformation_u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MessageFrame_h.C_LONG.withName("human"),
            MessageFrame_h.C_LONG.withName("animal"),
            MessageFrame_h.C_LONG.withName("motor")
        ).withName("PropelledInformation_u");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong human$LAYOUT = (OfLong)$LAYOUT.select(groupElement("human"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * HumanPropelledType_t human
         * }
         */
        public static final OfLong human$layout() {
            return human$LAYOUT;
        }

        private static final long human$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * HumanPropelledType_t human
         * }
         */
        public static final long human$offset() {
            return human$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * HumanPropelledType_t human
         * }
         */
        public static long human(MemorySegment union) {
            return union.get(human$LAYOUT, human$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * HumanPropelledType_t human
         * }
         */
        public static void human(MemorySegment union, long fieldValue) {
            union.set(human$LAYOUT, human$OFFSET, fieldValue);
        }

        private static final OfLong animal$LAYOUT = (OfLong)$LAYOUT.select(groupElement("animal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * AnimalPropelledType_t animal
         * }
         */
        public static final OfLong animal$layout() {
            return animal$LAYOUT;
        }

        private static final long animal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * AnimalPropelledType_t animal
         * }
         */
        public static final long animal$offset() {
            return animal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * AnimalPropelledType_t animal
         * }
         */
        public static long animal(MemorySegment union) {
            return union.get(animal$LAYOUT, animal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * AnimalPropelledType_t animal
         * }
         */
        public static void animal(MemorySegment union, long fieldValue) {
            union.set(animal$LAYOUT, animal$OFFSET, fieldValue);
        }

        private static final OfLong motor$LAYOUT = (OfLong)$LAYOUT.select(groupElement("motor"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * MotorizedPropelledType_t motor
         * }
         */
        public static final OfLong motor$layout() {
            return motor$LAYOUT;
        }

        private static final long motor$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * MotorizedPropelledType_t motor
         * }
         */
        public static final long motor$offset() {
            return motor$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * MotorizedPropelledType_t motor
         * }
         */
        public static long motor(MemorySegment union) {
            return union.get(motor$LAYOUT, motor$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * MotorizedPropelledType_t motor
         * }
         */
        public static void motor(MemorySegment union, long fieldValue) {
            union.set(motor$LAYOUT, motor$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union PropelledInformation_u choice
     * }
     */
    public static final GroupLayout choice$layout() {
        return choice$LAYOUT;
    }

    private static final long choice$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union PropelledInformation_u choice
     * }
     */
    public static final long choice$offset() {
        return choice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union PropelledInformation_u choice
     * }
     */
    public static MemorySegment choice(MemorySegment struct) {
        return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union PropelledInformation_u choice
     * }
     */
    public static void choice(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

