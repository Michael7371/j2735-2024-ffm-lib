// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VehicleDescription {
 *     struct Lpn *vehicleLPNr;
 *     struct VehicleAxles *axles;
 *     VehicleClass_t *Class;
 *     struct VehicleDimensions *dimensions;
 *     struct VehicleSpecificCharacteristics *specificCharacteristics;
 *     VehicleWeightLaden_t *ladenWeight;
 *     struct VehicleWeightLimits *weightLimits;
 *     struct TrailerCharacteristics *trailerCharacteristics;
 *     VehicleCurrentMaxTrainWeight_t *vehicleCurrentMaxTrainWeight;
 *     ActualNumberOfPassengers_t *actualNumberOfPassengers;
 *     struct AxleWeightLimits *axleWeightLimits;
 *     struct DieselEmissionValues *dieselEmissionValues;
 *     struct DriverCharacteristics *driverCharacteristics;
 *     struct EngineDetails *engineDetails;
 *     struct ExhaustEmissionValues *exhaustEmissionValues;
 *     struct PassengerCapacity *passengerCapacity;
 *     struct SoundLevel *soundLevel;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class VehicleDescription {

    VehicleDescription() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("vehicleLPNr"),
        MessageFrame_h.C_POINTER.withName("axles"),
        MessageFrame_h.C_POINTER.withName("Class"),
        MessageFrame_h.C_POINTER.withName("dimensions"),
        MessageFrame_h.C_POINTER.withName("specificCharacteristics"),
        MessageFrame_h.C_POINTER.withName("ladenWeight"),
        MessageFrame_h.C_POINTER.withName("weightLimits"),
        MessageFrame_h.C_POINTER.withName("trailerCharacteristics"),
        MessageFrame_h.C_POINTER.withName("vehicleCurrentMaxTrainWeight"),
        MessageFrame_h.C_POINTER.withName("actualNumberOfPassengers"),
        MessageFrame_h.C_POINTER.withName("axleWeightLimits"),
        MessageFrame_h.C_POINTER.withName("dieselEmissionValues"),
        MessageFrame_h.C_POINTER.withName("driverCharacteristics"),
        MessageFrame_h.C_POINTER.withName("engineDetails"),
        MessageFrame_h.C_POINTER.withName("exhaustEmissionValues"),
        MessageFrame_h.C_POINTER.withName("passengerCapacity"),
        MessageFrame_h.C_POINTER.withName("soundLevel"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("VehicleDescription");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout vehicleLPNr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleLPNr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Lpn *vehicleLPNr
     * }
     */
    public static final AddressLayout vehicleLPNr$layout() {
        return vehicleLPNr$LAYOUT;
    }

    private static final long vehicleLPNr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Lpn *vehicleLPNr
     * }
     */
    public static final long vehicleLPNr$offset() {
        return vehicleLPNr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Lpn *vehicleLPNr
     * }
     */
    public static MemorySegment vehicleLPNr(MemorySegment struct) {
        return struct.get(vehicleLPNr$LAYOUT, vehicleLPNr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Lpn *vehicleLPNr
     * }
     */
    public static void vehicleLPNr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleLPNr$LAYOUT, vehicleLPNr$OFFSET, fieldValue);
    }

    private static final AddressLayout axles$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("axles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleAxles *axles
     * }
     */
    public static final AddressLayout axles$layout() {
        return axles$LAYOUT;
    }

    private static final long axles$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleAxles *axles
     * }
     */
    public static final long axles$offset() {
        return axles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleAxles *axles
     * }
     */
    public static MemorySegment axles(MemorySegment struct) {
        return struct.get(axles$LAYOUT, axles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleAxles *axles
     * }
     */
    public static void axles(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(axles$LAYOUT, axles$OFFSET, fieldValue);
    }

    private static final AddressLayout Class_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleClass_t *Class
     * }
     */
    public static final AddressLayout Class_$layout() {
        return Class_$LAYOUT;
    }

    private static final long Class_$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleClass_t *Class
     * }
     */
    public static final long Class_$offset() {
        return Class_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleClass_t *Class
     * }
     */
    public static MemorySegment Class_(MemorySegment struct) {
        return struct.get(Class_$LAYOUT, Class_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleClass_t *Class
     * }
     */
    public static void Class_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Class_$LAYOUT, Class_$OFFSET, fieldValue);
    }

    private static final AddressLayout dimensions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dimensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleDimensions *dimensions
     * }
     */
    public static final AddressLayout dimensions$layout() {
        return dimensions$LAYOUT;
    }

    private static final long dimensions$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleDimensions *dimensions
     * }
     */
    public static final long dimensions$offset() {
        return dimensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleDimensions *dimensions
     * }
     */
    public static MemorySegment dimensions(MemorySegment struct) {
        return struct.get(dimensions$LAYOUT, dimensions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleDimensions *dimensions
     * }
     */
    public static void dimensions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dimensions$LAYOUT, dimensions$OFFSET, fieldValue);
    }

    private static final AddressLayout specificCharacteristics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("specificCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleSpecificCharacteristics *specificCharacteristics
     * }
     */
    public static final AddressLayout specificCharacteristics$layout() {
        return specificCharacteristics$LAYOUT;
    }

    private static final long specificCharacteristics$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleSpecificCharacteristics *specificCharacteristics
     * }
     */
    public static final long specificCharacteristics$offset() {
        return specificCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleSpecificCharacteristics *specificCharacteristics
     * }
     */
    public static MemorySegment specificCharacteristics(MemorySegment struct) {
        return struct.get(specificCharacteristics$LAYOUT, specificCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleSpecificCharacteristics *specificCharacteristics
     * }
     */
    public static void specificCharacteristics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(specificCharacteristics$LAYOUT, specificCharacteristics$OFFSET, fieldValue);
    }

    private static final AddressLayout ladenWeight$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ladenWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleWeightLaden_t *ladenWeight
     * }
     */
    public static final AddressLayout ladenWeight$layout() {
        return ladenWeight$LAYOUT;
    }

    private static final long ladenWeight$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleWeightLaden_t *ladenWeight
     * }
     */
    public static final long ladenWeight$offset() {
        return ladenWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleWeightLaden_t *ladenWeight
     * }
     */
    public static MemorySegment ladenWeight(MemorySegment struct) {
        return struct.get(ladenWeight$LAYOUT, ladenWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleWeightLaden_t *ladenWeight
     * }
     */
    public static void ladenWeight(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ladenWeight$LAYOUT, ladenWeight$OFFSET, fieldValue);
    }

    private static final AddressLayout weightLimits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("weightLimits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleWeightLimits *weightLimits
     * }
     */
    public static final AddressLayout weightLimits$layout() {
        return weightLimits$LAYOUT;
    }

    private static final long weightLimits$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleWeightLimits *weightLimits
     * }
     */
    public static final long weightLimits$offset() {
        return weightLimits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleWeightLimits *weightLimits
     * }
     */
    public static MemorySegment weightLimits(MemorySegment struct) {
        return struct.get(weightLimits$LAYOUT, weightLimits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleWeightLimits *weightLimits
     * }
     */
    public static void weightLimits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(weightLimits$LAYOUT, weightLimits$OFFSET, fieldValue);
    }

    private static final AddressLayout trailerCharacteristics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trailerCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TrailerCharacteristics *trailerCharacteristics
     * }
     */
    public static final AddressLayout trailerCharacteristics$layout() {
        return trailerCharacteristics$LAYOUT;
    }

    private static final long trailerCharacteristics$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TrailerCharacteristics *trailerCharacteristics
     * }
     */
    public static final long trailerCharacteristics$offset() {
        return trailerCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TrailerCharacteristics *trailerCharacteristics
     * }
     */
    public static MemorySegment trailerCharacteristics(MemorySegment struct) {
        return struct.get(trailerCharacteristics$LAYOUT, trailerCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TrailerCharacteristics *trailerCharacteristics
     * }
     */
    public static void trailerCharacteristics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trailerCharacteristics$LAYOUT, trailerCharacteristics$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleCurrentMaxTrainWeight$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleCurrentMaxTrainWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleCurrentMaxTrainWeight_t *vehicleCurrentMaxTrainWeight
     * }
     */
    public static final AddressLayout vehicleCurrentMaxTrainWeight$layout() {
        return vehicleCurrentMaxTrainWeight$LAYOUT;
    }

    private static final long vehicleCurrentMaxTrainWeight$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleCurrentMaxTrainWeight_t *vehicleCurrentMaxTrainWeight
     * }
     */
    public static final long vehicleCurrentMaxTrainWeight$offset() {
        return vehicleCurrentMaxTrainWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleCurrentMaxTrainWeight_t *vehicleCurrentMaxTrainWeight
     * }
     */
    public static MemorySegment vehicleCurrentMaxTrainWeight(MemorySegment struct) {
        return struct.get(vehicleCurrentMaxTrainWeight$LAYOUT, vehicleCurrentMaxTrainWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleCurrentMaxTrainWeight_t *vehicleCurrentMaxTrainWeight
     * }
     */
    public static void vehicleCurrentMaxTrainWeight(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleCurrentMaxTrainWeight$LAYOUT, vehicleCurrentMaxTrainWeight$OFFSET, fieldValue);
    }

    private static final AddressLayout actualNumberOfPassengers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("actualNumberOfPassengers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ActualNumberOfPassengers_t *actualNumberOfPassengers
     * }
     */
    public static final AddressLayout actualNumberOfPassengers$layout() {
        return actualNumberOfPassengers$LAYOUT;
    }

    private static final long actualNumberOfPassengers$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ActualNumberOfPassengers_t *actualNumberOfPassengers
     * }
     */
    public static final long actualNumberOfPassengers$offset() {
        return actualNumberOfPassengers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ActualNumberOfPassengers_t *actualNumberOfPassengers
     * }
     */
    public static MemorySegment actualNumberOfPassengers(MemorySegment struct) {
        return struct.get(actualNumberOfPassengers$LAYOUT, actualNumberOfPassengers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ActualNumberOfPassengers_t *actualNumberOfPassengers
     * }
     */
    public static void actualNumberOfPassengers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(actualNumberOfPassengers$LAYOUT, actualNumberOfPassengers$OFFSET, fieldValue);
    }

    private static final AddressLayout axleWeightLimits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("axleWeightLimits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AxleWeightLimits *axleWeightLimits
     * }
     */
    public static final AddressLayout axleWeightLimits$layout() {
        return axleWeightLimits$LAYOUT;
    }

    private static final long axleWeightLimits$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AxleWeightLimits *axleWeightLimits
     * }
     */
    public static final long axleWeightLimits$offset() {
        return axleWeightLimits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AxleWeightLimits *axleWeightLimits
     * }
     */
    public static MemorySegment axleWeightLimits(MemorySegment struct) {
        return struct.get(axleWeightLimits$LAYOUT, axleWeightLimits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AxleWeightLimits *axleWeightLimits
     * }
     */
    public static void axleWeightLimits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(axleWeightLimits$LAYOUT, axleWeightLimits$OFFSET, fieldValue);
    }

    private static final AddressLayout dieselEmissionValues$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dieselEmissionValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DieselEmissionValues *dieselEmissionValues
     * }
     */
    public static final AddressLayout dieselEmissionValues$layout() {
        return dieselEmissionValues$LAYOUT;
    }

    private static final long dieselEmissionValues$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DieselEmissionValues *dieselEmissionValues
     * }
     */
    public static final long dieselEmissionValues$offset() {
        return dieselEmissionValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DieselEmissionValues *dieselEmissionValues
     * }
     */
    public static MemorySegment dieselEmissionValues(MemorySegment struct) {
        return struct.get(dieselEmissionValues$LAYOUT, dieselEmissionValues$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DieselEmissionValues *dieselEmissionValues
     * }
     */
    public static void dieselEmissionValues(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dieselEmissionValues$LAYOUT, dieselEmissionValues$OFFSET, fieldValue);
    }

    private static final AddressLayout driverCharacteristics$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("driverCharacteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct DriverCharacteristics *driverCharacteristics
     * }
     */
    public static final AddressLayout driverCharacteristics$layout() {
        return driverCharacteristics$LAYOUT;
    }

    private static final long driverCharacteristics$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct DriverCharacteristics *driverCharacteristics
     * }
     */
    public static final long driverCharacteristics$offset() {
        return driverCharacteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct DriverCharacteristics *driverCharacteristics
     * }
     */
    public static MemorySegment driverCharacteristics(MemorySegment struct) {
        return struct.get(driverCharacteristics$LAYOUT, driverCharacteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct DriverCharacteristics *driverCharacteristics
     * }
     */
    public static void driverCharacteristics(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(driverCharacteristics$LAYOUT, driverCharacteristics$OFFSET, fieldValue);
    }

    private static final AddressLayout engineDetails$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("engineDetails"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct EngineDetails *engineDetails
     * }
     */
    public static final AddressLayout engineDetails$layout() {
        return engineDetails$LAYOUT;
    }

    private static final long engineDetails$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct EngineDetails *engineDetails
     * }
     */
    public static final long engineDetails$offset() {
        return engineDetails$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct EngineDetails *engineDetails
     * }
     */
    public static MemorySegment engineDetails(MemorySegment struct) {
        return struct.get(engineDetails$LAYOUT, engineDetails$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct EngineDetails *engineDetails
     * }
     */
    public static void engineDetails(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(engineDetails$LAYOUT, engineDetails$OFFSET, fieldValue);
    }

    private static final AddressLayout exhaustEmissionValues$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("exhaustEmissionValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ExhaustEmissionValues *exhaustEmissionValues
     * }
     */
    public static final AddressLayout exhaustEmissionValues$layout() {
        return exhaustEmissionValues$LAYOUT;
    }

    private static final long exhaustEmissionValues$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ExhaustEmissionValues *exhaustEmissionValues
     * }
     */
    public static final long exhaustEmissionValues$offset() {
        return exhaustEmissionValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ExhaustEmissionValues *exhaustEmissionValues
     * }
     */
    public static MemorySegment exhaustEmissionValues(MemorySegment struct) {
        return struct.get(exhaustEmissionValues$LAYOUT, exhaustEmissionValues$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ExhaustEmissionValues *exhaustEmissionValues
     * }
     */
    public static void exhaustEmissionValues(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(exhaustEmissionValues$LAYOUT, exhaustEmissionValues$OFFSET, fieldValue);
    }

    private static final AddressLayout passengerCapacity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("passengerCapacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PassengerCapacity *passengerCapacity
     * }
     */
    public static final AddressLayout passengerCapacity$layout() {
        return passengerCapacity$LAYOUT;
    }

    private static final long passengerCapacity$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PassengerCapacity *passengerCapacity
     * }
     */
    public static final long passengerCapacity$offset() {
        return passengerCapacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PassengerCapacity *passengerCapacity
     * }
     */
    public static MemorySegment passengerCapacity(MemorySegment struct) {
        return struct.get(passengerCapacity$LAYOUT, passengerCapacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PassengerCapacity *passengerCapacity
     * }
     */
    public static void passengerCapacity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(passengerCapacity$LAYOUT, passengerCapacity$OFFSET, fieldValue);
    }

    private static final AddressLayout soundLevel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("soundLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SoundLevel *soundLevel
     * }
     */
    public static final AddressLayout soundLevel$layout() {
        return soundLevel$LAYOUT;
    }

    private static final long soundLevel$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SoundLevel *soundLevel
     * }
     */
    public static final long soundLevel$offset() {
        return soundLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SoundLevel *soundLevel
     * }
     */
    public static MemorySegment soundLevel(MemorySegment struct) {
        return struct.get(soundLevel$LAYOUT, soundLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SoundLevel *soundLevel
     * }
     */
    public static void soundLevel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(soundLevel$LAYOUT, soundLevel$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

