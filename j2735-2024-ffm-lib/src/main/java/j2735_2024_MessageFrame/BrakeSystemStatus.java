// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct BrakeSystemStatus {
 *     BrakeAppliedStatus_t wheelBrakes;
 *     TractionControlStatus_t traction;
 *     AntiLockBrakeStatus_t abs;
 *     StabilityControlStatus_t scs;
 *     BrakeBoostApplied_t brakeBoost;
 *     AuxiliaryBrakeStatus_t auxBrakes;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class BrakeSystemStatus {

    BrakeSystemStatus() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        BIT_STRING_s.layout().withName("wheelBrakes"),
        MessageFrame_h.C_LONG.withName("traction"),
        MessageFrame_h.C_LONG.withName("abs"),
        MessageFrame_h.C_LONG.withName("scs"),
        MessageFrame_h.C_LONG.withName("brakeBoost"),
        MessageFrame_h.C_LONG.withName("auxBrakes"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("BrakeSystemStatus");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout wheelBrakes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("wheelBrakes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BrakeAppliedStatus_t wheelBrakes
     * }
     */
    public static final GroupLayout wheelBrakes$layout() {
        return wheelBrakes$LAYOUT;
    }

    private static final long wheelBrakes$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BrakeAppliedStatus_t wheelBrakes
     * }
     */
    public static final long wheelBrakes$offset() {
        return wheelBrakes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BrakeAppliedStatus_t wheelBrakes
     * }
     */
    public static MemorySegment wheelBrakes(MemorySegment struct) {
        return struct.asSlice(wheelBrakes$OFFSET, wheelBrakes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BrakeAppliedStatus_t wheelBrakes
     * }
     */
    public static void wheelBrakes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, wheelBrakes$OFFSET, wheelBrakes$LAYOUT.byteSize());
    }

    private static final OfLong traction$LAYOUT = (OfLong)$LAYOUT.select(groupElement("traction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TractionControlStatus_t traction
     * }
     */
    public static final OfLong traction$layout() {
        return traction$LAYOUT;
    }

    private static final long traction$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TractionControlStatus_t traction
     * }
     */
    public static final long traction$offset() {
        return traction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TractionControlStatus_t traction
     * }
     */
    public static long traction(MemorySegment struct) {
        return struct.get(traction$LAYOUT, traction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TractionControlStatus_t traction
     * }
     */
    public static void traction(MemorySegment struct, long fieldValue) {
        struct.set(traction$LAYOUT, traction$OFFSET, fieldValue);
    }

    private static final OfLong abs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("abs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AntiLockBrakeStatus_t abs
     * }
     */
    public static final OfLong abs$layout() {
        return abs$LAYOUT;
    }

    private static final long abs$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AntiLockBrakeStatus_t abs
     * }
     */
    public static final long abs$offset() {
        return abs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AntiLockBrakeStatus_t abs
     * }
     */
    public static long abs(MemorySegment struct) {
        return struct.get(abs$LAYOUT, abs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AntiLockBrakeStatus_t abs
     * }
     */
    public static void abs(MemorySegment struct, long fieldValue) {
        struct.set(abs$LAYOUT, abs$OFFSET, fieldValue);
    }

    private static final OfLong scs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("scs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StabilityControlStatus_t scs
     * }
     */
    public static final OfLong scs$layout() {
        return scs$LAYOUT;
    }

    private static final long scs$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StabilityControlStatus_t scs
     * }
     */
    public static final long scs$offset() {
        return scs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StabilityControlStatus_t scs
     * }
     */
    public static long scs(MemorySegment struct) {
        return struct.get(scs$LAYOUT, scs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StabilityControlStatus_t scs
     * }
     */
    public static void scs(MemorySegment struct, long fieldValue) {
        struct.set(scs$LAYOUT, scs$OFFSET, fieldValue);
    }

    private static final OfLong brakeBoost$LAYOUT = (OfLong)$LAYOUT.select(groupElement("brakeBoost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BrakeBoostApplied_t brakeBoost
     * }
     */
    public static final OfLong brakeBoost$layout() {
        return brakeBoost$LAYOUT;
    }

    private static final long brakeBoost$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BrakeBoostApplied_t brakeBoost
     * }
     */
    public static final long brakeBoost$offset() {
        return brakeBoost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BrakeBoostApplied_t brakeBoost
     * }
     */
    public static long brakeBoost(MemorySegment struct) {
        return struct.get(brakeBoost$LAYOUT, brakeBoost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BrakeBoostApplied_t brakeBoost
     * }
     */
    public static void brakeBoost(MemorySegment struct, long fieldValue) {
        struct.set(brakeBoost$LAYOUT, brakeBoost$OFFSET, fieldValue);
    }

    private static final OfLong auxBrakes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("auxBrakes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AuxiliaryBrakeStatus_t auxBrakes
     * }
     */
    public static final OfLong auxBrakes$layout() {
        return auxBrakes$LAYOUT;
    }

    private static final long auxBrakes$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AuxiliaryBrakeStatus_t auxBrakes
     * }
     */
    public static final long auxBrakes$offset() {
        return auxBrakes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AuxiliaryBrakeStatus_t auxBrakes
     * }
     */
    public static long auxBrakes(MemorySegment struct) {
        return struct.get(auxBrakes$LAYOUT, auxBrakes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AuxiliaryBrakeStatus_t auxBrakes
     * }
     */
    public static void auxBrakes(MemorySegment struct, long fieldValue) {
        struct.set(auxBrakes$LAYOUT, auxBrakes$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

