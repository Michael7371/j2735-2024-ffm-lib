// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SnapshotTime {
 *     GrossSpeed_t speed1;
 *     SecondOfTime_t time1;
 *     GrossSpeed_t speed2;
 *     SecondOfTime_t time2;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SnapshotTime {

    SnapshotTime() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("speed1"),
        MessageFrame_h.C_LONG.withName("time1"),
        MessageFrame_h.C_LONG.withName("speed2"),
        MessageFrame_h.C_LONG.withName("time2"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SnapshotTime");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong speed1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("speed1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed1
     * }
     */
    public static final OfLong speed1$layout() {
        return speed1$LAYOUT;
    }

    private static final long speed1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed1
     * }
     */
    public static final long speed1$offset() {
        return speed1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed1
     * }
     */
    public static long speed1(MemorySegment struct) {
        return struct.get(speed1$LAYOUT, speed1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed1
     * }
     */
    public static void speed1(MemorySegment struct, long fieldValue) {
        struct.set(speed1$LAYOUT, speed1$OFFSET, fieldValue);
    }

    private static final OfLong time1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("time1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SecondOfTime_t time1
     * }
     */
    public static final OfLong time1$layout() {
        return time1$LAYOUT;
    }

    private static final long time1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SecondOfTime_t time1
     * }
     */
    public static final long time1$offset() {
        return time1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SecondOfTime_t time1
     * }
     */
    public static long time1(MemorySegment struct) {
        return struct.get(time1$LAYOUT, time1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SecondOfTime_t time1
     * }
     */
    public static void time1(MemorySegment struct, long fieldValue) {
        struct.set(time1$LAYOUT, time1$OFFSET, fieldValue);
    }

    private static final OfLong speed2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("speed2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed2
     * }
     */
    public static final OfLong speed2$layout() {
        return speed2$LAYOUT;
    }

    private static final long speed2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed2
     * }
     */
    public static final long speed2$offset() {
        return speed2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed2
     * }
     */
    public static long speed2(MemorySegment struct) {
        return struct.get(speed2$LAYOUT, speed2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GrossSpeed_t speed2
     * }
     */
    public static void speed2(MemorySegment struct, long fieldValue) {
        struct.set(speed2$LAYOUT, speed2$OFFSET, fieldValue);
    }

    private static final OfLong time2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("time2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SecondOfTime_t time2
     * }
     */
    public static final OfLong time2$layout() {
        return time2$LAYOUT;
    }

    private static final long time2$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SecondOfTime_t time2
     * }
     */
    public static final long time2$offset() {
        return time2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SecondOfTime_t time2
     * }
     */
    public static long time2(MemorySegment struct) {
        return struct.get(time2$LAYOUT, time2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SecondOfTime_t time2
     * }
     */
    public static void time2(MemorySegment struct, long fieldValue) {
        struct.set(time2$LAYOUT, time2$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

