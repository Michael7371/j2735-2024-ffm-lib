// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class MessageFrame_h extends MessageFrame_h_1 {

    MessageFrame_h() {
        // Should not be called directly
    }

    private static class EmissionUnit_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EmissionUnit_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EmissionUnit_encode_uper$descriptor() {
        return EmissionUnit_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EmissionUnit_encode_uper$handle() {
        return EmissionUnit_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EmissionUnit_encode_uper$address() {
        return EmissionUnit_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EmissionUnit_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EmissionUnit_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EmissionUnit_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EmissionUnit_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EmissionUnit_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EmissionUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EmissionUnit_decode_aper$descriptor() {
        return EmissionUnit_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EmissionUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EmissionUnit_decode_aper$handle() {
        return EmissionUnit_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EmissionUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EmissionUnit_decode_aper$address() {
        return EmissionUnit_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EmissionUnit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EmissionUnit_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EmissionUnit_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EmissionUnit_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EmissionUnit_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EmissionUnit_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EmissionUnit_encode_aper$descriptor() {
        return EmissionUnit_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EmissionUnit_encode_aper$handle() {
        return EmissionUnit_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EmissionUnit_encode_aper$address() {
        return EmissionUnit_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EmissionUnit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EmissionUnit_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EmissionUnit_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EmissionUnit_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_Particulate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Particulate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Particulate
     * }
     */
    public static GroupLayout asn_DEF_Particulate$layout() {
        return asn_DEF_Particulate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Particulate
     * }
     */
    public static MemorySegment asn_DEF_Particulate() {
        return asn_DEF_Particulate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Particulate
     * }
     */
    public static void asn_DEF_Particulate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Particulate$constants.SEGMENT, 0L, asn_DEF_Particulate$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Particulate_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Particulate_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Particulate_specs_1
     * }
     */
    public static GroupLayout asn_SPC_Particulate_specs_1$layout() {
        return asn_SPC_Particulate_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Particulate_specs_1
     * }
     */
    public static MemorySegment asn_SPC_Particulate_specs_1() {
        return asn_SPC_Particulate_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Particulate_specs_1
     * }
     */
    public static void asn_SPC_Particulate_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Particulate_specs_1$constants.SEGMENT, 0L, asn_SPC_Particulate_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Particulate_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Particulate_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_Particulate_1$layout() {
        return asn_MBR_Particulate_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static long[] asn_MBR_Particulate_1$dimensions() {
        return asn_MBR_Particulate_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static MemorySegment asn_MBR_Particulate_1() {
        return asn_MBR_Particulate_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static void asn_MBR_Particulate_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Particulate_1$constants.SEGMENT, 0L, asn_MBR_Particulate_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static MemorySegment asn_MBR_Particulate_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_Particulate_1$constants.HANDLE.invokeExact(asn_MBR_Particulate_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Particulate_1[2]
     * }
     */
    public static void asn_MBR_Particulate_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Particulate_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_DieselEmissionValues$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DieselEmissionValues").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DieselEmissionValues
     * }
     */
    public static GroupLayout asn_DEF_DieselEmissionValues$layout() {
        return asn_DEF_DieselEmissionValues$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DieselEmissionValues
     * }
     */
    public static MemorySegment asn_DEF_DieselEmissionValues() {
        return asn_DEF_DieselEmissionValues$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DieselEmissionValues
     * }
     */
    public static void asn_DEF_DieselEmissionValues(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DieselEmissionValues$constants.SEGMENT, 0L, asn_DEF_DieselEmissionValues$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DieselEmissionValues_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DieselEmissionValues_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DieselEmissionValues_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DieselEmissionValues_specs_1$layout() {
        return asn_SPC_DieselEmissionValues_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DieselEmissionValues_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DieselEmissionValues_specs_1() {
        return asn_SPC_DieselEmissionValues_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DieselEmissionValues_specs_1
     * }
     */
    public static void asn_SPC_DieselEmissionValues_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DieselEmissionValues_specs_1$constants.SEGMENT, 0L, asn_SPC_DieselEmissionValues_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DieselEmissionValues_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DieselEmissionValues_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_DieselEmissionValues_1$layout() {
        return asn_MBR_DieselEmissionValues_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static long[] asn_MBR_DieselEmissionValues_1$dimensions() {
        return asn_MBR_DieselEmissionValues_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DieselEmissionValues_1() {
        return asn_MBR_DieselEmissionValues_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static void asn_MBR_DieselEmissionValues_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DieselEmissionValues_1$constants.SEGMENT, 0L, asn_MBR_DieselEmissionValues_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DieselEmissionValues_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DieselEmissionValues_1$constants.HANDLE.invokeExact(asn_MBR_DieselEmissionValues_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DieselEmissionValues_1[2]
     * }
     */
    public static void asn_MBR_DieselEmissionValues_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DieselEmissionValues_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_DriverCharacteristics$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DriverCharacteristics").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DriverCharacteristics
     * }
     */
    public static GroupLayout asn_DEF_DriverCharacteristics$layout() {
        return asn_DEF_DriverCharacteristics$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DriverCharacteristics
     * }
     */
    public static MemorySegment asn_DEF_DriverCharacteristics() {
        return asn_DEF_DriverCharacteristics$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DriverCharacteristics
     * }
     */
    public static void asn_DEF_DriverCharacteristics(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DriverCharacteristics$constants.SEGMENT, 0L, asn_DEF_DriverCharacteristics$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DriverCharacteristics_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DriverCharacteristics_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DriverCharacteristics_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DriverCharacteristics_specs_1$layout() {
        return asn_SPC_DriverCharacteristics_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DriverCharacteristics_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DriverCharacteristics_specs_1() {
        return asn_SPC_DriverCharacteristics_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DriverCharacteristics_specs_1
     * }
     */
    public static void asn_SPC_DriverCharacteristics_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DriverCharacteristics_specs_1$constants.SEGMENT, 0L, asn_SPC_DriverCharacteristics_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DriverCharacteristics_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DriverCharacteristics_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_DriverCharacteristics_1$layout() {
        return asn_MBR_DriverCharacteristics_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static long[] asn_MBR_DriverCharacteristics_1$dimensions() {
        return asn_MBR_DriverCharacteristics_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DriverCharacteristics_1() {
        return asn_MBR_DriverCharacteristics_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static void asn_MBR_DriverCharacteristics_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DriverCharacteristics_1$constants.SEGMENT, 0L, asn_MBR_DriverCharacteristics_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static MemorySegment asn_MBR_DriverCharacteristics_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DriverCharacteristics_1$constants.HANDLE.invokeExact(asn_MBR_DriverCharacteristics_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DriverCharacteristics_1[2]
     * }
     */
    public static void asn_MBR_DriverCharacteristics_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DriverCharacteristics_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_EngineDetails$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EngineDetails").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineDetails
     * }
     */
    public static GroupLayout asn_DEF_EngineDetails$layout() {
        return asn_DEF_EngineDetails$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineDetails
     * }
     */
    public static MemorySegment asn_DEF_EngineDetails() {
        return asn_DEF_EngineDetails$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EngineDetails
     * }
     */
    public static void asn_DEF_EngineDetails(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EngineDetails$constants.SEGMENT, 0L, asn_DEF_EngineDetails$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_EngineDetails_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_EngineDetails_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EngineDetails_specs_1
     * }
     */
    public static GroupLayout asn_SPC_EngineDetails_specs_1$layout() {
        return asn_SPC_EngineDetails_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EngineDetails_specs_1
     * }
     */
    public static MemorySegment asn_SPC_EngineDetails_specs_1() {
        return asn_SPC_EngineDetails_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_EngineDetails_specs_1
     * }
     */
    public static void asn_SPC_EngineDetails_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_EngineDetails_specs_1$constants.SEGMENT, 0L, asn_SPC_EngineDetails_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_EngineDetails_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_EngineDetails_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_EngineDetails_1$layout() {
        return asn_MBR_EngineDetails_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static long[] asn_MBR_EngineDetails_1$dimensions() {
        return asn_MBR_EngineDetails_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static MemorySegment asn_MBR_EngineDetails_1() {
        return asn_MBR_EngineDetails_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static void asn_MBR_EngineDetails_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_EngineDetails_1$constants.SEGMENT, 0L, asn_MBR_EngineDetails_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static MemorySegment asn_MBR_EngineDetails_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_EngineDetails_1$constants.HANDLE.invokeExact(asn_MBR_EngineDetails_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_EngineDetails_1[2]
     * }
     */
    public static void asn_MBR_EngineDetails_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_EngineDetails_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ExhaustEmissionValues$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ExhaustEmissionValues").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExhaustEmissionValues
     * }
     */
    public static GroupLayout asn_DEF_ExhaustEmissionValues$layout() {
        return asn_DEF_ExhaustEmissionValues$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExhaustEmissionValues
     * }
     */
    public static MemorySegment asn_DEF_ExhaustEmissionValues() {
        return asn_DEF_ExhaustEmissionValues$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ExhaustEmissionValues
     * }
     */
    public static void asn_DEF_ExhaustEmissionValues(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ExhaustEmissionValues$constants.SEGMENT, 0L, asn_DEF_ExhaustEmissionValues$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ExhaustEmissionValues_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ExhaustEmissionValues_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExhaustEmissionValues_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ExhaustEmissionValues_specs_1$layout() {
        return asn_SPC_ExhaustEmissionValues_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExhaustEmissionValues_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ExhaustEmissionValues_specs_1() {
        return asn_SPC_ExhaustEmissionValues_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ExhaustEmissionValues_specs_1
     * }
     */
    public static void asn_SPC_ExhaustEmissionValues_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ExhaustEmissionValues_specs_1$constants.SEGMENT, 0L, asn_SPC_ExhaustEmissionValues_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ExhaustEmissionValues_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ExhaustEmissionValues_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_ExhaustEmissionValues_1$layout() {
        return asn_MBR_ExhaustEmissionValues_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static long[] asn_MBR_ExhaustEmissionValues_1$dimensions() {
        return asn_MBR_ExhaustEmissionValues_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ExhaustEmissionValues_1() {
        return asn_MBR_ExhaustEmissionValues_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static void asn_MBR_ExhaustEmissionValues_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExhaustEmissionValues_1$constants.SEGMENT, 0L, asn_MBR_ExhaustEmissionValues_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ExhaustEmissionValues_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ExhaustEmissionValues_1$constants.HANDLE.invokeExact(asn_MBR_ExhaustEmissionValues_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ExhaustEmissionValues_1[5]
     * }
     */
    public static void asn_MBR_ExhaustEmissionValues_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ExhaustEmissionValues_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_PassengerCapacity$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PassengerCapacity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PassengerCapacity
     * }
     */
    public static GroupLayout asn_DEF_PassengerCapacity$layout() {
        return asn_DEF_PassengerCapacity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PassengerCapacity
     * }
     */
    public static MemorySegment asn_DEF_PassengerCapacity() {
        return asn_DEF_PassengerCapacity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PassengerCapacity
     * }
     */
    public static void asn_DEF_PassengerCapacity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PassengerCapacity$constants.SEGMENT, 0L, asn_DEF_PassengerCapacity$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_PassengerCapacity_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_PassengerCapacity_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PassengerCapacity_specs_1
     * }
     */
    public static GroupLayout asn_SPC_PassengerCapacity_specs_1$layout() {
        return asn_SPC_PassengerCapacity_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PassengerCapacity_specs_1
     * }
     */
    public static MemorySegment asn_SPC_PassengerCapacity_specs_1() {
        return asn_SPC_PassengerCapacity_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PassengerCapacity_specs_1
     * }
     */
    public static void asn_SPC_PassengerCapacity_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_PassengerCapacity_specs_1$constants.SEGMENT, 0L, asn_SPC_PassengerCapacity_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_PassengerCapacity_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_PassengerCapacity_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_PassengerCapacity_1$layout() {
        return asn_MBR_PassengerCapacity_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static long[] asn_MBR_PassengerCapacity_1$dimensions() {
        return asn_MBR_PassengerCapacity_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static MemorySegment asn_MBR_PassengerCapacity_1() {
        return asn_MBR_PassengerCapacity_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static void asn_MBR_PassengerCapacity_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PassengerCapacity_1$constants.SEGMENT, 0L, asn_MBR_PassengerCapacity_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static MemorySegment asn_MBR_PassengerCapacity_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_PassengerCapacity_1$constants.HANDLE.invokeExact(asn_MBR_PassengerCapacity_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PassengerCapacity_1[2]
     * }
     */
    public static void asn_MBR_PassengerCapacity_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PassengerCapacity_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_SoundLevel$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SoundLevel").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SoundLevel
     * }
     */
    public static GroupLayout asn_DEF_SoundLevel$layout() {
        return asn_DEF_SoundLevel$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SoundLevel
     * }
     */
    public static MemorySegment asn_DEF_SoundLevel() {
        return asn_DEF_SoundLevel$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SoundLevel
     * }
     */
    public static void asn_DEF_SoundLevel(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SoundLevel$constants.SEGMENT, 0L, asn_DEF_SoundLevel$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_SoundLevel_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_SoundLevel_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SoundLevel_specs_1
     * }
     */
    public static GroupLayout asn_SPC_SoundLevel_specs_1$layout() {
        return asn_SPC_SoundLevel_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SoundLevel_specs_1
     * }
     */
    public static MemorySegment asn_SPC_SoundLevel_specs_1() {
        return asn_SPC_SoundLevel_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SoundLevel_specs_1
     * }
     */
    public static void asn_SPC_SoundLevel_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_SoundLevel_specs_1$constants.SEGMENT, 0L, asn_SPC_SoundLevel_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_SoundLevel_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_SoundLevel_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_SoundLevel_1$layout() {
        return asn_MBR_SoundLevel_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static long[] asn_MBR_SoundLevel_1$dimensions() {
        return asn_MBR_SoundLevel_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static MemorySegment asn_MBR_SoundLevel_1() {
        return asn_MBR_SoundLevel_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static void asn_MBR_SoundLevel_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SoundLevel_1$constants.SEGMENT, 0L, asn_MBR_SoundLevel_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static MemorySegment asn_MBR_SoundLevel_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_SoundLevel_1$constants.HANDLE.invokeExact(asn_MBR_SoundLevel_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SoundLevel_1[2]
     * }
     */
    public static void asn_MBR_SoundLevel_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SoundLevel_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TimePeriod$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TimePeriod").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimePeriod
     * }
     */
    public static GroupLayout asn_DEF_TimePeriod$layout() {
        return asn_DEF_TimePeriod$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimePeriod
     * }
     */
    public static MemorySegment asn_DEF_TimePeriod() {
        return asn_DEF_TimePeriod$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimePeriod
     * }
     */
    public static void asn_DEF_TimePeriod(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TimePeriod$constants.SEGMENT, 0L, asn_DEF_TimePeriod$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TimePeriod_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TimePeriod_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimePeriod_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TimePeriod_specs_1$layout() {
        return asn_SPC_TimePeriod_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimePeriod_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TimePeriod_specs_1() {
        return asn_SPC_TimePeriod_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TimePeriod_specs_1
     * }
     */
    public static void asn_SPC_TimePeriod_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TimePeriod_specs_1$constants.SEGMENT, 0L, asn_SPC_TimePeriod_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TimePeriod_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TimePeriod_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TimePeriod_1$layout() {
        return asn_MBR_TimePeriod_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static long[] asn_MBR_TimePeriod_1$dimensions() {
        return asn_MBR_TimePeriod_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TimePeriod_1() {
        return asn_MBR_TimePeriod_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static void asn_MBR_TimePeriod_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TimePeriod_1$constants.SEGMENT, 0L, asn_MBR_TimePeriod_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TimePeriod_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TimePeriod_1$constants.HANDLE.invokeExact(asn_MBR_TimePeriod_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TimePeriod_1[2]
     * }
     */
    public static void asn_MBR_TimePeriod_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TimePeriod_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_UserFeeInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_UserFeeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UserFeeInfo
     * }
     */
    public static GroupLayout asn_DEF_UserFeeInfo$layout() {
        return asn_DEF_UserFeeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UserFeeInfo
     * }
     */
    public static MemorySegment asn_DEF_UserFeeInfo() {
        return asn_DEF_UserFeeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UserFeeInfo
     * }
     */
    public static void asn_DEF_UserFeeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_UserFeeInfo$constants.SEGMENT, 0L, asn_DEF_UserFeeInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_UserFeeInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_UserFeeInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_UserFeeInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_UserFeeInfo_specs_1$layout() {
        return asn_SPC_UserFeeInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_UserFeeInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_UserFeeInfo_specs_1() {
        return asn_SPC_UserFeeInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_UserFeeInfo_specs_1
     * }
     */
    public static void asn_SPC_UserFeeInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_UserFeeInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_UserFeeInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_UserFeeInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_UserFeeInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_UserFeeInfo_1$layout() {
        return asn_MBR_UserFeeInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static long[] asn_MBR_UserFeeInfo_1$dimensions() {
        return asn_MBR_UserFeeInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static MemorySegment asn_MBR_UserFeeInfo_1() {
        return asn_MBR_UserFeeInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static void asn_MBR_UserFeeInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_UserFeeInfo_1$constants.SEGMENT, 0L, asn_MBR_UserFeeInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static MemorySegment asn_MBR_UserFeeInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_UserFeeInfo_1$constants.HANDLE.invokeExact(asn_MBR_UserFeeInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UserFeeInfo_1[2]
     * }
     */
    public static void asn_MBR_UserFeeInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_UserFeeInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_FeeReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_FeeReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FeeReport
     * }
     */
    public static GroupLayout asn_DEF_FeeReport$layout() {
        return asn_DEF_FeeReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FeeReport
     * }
     */
    public static MemorySegment asn_DEF_FeeReport() {
        return asn_DEF_FeeReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FeeReport
     * }
     */
    public static void asn_DEF_FeeReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_FeeReport$constants.SEGMENT, 0L, asn_DEF_FeeReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_FeeReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_FeeReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_FeeReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_FeeReport_specs_1$layout() {
        return asn_SPC_FeeReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_FeeReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_FeeReport_specs_1() {
        return asn_SPC_FeeReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_FeeReport_specs_1
     * }
     */
    public static void asn_SPC_FeeReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_FeeReport_specs_1$constants.SEGMENT, 0L, asn_SPC_FeeReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_FeeReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_FeeReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_FeeReport_1$layout() {
        return asn_MBR_FeeReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static long[] asn_MBR_FeeReport_1$dimensions() {
        return asn_MBR_FeeReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_FeeReport_1() {
        return asn_MBR_FeeReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static void asn_MBR_FeeReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_FeeReport_1$constants.SEGMENT, 0L, asn_MBR_FeeReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_FeeReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_FeeReport_1$constants.HANDLE.invokeExact(asn_MBR_FeeReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_FeeReport_1[2]
     * }
     */
    public static void asn_MBR_FeeReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_FeeReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ItemizedPaymentReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ItemizedPaymentReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedPaymentReport
     * }
     */
    public static GroupLayout asn_DEF_ItemizedPaymentReport$layout() {
        return asn_DEF_ItemizedPaymentReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedPaymentReport
     * }
     */
    public static MemorySegment asn_DEF_ItemizedPaymentReport() {
        return asn_DEF_ItemizedPaymentReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedPaymentReport
     * }
     */
    public static void asn_DEF_ItemizedPaymentReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ItemizedPaymentReport$constants.SEGMENT, 0L, asn_DEF_ItemizedPaymentReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ItemizedPaymentReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ItemizedPaymentReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedPaymentReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ItemizedPaymentReport_specs_1$layout() {
        return asn_SPC_ItemizedPaymentReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedPaymentReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ItemizedPaymentReport_specs_1() {
        return asn_SPC_ItemizedPaymentReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedPaymentReport_specs_1
     * }
     */
    public static void asn_SPC_ItemizedPaymentReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ItemizedPaymentReport_specs_1$constants.SEGMENT, 0L, asn_SPC_ItemizedPaymentReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ItemizedPaymentReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ItemizedPaymentReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_ItemizedPaymentReport_1$layout() {
        return asn_MBR_ItemizedPaymentReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static long[] asn_MBR_ItemizedPaymentReport_1$dimensions() {
        return asn_MBR_ItemizedPaymentReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ItemizedPaymentReport_1() {
        return asn_MBR_ItemizedPaymentReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static void asn_MBR_ItemizedPaymentReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ItemizedPaymentReport_1$constants.SEGMENT, 0L, asn_MBR_ItemizedPaymentReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ItemizedPaymentReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ItemizedPaymentReport_1$constants.HANDLE.invokeExact(asn_MBR_ItemizedPaymentReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedPaymentReport_1[4]
     * }
     */
    public static void asn_MBR_ItemizedPaymentReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ItemizedPaymentReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ItemizedChargerData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ItemizedChargerData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedChargerData
     * }
     */
    public static GroupLayout asn_DEF_ItemizedChargerData$layout() {
        return asn_DEF_ItemizedChargerData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedChargerData
     * }
     */
    public static MemorySegment asn_DEF_ItemizedChargerData() {
        return asn_DEF_ItemizedChargerData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ItemizedChargerData
     * }
     */
    public static void asn_DEF_ItemizedChargerData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ItemizedChargerData$constants.SEGMENT, 0L, asn_DEF_ItemizedChargerData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ItemizedChargerData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ItemizedChargerData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedChargerData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ItemizedChargerData_specs_1$layout() {
        return asn_SPC_ItemizedChargerData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedChargerData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ItemizedChargerData_specs_1() {
        return asn_SPC_ItemizedChargerData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ItemizedChargerData_specs_1
     * }
     */
    public static void asn_SPC_ItemizedChargerData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ItemizedChargerData_specs_1$constants.SEGMENT, 0L, asn_SPC_ItemizedChargerData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ItemizedChargerData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ItemizedChargerData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_ItemizedChargerData_1$layout() {
        return asn_MBR_ItemizedChargerData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static long[] asn_MBR_ItemizedChargerData_1$dimensions() {
        return asn_MBR_ItemizedChargerData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ItemizedChargerData_1() {
        return asn_MBR_ItemizedChargerData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static void asn_MBR_ItemizedChargerData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ItemizedChargerData_1$constants.SEGMENT, 0L, asn_MBR_ItemizedChargerData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ItemizedChargerData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ItemizedChargerData_1$constants.HANDLE.invokeExact(asn_MBR_ItemizedChargerData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ItemizedChargerData_1[5]
     * }
     */
    public static void asn_MBR_ItemizedChargerData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ItemizedChargerData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TripInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TripInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TripInfo
     * }
     */
    public static GroupLayout asn_DEF_TripInfo$layout() {
        return asn_DEF_TripInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TripInfo
     * }
     */
    public static MemorySegment asn_DEF_TripInfo() {
        return asn_DEF_TripInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TripInfo
     * }
     */
    public static void asn_DEF_TripInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TripInfo$constants.SEGMENT, 0L, asn_DEF_TripInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TripInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TripInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TripInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TripInfo_specs_1$layout() {
        return asn_SPC_TripInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TripInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TripInfo_specs_1() {
        return asn_SPC_TripInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TripInfo_specs_1
     * }
     */
    public static void asn_SPC_TripInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TripInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_TripInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TripInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TripInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_TripInfo_1$layout() {
        return asn_MBR_TripInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static long[] asn_MBR_TripInfo_1$dimensions() {
        return asn_MBR_TripInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TripInfo_1() {
        return asn_MBR_TripInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static void asn_MBR_TripInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TripInfo_1$constants.SEGMENT, 0L, asn_MBR_TripInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TripInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TripInfo_1$constants.HANDLE.invokeExact(asn_MBR_TripInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TripInfo_1[3]
     * }
     */
    public static void asn_MBR_TripInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TripInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TripInfo_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TripInfo_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TripInfo_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TripInfo_constr_1$layout() {
        return asn_PER_type_TripInfo_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TripInfo_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TripInfo_constr_1() {
        return asn_PER_type_TripInfo_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TripInfo_constr_1
     * }
     */
    public static void asn_PER_type_TripInfo_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TripInfo_constr_1$constants.SEGMENT, 0L, asn_PER_type_TripInfo_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int UsageReport_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum UsageReport_PR.UsageReport_PR_NOTHING = 0
     * }
     */
    public static int UsageReport_PR_NOTHING() {
        return UsageReport_PR_NOTHING;
    }
    private static final int UsageReport_PR_feeReport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum UsageReport_PR.UsageReport_PR_feeReport = 1
     * }
     */
    public static int UsageReport_PR_feeReport() {
        return UsageReport_PR_feeReport;
    }
    private static final int UsageReport_PR_itemizedPaymentReport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum UsageReport_PR.UsageReport_PR_itemizedPaymentReport = 2
     * }
     */
    public static int UsageReport_PR_itemizedPaymentReport() {
        return UsageReport_PR_itemizedPaymentReport;
    }

    private static class asn_DEF_UsageReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_UsageReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UsageReport
     * }
     */
    public static GroupLayout asn_DEF_UsageReport$layout() {
        return asn_DEF_UsageReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UsageReport
     * }
     */
    public static MemorySegment asn_DEF_UsageReport() {
        return asn_DEF_UsageReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_UsageReport
     * }
     */
    public static void asn_DEF_UsageReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_UsageReport$constants.SEGMENT, 0L, asn_DEF_UsageReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_UsageReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_UsageReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_UsageReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_UsageReport_specs_1$layout() {
        return asn_SPC_UsageReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_UsageReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_UsageReport_specs_1() {
        return asn_SPC_UsageReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_UsageReport_specs_1
     * }
     */
    public static void asn_SPC_UsageReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_UsageReport_specs_1$constants.SEGMENT, 0L, asn_SPC_UsageReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_UsageReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_UsageReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_UsageReport_1$layout() {
        return asn_MBR_UsageReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static long[] asn_MBR_UsageReport_1$dimensions() {
        return asn_MBR_UsageReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_UsageReport_1() {
        return asn_MBR_UsageReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static void asn_MBR_UsageReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_UsageReport_1$constants.SEGMENT, 0L, asn_MBR_UsageReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_UsageReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_UsageReport_1$constants.HANDLE.invokeExact(asn_MBR_UsageReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_UsageReport_1[2]
     * }
     */
    public static void asn_MBR_UsageReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_UsageReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_UsageReport_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_UsageReport_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_UsageReport_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_UsageReport_constr_1$layout() {
        return asn_PER_type_UsageReport_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_UsageReport_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_UsageReport_constr_1() {
        return asn_PER_type_UsageReport_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_UsageReport_constr_1
     * }
     */
    public static void asn_PER_type_UsageReport_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_UsageReport_constr_1$constants.SEGMENT, 0L, asn_PER_type_UsageReport_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RoadUserChargingReportMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RoadUserChargingReportMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadUserChargingReportMessage
     * }
     */
    public static GroupLayout asn_DEF_RoadUserChargingReportMessage$layout() {
        return asn_DEF_RoadUserChargingReportMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadUserChargingReportMessage
     * }
     */
    public static MemorySegment asn_DEF_RoadUserChargingReportMessage() {
        return asn_DEF_RoadUserChargingReportMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadUserChargingReportMessage
     * }
     */
    public static void asn_DEF_RoadUserChargingReportMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RoadUserChargingReportMessage$constants.SEGMENT, 0L, asn_DEF_RoadUserChargingReportMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RoadUserChargingReportMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RoadUserChargingReportMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadUserChargingReportMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RoadUserChargingReportMessage_specs_1$layout() {
        return asn_SPC_RoadUserChargingReportMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadUserChargingReportMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RoadUserChargingReportMessage_specs_1() {
        return asn_SPC_RoadUserChargingReportMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadUserChargingReportMessage_specs_1
     * }
     */
    public static void asn_SPC_RoadUserChargingReportMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RoadUserChargingReportMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_RoadUserChargingReportMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RoadUserChargingReportMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RoadUserChargingReportMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RoadUserChargingReportMessage_1$layout() {
        return asn_MBR_RoadUserChargingReportMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static long[] asn_MBR_RoadUserChargingReportMessage_1$dimensions() {
        return asn_MBR_RoadUserChargingReportMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadUserChargingReportMessage_1() {
        return asn_MBR_RoadUserChargingReportMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static void asn_MBR_RoadUserChargingReportMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadUserChargingReportMessage_1$constants.SEGMENT, 0L, asn_MBR_RoadUserChargingReportMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadUserChargingReportMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RoadUserChargingReportMessage_1$constants.HANDLE.invokeExact(asn_MBR_RoadUserChargingReportMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadUserChargingReportMessage_1[2]
     * }
     */
    public static void asn_MBR_RoadUserChargingReportMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadUserChargingReportMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int TrafficLightID_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightID_PR.TrafficLightID_PR_NOTHING = 0
     * }
     */
    public static int TrafficLightID_PR_NOTHING() {
        return TrafficLightID_PR_NOTHING;
    }
    private static final int TrafficLightID_PR_id = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightID_PR.TrafficLightID_PR_id = 1
     * }
     */
    public static int TrafficLightID_PR_id() {
        return TrafficLightID_PR_id;
    }
    private static final int TrafficLightID_PR_oid = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightID_PR.TrafficLightID_PR_oid = 2
     * }
     */
    public static int TrafficLightID_PR_oid() {
        return TrafficLightID_PR_oid;
    }

    private static class asn_DEF_TrafficLightID$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightID
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightID$layout() {
        return asn_DEF_TrafficLightID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightID
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightID() {
        return asn_DEF_TrafficLightID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightID
     * }
     */
    public static void asn_DEF_TrafficLightID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightID$constants.SEGMENT, 0L, asn_DEF_TrafficLightID$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightID_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightID_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_TrafficLightID_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightID_specs_1$layout() {
        return asn_SPC_TrafficLightID_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_TrafficLightID_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightID_specs_1() {
        return asn_SPC_TrafficLightID_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_TrafficLightID_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightID_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightID_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightID_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrafficLightID_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrafficLightID_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TrafficLightID_1$layout() {
        return asn_MBR_TrafficLightID_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static long[] asn_MBR_TrafficLightID_1$dimensions() {
        return asn_MBR_TrafficLightID_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightID_1() {
        return asn_MBR_TrafficLightID_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static void asn_MBR_TrafficLightID_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightID_1$constants.SEGMENT, 0L, asn_MBR_TrafficLightID_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightID_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrafficLightID_1$constants.HANDLE.invokeExact(asn_MBR_TrafficLightID_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightID_1[2]
     * }
     */
    public static void asn_MBR_TrafficLightID_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightID_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TrafficLightID_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightID_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightID_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightID_constr_1$layout() {
        return asn_PER_type_TrafficLightID_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightID_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightID_constr_1() {
        return asn_PER_type_TrafficLightID_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightID_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightID_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightID_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightID_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int TrafficLightOperationStatus_manual = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_manual = 0
     * }
     */
    public static int TrafficLightOperationStatus_manual() {
        return TrafficLightOperationStatus_manual;
    }
    private static final int TrafficLightOperationStatus_flashing = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_flashing = 1
     * }
     */
    public static int TrafficLightOperationStatus_flashing() {
        return TrafficLightOperationStatus_flashing;
    }
    private static final int TrafficLightOperationStatus_off = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_off = 2
     * }
     */
    public static int TrafficLightOperationStatus_off() {
        return TrafficLightOperationStatus_off;
    }
    private static final int TrafficLightOperationStatus_actuated = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_actuated = 3
     * }
     */
    public static int TrafficLightOperationStatus_actuated() {
        return TrafficLightOperationStatus_actuated;
    }
    private static final int TrafficLightOperationStatus_transition = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_transition = 4
     * }
     */
    public static int TrafficLightOperationStatus_transition() {
        return TrafficLightOperationStatus_transition;
    }
    private static final int TrafficLightOperationStatus_priority = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_priority = 5
     * }
     */
    public static int TrafficLightOperationStatus_priority() {
        return TrafficLightOperationStatus_priority;
    }
    private static final int TrafficLightOperationStatus_holding_phase = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_holding_phase = 6
     * }
     */
    public static int TrafficLightOperationStatus_holding_phase() {
        return TrafficLightOperationStatus_holding_phase;
    }
    private static final int TrafficLightOperationStatus_reserved = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightOperationStatus.TrafficLightOperationStatus_reserved = 7
     * }
     */
    public static int TrafficLightOperationStatus_reserved() {
        return TrafficLightOperationStatus_reserved;
    }

    private static class asn_PER_type_TrafficLightOperationStatus_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightOperationStatus_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightOperationStatus_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightOperationStatus_constr_1$layout() {
        return asn_PER_type_TrafficLightOperationStatus_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightOperationStatus_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightOperationStatus_constr_1() {
        return asn_PER_type_TrafficLightOperationStatus_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightOperationStatus_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightOperationStatus_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightOperationStatus_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightOperationStatus_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightOperationStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightOperationStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightOperationStatus
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightOperationStatus$layout() {
        return asn_DEF_TrafficLightOperationStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightOperationStatus
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightOperationStatus() {
        return asn_DEF_TrafficLightOperationStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightOperationStatus
     * }
     */
    public static void asn_DEF_TrafficLightOperationStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightOperationStatus$constants.SEGMENT, 0L, asn_DEF_TrafficLightOperationStatus$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightOperationStatus_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightOperationStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_free$descriptor() {
        return TrafficLightOperationStatus_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightOperationStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_free$handle() {
        return TrafficLightOperationStatus_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightOperationStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_free$address() {
        return TrafficLightOperationStatus_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightOperationStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightOperationStatus_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightOperationStatus_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_print$descriptor() {
        return TrafficLightOperationStatus_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_print$handle() {
        return TrafficLightOperationStatus_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_print$address() {
        return TrafficLightOperationStatus_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightOperationStatus_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightOperationStatus_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_constraint$descriptor() {
        return TrafficLightOperationStatus_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_constraint$handle() {
        return TrafficLightOperationStatus_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_constraint$address() {
        return TrafficLightOperationStatus_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightOperationStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightOperationStatus_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightOperationStatus_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_decode_ber$descriptor() {
        return TrafficLightOperationStatus_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_decode_ber$handle() {
        return TrafficLightOperationStatus_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_ber$address() {
        return TrafficLightOperationStatus_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightOperationStatus_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_der$descriptor() {
        return TrafficLightOperationStatus_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_der$handle() {
        return TrafficLightOperationStatus_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_der$address() {
        return TrafficLightOperationStatus_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightOperationStatus_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_decode_xer$descriptor() {
        return TrafficLightOperationStatus_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_decode_xer$handle() {
        return TrafficLightOperationStatus_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_xer$address() {
        return TrafficLightOperationStatus_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightOperationStatus_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_xer$descriptor() {
        return TrafficLightOperationStatus_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_xer$handle() {
        return TrafficLightOperationStatus_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_xer$address() {
        return TrafficLightOperationStatus_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightOperationStatus_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_jer$descriptor() {
        return TrafficLightOperationStatus_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_jer$handle() {
        return TrafficLightOperationStatus_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_jer$address() {
        return TrafficLightOperationStatus_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightOperationStatus_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_decode_oer$descriptor() {
        return TrafficLightOperationStatus_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_decode_oer$handle() {
        return TrafficLightOperationStatus_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_oer$address() {
        return TrafficLightOperationStatus_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightOperationStatus_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_oer$descriptor() {
        return TrafficLightOperationStatus_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_oer$handle() {
        return TrafficLightOperationStatus_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_oer$address() {
        return TrafficLightOperationStatus_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightOperationStatus_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_decode_uper$descriptor() {
        return TrafficLightOperationStatus_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_decode_uper$handle() {
        return TrafficLightOperationStatus_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_uper$address() {
        return TrafficLightOperationStatus_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightOperationStatus_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_uper$descriptor() {
        return TrafficLightOperationStatus_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_uper$handle() {
        return TrafficLightOperationStatus_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_uper$address() {
        return TrafficLightOperationStatus_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightOperationStatus_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_decode_aper$descriptor() {
        return TrafficLightOperationStatus_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_decode_aper$handle() {
        return TrafficLightOperationStatus_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_aper$address() {
        return TrafficLightOperationStatus_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightOperationStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightOperationStatus_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightOperationStatus_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightOperationStatus_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightOperationStatus_encode_aper$descriptor() {
        return TrafficLightOperationStatus_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightOperationStatus_encode_aper$handle() {
        return TrafficLightOperationStatus_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_aper$address() {
        return TrafficLightOperationStatus_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightOperationStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightOperationStatus_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightOperationStatus_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightOperationStatus_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int TrafficLightControllerStatus_conflict = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_conflict = 0
     * }
     */
    public static int TrafficLightControllerStatus_conflict() {
        return TrafficLightControllerStatus_conflict;
    }
    private static final int TrafficLightControllerStatus_center_comm_error = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_center_comm_error = 1
     * }
     */
    public static int TrafficLightControllerStatus_center_comm_error() {
        return TrafficLightControllerStatus_center_comm_error;
    }
    private static final int TrafficLightControllerStatus_scu_comm_error = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_scu_comm_error = 2
     * }
     */
    public static int TrafficLightControllerStatus_scu_comm_error() {
        return TrafficLightControllerStatus_scu_comm_error;
    }
    private static final int TrafficLightControllerStatus_reserved1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_reserved1 = 3
     * }
     */
    public static int TrafficLightControllerStatus_reserved1() {
        return TrafficLightControllerStatus_reserved1;
    }
    private static final int TrafficLightControllerStatus_reserved2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_reserved2 = 4
     * }
     */
    public static int TrafficLightControllerStatus_reserved2() {
        return TrafficLightControllerStatus_reserved2;
    }
    private static final int TrafficLightControllerStatus_reserved3 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_reserved3 = 5
     * }
     */
    public static int TrafficLightControllerStatus_reserved3() {
        return TrafficLightControllerStatus_reserved3;
    }
    private static final int TrafficLightControllerStatus_reserved4 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_reserved4 = 6
     * }
     */
    public static int TrafficLightControllerStatus_reserved4() {
        return TrafficLightControllerStatus_reserved4;
    }
    private static final int TrafficLightControllerStatus_reserved5 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightControllerStatus.TrafficLightControllerStatus_reserved5 = 7
     * }
     */
    public static int TrafficLightControllerStatus_reserved5() {
        return TrafficLightControllerStatus_reserved5;
    }

    private static class asn_PER_type_TrafficLightControllerStatus_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightControllerStatus_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightControllerStatus_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightControllerStatus_constr_1$layout() {
        return asn_PER_type_TrafficLightControllerStatus_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightControllerStatus_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightControllerStatus_constr_1() {
        return asn_PER_type_TrafficLightControllerStatus_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightControllerStatus_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightControllerStatus_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightControllerStatus_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightControllerStatus_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightControllerStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightControllerStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightControllerStatus
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightControllerStatus$layout() {
        return asn_DEF_TrafficLightControllerStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightControllerStatus
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightControllerStatus() {
        return asn_DEF_TrafficLightControllerStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightControllerStatus
     * }
     */
    public static void asn_DEF_TrafficLightControllerStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightControllerStatus$constants.SEGMENT, 0L, asn_DEF_TrafficLightControllerStatus$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightControllerStatus_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightControllerStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_free$descriptor() {
        return TrafficLightControllerStatus_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightControllerStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_free$handle() {
        return TrafficLightControllerStatus_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightControllerStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_free$address() {
        return TrafficLightControllerStatus_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightControllerStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightControllerStatus_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightControllerStatus_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_print$descriptor() {
        return TrafficLightControllerStatus_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_print$handle() {
        return TrafficLightControllerStatus_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_print$address() {
        return TrafficLightControllerStatus_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightControllerStatus_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightControllerStatus_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_constraint$descriptor() {
        return TrafficLightControllerStatus_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_constraint$handle() {
        return TrafficLightControllerStatus_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_constraint$address() {
        return TrafficLightControllerStatus_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightControllerStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightControllerStatus_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightControllerStatus_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_decode_ber$descriptor() {
        return TrafficLightControllerStatus_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_decode_ber$handle() {
        return TrafficLightControllerStatus_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_ber$address() {
        return TrafficLightControllerStatus_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightControllerStatus_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_der$descriptor() {
        return TrafficLightControllerStatus_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_der$handle() {
        return TrafficLightControllerStatus_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_der$address() {
        return TrafficLightControllerStatus_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightControllerStatus_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_decode_xer$descriptor() {
        return TrafficLightControllerStatus_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_decode_xer$handle() {
        return TrafficLightControllerStatus_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_xer$address() {
        return TrafficLightControllerStatus_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightControllerStatus_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_xer$descriptor() {
        return TrafficLightControllerStatus_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_xer$handle() {
        return TrafficLightControllerStatus_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_xer$address() {
        return TrafficLightControllerStatus_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightControllerStatus_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_jer$descriptor() {
        return TrafficLightControllerStatus_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_jer$handle() {
        return TrafficLightControllerStatus_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_jer$address() {
        return TrafficLightControllerStatus_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightControllerStatus_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_decode_oer$descriptor() {
        return TrafficLightControllerStatus_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_decode_oer$handle() {
        return TrafficLightControllerStatus_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_oer$address() {
        return TrafficLightControllerStatus_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightControllerStatus_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_oer$descriptor() {
        return TrafficLightControllerStatus_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_oer$handle() {
        return TrafficLightControllerStatus_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_oer$address() {
        return TrafficLightControllerStatus_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightControllerStatus_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_decode_uper$descriptor() {
        return TrafficLightControllerStatus_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_decode_uper$handle() {
        return TrafficLightControllerStatus_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_uper$address() {
        return TrafficLightControllerStatus_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightControllerStatus_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_uper$descriptor() {
        return TrafficLightControllerStatus_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_uper$handle() {
        return TrafficLightControllerStatus_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_uper$address() {
        return TrafficLightControllerStatus_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightControllerStatus_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_decode_aper$descriptor() {
        return TrafficLightControllerStatus_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_decode_aper$handle() {
        return TrafficLightControllerStatus_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_aper$address() {
        return TrafficLightControllerStatus_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightControllerStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightControllerStatus_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightControllerStatus_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightControllerStatus_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightControllerStatus_encode_aper$descriptor() {
        return TrafficLightControllerStatus_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightControllerStatus_encode_aper$handle() {
        return TrafficLightControllerStatus_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_aper$address() {
        return TrafficLightControllerStatus_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightControllerStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightControllerStatus_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightControllerStatus_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightControllerStatus_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TimeInSecond_B16_t
     * }
     */
    public static final OfLong TimeInSecond_B16_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TimeInSecond_B16_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TimeInSecond_B16_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B16_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TimeInSecond_B16_constr_1$layout() {
        return asn_PER_type_TimeInSecond_B16_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B16_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TimeInSecond_B16_constr_1() {
        return asn_PER_type_TimeInSecond_B16_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B16_constr_1
     * }
     */
    public static void asn_PER_type_TimeInSecond_B16_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TimeInSecond_B16_constr_1$constants.SEGMENT, 0L, asn_PER_type_TimeInSecond_B16_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TimeInSecond_B16$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TimeInSecond_B16").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B16
     * }
     */
    public static GroupLayout asn_DEF_TimeInSecond_B16$layout() {
        return asn_DEF_TimeInSecond_B16$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B16
     * }
     */
    public static MemorySegment asn_DEF_TimeInSecond_B16() {
        return asn_DEF_TimeInSecond_B16$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B16
     * }
     */
    public static void asn_DEF_TimeInSecond_B16(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TimeInSecond_B16$constants.SEGMENT, 0L, asn_DEF_TimeInSecond_B16$constants.LAYOUT.byteSize());
    }

    private static class TimeInSecond_B16_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TimeInSecond_B16_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_free$descriptor() {
        return TimeInSecond_B16_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TimeInSecond_B16_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TimeInSecond_B16_free$handle() {
        return TimeInSecond_B16_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TimeInSecond_B16_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TimeInSecond_B16_free$address() {
        return TimeInSecond_B16_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TimeInSecond_B16_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TimeInSecond_B16_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TimeInSecond_B16_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_print$descriptor() {
        return TimeInSecond_B16_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_print$handle() {
        return TimeInSecond_B16_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_print$address() {
        return TimeInSecond_B16_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeInSecond_B16_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TimeInSecond_B16_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B16_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_constraint$descriptor() {
        return TimeInSecond_B16_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_constraint$handle() {
        return TimeInSecond_B16_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeInSecond_B16_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_constraint$address() {
        return TimeInSecond_B16_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeInSecond_B16_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TimeInSecond_B16_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B16_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_decode_ber$descriptor() {
        return TimeInSecond_B16_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TimeInSecond_B16_decode_ber$handle() {
        return TimeInSecond_B16_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_ber$address() {
        return TimeInSecond_B16_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TimeInSecond_B16_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_der$descriptor() {
        return TimeInSecond_B16_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_der$handle() {
        return TimeInSecond_B16_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_der$address() {
        return TimeInSecond_B16_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeInSecond_B16_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_decode_xer$descriptor() {
        return TimeInSecond_B16_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TimeInSecond_B16_decode_xer$handle() {
        return TimeInSecond_B16_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_xer$address() {
        return TimeInSecond_B16_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeInSecond_B16_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_xer$descriptor() {
        return TimeInSecond_B16_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_xer$handle() {
        return TimeInSecond_B16_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_xer$address() {
        return TimeInSecond_B16_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeInSecond_B16_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_jer$descriptor() {
        return TimeInSecond_B16_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_jer$handle() {
        return TimeInSecond_B16_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_jer$address() {
        return TimeInSecond_B16_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TimeInSecond_B16_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_decode_oer$descriptor() {
        return TimeInSecond_B16_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TimeInSecond_B16_decode_oer$handle() {
        return TimeInSecond_B16_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_oer$address() {
        return TimeInSecond_B16_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeInSecond_B16_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_oer$descriptor() {
        return TimeInSecond_B16_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_oer$handle() {
        return TimeInSecond_B16_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_oer$address() {
        return TimeInSecond_B16_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B16_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_decode_uper$descriptor() {
        return TimeInSecond_B16_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_decode_uper$handle() {
        return TimeInSecond_B16_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_uper$address() {
        return TimeInSecond_B16_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B16_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_uper$descriptor() {
        return TimeInSecond_B16_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_uper$handle() {
        return TimeInSecond_B16_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_uper$address() {
        return TimeInSecond_B16_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B16_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_decode_aper$descriptor() {
        return TimeInSecond_B16_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_decode_aper$handle() {
        return TimeInSecond_B16_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_aper$address() {
        return TimeInSecond_B16_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B16_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B16_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B16_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B16_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B16_encode_aper$descriptor() {
        return TimeInSecond_B16_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B16_encode_aper$handle() {
        return TimeInSecond_B16_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_aper$address() {
        return TimeInSecond_B16_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B16_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B16_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B16_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B16_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_TrafficLightStatusList$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightStatusList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusList
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightStatusList$layout() {
        return asn_DEF_TrafficLightStatusList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusList
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightStatusList() {
        return asn_DEF_TrafficLightStatusList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusList
     * }
     */
    public static void asn_DEF_TrafficLightStatusList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightStatusList$constants.SEGMENT, 0L, asn_DEF_TrafficLightStatusList$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightStatusList_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightStatusList_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrafficLightStatusList_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightStatusList_specs_1$layout() {
        return asn_SPC_TrafficLightStatusList_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrafficLightStatusList_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightStatusList_specs_1() {
        return asn_SPC_TrafficLightStatusList_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrafficLightStatusList_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightStatusList_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightStatusList_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightStatusList_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrafficLightStatusList_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrafficLightStatusList_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_TrafficLightStatusList_1$layout() {
        return asn_MBR_TrafficLightStatusList_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static long[] asn_MBR_TrafficLightStatusList_1$dimensions() {
        return asn_MBR_TrafficLightStatusList_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatusList_1() {
        return asn_MBR_TrafficLightStatusList_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static void asn_MBR_TrafficLightStatusList_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatusList_1$constants.SEGMENT, 0L, asn_MBR_TrafficLightStatusList_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatusList_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrafficLightStatusList_1$constants.HANDLE.invokeExact(asn_MBR_TrafficLightStatusList_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusList_1[1]
     * }
     */
    public static void asn_MBR_TrafficLightStatusList_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatusList_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TrafficLightStatusList_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightStatusList_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightStatusList_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightStatusList_constr_1$layout() {
        return asn_PER_type_TrafficLightStatusList_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightStatusList_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightStatusList_constr_1() {
        return asn_PER_type_TrafficLightStatusList_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightStatusList_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightStatusList_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightStatusList_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightStatusList_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int TrafficLightType_reserved = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_reserved = 0
     * }
     */
    public static int TrafficLightType_reserved() {
        return TrafficLightType_reserved;
    }
    private static final int TrafficLightType_straight = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_straight = 1
     * }
     */
    public static int TrafficLightType_straight() {
        return TrafficLightType_straight;
    }
    private static final int TrafficLightType_left_turn = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_left_turn = 2
     * }
     */
    public static int TrafficLightType_left_turn() {
        return TrafficLightType_left_turn;
    }
    private static final int TrafficLightType_pedestrian = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_pedestrian = 3
     * }
     */
    public static int TrafficLightType_pedestrian() {
        return TrafficLightType_pedestrian;
    }
    private static final int TrafficLightType_bicycle = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_bicycle = 4
     * }
     */
    public static int TrafficLightType_bicycle() {
        return TrafficLightType_bicycle;
    }
    private static final int TrafficLightType_right_turn = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_right_turn = 5
     * }
     */
    public static int TrafficLightType_right_turn() {
        return TrafficLightType_right_turn;
    }
    private static final int TrafficLightType_bus = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_bus = 6
     * }
     */
    public static int TrafficLightType_bus() {
        return TrafficLightType_bus;
    }
    private static final int TrafficLightType_u_turn = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightType.TrafficLightType_u_turn = 7
     * }
     */
    public static int TrafficLightType_u_turn() {
        return TrafficLightType_u_turn;
    }
    /**
     * {@snippet lang=c :
     * typedef long TrafficLightType_t
     * }
     */
    public static final OfLong TrafficLightType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrafficLightType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightType_constr_1$layout() {
        return asn_PER_type_TrafficLightType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightType_constr_1() {
        return asn_PER_type_TrafficLightType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightType_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightType_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightType
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightType$layout() {
        return asn_DEF_TrafficLightType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightType
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightType() {
        return asn_DEF_TrafficLightType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightType
     * }
     */
    public static void asn_DEF_TrafficLightType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightType$constants.SEGMENT, 0L, asn_DEF_TrafficLightType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightType_specs_1$layout() {
        return asn_SPC_TrafficLightType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightType_specs_1() {
        return asn_SPC_TrafficLightType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightType_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightType_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightType_free$descriptor() {
        return TrafficLightType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightType_free$handle() {
        return TrafficLightType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightType_free$address() {
        return TrafficLightType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_print$descriptor() {
        return TrafficLightType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_print$handle() {
        return TrafficLightType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_print$address() {
        return TrafficLightType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_constraint$descriptor() {
        return TrafficLightType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_constraint$handle() {
        return TrafficLightType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_constraint$address() {
        return TrafficLightType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightType_decode_ber$descriptor() {
        return TrafficLightType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightType_decode_ber$handle() {
        return TrafficLightType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightType_decode_ber$address() {
        return TrafficLightType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_der$descriptor() {
        return TrafficLightType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_der$handle() {
        return TrafficLightType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_der$address() {
        return TrafficLightType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightType_decode_xer$descriptor() {
        return TrafficLightType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightType_decode_xer$handle() {
        return TrafficLightType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightType_decode_xer$address() {
        return TrafficLightType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_xer$descriptor() {
        return TrafficLightType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_xer$handle() {
        return TrafficLightType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_xer$address() {
        return TrafficLightType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_jer$descriptor() {
        return TrafficLightType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_jer$handle() {
        return TrafficLightType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_jer$address() {
        return TrafficLightType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightType_decode_oer$descriptor() {
        return TrafficLightType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightType_decode_oer$handle() {
        return TrafficLightType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightType_decode_oer$address() {
        return TrafficLightType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_oer$descriptor() {
        return TrafficLightType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_oer$handle() {
        return TrafficLightType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_oer$address() {
        return TrafficLightType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_decode_uper$descriptor() {
        return TrafficLightType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightType_decode_uper$handle() {
        return TrafficLightType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightType_decode_uper$address() {
        return TrafficLightType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_uper$descriptor() {
        return TrafficLightType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_uper$handle() {
        return TrafficLightType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_uper$address() {
        return TrafficLightType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_decode_aper$descriptor() {
        return TrafficLightType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightType_decode_aper$handle() {
        return TrafficLightType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightType_decode_aper$address() {
        return TrafficLightType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightType_encode_aper$descriptor() {
        return TrafficLightType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightType_encode_aper$handle() {
        return TrafficLightType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_aper$address() {
        return TrafficLightType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ConsecutiveTrafficLight_none = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ConsecutiveTrafficLight.ConsecutiveTrafficLight_none = 0
     * }
     */
    public static int ConsecutiveTrafficLight_none() {
        return ConsecutiveTrafficLight_none;
    }
    private static final int ConsecutiveTrafficLight_first = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ConsecutiveTrafficLight.ConsecutiveTrafficLight_first = 1
     * }
     */
    public static int ConsecutiveTrafficLight_first() {
        return ConsecutiveTrafficLight_first;
    }
    private static final int ConsecutiveTrafficLight_second = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ConsecutiveTrafficLight.ConsecutiveTrafficLight_second = 2
     * }
     */
    public static int ConsecutiveTrafficLight_second() {
        return ConsecutiveTrafficLight_second;
    }
    /**
     * {@snippet lang=c :
     * typedef long ConsecutiveTrafficLight_t
     * }
     */
    public static final OfLong ConsecutiveTrafficLight_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ConsecutiveTrafficLight_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ConsecutiveTrafficLight_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConsecutiveTrafficLight_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ConsecutiveTrafficLight_constr_1$layout() {
        return asn_PER_type_ConsecutiveTrafficLight_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConsecutiveTrafficLight_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ConsecutiveTrafficLight_constr_1() {
        return asn_PER_type_ConsecutiveTrafficLight_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConsecutiveTrafficLight_constr_1
     * }
     */
    public static void asn_PER_type_ConsecutiveTrafficLight_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ConsecutiveTrafficLight_constr_1$constants.SEGMENT, 0L, asn_PER_type_ConsecutiveTrafficLight_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ConsecutiveTrafficLight$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConsecutiveTrafficLight").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConsecutiveTrafficLight
     * }
     */
    public static GroupLayout asn_DEF_ConsecutiveTrafficLight$layout() {
        return asn_DEF_ConsecutiveTrafficLight$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConsecutiveTrafficLight
     * }
     */
    public static MemorySegment asn_DEF_ConsecutiveTrafficLight() {
        return asn_DEF_ConsecutiveTrafficLight$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConsecutiveTrafficLight
     * }
     */
    public static void asn_DEF_ConsecutiveTrafficLight(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConsecutiveTrafficLight$constants.SEGMENT, 0L, asn_DEF_ConsecutiveTrafficLight$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ConsecutiveTrafficLight_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ConsecutiveTrafficLight_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ConsecutiveTrafficLight_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ConsecutiveTrafficLight_specs_1$layout() {
        return asn_SPC_ConsecutiveTrafficLight_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ConsecutiveTrafficLight_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ConsecutiveTrafficLight_specs_1() {
        return asn_SPC_ConsecutiveTrafficLight_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ConsecutiveTrafficLight_specs_1
     * }
     */
    public static void asn_SPC_ConsecutiveTrafficLight_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ConsecutiveTrafficLight_specs_1$constants.SEGMENT, 0L, asn_SPC_ConsecutiveTrafficLight_specs_1$constants.LAYOUT.byteSize());
    }

    private static class ConsecutiveTrafficLight_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ConsecutiveTrafficLight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_free$descriptor() {
        return ConsecutiveTrafficLight_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ConsecutiveTrafficLight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_free$handle() {
        return ConsecutiveTrafficLight_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ConsecutiveTrafficLight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_free$address() {
        return ConsecutiveTrafficLight_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ConsecutiveTrafficLight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ConsecutiveTrafficLight_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ConsecutiveTrafficLight_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_print$descriptor() {
        return ConsecutiveTrafficLight_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_print$handle() {
        return ConsecutiveTrafficLight_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_print$address() {
        return ConsecutiveTrafficLight_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ConsecutiveTrafficLight_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConsecutiveTrafficLight_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_constraint$descriptor() {
        return ConsecutiveTrafficLight_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_constraint$handle() {
        return ConsecutiveTrafficLight_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_constraint$address() {
        return ConsecutiveTrafficLight_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ConsecutiveTrafficLight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ConsecutiveTrafficLight_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConsecutiveTrafficLight_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_decode_ber$descriptor() {
        return ConsecutiveTrafficLight_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_decode_ber$handle() {
        return ConsecutiveTrafficLight_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_ber$address() {
        return ConsecutiveTrafficLight_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ConsecutiveTrafficLight_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_der$descriptor() {
        return ConsecutiveTrafficLight_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_der$handle() {
        return ConsecutiveTrafficLight_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_der$address() {
        return ConsecutiveTrafficLight_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ConsecutiveTrafficLight_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_decode_xer$descriptor() {
        return ConsecutiveTrafficLight_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_decode_xer$handle() {
        return ConsecutiveTrafficLight_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_xer$address() {
        return ConsecutiveTrafficLight_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ConsecutiveTrafficLight_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_xer$descriptor() {
        return ConsecutiveTrafficLight_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_xer$handle() {
        return ConsecutiveTrafficLight_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_xer$address() {
        return ConsecutiveTrafficLight_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ConsecutiveTrafficLight_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_jer$descriptor() {
        return ConsecutiveTrafficLight_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_jer$handle() {
        return ConsecutiveTrafficLight_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_jer$address() {
        return ConsecutiveTrafficLight_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ConsecutiveTrafficLight_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_decode_oer$descriptor() {
        return ConsecutiveTrafficLight_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_decode_oer$handle() {
        return ConsecutiveTrafficLight_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_oer$address() {
        return ConsecutiveTrafficLight_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ConsecutiveTrafficLight_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_oer$descriptor() {
        return ConsecutiveTrafficLight_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_oer$handle() {
        return ConsecutiveTrafficLight_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_oer$address() {
        return ConsecutiveTrafficLight_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConsecutiveTrafficLight_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_decode_uper$descriptor() {
        return ConsecutiveTrafficLight_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_decode_uper$handle() {
        return ConsecutiveTrafficLight_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_uper$address() {
        return ConsecutiveTrafficLight_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConsecutiveTrafficLight_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_uper$descriptor() {
        return ConsecutiveTrafficLight_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_uper$handle() {
        return ConsecutiveTrafficLight_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_uper$address() {
        return ConsecutiveTrafficLight_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConsecutiveTrafficLight_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_decode_aper$descriptor() {
        return ConsecutiveTrafficLight_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_decode_aper$handle() {
        return ConsecutiveTrafficLight_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_aper$address() {
        return ConsecutiveTrafficLight_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConsecutiveTrafficLight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConsecutiveTrafficLight_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConsecutiveTrafficLight_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConsecutiveTrafficLight_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ConsecutiveTrafficLight_encode_aper$descriptor() {
        return ConsecutiveTrafficLight_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ConsecutiveTrafficLight_encode_aper$handle() {
        return ConsecutiveTrafficLight_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_aper$address() {
        return ConsecutiveTrafficLight_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConsecutiveTrafficLight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConsecutiveTrafficLight_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConsecutiveTrafficLight_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConsecutiveTrafficLight_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int TrafficLightIntervalType_static = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightIntervalType.TrafficLightIntervalType_static = 0
     * }
     */
    public static int TrafficLightIntervalType_static() {
        return TrafficLightIntervalType_static;
    }
    private static final int TrafficLightIntervalType_variable = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightIntervalType.TrafficLightIntervalType_variable = 1
     * }
     */
    public static int TrafficLightIntervalType_variable() {
        return TrafficLightIntervalType_variable;
    }
    /**
     * {@snippet lang=c :
     * typedef long TrafficLightIntervalType_t
     * }
     */
    public static final OfLong TrafficLightIntervalType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrafficLightIntervalType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightIntervalType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightIntervalType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightIntervalType_constr_1$layout() {
        return asn_PER_type_TrafficLightIntervalType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightIntervalType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightIntervalType_constr_1() {
        return asn_PER_type_TrafficLightIntervalType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightIntervalType_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightIntervalType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightIntervalType_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightIntervalType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightIntervalType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightIntervalType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightIntervalType
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightIntervalType$layout() {
        return asn_DEF_TrafficLightIntervalType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightIntervalType
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightIntervalType() {
        return asn_DEF_TrafficLightIntervalType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightIntervalType
     * }
     */
    public static void asn_DEF_TrafficLightIntervalType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightIntervalType$constants.SEGMENT, 0L, asn_DEF_TrafficLightIntervalType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightIntervalType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightIntervalType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightIntervalType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightIntervalType_specs_1$layout() {
        return asn_SPC_TrafficLightIntervalType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightIntervalType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightIntervalType_specs_1() {
        return asn_SPC_TrafficLightIntervalType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightIntervalType_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightIntervalType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightIntervalType_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightIntervalType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightIntervalType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightIntervalType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_free$descriptor() {
        return TrafficLightIntervalType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightIntervalType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_free$handle() {
        return TrafficLightIntervalType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightIntervalType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_free$address() {
        return TrafficLightIntervalType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightIntervalType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightIntervalType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightIntervalType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_print$descriptor() {
        return TrafficLightIntervalType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_print$handle() {
        return TrafficLightIntervalType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_print$address() {
        return TrafficLightIntervalType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightIntervalType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightIntervalType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightIntervalType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_constraint$descriptor() {
        return TrafficLightIntervalType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_constraint$handle() {
        return TrafficLightIntervalType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightIntervalType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_constraint$address() {
        return TrafficLightIntervalType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightIntervalType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightIntervalType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightIntervalType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_decode_ber$descriptor() {
        return TrafficLightIntervalType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_decode_ber$handle() {
        return TrafficLightIntervalType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_ber$address() {
        return TrafficLightIntervalType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightIntervalType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_der$descriptor() {
        return TrafficLightIntervalType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_der$handle() {
        return TrafficLightIntervalType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_der$address() {
        return TrafficLightIntervalType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightIntervalType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_decode_xer$descriptor() {
        return TrafficLightIntervalType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_decode_xer$handle() {
        return TrafficLightIntervalType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_xer$address() {
        return TrafficLightIntervalType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightIntervalType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_xer$descriptor() {
        return TrafficLightIntervalType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_xer$handle() {
        return TrafficLightIntervalType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_xer$address() {
        return TrafficLightIntervalType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightIntervalType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_jer$descriptor() {
        return TrafficLightIntervalType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_jer$handle() {
        return TrafficLightIntervalType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_jer$address() {
        return TrafficLightIntervalType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightIntervalType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_decode_oer$descriptor() {
        return TrafficLightIntervalType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_decode_oer$handle() {
        return TrafficLightIntervalType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_oer$address() {
        return TrafficLightIntervalType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightIntervalType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_oer$descriptor() {
        return TrafficLightIntervalType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_oer$handle() {
        return TrafficLightIntervalType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_oer$address() {
        return TrafficLightIntervalType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightIntervalType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_decode_uper$descriptor() {
        return TrafficLightIntervalType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_decode_uper$handle() {
        return TrafficLightIntervalType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_uper$address() {
        return TrafficLightIntervalType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightIntervalType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_uper$descriptor() {
        return TrafficLightIntervalType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_uper$handle() {
        return TrafficLightIntervalType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_uper$address() {
        return TrafficLightIntervalType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightIntervalType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_decode_aper$descriptor() {
        return TrafficLightIntervalType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_decode_aper$handle() {
        return TrafficLightIntervalType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_aper$address() {
        return TrafficLightIntervalType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightIntervalType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightIntervalType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightIntervalType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightIntervalType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightIntervalType_encode_aper$descriptor() {
        return TrafficLightIntervalType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightIntervalType_encode_aper$handle() {
        return TrafficLightIntervalType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_aper$address() {
        return TrafficLightIntervalType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightIntervalType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightIntervalType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightIntervalType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightIntervalType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t PedestrianCall_t
     * }
     */
    public static final OfInt PedestrianCall_t = MessageFrame_h.C_INT;

    private static class asn_DEF_PedestrianCall$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PedestrianCall").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PedestrianCall
     * }
     */
    public static GroupLayout asn_DEF_PedestrianCall$layout() {
        return asn_DEF_PedestrianCall$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PedestrianCall
     * }
     */
    public static MemorySegment asn_DEF_PedestrianCall() {
        return asn_DEF_PedestrianCall$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PedestrianCall
     * }
     */
    public static void asn_DEF_PedestrianCall(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PedestrianCall$constants.SEGMENT, 0L, asn_DEF_PedestrianCall$constants.LAYOUT.byteSize());
    }

    private static class PedestrianCall_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PedestrianCall_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor PedestrianCall_free$descriptor() {
        return PedestrianCall_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PedestrianCall_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle PedestrianCall_free$handle() {
        return PedestrianCall_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PedestrianCall_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment PedestrianCall_free$address() {
        return PedestrianCall_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PedestrianCall_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void PedestrianCall_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = PedestrianCall_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PedestrianCall_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_print$descriptor() {
        return PedestrianCall_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PedestrianCall_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_print$handle() {
        return PedestrianCall_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PedestrianCall_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_print$address() {
        return PedestrianCall_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PedestrianCall_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int PedestrianCall_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PedestrianCall_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PedestrianCall_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_constraint$descriptor() {
        return PedestrianCall_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PedestrianCall_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_constraint$handle() {
        return PedestrianCall_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PedestrianCall_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_constraint$address() {
        return PedestrianCall_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PedestrianCall_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int PedestrianCall_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PedestrianCall_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor PedestrianCall_decode_ber$descriptor() {
        return PedestrianCall_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle PedestrianCall_decode_ber$handle() {
        return PedestrianCall_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PedestrianCall_decode_ber$address() {
        return PedestrianCall_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PedestrianCall_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = PedestrianCall_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_der$descriptor() {
        return PedestrianCall_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_der$handle() {
        return PedestrianCall_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_der$address() {
        return PedestrianCall_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PedestrianCall_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PedestrianCall_decode_xer$descriptor() {
        return PedestrianCall_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle PedestrianCall_decode_xer$handle() {
        return PedestrianCall_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PedestrianCall_decode_xer$address() {
        return PedestrianCall_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PedestrianCall_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PedestrianCall_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_xer$descriptor() {
        return PedestrianCall_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_xer$handle() {
        return PedestrianCall_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_xer$address() {
        return PedestrianCall_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PedestrianCall_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_jer$descriptor() {
        return PedestrianCall_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_jer$handle() {
        return PedestrianCall_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_jer$address() {
        return PedestrianCall_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = PedestrianCall_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PedestrianCall_decode_oer$descriptor() {
        return PedestrianCall_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle PedestrianCall_decode_oer$handle() {
        return PedestrianCall_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PedestrianCall_decode_oer$address() {
        return PedestrianCall_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PedestrianCall_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PedestrianCall_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_oer$descriptor() {
        return PedestrianCall_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_oer$handle() {
        return PedestrianCall_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_oer$address() {
        return PedestrianCall_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PedestrianCall_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_decode_uper$descriptor() {
        return PedestrianCall_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PedestrianCall_decode_uper$handle() {
        return PedestrianCall_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PedestrianCall_decode_uper$address() {
        return PedestrianCall_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PedestrianCall_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PedestrianCall_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_uper$descriptor() {
        return PedestrianCall_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_uper$handle() {
        return PedestrianCall_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_uper$address() {
        return PedestrianCall_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PedestrianCall_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_decode_aper$descriptor() {
        return PedestrianCall_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PedestrianCall_decode_aper$handle() {
        return PedestrianCall_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PedestrianCall_decode_aper$address() {
        return PedestrianCall_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PedestrianCall_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PedestrianCall_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PedestrianCall_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PedestrianCall_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PedestrianCall_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PedestrianCall_encode_aper$descriptor() {
        return PedestrianCall_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PedestrianCall_encode_aper$handle() {
        return PedestrianCall_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_aper$address() {
        return PedestrianCall_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PedestrianCall_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PedestrianCall_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PedestrianCall_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PedestrianCall_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t ActuatedInterval_t
     * }
     */
    public static final OfInt ActuatedInterval_t = MessageFrame_h.C_INT;

    private static class asn_DEF_ActuatedInterval$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ActuatedInterval").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ActuatedInterval
     * }
     */
    public static GroupLayout asn_DEF_ActuatedInterval$layout() {
        return asn_DEF_ActuatedInterval$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ActuatedInterval
     * }
     */
    public static MemorySegment asn_DEF_ActuatedInterval() {
        return asn_DEF_ActuatedInterval$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ActuatedInterval
     * }
     */
    public static void asn_DEF_ActuatedInterval(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ActuatedInterval$constants.SEGMENT, 0L, asn_DEF_ActuatedInterval$constants.LAYOUT.byteSize());
    }

    private static class ActuatedInterval_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ActuatedInterval_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_free$descriptor() {
        return ActuatedInterval_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ActuatedInterval_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ActuatedInterval_free$handle() {
        return ActuatedInterval_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ActuatedInterval_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ActuatedInterval_free$address() {
        return ActuatedInterval_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ActuatedInterval_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ActuatedInterval_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ActuatedInterval_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ActuatedInterval_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_print$descriptor() {
        return ActuatedInterval_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ActuatedInterval_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_print$handle() {
        return ActuatedInterval_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ActuatedInterval_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_print$address() {
        return ActuatedInterval_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ActuatedInterval_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ActuatedInterval_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ActuatedInterval_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ActuatedInterval_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_constraint$descriptor() {
        return ActuatedInterval_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ActuatedInterval_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_constraint$handle() {
        return ActuatedInterval_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ActuatedInterval_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_constraint$address() {
        return ActuatedInterval_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ActuatedInterval_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ActuatedInterval_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ActuatedInterval_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_decode_ber$descriptor() {
        return ActuatedInterval_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ActuatedInterval_decode_ber$handle() {
        return ActuatedInterval_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_ber$address() {
        return ActuatedInterval_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ActuatedInterval_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_der$descriptor() {
        return ActuatedInterval_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_der$handle() {
        return ActuatedInterval_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_der$address() {
        return ActuatedInterval_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ActuatedInterval_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_decode_xer$descriptor() {
        return ActuatedInterval_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ActuatedInterval_decode_xer$handle() {
        return ActuatedInterval_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_xer$address() {
        return ActuatedInterval_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ActuatedInterval_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_xer$descriptor() {
        return ActuatedInterval_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_xer$handle() {
        return ActuatedInterval_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_xer$address() {
        return ActuatedInterval_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ActuatedInterval_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_jer$descriptor() {
        return ActuatedInterval_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_jer$handle() {
        return ActuatedInterval_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_jer$address() {
        return ActuatedInterval_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ActuatedInterval_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_decode_oer$descriptor() {
        return ActuatedInterval_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ActuatedInterval_decode_oer$handle() {
        return ActuatedInterval_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_oer$address() {
        return ActuatedInterval_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ActuatedInterval_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_oer$descriptor() {
        return ActuatedInterval_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_oer$handle() {
        return ActuatedInterval_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_oer$address() {
        return ActuatedInterval_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ActuatedInterval_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_decode_uper$descriptor() {
        return ActuatedInterval_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ActuatedInterval_decode_uper$handle() {
        return ActuatedInterval_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_uper$address() {
        return ActuatedInterval_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ActuatedInterval_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_uper$descriptor() {
        return ActuatedInterval_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_uper$handle() {
        return ActuatedInterval_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_uper$address() {
        return ActuatedInterval_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ActuatedInterval_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_decode_aper$descriptor() {
        return ActuatedInterval_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ActuatedInterval_decode_aper$handle() {
        return ActuatedInterval_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_aper$address() {
        return ActuatedInterval_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ActuatedInterval_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ActuatedInterval_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ActuatedInterval_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ActuatedInterval_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ActuatedInterval_encode_aper$descriptor() {
        return ActuatedInterval_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ActuatedInterval_encode_aper$handle() {
        return ActuatedInterval_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_aper$address() {
        return ActuatedInterval_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ActuatedInterval_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ActuatedInterval_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ActuatedInterval_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ActuatedInterval_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PermissiveNonProtected_none = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PermissiveNonProtected.PermissiveNonProtected_none = 0
     * }
     */
    public static int PermissiveNonProtected_none() {
        return PermissiveNonProtected_none;
    }
    private static final int PermissiveNonProtected_permissive = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PermissiveNonProtected.PermissiveNonProtected_permissive = 1
     * }
     */
    public static int PermissiveNonProtected_permissive() {
        return PermissiveNonProtected_permissive;
    }
    /**
     * {@snippet lang=c :
     * typedef long PermissiveNonProtected_t
     * }
     */
    public static final OfLong PermissiveNonProtected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_PermissiveNonProtected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_PermissiveNonProtected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PermissiveNonProtected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_PermissiveNonProtected_constr_1$layout() {
        return asn_PER_type_PermissiveNonProtected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PermissiveNonProtected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_PermissiveNonProtected_constr_1() {
        return asn_PER_type_PermissiveNonProtected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_PermissiveNonProtected_constr_1
     * }
     */
    public static void asn_PER_type_PermissiveNonProtected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_PermissiveNonProtected_constr_1$constants.SEGMENT, 0L, asn_PER_type_PermissiveNonProtected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_PermissiveNonProtected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PermissiveNonProtected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PermissiveNonProtected
     * }
     */
    public static GroupLayout asn_DEF_PermissiveNonProtected$layout() {
        return asn_DEF_PermissiveNonProtected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PermissiveNonProtected
     * }
     */
    public static MemorySegment asn_DEF_PermissiveNonProtected() {
        return asn_DEF_PermissiveNonProtected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PermissiveNonProtected
     * }
     */
    public static void asn_DEF_PermissiveNonProtected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PermissiveNonProtected$constants.SEGMENT, 0L, asn_DEF_PermissiveNonProtected$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_PermissiveNonProtected_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_PermissiveNonProtected_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_PermissiveNonProtected_specs_1
     * }
     */
    public static GroupLayout asn_SPC_PermissiveNonProtected_specs_1$layout() {
        return asn_SPC_PermissiveNonProtected_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_PermissiveNonProtected_specs_1
     * }
     */
    public static MemorySegment asn_SPC_PermissiveNonProtected_specs_1() {
        return asn_SPC_PermissiveNonProtected_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_PermissiveNonProtected_specs_1
     * }
     */
    public static void asn_SPC_PermissiveNonProtected_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_PermissiveNonProtected_specs_1$constants.SEGMENT, 0L, asn_SPC_PermissiveNonProtected_specs_1$constants.LAYOUT.byteSize());
    }

    private static class PermissiveNonProtected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PermissiveNonProtected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_free$descriptor() {
        return PermissiveNonProtected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PermissiveNonProtected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle PermissiveNonProtected_free$handle() {
        return PermissiveNonProtected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PermissiveNonProtected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment PermissiveNonProtected_free$address() {
        return PermissiveNonProtected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PermissiveNonProtected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void PermissiveNonProtected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = PermissiveNonProtected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_print$descriptor() {
        return PermissiveNonProtected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_print$handle() {
        return PermissiveNonProtected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_print$address() {
        return PermissiveNonProtected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PermissiveNonProtected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int PermissiveNonProtected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PermissiveNonProtected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_constraint$descriptor() {
        return PermissiveNonProtected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_constraint$handle() {
        return PermissiveNonProtected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PermissiveNonProtected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_constraint$address() {
        return PermissiveNonProtected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PermissiveNonProtected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int PermissiveNonProtected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PermissiveNonProtected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_decode_ber$descriptor() {
        return PermissiveNonProtected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle PermissiveNonProtected_decode_ber$handle() {
        return PermissiveNonProtected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_ber$address() {
        return PermissiveNonProtected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = PermissiveNonProtected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_der$descriptor() {
        return PermissiveNonProtected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_der$handle() {
        return PermissiveNonProtected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_der$address() {
        return PermissiveNonProtected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PermissiveNonProtected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_decode_xer$descriptor() {
        return PermissiveNonProtected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle PermissiveNonProtected_decode_xer$handle() {
        return PermissiveNonProtected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_xer$address() {
        return PermissiveNonProtected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PermissiveNonProtected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_xer$descriptor() {
        return PermissiveNonProtected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_xer$handle() {
        return PermissiveNonProtected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_xer$address() {
        return PermissiveNonProtected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PermissiveNonProtected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_jer$descriptor() {
        return PermissiveNonProtected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_jer$handle() {
        return PermissiveNonProtected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_jer$address() {
        return PermissiveNonProtected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = PermissiveNonProtected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_decode_oer$descriptor() {
        return PermissiveNonProtected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle PermissiveNonProtected_decode_oer$handle() {
        return PermissiveNonProtected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_oer$address() {
        return PermissiveNonProtected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PermissiveNonProtected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_oer$descriptor() {
        return PermissiveNonProtected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_oer$handle() {
        return PermissiveNonProtected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_oer$address() {
        return PermissiveNonProtected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PermissiveNonProtected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_decode_uper$descriptor() {
        return PermissiveNonProtected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_decode_uper$handle() {
        return PermissiveNonProtected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_uper$address() {
        return PermissiveNonProtected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PermissiveNonProtected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_uper$descriptor() {
        return PermissiveNonProtected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_uper$handle() {
        return PermissiveNonProtected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_uper$address() {
        return PermissiveNonProtected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PermissiveNonProtected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_decode_aper$descriptor() {
        return PermissiveNonProtected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_decode_aper$handle() {
        return PermissiveNonProtected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_aper$address() {
        return PermissiveNonProtected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PermissiveNonProtected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PermissiveNonProtected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PermissiveNonProtected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PermissiveNonProtected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PermissiveNonProtected_encode_aper$descriptor() {
        return PermissiveNonProtected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PermissiveNonProtected_encode_aper$handle() {
        return PermissiveNonProtected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_aper$address() {
        return PermissiveNonProtected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PermissiveNonProtected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PermissiveNonProtected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PermissiveNonProtected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PermissiveNonProtected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int TrafficLightingStatus_off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_off = 0
     * }
     */
    public static int TrafficLightingStatus_off() {
        return TrafficLightingStatus_off;
    }
    private static final int TrafficLightingStatus_red_on = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_red_on = 1
     * }
     */
    public static int TrafficLightingStatus_red_on() {
        return TrafficLightingStatus_red_on;
    }
    private static final int TrafficLightingStatus_yellow_on = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_yellow_on = 2
     * }
     */
    public static int TrafficLightingStatus_yellow_on() {
        return TrafficLightingStatus_yellow_on;
    }
    private static final int TrafficLightingStatus_green_on = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_green_on = 3
     * }
     */
    public static int TrafficLightingStatus_green_on() {
        return TrafficLightingStatus_green_on;
    }
    private static final int TrafficLightingStatus_red_blinking = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_red_blinking = 4
     * }
     */
    public static int TrafficLightingStatus_red_blinking() {
        return TrafficLightingStatus_red_blinking;
    }
    private static final int TrafficLightingStatus_yellow_blinking = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_yellow_blinking = 5
     * }
     */
    public static int TrafficLightingStatus_yellow_blinking() {
        return TrafficLightingStatus_yellow_blinking;
    }
    private static final int TrafficLightingStatus_green_blinking = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TrafficLightingStatus.TrafficLightingStatus_green_blinking = 6
     * }
     */
    public static int TrafficLightingStatus_green_blinking() {
        return TrafficLightingStatus_green_blinking;
    }
    /**
     * {@snippet lang=c :
     * typedef long TrafficLightingStatus_t
     * }
     */
    public static final OfLong TrafficLightingStatus_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrafficLightingStatus_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightingStatus_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightingStatus_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightingStatus_constr_1$layout() {
        return asn_PER_type_TrafficLightingStatus_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightingStatus_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightingStatus_constr_1() {
        return asn_PER_type_TrafficLightingStatus_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightingStatus_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightingStatus_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightingStatus_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightingStatus_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightingStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightingStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightingStatus
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightingStatus$layout() {
        return asn_DEF_TrafficLightingStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightingStatus
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightingStatus() {
        return asn_DEF_TrafficLightingStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightingStatus
     * }
     */
    public static void asn_DEF_TrafficLightingStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightingStatus$constants.SEGMENT, 0L, asn_DEF_TrafficLightingStatus$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightingStatus_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightingStatus_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightingStatus_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightingStatus_specs_1$layout() {
        return asn_SPC_TrafficLightingStatus_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightingStatus_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightingStatus_specs_1() {
        return asn_SPC_TrafficLightingStatus_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_TrafficLightingStatus_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightingStatus_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightingStatus_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightingStatus_specs_1$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightingStatus_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightingStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_free$descriptor() {
        return TrafficLightingStatus_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightingStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightingStatus_free$handle() {
        return TrafficLightingStatus_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightingStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightingStatus_free$address() {
        return TrafficLightingStatus_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightingStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightingStatus_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightingStatus_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_print$descriptor() {
        return TrafficLightingStatus_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_print$handle() {
        return TrafficLightingStatus_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_print$address() {
        return TrafficLightingStatus_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightingStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightingStatus_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightingStatus_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_constraint$descriptor() {
        return TrafficLightingStatus_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_constraint$handle() {
        return TrafficLightingStatus_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightingStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_constraint$address() {
        return TrafficLightingStatus_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightingStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightingStatus_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightingStatus_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_decode_ber$descriptor() {
        return TrafficLightingStatus_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightingStatus_decode_ber$handle() {
        return TrafficLightingStatus_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_ber$address() {
        return TrafficLightingStatus_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightingStatus_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_der$descriptor() {
        return TrafficLightingStatus_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_der$handle() {
        return TrafficLightingStatus_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_der$address() {
        return TrafficLightingStatus_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightingStatus_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_decode_xer$descriptor() {
        return TrafficLightingStatus_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightingStatus_decode_xer$handle() {
        return TrafficLightingStatus_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_xer$address() {
        return TrafficLightingStatus_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightingStatus_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_xer$descriptor() {
        return TrafficLightingStatus_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_xer$handle() {
        return TrafficLightingStatus_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_xer$address() {
        return TrafficLightingStatus_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightingStatus_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_jer$descriptor() {
        return TrafficLightingStatus_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_jer$handle() {
        return TrafficLightingStatus_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_jer$address() {
        return TrafficLightingStatus_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightingStatus_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_decode_oer$descriptor() {
        return TrafficLightingStatus_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightingStatus_decode_oer$handle() {
        return TrafficLightingStatus_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_oer$address() {
        return TrafficLightingStatus_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightingStatus_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_oer$descriptor() {
        return TrafficLightingStatus_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_oer$handle() {
        return TrafficLightingStatus_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_oer$address() {
        return TrafficLightingStatus_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightingStatus_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_decode_uper$descriptor() {
        return TrafficLightingStatus_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_decode_uper$handle() {
        return TrafficLightingStatus_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_uper$address() {
        return TrafficLightingStatus_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightingStatus_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_uper$descriptor() {
        return TrafficLightingStatus_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_uper$handle() {
        return TrafficLightingStatus_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_uper$address() {
        return TrafficLightingStatus_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightingStatus_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_decode_aper$descriptor() {
        return TrafficLightingStatus_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_decode_aper$handle() {
        return TrafficLightingStatus_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_aper$address() {
        return TrafficLightingStatus_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightingStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightingStatus_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightingStatus_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightingStatus_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightingStatus_encode_aper$descriptor() {
        return TrafficLightingStatus_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightingStatus_encode_aper$handle() {
        return TrafficLightingStatus_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_aper$address() {
        return TrafficLightingStatus_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightingStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightingStatus_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightingStatus_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightingStatus_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TimeInSecond_B8_t
     * }
     */
    public static final OfLong TimeInSecond_B8_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TimeInSecond_B8_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TimeInSecond_B8_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B8_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TimeInSecond_B8_constr_1$layout() {
        return asn_PER_type_TimeInSecond_B8_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B8_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TimeInSecond_B8_constr_1() {
        return asn_PER_type_TimeInSecond_B8_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TimeInSecond_B8_constr_1
     * }
     */
    public static void asn_PER_type_TimeInSecond_B8_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TimeInSecond_B8_constr_1$constants.SEGMENT, 0L, asn_PER_type_TimeInSecond_B8_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TimeInSecond_B8$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TimeInSecond_B8").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B8
     * }
     */
    public static GroupLayout asn_DEF_TimeInSecond_B8$layout() {
        return asn_DEF_TimeInSecond_B8$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B8
     * }
     */
    public static MemorySegment asn_DEF_TimeInSecond_B8() {
        return asn_DEF_TimeInSecond_B8$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TimeInSecond_B8
     * }
     */
    public static void asn_DEF_TimeInSecond_B8(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TimeInSecond_B8$constants.SEGMENT, 0L, asn_DEF_TimeInSecond_B8$constants.LAYOUT.byteSize());
    }

    private static class TimeInSecond_B8_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TimeInSecond_B8_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_free$descriptor() {
        return TimeInSecond_B8_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TimeInSecond_B8_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TimeInSecond_B8_free$handle() {
        return TimeInSecond_B8_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TimeInSecond_B8_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TimeInSecond_B8_free$address() {
        return TimeInSecond_B8_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TimeInSecond_B8_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TimeInSecond_B8_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TimeInSecond_B8_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_print$descriptor() {
        return TimeInSecond_B8_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_print$handle() {
        return TimeInSecond_B8_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_print$address() {
        return TimeInSecond_B8_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeInSecond_B8_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TimeInSecond_B8_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B8_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_constraint$descriptor() {
        return TimeInSecond_B8_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_constraint$handle() {
        return TimeInSecond_B8_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TimeInSecond_B8_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_constraint$address() {
        return TimeInSecond_B8_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TimeInSecond_B8_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TimeInSecond_B8_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B8_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_decode_ber$descriptor() {
        return TimeInSecond_B8_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TimeInSecond_B8_decode_ber$handle() {
        return TimeInSecond_B8_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_ber$address() {
        return TimeInSecond_B8_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TimeInSecond_B8_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_der$descriptor() {
        return TimeInSecond_B8_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_der$handle() {
        return TimeInSecond_B8_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_der$address() {
        return TimeInSecond_B8_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeInSecond_B8_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_decode_xer$descriptor() {
        return TimeInSecond_B8_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TimeInSecond_B8_decode_xer$handle() {
        return TimeInSecond_B8_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_xer$address() {
        return TimeInSecond_B8_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeInSecond_B8_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_xer$descriptor() {
        return TimeInSecond_B8_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_xer$handle() {
        return TimeInSecond_B8_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_xer$address() {
        return TimeInSecond_B8_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TimeInSecond_B8_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_jer$descriptor() {
        return TimeInSecond_B8_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_jer$handle() {
        return TimeInSecond_B8_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_jer$address() {
        return TimeInSecond_B8_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TimeInSecond_B8_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_decode_oer$descriptor() {
        return TimeInSecond_B8_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TimeInSecond_B8_decode_oer$handle() {
        return TimeInSecond_B8_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_oer$address() {
        return TimeInSecond_B8_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TimeInSecond_B8_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_oer$descriptor() {
        return TimeInSecond_B8_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_oer$handle() {
        return TimeInSecond_B8_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_oer$address() {
        return TimeInSecond_B8_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B8_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_decode_uper$descriptor() {
        return TimeInSecond_B8_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_decode_uper$handle() {
        return TimeInSecond_B8_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_uper$address() {
        return TimeInSecond_B8_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B8_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_uper$descriptor() {
        return TimeInSecond_B8_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_uper$handle() {
        return TimeInSecond_B8_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_uper$address() {
        return TimeInSecond_B8_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B8_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_decode_aper$descriptor() {
        return TimeInSecond_B8_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_decode_aper$handle() {
        return TimeInSecond_B8_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_aper$address() {
        return TimeInSecond_B8_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TimeInSecond_B8_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TimeInSecond_B8_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TimeInSecond_B8_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TimeInSecond_B8_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TimeInSecond_B8_encode_aper$descriptor() {
        return TimeInSecond_B8_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TimeInSecond_B8_encode_aper$handle() {
        return TimeInSecond_B8_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_aper$address() {
        return TimeInSecond_B8_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TimeInSecond_B8_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TimeInSecond_B8_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TimeInSecond_B8_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TimeInSecond_B8_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TrafficLightDirectionCode_t
     * }
     */
    public static final OfLong TrafficLightDirectionCode_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrafficLightDirectionCode_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrafficLightDirectionCode_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightDirectionCode_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrafficLightDirectionCode_constr_1$layout() {
        return asn_PER_type_TrafficLightDirectionCode_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightDirectionCode_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrafficLightDirectionCode_constr_1() {
        return asn_PER_type_TrafficLightDirectionCode_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrafficLightDirectionCode_constr_1
     * }
     */
    public static void asn_PER_type_TrafficLightDirectionCode_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrafficLightDirectionCode_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrafficLightDirectionCode_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrafficLightDirectionCode$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightDirectionCode").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightDirectionCode
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightDirectionCode$layout() {
        return asn_DEF_TrafficLightDirectionCode$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightDirectionCode
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightDirectionCode() {
        return asn_DEF_TrafficLightDirectionCode$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightDirectionCode
     * }
     */
    public static void asn_DEF_TrafficLightDirectionCode(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightDirectionCode$constants.SEGMENT, 0L, asn_DEF_TrafficLightDirectionCode$constants.LAYOUT.byteSize());
    }

    private static class TrafficLightDirectionCode_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrafficLightDirectionCode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_free$descriptor() {
        return TrafficLightDirectionCode_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrafficLightDirectionCode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_free$handle() {
        return TrafficLightDirectionCode_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrafficLightDirectionCode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_free$address() {
        return TrafficLightDirectionCode_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrafficLightDirectionCode_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrafficLightDirectionCode_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrafficLightDirectionCode_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_print$descriptor() {
        return TrafficLightDirectionCode_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_print$handle() {
        return TrafficLightDirectionCode_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_print$address() {
        return TrafficLightDirectionCode_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrafficLightDirectionCode_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightDirectionCode_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_constraint$descriptor() {
        return TrafficLightDirectionCode_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_constraint$handle() {
        return TrafficLightDirectionCode_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_constraint$address() {
        return TrafficLightDirectionCode_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrafficLightDirectionCode_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrafficLightDirectionCode_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightDirectionCode_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_decode_ber$descriptor() {
        return TrafficLightDirectionCode_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_decode_ber$handle() {
        return TrafficLightDirectionCode_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_ber$address() {
        return TrafficLightDirectionCode_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrafficLightDirectionCode_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_der$descriptor() {
        return TrafficLightDirectionCode_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_der$handle() {
        return TrafficLightDirectionCode_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_der$address() {
        return TrafficLightDirectionCode_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightDirectionCode_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_decode_xer$descriptor() {
        return TrafficLightDirectionCode_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_decode_xer$handle() {
        return TrafficLightDirectionCode_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_xer$address() {
        return TrafficLightDirectionCode_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightDirectionCode_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_xer$descriptor() {
        return TrafficLightDirectionCode_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_xer$handle() {
        return TrafficLightDirectionCode_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_xer$address() {
        return TrafficLightDirectionCode_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrafficLightDirectionCode_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_jer$descriptor() {
        return TrafficLightDirectionCode_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_jer$handle() {
        return TrafficLightDirectionCode_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_jer$address() {
        return TrafficLightDirectionCode_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrafficLightDirectionCode_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_decode_oer$descriptor() {
        return TrafficLightDirectionCode_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_decode_oer$handle() {
        return TrafficLightDirectionCode_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_oer$address() {
        return TrafficLightDirectionCode_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrafficLightDirectionCode_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_oer$descriptor() {
        return TrafficLightDirectionCode_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_oer$handle() {
        return TrafficLightDirectionCode_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_oer$address() {
        return TrafficLightDirectionCode_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightDirectionCode_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_decode_uper$descriptor() {
        return TrafficLightDirectionCode_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_decode_uper$handle() {
        return TrafficLightDirectionCode_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_uper$address() {
        return TrafficLightDirectionCode_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightDirectionCode_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_uper$descriptor() {
        return TrafficLightDirectionCode_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_uper$handle() {
        return TrafficLightDirectionCode_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_uper$address() {
        return TrafficLightDirectionCode_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightDirectionCode_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_decode_aper$descriptor() {
        return TrafficLightDirectionCode_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_decode_aper$handle() {
        return TrafficLightDirectionCode_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_aper$address() {
        return TrafficLightDirectionCode_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrafficLightDirectionCode_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrafficLightDirectionCode_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrafficLightDirectionCode_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrafficLightDirectionCode_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrafficLightDirectionCode_encode_aper$descriptor() {
        return TrafficLightDirectionCode_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrafficLightDirectionCode_encode_aper$handle() {
        return TrafficLightDirectionCode_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_aper$address() {
        return TrafficLightDirectionCode_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrafficLightDirectionCode_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrafficLightDirectionCode_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrafficLightDirectionCode_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrafficLightDirectionCode_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t ReservedBit_t
     * }
     */
    public static final OfInt ReservedBit_t = MessageFrame_h.C_INT;

    private static class asn_DEF_ReservedBit$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ReservedBit").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReservedBit
     * }
     */
    public static GroupLayout asn_DEF_ReservedBit$layout() {
        return asn_DEF_ReservedBit$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReservedBit
     * }
     */
    public static MemorySegment asn_DEF_ReservedBit() {
        return asn_DEF_ReservedBit$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReservedBit
     * }
     */
    public static void asn_DEF_ReservedBit(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ReservedBit$constants.SEGMENT, 0L, asn_DEF_ReservedBit$constants.LAYOUT.byteSize());
    }

    private static class ReservedBit_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ReservedBit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ReservedBit_free$descriptor() {
        return ReservedBit_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ReservedBit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ReservedBit_free$handle() {
        return ReservedBit_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ReservedBit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ReservedBit_free$address() {
        return ReservedBit_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ReservedBit_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ReservedBit_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ReservedBit_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ReservedBit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_print$descriptor() {
        return ReservedBit_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ReservedBit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_print$handle() {
        return ReservedBit_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ReservedBit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_print$address() {
        return ReservedBit_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ReservedBit_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ReservedBit_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ReservedBit_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ReservedBit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_constraint$descriptor() {
        return ReservedBit_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ReservedBit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_constraint$handle() {
        return ReservedBit_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ReservedBit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_constraint$address() {
        return ReservedBit_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ReservedBit_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ReservedBit_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ReservedBit_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ReservedBit_decode_ber$descriptor() {
        return ReservedBit_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ReservedBit_decode_ber$handle() {
        return ReservedBit_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ReservedBit_decode_ber$address() {
        return ReservedBit_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ReservedBit_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ReservedBit_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_der$descriptor() {
        return ReservedBit_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_encode_der$handle() {
        return ReservedBit_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_der$address() {
        return ReservedBit_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ReservedBit_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ReservedBit_decode_xer$descriptor() {
        return ReservedBit_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ReservedBit_decode_xer$handle() {
        return ReservedBit_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ReservedBit_decode_xer$address() {
        return ReservedBit_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ReservedBit_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ReservedBit_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_xer$descriptor() {
        return ReservedBit_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_encode_xer$handle() {
        return ReservedBit_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_xer$address() {
        return ReservedBit_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ReservedBit_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_jer$descriptor() {
        return ReservedBit_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_encode_jer$handle() {
        return ReservedBit_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_jer$address() {
        return ReservedBit_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ReservedBit_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ReservedBit_decode_oer$descriptor() {
        return ReservedBit_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ReservedBit_decode_oer$handle() {
        return ReservedBit_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ReservedBit_decode_oer$address() {
        return ReservedBit_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ReservedBit_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ReservedBit_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_oer$descriptor() {
        return ReservedBit_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ReservedBit_encode_oer$handle() {
        return ReservedBit_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_oer$address() {
        return ReservedBit_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ReservedBit_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ReservedBit_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ReservedBit_decode_uper$descriptor() {
        return ReservedBit_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ReservedBit_decode_uper$handle() {
        return ReservedBit_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ReservedBit_decode_uper$address() {
        return ReservedBit_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ReservedBit_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ReservedBit_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_uper$descriptor() {
        return ReservedBit_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ReservedBit_encode_uper$handle() {
        return ReservedBit_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ReservedBit_encode_uper$address() {
        return ReservedBit_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ReservedBit_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ReservedBit_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ReservedBit_decode_aper$descriptor() {
        return ReservedBit_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ReservedBit_decode_aper$handle() {
        return ReservedBit_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ReservedBit_decode_aper$address() {
        return ReservedBit_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ReservedBit_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ReservedBit_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ReservedBit_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReservedBit_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ReservedBit_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ReservedBit_encode_aper$descriptor() {
        return ReservedBit_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ReservedBit_encode_aper$handle() {
        return ReservedBit_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ReservedBit_encode_aper$address() {
        return ReservedBit_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ReservedBit_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ReservedBit_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ReservedBit_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReservedBit_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_TrafficLightStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatus
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightStatus$layout() {
        return asn_DEF_TrafficLightStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatus
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightStatus() {
        return asn_DEF_TrafficLightStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatus
     * }
     */
    public static void asn_DEF_TrafficLightStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightStatus$constants.SEGMENT, 0L, asn_DEF_TrafficLightStatus$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightStatus_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightStatus_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatus_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightStatus_specs_1$layout() {
        return asn_SPC_TrafficLightStatus_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatus_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightStatus_specs_1() {
        return asn_SPC_TrafficLightStatus_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatus_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightStatus_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightStatus_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightStatus_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrafficLightStatus_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(11, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrafficLightStatus_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 11 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static SequenceLayout asn_MBR_TrafficLightStatus_1$layout() {
        return asn_MBR_TrafficLightStatus_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static long[] asn_MBR_TrafficLightStatus_1$dimensions() {
        return asn_MBR_TrafficLightStatus_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatus_1() {
        return asn_MBR_TrafficLightStatus_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static void asn_MBR_TrafficLightStatus_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatus_1$constants.SEGMENT, 0L, asn_MBR_TrafficLightStatus_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatus_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrafficLightStatus_1$constants.HANDLE.invokeExact(asn_MBR_TrafficLightStatus_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatus_1[11]
     * }
     */
    public static void asn_MBR_TrafficLightStatus_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatus_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TrafficLightStatusMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrafficLightStatusMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusMessage
     * }
     */
    public static GroupLayout asn_DEF_TrafficLightStatusMessage$layout() {
        return asn_DEF_TrafficLightStatusMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusMessage
     * }
     */
    public static MemorySegment asn_DEF_TrafficLightStatusMessage() {
        return asn_DEF_TrafficLightStatusMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrafficLightStatusMessage
     * }
     */
    public static void asn_DEF_TrafficLightStatusMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrafficLightStatusMessage$constants.SEGMENT, 0L, asn_DEF_TrafficLightStatusMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrafficLightStatusMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrafficLightStatusMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatusMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrafficLightStatusMessage_specs_1$layout() {
        return asn_SPC_TrafficLightStatusMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatusMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrafficLightStatusMessage_specs_1() {
        return asn_SPC_TrafficLightStatusMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrafficLightStatusMessage_specs_1
     * }
     */
    public static void asn_SPC_TrafficLightStatusMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrafficLightStatusMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_TrafficLightStatusMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrafficLightStatusMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(9, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrafficLightStatusMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 9 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static SequenceLayout asn_MBR_TrafficLightStatusMessage_1$layout() {
        return asn_MBR_TrafficLightStatusMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static long[] asn_MBR_TrafficLightStatusMessage_1$dimensions() {
        return asn_MBR_TrafficLightStatusMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatusMessage_1() {
        return asn_MBR_TrafficLightStatusMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static void asn_MBR_TrafficLightStatusMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatusMessage_1$constants.SEGMENT, 0L, asn_MBR_TrafficLightStatusMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static MemorySegment asn_MBR_TrafficLightStatusMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrafficLightStatusMessage_1$constants.HANDLE.invokeExact(asn_MBR_TrafficLightStatusMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrafficLightStatusMessage_1[9]
     * }
     */
    public static void asn_MBR_TrafficLightStatusMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrafficLightStatusMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage00$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage00").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage00
     * }
     */
    public static GroupLayout asn_DEF_TestMessage00$layout() {
        return asn_DEF_TestMessage00$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage00
     * }
     */
    public static MemorySegment asn_DEF_TestMessage00() {
        return asn_DEF_TestMessage00$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage00
     * }
     */
    public static void asn_DEF_TestMessage00(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage00$constants.SEGMENT, 0L, asn_DEF_TestMessage00$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage00_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage00_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage00_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage00_specs_1$layout() {
        return asn_SPC_TestMessage00_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage00_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage00_specs_1() {
        return asn_SPC_TestMessage00_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage00_specs_1
     * }
     */
    public static void asn_SPC_TestMessage00_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage00_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage00_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage00_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage00_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage00_1$layout() {
        return asn_MBR_TestMessage00_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage00_1$dimensions() {
        return asn_MBR_TestMessage00_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage00_1() {
        return asn_MBR_TestMessage00_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static void asn_MBR_TestMessage00_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage00_1$constants.SEGMENT, 0L, asn_MBR_TestMessage00_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage00_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage00_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage00_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage00_1[2]
     * }
     */
    public static void asn_MBR_TestMessage00_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage00_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Header$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Header").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Header
     * }
     */
    public static GroupLayout asn_DEF_Header$layout() {
        return asn_DEF_Header$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Header
     * }
     */
    public static MemorySegment asn_DEF_Header() {
        return asn_DEF_Header$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Header
     * }
     */
    public static void asn_DEF_Header(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Header$constants.SEGMENT, 0L, asn_DEF_Header$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Header_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Header_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Header_specs_1
     * }
     */
    public static GroupLayout asn_SPC_Header_specs_1$layout() {
        return asn_SPC_Header_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Header_specs_1
     * }
     */
    public static MemorySegment asn_SPC_Header_specs_1() {
        return asn_SPC_Header_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Header_specs_1
     * }
     */
    public static void asn_SPC_Header_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Header_specs_1$constants.SEGMENT, 0L, asn_SPC_Header_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Header_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Header_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_Header_1$layout() {
        return asn_MBR_Header_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static long[] asn_MBR_Header_1$dimensions() {
        return asn_MBR_Header_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static MemorySegment asn_MBR_Header_1() {
        return asn_MBR_Header_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static void asn_MBR_Header_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Header_1$constants.SEGMENT, 0L, asn_MBR_Header_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static MemorySegment asn_MBR_Header_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_Header_1$constants.HANDLE.invokeExact(asn_MBR_Header_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Header_1[4]
     * }
     */
    public static void asn_MBR_Header_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Header_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage01$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage01").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage01
     * }
     */
    public static GroupLayout asn_DEF_TestMessage01$layout() {
        return asn_DEF_TestMessage01$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage01
     * }
     */
    public static MemorySegment asn_DEF_TestMessage01() {
        return asn_DEF_TestMessage01$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage01
     * }
     */
    public static void asn_DEF_TestMessage01(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage01$constants.SEGMENT, 0L, asn_DEF_TestMessage01$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage01_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage01_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage01_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage01_specs_1$layout() {
        return asn_SPC_TestMessage01_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage01_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage01_specs_1() {
        return asn_SPC_TestMessage01_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage01_specs_1
     * }
     */
    public static void asn_SPC_TestMessage01_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage01_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage01_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage01_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage01_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage01_1$layout() {
        return asn_MBR_TestMessage01_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage01_1$dimensions() {
        return asn_MBR_TestMessage01_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage01_1() {
        return asn_MBR_TestMessage01_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static void asn_MBR_TestMessage01_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage01_1$constants.SEGMENT, 0L, asn_MBR_TestMessage01_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage01_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage01_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage01_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage01_1[2]
     * }
     */
    public static void asn_MBR_TestMessage01_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage01_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage02$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage02").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage02
     * }
     */
    public static GroupLayout asn_DEF_TestMessage02$layout() {
        return asn_DEF_TestMessage02$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage02
     * }
     */
    public static MemorySegment asn_DEF_TestMessage02() {
        return asn_DEF_TestMessage02$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage02
     * }
     */
    public static void asn_DEF_TestMessage02(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage02$constants.SEGMENT, 0L, asn_DEF_TestMessage02$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage02_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage02_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage02_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage02_specs_1$layout() {
        return asn_SPC_TestMessage02_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage02_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage02_specs_1() {
        return asn_SPC_TestMessage02_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage02_specs_1
     * }
     */
    public static void asn_SPC_TestMessage02_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage02_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage02_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage02_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage02_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage02_1$layout() {
        return asn_MBR_TestMessage02_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage02_1$dimensions() {
        return asn_MBR_TestMessage02_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage02_1() {
        return asn_MBR_TestMessage02_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static void asn_MBR_TestMessage02_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage02_1$constants.SEGMENT, 0L, asn_MBR_TestMessage02_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage02_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage02_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage02_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage02_1[2]
     * }
     */
    public static void asn_MBR_TestMessage02_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage02_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage03$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage03").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage03
     * }
     */
    public static GroupLayout asn_DEF_TestMessage03$layout() {
        return asn_DEF_TestMessage03$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage03
     * }
     */
    public static MemorySegment asn_DEF_TestMessage03() {
        return asn_DEF_TestMessage03$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage03
     * }
     */
    public static void asn_DEF_TestMessage03(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage03$constants.SEGMENT, 0L, asn_DEF_TestMessage03$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage03_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage03_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage03_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage03_specs_1$layout() {
        return asn_SPC_TestMessage03_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage03_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage03_specs_1() {
        return asn_SPC_TestMessage03_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage03_specs_1
     * }
     */
    public static void asn_SPC_TestMessage03_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage03_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage03_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage03_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage03_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage03_1$layout() {
        return asn_MBR_TestMessage03_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage03_1$dimensions() {
        return asn_MBR_TestMessage03_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage03_1() {
        return asn_MBR_TestMessage03_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static void asn_MBR_TestMessage03_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage03_1$constants.SEGMENT, 0L, asn_MBR_TestMessage03_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage03_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage03_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage03_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage03_1[2]
     * }
     */
    public static void asn_MBR_TestMessage03_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage03_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage04$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage04").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage04
     * }
     */
    public static GroupLayout asn_DEF_TestMessage04$layout() {
        return asn_DEF_TestMessage04$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage04
     * }
     */
    public static MemorySegment asn_DEF_TestMessage04() {
        return asn_DEF_TestMessage04$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage04
     * }
     */
    public static void asn_DEF_TestMessage04(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage04$constants.SEGMENT, 0L, asn_DEF_TestMessage04$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage04_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage04_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage04_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage04_specs_1$layout() {
        return asn_SPC_TestMessage04_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage04_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage04_specs_1() {
        return asn_SPC_TestMessage04_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage04_specs_1
     * }
     */
    public static void asn_SPC_TestMessage04_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage04_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage04_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage04_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage04_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage04_1$layout() {
        return asn_MBR_TestMessage04_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage04_1$dimensions() {
        return asn_MBR_TestMessage04_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage04_1() {
        return asn_MBR_TestMessage04_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static void asn_MBR_TestMessage04_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage04_1$constants.SEGMENT, 0L, asn_MBR_TestMessage04_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage04_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage04_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage04_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage04_1[2]
     * }
     */
    public static void asn_MBR_TestMessage04_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage04_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage05$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage05").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage05
     * }
     */
    public static GroupLayout asn_DEF_TestMessage05$layout() {
        return asn_DEF_TestMessage05$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage05
     * }
     */
    public static MemorySegment asn_DEF_TestMessage05() {
        return asn_DEF_TestMessage05$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage05
     * }
     */
    public static void asn_DEF_TestMessage05(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage05$constants.SEGMENT, 0L, asn_DEF_TestMessage05$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage05_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage05_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage05_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage05_specs_1$layout() {
        return asn_SPC_TestMessage05_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage05_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage05_specs_1() {
        return asn_SPC_TestMessage05_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage05_specs_1
     * }
     */
    public static void asn_SPC_TestMessage05_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage05_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage05_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage05_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage05_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage05_1$layout() {
        return asn_MBR_TestMessage05_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage05_1$dimensions() {
        return asn_MBR_TestMessage05_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage05_1() {
        return asn_MBR_TestMessage05_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static void asn_MBR_TestMessage05_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage05_1$constants.SEGMENT, 0L, asn_MBR_TestMessage05_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage05_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage05_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage05_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage05_1[2]
     * }
     */
    public static void asn_MBR_TestMessage05_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage05_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage06$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage06").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage06
     * }
     */
    public static GroupLayout asn_DEF_TestMessage06$layout() {
        return asn_DEF_TestMessage06$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage06
     * }
     */
    public static MemorySegment asn_DEF_TestMessage06() {
        return asn_DEF_TestMessage06$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage06
     * }
     */
    public static void asn_DEF_TestMessage06(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage06$constants.SEGMENT, 0L, asn_DEF_TestMessage06$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage06_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage06_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage06_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage06_specs_1$layout() {
        return asn_SPC_TestMessage06_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage06_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage06_specs_1() {
        return asn_SPC_TestMessage06_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage06_specs_1
     * }
     */
    public static void asn_SPC_TestMessage06_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage06_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage06_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage06_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage06_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage06_1$layout() {
        return asn_MBR_TestMessage06_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage06_1$dimensions() {
        return asn_MBR_TestMessage06_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage06_1() {
        return asn_MBR_TestMessage06_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static void asn_MBR_TestMessage06_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage06_1$constants.SEGMENT, 0L, asn_MBR_TestMessage06_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage06_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage06_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage06_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage06_1[2]
     * }
     */
    public static void asn_MBR_TestMessage06_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage06_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage07$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage07").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage07
     * }
     */
    public static GroupLayout asn_DEF_TestMessage07$layout() {
        return asn_DEF_TestMessage07$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage07
     * }
     */
    public static MemorySegment asn_DEF_TestMessage07() {
        return asn_DEF_TestMessage07$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage07
     * }
     */
    public static void asn_DEF_TestMessage07(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage07$constants.SEGMENT, 0L, asn_DEF_TestMessage07$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage07_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage07_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage07_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage07_specs_1$layout() {
        return asn_SPC_TestMessage07_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage07_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage07_specs_1() {
        return asn_SPC_TestMessage07_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage07_specs_1
     * }
     */
    public static void asn_SPC_TestMessage07_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage07_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage07_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage07_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage07_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage07_1$layout() {
        return asn_MBR_TestMessage07_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage07_1$dimensions() {
        return asn_MBR_TestMessage07_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage07_1() {
        return asn_MBR_TestMessage07_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static void asn_MBR_TestMessage07_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage07_1$constants.SEGMENT, 0L, asn_MBR_TestMessage07_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage07_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage07_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage07_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage07_1[2]
     * }
     */
    public static void asn_MBR_TestMessage07_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage07_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage08$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage08").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage08
     * }
     */
    public static GroupLayout asn_DEF_TestMessage08$layout() {
        return asn_DEF_TestMessage08$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage08
     * }
     */
    public static MemorySegment asn_DEF_TestMessage08() {
        return asn_DEF_TestMessage08$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage08
     * }
     */
    public static void asn_DEF_TestMessage08(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage08$constants.SEGMENT, 0L, asn_DEF_TestMessage08$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage08_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage08_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage08_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage08_specs_1$layout() {
        return asn_SPC_TestMessage08_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage08_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage08_specs_1() {
        return asn_SPC_TestMessage08_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage08_specs_1
     * }
     */
    public static void asn_SPC_TestMessage08_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage08_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage08_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage08_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage08_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage08_1$layout() {
        return asn_MBR_TestMessage08_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage08_1$dimensions() {
        return asn_MBR_TestMessage08_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage08_1() {
        return asn_MBR_TestMessage08_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static void asn_MBR_TestMessage08_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage08_1$constants.SEGMENT, 0L, asn_MBR_TestMessage08_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage08_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage08_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage08_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage08_1[2]
     * }
     */
    public static void asn_MBR_TestMessage08_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage08_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage09$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage09").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage09
     * }
     */
    public static GroupLayout asn_DEF_TestMessage09$layout() {
        return asn_DEF_TestMessage09$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage09
     * }
     */
    public static MemorySegment asn_DEF_TestMessage09() {
        return asn_DEF_TestMessage09$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage09
     * }
     */
    public static void asn_DEF_TestMessage09(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage09$constants.SEGMENT, 0L, asn_DEF_TestMessage09$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage09_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage09_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage09_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage09_specs_1$layout() {
        return asn_SPC_TestMessage09_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage09_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage09_specs_1() {
        return asn_SPC_TestMessage09_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage09_specs_1
     * }
     */
    public static void asn_SPC_TestMessage09_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage09_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage09_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage09_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage09_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage09_1$layout() {
        return asn_MBR_TestMessage09_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage09_1$dimensions() {
        return asn_MBR_TestMessage09_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage09_1() {
        return asn_MBR_TestMessage09_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static void asn_MBR_TestMessage09_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage09_1$constants.SEGMENT, 0L, asn_MBR_TestMessage09_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage09_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage09_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage09_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage09_1[2]
     * }
     */
    public static void asn_MBR_TestMessage09_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage09_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage10$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage10").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage10
     * }
     */
    public static GroupLayout asn_DEF_TestMessage10$layout() {
        return asn_DEF_TestMessage10$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage10
     * }
     */
    public static MemorySegment asn_DEF_TestMessage10() {
        return asn_DEF_TestMessage10$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage10
     * }
     */
    public static void asn_DEF_TestMessage10(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage10$constants.SEGMENT, 0L, asn_DEF_TestMessage10$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage10_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage10_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage10_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage10_specs_1$layout() {
        return asn_SPC_TestMessage10_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage10_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage10_specs_1() {
        return asn_SPC_TestMessage10_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage10_specs_1
     * }
     */
    public static void asn_SPC_TestMessage10_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage10_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage10_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage10_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage10_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage10_1$layout() {
        return asn_MBR_TestMessage10_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage10_1$dimensions() {
        return asn_MBR_TestMessage10_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage10_1() {
        return asn_MBR_TestMessage10_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static void asn_MBR_TestMessage10_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage10_1$constants.SEGMENT, 0L, asn_MBR_TestMessage10_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage10_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage10_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage10_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage10_1[2]
     * }
     */
    public static void asn_MBR_TestMessage10_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage10_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage11$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage11").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage11
     * }
     */
    public static GroupLayout asn_DEF_TestMessage11$layout() {
        return asn_DEF_TestMessage11$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage11
     * }
     */
    public static MemorySegment asn_DEF_TestMessage11() {
        return asn_DEF_TestMessage11$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage11
     * }
     */
    public static void asn_DEF_TestMessage11(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage11$constants.SEGMENT, 0L, asn_DEF_TestMessage11$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage11_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage11_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage11_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage11_specs_1$layout() {
        return asn_SPC_TestMessage11_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage11_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage11_specs_1() {
        return asn_SPC_TestMessage11_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage11_specs_1
     * }
     */
    public static void asn_SPC_TestMessage11_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage11_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage11_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage11_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage11_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage11_1$layout() {
        return asn_MBR_TestMessage11_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage11_1$dimensions() {
        return asn_MBR_TestMessage11_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage11_1() {
        return asn_MBR_TestMessage11_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static void asn_MBR_TestMessage11_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage11_1$constants.SEGMENT, 0L, asn_MBR_TestMessage11_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage11_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage11_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage11_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage11_1[2]
     * }
     */
    public static void asn_MBR_TestMessage11_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage11_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage12$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage12").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage12
     * }
     */
    public static GroupLayout asn_DEF_TestMessage12$layout() {
        return asn_DEF_TestMessage12$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage12
     * }
     */
    public static MemorySegment asn_DEF_TestMessage12() {
        return asn_DEF_TestMessage12$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage12
     * }
     */
    public static void asn_DEF_TestMessage12(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage12$constants.SEGMENT, 0L, asn_DEF_TestMessage12$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage12_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage12_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage12_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage12_specs_1$layout() {
        return asn_SPC_TestMessage12_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage12_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage12_specs_1() {
        return asn_SPC_TestMessage12_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage12_specs_1
     * }
     */
    public static void asn_SPC_TestMessage12_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage12_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage12_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage12_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage12_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage12_1$layout() {
        return asn_MBR_TestMessage12_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage12_1$dimensions() {
        return asn_MBR_TestMessage12_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage12_1() {
        return asn_MBR_TestMessage12_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static void asn_MBR_TestMessage12_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage12_1$constants.SEGMENT, 0L, asn_MBR_TestMessage12_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage12_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage12_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage12_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage12_1[2]
     * }
     */
    public static void asn_MBR_TestMessage12_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage12_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage13$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage13").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage13
     * }
     */
    public static GroupLayout asn_DEF_TestMessage13$layout() {
        return asn_DEF_TestMessage13$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage13
     * }
     */
    public static MemorySegment asn_DEF_TestMessage13() {
        return asn_DEF_TestMessage13$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage13
     * }
     */
    public static void asn_DEF_TestMessage13(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage13$constants.SEGMENT, 0L, asn_DEF_TestMessage13$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage13_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage13_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage13_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage13_specs_1$layout() {
        return asn_SPC_TestMessage13_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage13_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage13_specs_1() {
        return asn_SPC_TestMessage13_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage13_specs_1
     * }
     */
    public static void asn_SPC_TestMessage13_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage13_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage13_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage13_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage13_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage13_1$layout() {
        return asn_MBR_TestMessage13_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage13_1$dimensions() {
        return asn_MBR_TestMessage13_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage13_1() {
        return asn_MBR_TestMessage13_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static void asn_MBR_TestMessage13_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage13_1$constants.SEGMENT, 0L, asn_MBR_TestMessage13_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage13_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage13_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage13_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage13_1[2]
     * }
     */
    public static void asn_MBR_TestMessage13_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage13_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage14$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage14").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage14
     * }
     */
    public static GroupLayout asn_DEF_TestMessage14$layout() {
        return asn_DEF_TestMessage14$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage14
     * }
     */
    public static MemorySegment asn_DEF_TestMessage14() {
        return asn_DEF_TestMessage14$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage14
     * }
     */
    public static void asn_DEF_TestMessage14(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage14$constants.SEGMENT, 0L, asn_DEF_TestMessage14$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage14_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage14_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage14_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage14_specs_1$layout() {
        return asn_SPC_TestMessage14_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage14_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage14_specs_1() {
        return asn_SPC_TestMessage14_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage14_specs_1
     * }
     */
    public static void asn_SPC_TestMessage14_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage14_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage14_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage14_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage14_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage14_1$layout() {
        return asn_MBR_TestMessage14_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage14_1$dimensions() {
        return asn_MBR_TestMessage14_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage14_1() {
        return asn_MBR_TestMessage14_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static void asn_MBR_TestMessage14_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage14_1$constants.SEGMENT, 0L, asn_MBR_TestMessage14_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage14_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage14_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage14_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage14_1[2]
     * }
     */
    public static void asn_MBR_TestMessage14_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage14_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TestMessage15$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TestMessage15").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage15
     * }
     */
    public static GroupLayout asn_DEF_TestMessage15$layout() {
        return asn_DEF_TestMessage15$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage15
     * }
     */
    public static MemorySegment asn_DEF_TestMessage15() {
        return asn_DEF_TestMessage15$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TestMessage15
     * }
     */
    public static void asn_DEF_TestMessage15(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TestMessage15$constants.SEGMENT, 0L, asn_DEF_TestMessage15$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TestMessage15_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TestMessage15_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage15_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TestMessage15_specs_1$layout() {
        return asn_SPC_TestMessage15_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage15_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TestMessage15_specs_1() {
        return asn_SPC_TestMessage15_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TestMessage15_specs_1
     * }
     */
    public static void asn_SPC_TestMessage15_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TestMessage15_specs_1$constants.SEGMENT, 0L, asn_SPC_TestMessage15_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TestMessage15_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TestMessage15_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_TestMessage15_1$layout() {
        return asn_MBR_TestMessage15_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static long[] asn_MBR_TestMessage15_1$dimensions() {
        return asn_MBR_TestMessage15_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage15_1() {
        return asn_MBR_TestMessage15_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static void asn_MBR_TestMessage15_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage15_1$constants.SEGMENT, 0L, asn_MBR_TestMessage15_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static MemorySegment asn_MBR_TestMessage15_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TestMessage15_1$constants.HANDLE.invokeExact(asn_MBR_TestMessage15_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TestMessage15_1[2]
     * }
     */
    public static void asn_MBR_TestMessage15_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TestMessage15_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int MessageFrame__value_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_NOTHING = 0
     * }
     */
    public static int MessageFrame__value_PR_NOTHING() {
        return MessageFrame__value_PR_NOTHING;
    }
    private static final int MessageFrame__value_PR_BasicSafetyMessage = (int)1L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_BasicSafetyMessage = 1
     * }
     */
    public static int MessageFrame__value_PR_BasicSafetyMessage() {
        return MessageFrame__value_PR_BasicSafetyMessage;
    }
    private static final int MessageFrame__value_PR_MapData = (int)2L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_MapData = 2
     * }
     */
    public static int MessageFrame__value_PR_MapData() {
        return MessageFrame__value_PR_MapData;
    }
    private static final int MessageFrame__value_PR_SPAT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SPAT = 3
     * }
     */
    public static int MessageFrame__value_PR_SPAT() {
        return MessageFrame__value_PR_SPAT;
    }
    private static final int MessageFrame__value_PR_CommonSafetyRequest = (int)4L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_CommonSafetyRequest = 4
     * }
     */
    public static int MessageFrame__value_PR_CommonSafetyRequest() {
        return MessageFrame__value_PR_CommonSafetyRequest;
    }
    private static final int MessageFrame__value_PR_EmergencyVehicleAlert = (int)5L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_EmergencyVehicleAlert = 5
     * }
     */
    public static int MessageFrame__value_PR_EmergencyVehicleAlert() {
        return MessageFrame__value_PR_EmergencyVehicleAlert;
    }
    private static final int MessageFrame__value_PR_IntersectionCollision = (int)6L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_IntersectionCollision = 6
     * }
     */
    public static int MessageFrame__value_PR_IntersectionCollision() {
        return MessageFrame__value_PR_IntersectionCollision;
    }
    private static final int MessageFrame__value_PR_NMEAcorrections = (int)7L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_NMEAcorrections = 7
     * }
     */
    public static int MessageFrame__value_PR_NMEAcorrections() {
        return MessageFrame__value_PR_NMEAcorrections;
    }
    private static final int MessageFrame__value_PR_ProbeDataManagement = (int)8L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_ProbeDataManagement = 8
     * }
     */
    public static int MessageFrame__value_PR_ProbeDataManagement() {
        return MessageFrame__value_PR_ProbeDataManagement;
    }
    private static final int MessageFrame__value_PR_ProbeVehicleData = (int)9L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_ProbeVehicleData = 9
     * }
     */
    public static int MessageFrame__value_PR_ProbeVehicleData() {
        return MessageFrame__value_PR_ProbeVehicleData;
    }
    private static final int MessageFrame__value_PR_RoadSideAlert = (int)10L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadSideAlert = 10
     * }
     */
    public static int MessageFrame__value_PR_RoadSideAlert() {
        return MessageFrame__value_PR_RoadSideAlert;
    }
    private static final int MessageFrame__value_PR_RTCMcorrections = (int)11L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RTCMcorrections = 11
     * }
     */
    public static int MessageFrame__value_PR_RTCMcorrections() {
        return MessageFrame__value_PR_RTCMcorrections;
    }
    private static final int MessageFrame__value_PR_SignalRequestMessage = (int)12L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SignalRequestMessage = 12
     * }
     */
    public static int MessageFrame__value_PR_SignalRequestMessage() {
        return MessageFrame__value_PR_SignalRequestMessage;
    }
    private static final int MessageFrame__value_PR_SignalStatusMessage = (int)13L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SignalStatusMessage = 13
     * }
     */
    public static int MessageFrame__value_PR_SignalStatusMessage() {
        return MessageFrame__value_PR_SignalStatusMessage;
    }
    private static final int MessageFrame__value_PR_TravelerInformation = (int)14L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TravelerInformation = 14
     * }
     */
    public static int MessageFrame__value_PR_TravelerInformation() {
        return MessageFrame__value_PR_TravelerInformation;
    }
    private static final int MessageFrame__value_PR_PersonalSafetyMessage = (int)15L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_PersonalSafetyMessage = 15
     * }
     */
    public static int MessageFrame__value_PR_PersonalSafetyMessage() {
        return MessageFrame__value_PR_PersonalSafetyMessage;
    }
    private static final int MessageFrame__value_PR_RoadSafetyMessage = (int)16L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadSafetyMessage = 16
     * }
     */
    public static int MessageFrame__value_PR_RoadSafetyMessage() {
        return MessageFrame__value_PR_RoadSafetyMessage;
    }
    private static final int MessageFrame__value_PR_RoadWeatherMessage = (int)17L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadWeatherMessage = 17
     * }
     */
    public static int MessageFrame__value_PR_RoadWeatherMessage() {
        return MessageFrame__value_PR_RoadWeatherMessage;
    }
    private static final int MessageFrame__value_PR_ProbeDataConfigMessage = (int)18L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_ProbeDataConfigMessage = 18
     * }
     */
    public static int MessageFrame__value_PR_ProbeDataConfigMessage() {
        return MessageFrame__value_PR_ProbeDataConfigMessage;
    }
    private static final int MessageFrame__value_PR_ProbeDataReportMessage = (int)19L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_ProbeDataReportMessage = 19
     * }
     */
    public static int MessageFrame__value_PR_ProbeDataReportMessage() {
        return MessageFrame__value_PR_ProbeDataReportMessage;
    }
    private static final int MessageFrame__value_PR_TollAdvertisementMessage = (int)20L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TollAdvertisementMessage = 20
     * }
     */
    public static int MessageFrame__value_PR_TollAdvertisementMessage() {
        return MessageFrame__value_PR_TollAdvertisementMessage;
    }
    private static final int MessageFrame__value_PR_TollUsageMessage = (int)21L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TollUsageMessage = 21
     * }
     */
    public static int MessageFrame__value_PR_TollUsageMessage() {
        return MessageFrame__value_PR_TollUsageMessage;
    }
    private static final int MessageFrame__value_PR_TollUsageAckMessage = (int)22L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TollUsageAckMessage = 22
     * }
     */
    public static int MessageFrame__value_PR_TollUsageAckMessage() {
        return MessageFrame__value_PR_TollUsageAckMessage;
    }
    private static final int MessageFrame__value_PR_CooperativeControlMessage = (int)23L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_CooperativeControlMessage = 23
     * }
     */
    public static int MessageFrame__value_PR_CooperativeControlMessage() {
        return MessageFrame__value_PR_CooperativeControlMessage;
    }
    private static final int MessageFrame__value_PR_SensorDataSharingMessage = (int)24L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SensorDataSharingMessage = 24
     * }
     */
    public static int MessageFrame__value_PR_SensorDataSharingMessage() {
        return MessageFrame__value_PR_SensorDataSharingMessage;
    }
    private static final int MessageFrame__value_PR_ManeuverSharingAndCoordinatingMessage = (int)25L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_ManeuverSharingAndCoordinatingMessage = 25
     * }
     */
    public static int MessageFrame__value_PR_ManeuverSharingAndCoordinatingMessage() {
        return MessageFrame__value_PR_ManeuverSharingAndCoordinatingMessage;
    }
    private static final int MessageFrame__value_PR_RoadGeometryAndAttributes = (int)26L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadGeometryAndAttributes = 26
     * }
     */
    public static int MessageFrame__value_PR_RoadGeometryAndAttributes() {
        return MessageFrame__value_PR_RoadGeometryAndAttributes;
    }
    private static final int MessageFrame__value_PR_PersonalSafetyMessage2 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_PersonalSafetyMessage2 = 27
     * }
     */
    public static int MessageFrame__value_PR_PersonalSafetyMessage2() {
        return MessageFrame__value_PR_PersonalSafetyMessage2;
    }
    private static final int MessageFrame__value_PR_TrafficSignalPhaseAndTiming = (int)28L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TrafficSignalPhaseAndTiming = 28
     * }
     */
    public static int MessageFrame__value_PR_TrafficSignalPhaseAndTiming() {
        return MessageFrame__value_PR_TrafficSignalPhaseAndTiming;
    }
    private static final int MessageFrame__value_PR_SignalControlAndPrioritizationRequest = (int)29L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SignalControlAndPrioritizationRequest = 29
     * }
     */
    public static int MessageFrame__value_PR_SignalControlAndPrioritizationRequest() {
        return MessageFrame__value_PR_SignalControlAndPrioritizationRequest;
    }
    private static final int MessageFrame__value_PR_SignalControlAndPrioritizationStatus = (int)30L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_SignalControlAndPrioritizationStatus = 30
     * }
     */
    public static int MessageFrame__value_PR_SignalControlAndPrioritizationStatus() {
        return MessageFrame__value_PR_SignalControlAndPrioritizationStatus;
    }
    private static final int MessageFrame__value_PR_RoadUserChargingConfigMessage = (int)31L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadUserChargingConfigMessage = 31
     * }
     */
    public static int MessageFrame__value_PR_RoadUserChargingConfigMessage() {
        return MessageFrame__value_PR_RoadUserChargingConfigMessage;
    }
    private static final int MessageFrame__value_PR_RoadUserChargingReportMessage = (int)32L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_RoadUserChargingReportMessage = 32
     * }
     */
    public static int MessageFrame__value_PR_RoadUserChargingReportMessage() {
        return MessageFrame__value_PR_RoadUserChargingReportMessage;
    }
    private static final int MessageFrame__value_PR_TrafficLightStatusMessage = (int)33L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TrafficLightStatusMessage = 33
     * }
     */
    public static int MessageFrame__value_PR_TrafficLightStatusMessage() {
        return MessageFrame__value_PR_TrafficLightStatusMessage;
    }
    private static final int MessageFrame__value_PR_TestMessage00 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage00 = 34
     * }
     */
    public static int MessageFrame__value_PR_TestMessage00() {
        return MessageFrame__value_PR_TestMessage00;
    }
    private static final int MessageFrame__value_PR_TestMessage01 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage01 = 35
     * }
     */
    public static int MessageFrame__value_PR_TestMessage01() {
        return MessageFrame__value_PR_TestMessage01;
    }
    private static final int MessageFrame__value_PR_TestMessage02 = (int)36L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage02 = 36
     * }
     */
    public static int MessageFrame__value_PR_TestMessage02() {
        return MessageFrame__value_PR_TestMessage02;
    }
    private static final int MessageFrame__value_PR_TestMessage03 = (int)37L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage03 = 37
     * }
     */
    public static int MessageFrame__value_PR_TestMessage03() {
        return MessageFrame__value_PR_TestMessage03;
    }
    private static final int MessageFrame__value_PR_TestMessage04 = (int)38L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage04 = 38
     * }
     */
    public static int MessageFrame__value_PR_TestMessage04() {
        return MessageFrame__value_PR_TestMessage04;
    }
    private static final int MessageFrame__value_PR_TestMessage05 = (int)39L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage05 = 39
     * }
     */
    public static int MessageFrame__value_PR_TestMessage05() {
        return MessageFrame__value_PR_TestMessage05;
    }
    private static final int MessageFrame__value_PR_TestMessage06 = (int)40L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage06 = 40
     * }
     */
    public static int MessageFrame__value_PR_TestMessage06() {
        return MessageFrame__value_PR_TestMessage06;
    }
    private static final int MessageFrame__value_PR_TestMessage07 = (int)41L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage07 = 41
     * }
     */
    public static int MessageFrame__value_PR_TestMessage07() {
        return MessageFrame__value_PR_TestMessage07;
    }
    private static final int MessageFrame__value_PR_TestMessage08 = (int)42L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage08 = 42
     * }
     */
    public static int MessageFrame__value_PR_TestMessage08() {
        return MessageFrame__value_PR_TestMessage08;
    }
    private static final int MessageFrame__value_PR_TestMessage09 = (int)43L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage09 = 43
     * }
     */
    public static int MessageFrame__value_PR_TestMessage09() {
        return MessageFrame__value_PR_TestMessage09;
    }
    private static final int MessageFrame__value_PR_TestMessage10 = (int)44L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage10 = 44
     * }
     */
    public static int MessageFrame__value_PR_TestMessage10() {
        return MessageFrame__value_PR_TestMessage10;
    }
    private static final int MessageFrame__value_PR_TestMessage11 = (int)45L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage11 = 45
     * }
     */
    public static int MessageFrame__value_PR_TestMessage11() {
        return MessageFrame__value_PR_TestMessage11;
    }
    private static final int MessageFrame__value_PR_TestMessage12 = (int)46L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage12 = 46
     * }
     */
    public static int MessageFrame__value_PR_TestMessage12() {
        return MessageFrame__value_PR_TestMessage12;
    }
    private static final int MessageFrame__value_PR_TestMessage13 = (int)47L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage13 = 47
     * }
     */
    public static int MessageFrame__value_PR_TestMessage13() {
        return MessageFrame__value_PR_TestMessage13;
    }
    private static final int MessageFrame__value_PR_TestMessage14 = (int)48L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage14 = 48
     * }
     */
    public static int MessageFrame__value_PR_TestMessage14() {
        return MessageFrame__value_PR_TestMessage14;
    }
    private static final int MessageFrame__value_PR_TestMessage15 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum MessageFrame__value_PR.MessageFrame__value_PR_TestMessage15 = 49
     * }
     */
    public static int MessageFrame__value_PR_TestMessage15() {
        return MessageFrame__value_PR_TestMessage15;
    }

    private static class asn_DEF_MessageFrame$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_MessageFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MessageFrame
     * }
     */
    public static GroupLayout asn_DEF_MessageFrame$layout() {
        return asn_DEF_MessageFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MessageFrame
     * }
     */
    public static MemorySegment asn_DEF_MessageFrame() {
        return asn_DEF_MessageFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_MessageFrame
     * }
     */
    public static void asn_DEF_MessageFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_MessageFrame$constants.SEGMENT, 0L, asn_DEF_MessageFrame$constants.LAYOUT.byteSize());
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int __WCLONE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return __WCLONE;
    }
    private static final int __BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return __BYTE_ORDER;
    }
    private static final int __FLOAT_WORD_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return __FLOAT_WORD_ORDER;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final long _SIGSET_NWORDS = 16L;
    /**
     * {@snippet lang=c :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return _SIGSET_NWORDS;
    }
    private static final int __NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return __NFDBITS;
    }
    private static final int FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int NFDBITS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return NFDBITS;
    }
    private static final int __PTHREAD_RWLOCK_ELISION_EXTRA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return __PTHREAD_RWLOCK_ELISION_EXTRA;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int PTHREAD_DESTRUCTOR_ITERATIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return PTHREAD_DESTRUCTOR_ITERATIONS;
    }
    private static final int SEM_VALUE_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return SEM_VALUE_MAX;
    }
    private static final long SSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return SSIZE_MAX;
    }
    private static final int BC_BASE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return BC_BASE_MAX;
    }
    private static final int BC_DIM_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return BC_DIM_MAX;
    }
    private static final int BC_SCALE_MAX = (int)99L;
    /**
     * {@snippet lang=c :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return BC_SCALE_MAX;
    }
    private static final int BC_STRING_MAX = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return BC_STRING_MAX;
    }
    private static final int EXPR_NEST_MAX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return EXPR_NEST_MAX;
    }
    private static final int LINE_MAX = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return LINE_MAX;
    }
    private static final int RE_DUP_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return RE_DUP_MAX;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final long LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return LONG_MAX;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final long LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return LONG_MIN;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final long ULONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int __WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return __WCHAR_MAX;
    }
    private static final int __WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return __WCHAR_MIN;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final long INT_FAST16_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final long INT_FAST32_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final long INT_FAST16_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final long INT_FAST32_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final long UINT_FAST16_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final long UINT_FAST32_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __PRI64_PREFIX "l"
     * }
     */
    public static MemorySegment __PRI64_PREFIX() {
        class Holder {
            static final MemorySegment __PRI64_PREFIX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder.__PRI64_PREFIX;
    }
    /**
     * {@snippet lang=c :
     * #define __PRIPTR_PREFIX "l"
     * }
     */
    public static MemorySegment __PRIPTR_PREFIX() {
        class Holder {
            static final MemorySegment __PRIPTR_PREFIX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder.__PRIPTR_PREFIX;
    }
    /**
     * {@snippet lang=c :
     * #define PRId8 "d"
     * }
     */
    public static MemorySegment PRId8() {
        class Holder {
            static final MemorySegment PRId8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId8;
    }
    /**
     * {@snippet lang=c :
     * #define PRId16 "d"
     * }
     */
    public static MemorySegment PRId16() {
        class Holder {
            static final MemorySegment PRId16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId16;
    }
    /**
     * {@snippet lang=c :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        class Holder {
            static final MemorySegment PRId32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRId32;
    }
    /**
     * {@snippet lang=c :
     * #define PRId64 "ld"
     * }
     */
    public static MemorySegment PRId64() {
        class Holder {
            static final MemorySegment PRId64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRId64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST8 "d"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        class Holder {
            static final MemorySegment PRIdLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST16 "d"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        class Holder {
            static final MemorySegment PRIdLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        class Holder {
            static final MemorySegment PRIdLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdLEAST64 "ld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        class Holder {
            static final MemorySegment PRIdLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST8 "d"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        class Holder {
            static final MemorySegment PRIdFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.PRIdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST16 "ld"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        class Holder {
            static final MemorySegment PRIdFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST32 "ld"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        class Holder {
            static final MemorySegment PRIdFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdFAST64 "ld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        class Holder {
            static final MemorySegment PRIdFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi8 "i"
     * }
     */
    public static MemorySegment PRIi8() {
        class Holder {
            static final MemorySegment PRIi8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi16 "i"
     * }
     */
    public static MemorySegment PRIi16() {
        class Holder {
            static final MemorySegment PRIi16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        class Holder {
            static final MemorySegment PRIi32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIi32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIi64 "li"
     * }
     */
    public static MemorySegment PRIi64() {
        class Holder {
            static final MemorySegment PRIi64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIi64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST8 "i"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        class Holder {
            static final MemorySegment PRIiLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST16 "i"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        class Holder {
            static final MemorySegment PRIiLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        class Holder {
            static final MemorySegment PRIiLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiLEAST64 "li"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        class Holder {
            static final MemorySegment PRIiLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST8 "i"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        class Holder {
            static final MemorySegment PRIiFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.PRIiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST16 "li"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        class Holder {
            static final MemorySegment PRIiFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST32 "li"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        class Holder {
            static final MemorySegment PRIiFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiFAST64 "li"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        class Holder {
            static final MemorySegment PRIiFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo8 "o"
     * }
     */
    public static MemorySegment PRIo8() {
        class Holder {
            static final MemorySegment PRIo8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo16 "o"
     * }
     */
    public static MemorySegment PRIo16() {
        class Holder {
            static final MemorySegment PRIo16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        class Holder {
            static final MemorySegment PRIo32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIo32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIo64 "lo"
     * }
     */
    public static MemorySegment PRIo64() {
        class Holder {
            static final MemorySegment PRIo64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIo64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST8 "o"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        class Holder {
            static final MemorySegment PRIoLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST16 "o"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        class Holder {
            static final MemorySegment PRIoLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        class Holder {
            static final MemorySegment PRIoLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoLEAST64 "lo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        class Holder {
            static final MemorySegment PRIoLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST8 "o"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        class Holder {
            static final MemorySegment PRIoFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.PRIoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST16 "lo"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        class Holder {
            static final MemorySegment PRIoFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST32 "lo"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        class Holder {
            static final MemorySegment PRIoFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoFAST64 "lo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        class Holder {
            static final MemorySegment PRIoFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu8 "u"
     * }
     */
    public static MemorySegment PRIu8() {
        class Holder {
            static final MemorySegment PRIu8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu16 "u"
     * }
     */
    public static MemorySegment PRIu16() {
        class Holder {
            static final MemorySegment PRIu16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        class Holder {
            static final MemorySegment PRIu32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIu32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIu64 "lu"
     * }
     */
    public static MemorySegment PRIu64() {
        class Holder {
            static final MemorySegment PRIu64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST8 "u"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        class Holder {
            static final MemorySegment PRIuLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST16 "u"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        class Holder {
            static final MemorySegment PRIuLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        class Holder {
            static final MemorySegment PRIuLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuLEAST64 "lu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        class Holder {
            static final MemorySegment PRIuLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST8 "u"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        class Holder {
            static final MemorySegment PRIuFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.PRIuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST16 "lu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        class Holder {
            static final MemorySegment PRIuFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST32 "lu"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        class Holder {
            static final MemorySegment PRIuFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuFAST64 "lu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        class Holder {
            static final MemorySegment PRIuFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx8 "x"
     * }
     */
    public static MemorySegment PRIx8() {
        class Holder {
            static final MemorySegment PRIx8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx16 "x"
     * }
     */
    public static MemorySegment PRIx16() {
        class Holder {
            static final MemorySegment PRIx16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        class Holder {
            static final MemorySegment PRIx32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIx32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIx64 "lx"
     * }
     */
    public static MemorySegment PRIx64() {
        class Holder {
            static final MemorySegment PRIx64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIx64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST8 "x"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        class Holder {
            static final MemorySegment PRIxLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST16 "x"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        class Holder {
            static final MemorySegment PRIxLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        class Holder {
            static final MemorySegment PRIxLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxLEAST64 "lx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        class Holder {
            static final MemorySegment PRIxLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST8 "x"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        class Holder {
            static final MemorySegment PRIxFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.PRIxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST16 "lx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        class Holder {
            static final MemorySegment PRIxFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST32 "lx"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        class Holder {
            static final MemorySegment PRIxFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxFAST64 "lx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        class Holder {
            static final MemorySegment PRIxFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX8 "X"
     * }
     */
    public static MemorySegment PRIX8() {
        class Holder {
            static final MemorySegment PRIX8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX16 "X"
     * }
     */
    public static MemorySegment PRIX16() {
        class Holder {
            static final MemorySegment PRIX16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        class Holder {
            static final MemorySegment PRIX32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIX32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIX64 "lX"
     * }
     */
    public static MemorySegment PRIX64() {
        class Holder {
            static final MemorySegment PRIX64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIX64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST8 "X"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        class Holder {
            static final MemorySegment PRIXLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST16 "X"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        class Holder {
            static final MemorySegment PRIXLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        class Holder {
            static final MemorySegment PRIXLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXLEAST64 "lX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        class Holder {
            static final MemorySegment PRIXLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST8 "X"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        class Holder {
            static final MemorySegment PRIXFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("X");
        }
        return Holder.PRIXFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST16 "lX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        class Holder {
            static final MemorySegment PRIXFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST32 "lX"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        class Holder {
            static final MemorySegment PRIXFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXFAST64 "lX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        class Holder {
            static final MemorySegment PRIXFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdMAX "ld"
     * }
     */
    public static MemorySegment PRIdMAX() {
        class Holder {
            static final MemorySegment PRIdMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiMAX "li"
     * }
     */
    public static MemorySegment PRIiMAX() {
        class Holder {
            static final MemorySegment PRIiMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoMAX "lo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        class Holder {
            static final MemorySegment PRIoMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuMAX "lu"
     * }
     */
    public static MemorySegment PRIuMAX() {
        class Holder {
            static final MemorySegment PRIuMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxMAX "lx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        class Holder {
            static final MemorySegment PRIxMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXMAX "lX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        class Holder {
            static final MemorySegment PRIXMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXMAX;
    }
    /**
     * {@snippet lang=c :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        class Holder {
            static final MemorySegment PRIdPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.PRIdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        class Holder {
            static final MemorySegment PRIiPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.PRIiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        class Holder {
            static final MemorySegment PRIoPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.PRIoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        class Holder {
            static final MemorySegment PRIuPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.PRIuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        class Holder {
            static final MemorySegment PRIxPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.PRIxPTR;
    }
    /**
     * {@snippet lang=c :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        class Holder {
            static final MemorySegment PRIXPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lX");
        }
        return Holder.PRIXPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        class Holder {
            static final MemorySegment SCNd8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNd8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        class Holder {
            static final MemorySegment SCNd16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNd16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        class Holder {
            static final MemorySegment SCNd32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNd32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNd64 "ld"
     * }
     */
    public static MemorySegment SCNd64() {
        class Holder {
            static final MemorySegment SCNd64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNd64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        class Holder {
            static final MemorySegment SCNdLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        class Holder {
            static final MemorySegment SCNdLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hd");
        }
        return Holder.SCNdLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        class Holder {
            static final MemorySegment SCNdLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SCNdLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdLEAST64 "ld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        class Holder {
            static final MemorySegment SCNdLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        class Holder {
            static final MemorySegment SCNdFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhd");
        }
        return Holder.SCNdFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST16 "ld"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        class Holder {
            static final MemorySegment SCNdFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST32 "ld"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        class Holder {
            static final MemorySegment SCNdFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdFAST64 "ld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        class Holder {
            static final MemorySegment SCNdFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        class Holder {
            static final MemorySegment SCNi8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNi8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        class Holder {
            static final MemorySegment SCNi16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNi16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        class Holder {
            static final MemorySegment SCNi32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNi32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNi64 "li"
     * }
     */
    public static MemorySegment SCNi64() {
        class Holder {
            static final MemorySegment SCNi64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNi64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        class Holder {
            static final MemorySegment SCNiLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        class Holder {
            static final MemorySegment SCNiLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hi");
        }
        return Holder.SCNiLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        class Holder {
            static final MemorySegment SCNiLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SCNiLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiLEAST64 "li"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        class Holder {
            static final MemorySegment SCNiLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        class Holder {
            static final MemorySegment SCNiFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhi");
        }
        return Holder.SCNiFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST16 "li"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        class Holder {
            static final MemorySegment SCNiFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST32 "li"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        class Holder {
            static final MemorySegment SCNiFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiFAST64 "li"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        class Holder {
            static final MemorySegment SCNiFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        class Holder {
            static final MemorySegment SCNu8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNu8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        class Holder {
            static final MemorySegment SCNu16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNu16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        class Holder {
            static final MemorySegment SCNu32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNu32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNu64 "lu"
     * }
     */
    public static MemorySegment SCNu64() {
        class Holder {
            static final MemorySegment SCNu64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNu64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        class Holder {
            static final MemorySegment SCNuLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        class Holder {
            static final MemorySegment SCNuLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hu");
        }
        return Holder.SCNuLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        class Holder {
            static final MemorySegment SCNuLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("u");
        }
        return Holder.SCNuLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuLEAST64 "lu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        class Holder {
            static final MemorySegment SCNuLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        class Holder {
            static final MemorySegment SCNuFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhu");
        }
        return Holder.SCNuFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST16 "lu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        class Holder {
            static final MemorySegment SCNuFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST32 "lu"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        class Holder {
            static final MemorySegment SCNuFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuFAST64 "lu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        class Holder {
            static final MemorySegment SCNuFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        class Holder {
            static final MemorySegment SCNo8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNo8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        class Holder {
            static final MemorySegment SCNo16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNo16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        class Holder {
            static final MemorySegment SCNo32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNo32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNo64 "lo"
     * }
     */
    public static MemorySegment SCNo64() {
        class Holder {
            static final MemorySegment SCNo64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNo64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        class Holder {
            static final MemorySegment SCNoLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        class Holder {
            static final MemorySegment SCNoLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ho");
        }
        return Holder.SCNoLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        class Holder {
            static final MemorySegment SCNoLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("o");
        }
        return Holder.SCNoLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoLEAST64 "lo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        class Holder {
            static final MemorySegment SCNoLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        class Holder {
            static final MemorySegment SCNoFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hho");
        }
        return Holder.SCNoFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST16 "lo"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        class Holder {
            static final MemorySegment SCNoFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST32 "lo"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        class Holder {
            static final MemorySegment SCNoFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoFAST64 "lo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        class Holder {
            static final MemorySegment SCNoFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        class Holder {
            static final MemorySegment SCNx8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNx8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        class Holder {
            static final MemorySegment SCNx16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNx16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        class Holder {
            static final MemorySegment SCNx32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNx32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNx64 "lx"
     * }
     */
    public static MemorySegment SCNx64() {
        class Holder {
            static final MemorySegment SCNx64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNx64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        class Holder {
            static final MemorySegment SCNxLEAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxLEAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        class Holder {
            static final MemorySegment SCNxLEAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hx");
        }
        return Holder.SCNxLEAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        class Holder {
            static final MemorySegment SCNxLEAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("x");
        }
        return Holder.SCNxLEAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxLEAST64 "lx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        class Holder {
            static final MemorySegment SCNxLEAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxLEAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        class Holder {
            static final MemorySegment SCNxFAST8
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("hhx");
        }
        return Holder.SCNxFAST8;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST16 "lx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        class Holder {
            static final MemorySegment SCNxFAST16
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST16;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST32 "lx"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        class Holder {
            static final MemorySegment SCNxFAST32
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST32;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxFAST64 "lx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        class Holder {
            static final MemorySegment SCNxFAST64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxFAST64;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdMAX "ld"
     * }
     */
    public static MemorySegment SCNdMAX() {
        class Holder {
            static final MemorySegment SCNdMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiMAX "li"
     * }
     */
    public static MemorySegment SCNiMAX() {
        class Holder {
            static final MemorySegment SCNiMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoMAX "lo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        class Holder {
            static final MemorySegment SCNoMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuMAX "lu"
     * }
     */
    public static MemorySegment SCNuMAX() {
        class Holder {
            static final MemorySegment SCNuMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxMAX "lx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        class Holder {
            static final MemorySegment SCNxMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxMAX;
    }
    /**
     * {@snippet lang=c :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        class Holder {
            static final MemorySegment SCNdPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.SCNdPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        class Holder {
            static final MemorySegment SCNiPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("li");
        }
        return Holder.SCNiPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        class Holder {
            static final MemorySegment SCNoPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lo");
        }
        return Holder.SCNoPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        class Holder {
            static final MemorySegment SCNuPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.SCNuPTR;
    }
    /**
     * {@snippet lang=c :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        class Holder {
            static final MemorySegment SCNxPTR
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lx");
        }
        return Holder.SCNxPTR;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final long RSSIZE_MAX = 4611686018427387903L;
    /**
     * {@snippet lang=c :
     * #define RSSIZE_MAX 4611686018427387903
     * }
     */
    public static long RSSIZE_MAX() {
        return RSSIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRI_SIZE "zu"
     * }
     */
    public static MemorySegment ASN_PRI_SIZE() {
        class Holder {
            static final MemorySegment ASN_PRI_SIZE
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("zu");
        }
        return Holder.ASN_PRI_SIZE;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRI_SSIZE "zd"
     * }
     */
    public static MemorySegment ASN_PRI_SSIZE() {
        class Holder {
            static final MemorySegment ASN_PRI_SSIZE
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("zd");
        }
        return Holder.ASN_PRI_SSIZE;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRIuMAX "lu"
     * }
     */
    public static MemorySegment ASN_PRIuMAX() {
        class Holder {
            static final MemorySegment ASN_PRIuMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.ASN_PRIuMAX;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRIdMAX "ld"
     * }
     */
    public static MemorySegment ASN_PRIdMAX() {
        class Holder {
            static final MemorySegment ASN_PRIdMAX
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.ASN_PRIdMAX;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRIu64 "lu"
     * }
     */
    public static MemorySegment ASN_PRIu64() {
        class Holder {
            static final MemorySegment ASN_PRIu64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("lu");
        }
        return Holder.ASN_PRIu64;
    }
    /**
     * {@snippet lang=c :
     * #define ASN_PRId64 "ld"
     * }
     */
    public static MemorySegment ASN_PRId64() {
        class Holder {
            static final MemorySegment ASN_PRId64
                = MessageFrame_h.LIBRARY_ARENA.allocateFrom("ld");
        }
        return Holder.ASN_PRId64;
    }
    private static final long DSRCmsgID_reservedMessageId_D = 0L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_reservedMessageId_D 0
     * }
     */
    public static long DSRCmsgID_reservedMessageId_D() {
        return DSRCmsgID_reservedMessageId_D;
    }
    private static final long DSRCmsgID_alaCarteMessage_D = 1L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_alaCarteMessage_D 1
     * }
     */
    public static long DSRCmsgID_alaCarteMessage_D() {
        return DSRCmsgID_alaCarteMessage_D;
    }
    private static final long DSRCmsgID_basicSafetyMessage_D = 2L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_basicSafetyMessage_D 2
     * }
     */
    public static long DSRCmsgID_basicSafetyMessage_D() {
        return DSRCmsgID_basicSafetyMessage_D;
    }
    private static final long DSRCmsgID_basicSafetyMessageVerbose_D = 3L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_basicSafetyMessageVerbose_D 3
     * }
     */
    public static long DSRCmsgID_basicSafetyMessageVerbose_D() {
        return DSRCmsgID_basicSafetyMessageVerbose_D;
    }
    private static final long DSRCmsgID_commonSafetyRequest_D = 4L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_commonSafetyRequest_D 4
     * }
     */
    public static long DSRCmsgID_commonSafetyRequest_D() {
        return DSRCmsgID_commonSafetyRequest_D;
    }
    private static final long DSRCmsgID_emergencyVehicleAlert_D = 5L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_emergencyVehicleAlert_D 5
     * }
     */
    public static long DSRCmsgID_emergencyVehicleAlert_D() {
        return DSRCmsgID_emergencyVehicleAlert_D;
    }
    private static final long DSRCmsgID_intersectionCollision_D = 6L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_intersectionCollision_D 6
     * }
     */
    public static long DSRCmsgID_intersectionCollision_D() {
        return DSRCmsgID_intersectionCollision_D;
    }
    private static final long DSRCmsgID_mapData_D = 7L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_mapData_D 7
     * }
     */
    public static long DSRCmsgID_mapData_D() {
        return DSRCmsgID_mapData_D;
    }
    private static final long DSRCmsgID_nmeaCorrections_D = 8L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_nmeaCorrections_D 8
     * }
     */
    public static long DSRCmsgID_nmeaCorrections_D() {
        return DSRCmsgID_nmeaCorrections_D;
    }
    private static final long DSRCmsgID_probeDataManagement_D = 9L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeDataManagement_D 9
     * }
     */
    public static long DSRCmsgID_probeDataManagement_D() {
        return DSRCmsgID_probeDataManagement_D;
    }
    private static final long DSRCmsgID_probeVehicleData_D = 10L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeVehicleData_D 10
     * }
     */
    public static long DSRCmsgID_probeVehicleData_D() {
        return DSRCmsgID_probeVehicleData_D;
    }
    private static final long DSRCmsgID_roadSideAlert_D = 11L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadSideAlert_D 11
     * }
     */
    public static long DSRCmsgID_roadSideAlert_D() {
        return DSRCmsgID_roadSideAlert_D;
    }
    private static final long DSRCmsgID_rtcmCorrections_D = 12L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_rtcmCorrections_D 12
     * }
     */
    public static long DSRCmsgID_rtcmCorrections_D() {
        return DSRCmsgID_rtcmCorrections_D;
    }
    private static final long DSRCmsgID_signalPhaseAndTimingMessage_D = 13L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalPhaseAndTimingMessage_D 13
     * }
     */
    public static long DSRCmsgID_signalPhaseAndTimingMessage_D() {
        return DSRCmsgID_signalPhaseAndTimingMessage_D;
    }
    private static final long DSRCmsgID_signalRequestMessage_D = 14L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalRequestMessage_D 14
     * }
     */
    public static long DSRCmsgID_signalRequestMessage_D() {
        return DSRCmsgID_signalRequestMessage_D;
    }
    private static final long DSRCmsgID_signalStatusMessage_D = 15L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalStatusMessage_D 15
     * }
     */
    public static long DSRCmsgID_signalStatusMessage_D() {
        return DSRCmsgID_signalStatusMessage_D;
    }
    private static final long DSRCmsgID_travelerInformation_D = 16L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_travelerInformation_D 16
     * }
     */
    public static long DSRCmsgID_travelerInformation_D() {
        return DSRCmsgID_travelerInformation_D;
    }
    private static final long DSRCmsgID_uperFrame_D = 17L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_uperFrame_D 17
     * }
     */
    public static long DSRCmsgID_uperFrame_D() {
        return DSRCmsgID_uperFrame_D;
    }
    private static final long DSRCmsgID_mapData = 18L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_mapData 18
     * }
     */
    public static long DSRCmsgID_mapData() {
        return DSRCmsgID_mapData;
    }
    private static final long DSRCmsgID_signalPhaseAndTimingMessage = 19L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalPhaseAndTimingMessage 19
     * }
     */
    public static long DSRCmsgID_signalPhaseAndTimingMessage() {
        return DSRCmsgID_signalPhaseAndTimingMessage;
    }
    private static final long DSRCmsgID_basicSafetyMessage = 20L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_basicSafetyMessage 20
     * }
     */
    public static long DSRCmsgID_basicSafetyMessage() {
        return DSRCmsgID_basicSafetyMessage;
    }
    private static final long DSRCmsgID_commonSafetyRequest = 21L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_commonSafetyRequest 21
     * }
     */
    public static long DSRCmsgID_commonSafetyRequest() {
        return DSRCmsgID_commonSafetyRequest;
    }
    private static final long DSRCmsgID_emergencyVehicleAlert = 22L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_emergencyVehicleAlert 22
     * }
     */
    public static long DSRCmsgID_emergencyVehicleAlert() {
        return DSRCmsgID_emergencyVehicleAlert;
    }
    private static final long DSRCmsgID_intersectionCollision = 23L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_intersectionCollision 23
     * }
     */
    public static long DSRCmsgID_intersectionCollision() {
        return DSRCmsgID_intersectionCollision;
    }
    private static final long DSRCmsgID_nmeaCorrections = 24L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_nmeaCorrections 24
     * }
     */
    public static long DSRCmsgID_nmeaCorrections() {
        return DSRCmsgID_nmeaCorrections;
    }
    private static final long DSRCmsgID_probeDataManagement = 25L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeDataManagement 25
     * }
     */
    public static long DSRCmsgID_probeDataManagement() {
        return DSRCmsgID_probeDataManagement;
    }
    private static final long DSRCmsgID_probeVehicleData = 26L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeVehicleData 26
     * }
     */
    public static long DSRCmsgID_probeVehicleData() {
        return DSRCmsgID_probeVehicleData;
    }
    private static final long DSRCmsgID_roadSideAlert = 27L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadSideAlert 27
     * }
     */
    public static long DSRCmsgID_roadSideAlert() {
        return DSRCmsgID_roadSideAlert;
    }
    private static final long DSRCmsgID_rtcmCorrections = 28L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_rtcmCorrections 28
     * }
     */
    public static long DSRCmsgID_rtcmCorrections() {
        return DSRCmsgID_rtcmCorrections;
    }
    private static final long DSRCmsgID_signalRequestMessage = 29L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalRequestMessage 29
     * }
     */
    public static long DSRCmsgID_signalRequestMessage() {
        return DSRCmsgID_signalRequestMessage;
    }
    private static final long DSRCmsgID_signalStatusMessage = 30L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalStatusMessage 30
     * }
     */
    public static long DSRCmsgID_signalStatusMessage() {
        return DSRCmsgID_signalStatusMessage;
    }
    private static final long DSRCmsgID_travelerInformation = 31L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_travelerInformation 31
     * }
     */
    public static long DSRCmsgID_travelerInformation() {
        return DSRCmsgID_travelerInformation;
    }
    private static final long DSRCmsgID_personalSafetyMessage = 32L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_personalSafetyMessage 32
     * }
     */
    public static long DSRCmsgID_personalSafetyMessage() {
        return DSRCmsgID_personalSafetyMessage;
    }
    private static final long DSRCmsgID_roadSafetyMessage = 33L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadSafetyMessage 33
     * }
     */
    public static long DSRCmsgID_roadSafetyMessage() {
        return DSRCmsgID_roadSafetyMessage;
    }
    private static final long DSRCmsgID_roadWeatherMessage = 34L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadWeatherMessage 34
     * }
     */
    public static long DSRCmsgID_roadWeatherMessage() {
        return DSRCmsgID_roadWeatherMessage;
    }
    private static final long DSRCmsgID_probeDataConfigMessage = 35L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeDataConfigMessage 35
     * }
     */
    public static long DSRCmsgID_probeDataConfigMessage() {
        return DSRCmsgID_probeDataConfigMessage;
    }
    private static final long DSRCmsgID_probeDataReportMessage = 36L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_probeDataReportMessage 36
     * }
     */
    public static long DSRCmsgID_probeDataReportMessage() {
        return DSRCmsgID_probeDataReportMessage;
    }
    private static final long DSRCmsgID_tollAdvertisementMessage = 37L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_tollAdvertisementMessage 37
     * }
     */
    public static long DSRCmsgID_tollAdvertisementMessage() {
        return DSRCmsgID_tollAdvertisementMessage;
    }
    private static final long DSRCmsgID_tollUsageMessage = 38L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_tollUsageMessage 38
     * }
     */
    public static long DSRCmsgID_tollUsageMessage() {
        return DSRCmsgID_tollUsageMessage;
    }
    private static final long DSRCmsgID_tollUsageAckMessage = 39L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_tollUsageAckMessage 39
     * }
     */
    public static long DSRCmsgID_tollUsageAckMessage() {
        return DSRCmsgID_tollUsageAckMessage;
    }
    private static final long DSRCmsgID_cooperativeControlMessage = 40L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_cooperativeControlMessage 40
     * }
     */
    public static long DSRCmsgID_cooperativeControlMessage() {
        return DSRCmsgID_cooperativeControlMessage;
    }
    private static final long DSRCmsgID_sensorDataSharingMessage = 41L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_sensorDataSharingMessage 41
     * }
     */
    public static long DSRCmsgID_sensorDataSharingMessage() {
        return DSRCmsgID_sensorDataSharingMessage;
    }
    private static final long DSRCmsgID_maneuverSharingAndCoordinatingMessage = 42L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_maneuverSharingAndCoordinatingMessage 42
     * }
     */
    public static long DSRCmsgID_maneuverSharingAndCoordinatingMessage() {
        return DSRCmsgID_maneuverSharingAndCoordinatingMessage;
    }
    private static final long DSRCmsgID_roadGeometryAndAttributes = 43L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadGeometryAndAttributes 43
     * }
     */
    public static long DSRCmsgID_roadGeometryAndAttributes() {
        return DSRCmsgID_roadGeometryAndAttributes;
    }
    private static final long DSRCmsgID_personalSafetyMessage2 = 44L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_personalSafetyMessage2 44
     * }
     */
    public static long DSRCmsgID_personalSafetyMessage2() {
        return DSRCmsgID_personalSafetyMessage2;
    }
    private static final long DSRCmsgID_trafficSignalPhaseAndTiming = 45L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_trafficSignalPhaseAndTiming 45
     * }
     */
    public static long DSRCmsgID_trafficSignalPhaseAndTiming() {
        return DSRCmsgID_trafficSignalPhaseAndTiming;
    }
    private static final long DSRCmsgID_signalControlAndPrioritizationRequest = 46L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalControlAndPrioritizationRequest 46
     * }
     */
    public static long DSRCmsgID_signalControlAndPrioritizationRequest() {
        return DSRCmsgID_signalControlAndPrioritizationRequest;
    }
    private static final long DSRCmsgID_signalControlAndPrioritizationStatus = 47L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_signalControlAndPrioritizationStatus 47
     * }
     */
    public static long DSRCmsgID_signalControlAndPrioritizationStatus() {
        return DSRCmsgID_signalControlAndPrioritizationStatus;
    }
    private static final long DSRCmsgID_roadUserChargingConfigMessage = 48L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadUserChargingConfigMessage 48
     * }
     */
    public static long DSRCmsgID_roadUserChargingConfigMessage() {
        return DSRCmsgID_roadUserChargingConfigMessage;
    }
    private static final long DSRCmsgID_roadUserChargingReportMessage = 49L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_roadUserChargingReportMessage 49
     * }
     */
    public static long DSRCmsgID_roadUserChargingReportMessage() {
        return DSRCmsgID_roadUserChargingReportMessage;
    }
    private static final long DSRCmsgID_trafficLightStatusMessage = 50L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_trafficLightStatusMessage 50
     * }
     */
    public static long DSRCmsgID_trafficLightStatusMessage() {
        return DSRCmsgID_trafficLightStatusMessage;
    }
    private static final long DSRCmsgID_testMessage00 = 240L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage00 240
     * }
     */
    public static long DSRCmsgID_testMessage00() {
        return DSRCmsgID_testMessage00;
    }
    private static final long DSRCmsgID_testMessage01 = 241L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage01 241
     * }
     */
    public static long DSRCmsgID_testMessage01() {
        return DSRCmsgID_testMessage01;
    }
    private static final long DSRCmsgID_testMessage02 = 242L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage02 242
     * }
     */
    public static long DSRCmsgID_testMessage02() {
        return DSRCmsgID_testMessage02;
    }
    private static final long DSRCmsgID_testMessage03 = 243L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage03 243
     * }
     */
    public static long DSRCmsgID_testMessage03() {
        return DSRCmsgID_testMessage03;
    }
    private static final long DSRCmsgID_testMessage04 = 244L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage04 244
     * }
     */
    public static long DSRCmsgID_testMessage04() {
        return DSRCmsgID_testMessage04;
    }
    private static final long DSRCmsgID_testMessage05 = 245L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage05 245
     * }
     */
    public static long DSRCmsgID_testMessage05() {
        return DSRCmsgID_testMessage05;
    }
    private static final long DSRCmsgID_testMessage06 = 246L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage06 246
     * }
     */
    public static long DSRCmsgID_testMessage06() {
        return DSRCmsgID_testMessage06;
    }
    private static final long DSRCmsgID_testMessage07 = 247L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage07 247
     * }
     */
    public static long DSRCmsgID_testMessage07() {
        return DSRCmsgID_testMessage07;
    }
    private static final long DSRCmsgID_testMessage08 = 248L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage08 248
     * }
     */
    public static long DSRCmsgID_testMessage08() {
        return DSRCmsgID_testMessage08;
    }
    private static final long DSRCmsgID_testMessage09 = 249L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage09 249
     * }
     */
    public static long DSRCmsgID_testMessage09() {
        return DSRCmsgID_testMessage09;
    }
    private static final long DSRCmsgID_testMessage10 = 250L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage10 250
     * }
     */
    public static long DSRCmsgID_testMessage10() {
        return DSRCmsgID_testMessage10;
    }
    private static final long DSRCmsgID_testMessage11 = 251L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage11 251
     * }
     */
    public static long DSRCmsgID_testMessage11() {
        return DSRCmsgID_testMessage11;
    }
    private static final long DSRCmsgID_testMessage12 = 252L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage12 252
     * }
     */
    public static long DSRCmsgID_testMessage12() {
        return DSRCmsgID_testMessage12;
    }
    private static final long DSRCmsgID_testMessage13 = 253L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage13 253
     * }
     */
    public static long DSRCmsgID_testMessage13() {
        return DSRCmsgID_testMessage13;
    }
    private static final long DSRCmsgID_testMessage14 = 254L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage14 254
     * }
     */
    public static long DSRCmsgID_testMessage14() {
        return DSRCmsgID_testMessage14;
    }
    private static final long DSRCmsgID_testMessage15 = 255L;
    /**
     * {@snippet lang=c :
     * #define DSRCmsgID_testMessage15 255
     * }
     */
    public static long DSRCmsgID_testMessage15() {
        return DSRCmsgID_testMessage15;
    }
    private static final int ASN__DEFAULT_STACK_MAX = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define ASN__DEFAULT_STACK_MAX 30000
     * }
     */
    public static int ASN__DEFAULT_STACK_MAX() {
        return ASN__DEFAULT_STACK_MAX;
    }
    private static final long BasicSafetyMessage_PartII_Id_BasicSafetyMessage_vehicleSafetyExt = 0L;
    /**
     * {@snippet lang=c :
     * #define BasicSafetyMessage_PartII_Id_BasicSafetyMessage_vehicleSafetyExt 0
     * }
     */
    public static long BasicSafetyMessage_PartII_Id_BasicSafetyMessage_vehicleSafetyExt() {
        return BasicSafetyMessage_PartII_Id_BasicSafetyMessage_vehicleSafetyExt;
    }
    private static final long BasicSafetyMessage_PartII_Id_specialVehicleExt = 1L;
    /**
     * {@snippet lang=c :
     * #define BasicSafetyMessage_PartII_Id_specialVehicleExt 1
     * }
     */
    public static long BasicSafetyMessage_PartII_Id_specialVehicleExt() {
        return BasicSafetyMessage_PartII_Id_specialVehicleExt;
    }
    private static final long BasicSafetyMessage_PartII_Id_supplementalVehicleExt = 2L;
    /**
     * {@snippet lang=c :
     * #define BasicSafetyMessage_PartII_Id_supplementalVehicleExt 2
     * }
     */
    public static long BasicSafetyMessage_PartII_Id_supplementalVehicleExt() {
        return BasicSafetyMessage_PartII_Id_supplementalVehicleExt;
    }
    private static final long RegionId_noRegion = 0L;
    /**
     * {@snippet lang=c :
     * #define RegionId_noRegion 0
     * }
     */
    public static long RegionId_noRegion() {
        return RegionId_noRegion;
    }
    private static final long RegionId_addGrpA = 1L;
    /**
     * {@snippet lang=c :
     * #define RegionId_addGrpA 1
     * }
     */
    public static long RegionId_addGrpA() {
        return RegionId_addGrpA;
    }
    private static final long RegionId_addGrpB = 2L;
    /**
     * {@snippet lang=c :
     * #define RegionId_addGrpB 2
     * }
     */
    public static long RegionId_addGrpB() {
        return RegionId_addGrpB;
    }
    private static final long RegionId_addGrpC = 3L;
    /**
     * {@snippet lang=c :
     * #define RegionId_addGrpC 3
     * }
     */
    public static long RegionId_addGrpC() {
        return RegionId_addGrpC;
    }
    private static final long RegionId_addGrpD = 4L;
    /**
     * {@snippet lang=c :
     * #define RegionId_addGrpD 4
     * }
     */
    public static long RegionId_addGrpD() {
        return RegionId_addGrpD;
    }
    private static final MemorySegment OPEN_TYPE_decode_ber = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_ber (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_ber() {
        return OPEN_TYPE_decode_ber;
    }
    private static final MemorySegment OPEN_TYPE_decode_xer = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_xer (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_xer() {
        return OPEN_TYPE_decode_xer;
    }
    private static final MemorySegment OPEN_TYPE_decode_jer = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_jer (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_jer() {
        return OPEN_TYPE_decode_jer;
    }
    private static final MemorySegment OPEN_TYPE_decode_oer = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_oer (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_oer() {
        return OPEN_TYPE_decode_oer;
    }
    private static final MemorySegment OPEN_TYPE_decode_uper = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_uper (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_uper() {
        return OPEN_TYPE_decode_uper;
    }
    private static final MemorySegment OPEN_TYPE_decode_aper = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define OPEN_TYPE_decode_aper (void*) 0
     * }
     */
    public static MemorySegment OPEN_TYPE_decode_aper() {
        return OPEN_TYPE_decode_aper;
    }
    private static final long BasicVehicleClass_unknownVehicleClass = 0L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_unknownVehicleClass 0
     * }
     */
    public static long BasicVehicleClass_unknownVehicleClass() {
        return BasicVehicleClass_unknownVehicleClass;
    }
    private static final long BasicVehicleClass_specialVehicleClass = 1L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_specialVehicleClass 1
     * }
     */
    public static long BasicVehicleClass_specialVehicleClass() {
        return BasicVehicleClass_specialVehicleClass;
    }
    private static final long BasicVehicleClass_passenger_Vehicle_TypeUnknown = 10L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_passenger_Vehicle_TypeUnknown 10
     * }
     */
    public static long BasicVehicleClass_passenger_Vehicle_TypeUnknown() {
        return BasicVehicleClass_passenger_Vehicle_TypeUnknown;
    }
    private static final long BasicVehicleClass_passenger_Vehicle_TypeOther = 11L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_passenger_Vehicle_TypeOther 11
     * }
     */
    public static long BasicVehicleClass_passenger_Vehicle_TypeOther() {
        return BasicVehicleClass_passenger_Vehicle_TypeOther;
    }
    private static final long BasicVehicleClass_lightTruck_Vehicle_TypeUnknown = 20L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_lightTruck_Vehicle_TypeUnknown 20
     * }
     */
    public static long BasicVehicleClass_lightTruck_Vehicle_TypeUnknown() {
        return BasicVehicleClass_lightTruck_Vehicle_TypeUnknown;
    }
    private static final long BasicVehicleClass_lightTruck_Vehicle_TypeOther = 21L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_lightTruck_Vehicle_TypeOther 21
     * }
     */
    public static long BasicVehicleClass_lightTruck_Vehicle_TypeOther() {
        return BasicVehicleClass_lightTruck_Vehicle_TypeOther;
    }
    private static final long BasicVehicleClass_truck_Vehicle_TypeUnknown = 25L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_Vehicle_TypeUnknown 25
     * }
     */
    public static long BasicVehicleClass_truck_Vehicle_TypeUnknown() {
        return BasicVehicleClass_truck_Vehicle_TypeUnknown;
    }
    private static final long BasicVehicleClass_truck_Vehicle_TypeOther = 26L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_Vehicle_TypeOther 26
     * }
     */
    public static long BasicVehicleClass_truck_Vehicle_TypeOther() {
        return BasicVehicleClass_truck_Vehicle_TypeOther;
    }
    private static final long BasicVehicleClass_truck_axleCnt2 = 27L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt2 27
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt2() {
        return BasicVehicleClass_truck_axleCnt2;
    }
    private static final long BasicVehicleClass_truck_axleCnt3 = 28L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt3 28
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt3() {
        return BasicVehicleClass_truck_axleCnt3;
    }
    private static final long BasicVehicleClass_truck_axleCnt4 = 29L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt4 29
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt4() {
        return BasicVehicleClass_truck_axleCnt4;
    }
    private static final long BasicVehicleClass_truck_axleCnt4Trailer = 30L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt4Trailer 30
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt4Trailer() {
        return BasicVehicleClass_truck_axleCnt4Trailer;
    }
    private static final long BasicVehicleClass_truck_axleCnt5Trailer = 31L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt5Trailer 31
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt5Trailer() {
        return BasicVehicleClass_truck_axleCnt5Trailer;
    }
    private static final long BasicVehicleClass_truck_axleCnt6Trailer = 32L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt6Trailer 32
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt6Trailer() {
        return BasicVehicleClass_truck_axleCnt6Trailer;
    }
    private static final long BasicVehicleClass_truck_axleCnt5MultiTrailer = 33L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt5MultiTrailer 33
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt5MultiTrailer() {
        return BasicVehicleClass_truck_axleCnt5MultiTrailer;
    }
    private static final long BasicVehicleClass_truck_axleCnt6MultiTrailer = 34L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt6MultiTrailer 34
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt6MultiTrailer() {
        return BasicVehicleClass_truck_axleCnt6MultiTrailer;
    }
    private static final long BasicVehicleClass_truck_axleCnt7MultiTrailer = 35L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_truck_axleCnt7MultiTrailer 35
     * }
     */
    public static long BasicVehicleClass_truck_axleCnt7MultiTrailer() {
        return BasicVehicleClass_truck_axleCnt7MultiTrailer;
    }
    private static final long BasicVehicleClass_motorcycle_TypeUnknown = 40L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_TypeUnknown 40
     * }
     */
    public static long BasicVehicleClass_motorcycle_TypeUnknown() {
        return BasicVehicleClass_motorcycle_TypeUnknown;
    }
    private static final long BasicVehicleClass_motorcycle_TypeOther = 41L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_TypeOther 41
     * }
     */
    public static long BasicVehicleClass_motorcycle_TypeOther() {
        return BasicVehicleClass_motorcycle_TypeOther;
    }
    private static final long BasicVehicleClass_motorcycle_Cruiser_Standard = 42L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_Cruiser_Standard 42
     * }
     */
    public static long BasicVehicleClass_motorcycle_Cruiser_Standard() {
        return BasicVehicleClass_motorcycle_Cruiser_Standard;
    }
    private static final long BasicVehicleClass_motorcycle_SportUnclad = 43L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_SportUnclad 43
     * }
     */
    public static long BasicVehicleClass_motorcycle_SportUnclad() {
        return BasicVehicleClass_motorcycle_SportUnclad;
    }
    private static final long BasicVehicleClass_motorcycle_SportTouring = 44L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_SportTouring 44
     * }
     */
    public static long BasicVehicleClass_motorcycle_SportTouring() {
        return BasicVehicleClass_motorcycle_SportTouring;
    }
    private static final long BasicVehicleClass_motorcycle_SuperSport = 45L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_SuperSport 45
     * }
     */
    public static long BasicVehicleClass_motorcycle_SuperSport() {
        return BasicVehicleClass_motorcycle_SuperSport;
    }
    private static final long BasicVehicleClass_motorcycle_Touring = 46L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_Touring 46
     * }
     */
    public static long BasicVehicleClass_motorcycle_Touring() {
        return BasicVehicleClass_motorcycle_Touring;
    }
    private static final long BasicVehicleClass_motorcycle_Trike = 47L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_Trike 47
     * }
     */
    public static long BasicVehicleClass_motorcycle_Trike() {
        return BasicVehicleClass_motorcycle_Trike;
    }
    private static final long BasicVehicleClass_motorcycle_wPassengers = 48L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_motorcycle_wPassengers 48
     * }
     */
    public static long BasicVehicleClass_motorcycle_wPassengers() {
        return BasicVehicleClass_motorcycle_wPassengers;
    }
    private static final long BasicVehicleClass_transit_TypeUnknown = 50L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_TypeUnknown 50
     * }
     */
    public static long BasicVehicleClass_transit_TypeUnknown() {
        return BasicVehicleClass_transit_TypeUnknown;
    }
    private static final long BasicVehicleClass_transit_TypeOther = 51L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_TypeOther 51
     * }
     */
    public static long BasicVehicleClass_transit_TypeOther() {
        return BasicVehicleClass_transit_TypeOther;
    }
    private static final long BasicVehicleClass_transit_BRT = 52L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_BRT 52
     * }
     */
    public static long BasicVehicleClass_transit_BRT() {
        return BasicVehicleClass_transit_BRT;
    }
    private static final long BasicVehicleClass_transit_ExpressBus = 53L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_ExpressBus 53
     * }
     */
    public static long BasicVehicleClass_transit_ExpressBus() {
        return BasicVehicleClass_transit_ExpressBus;
    }
    private static final long BasicVehicleClass_transit_LocalBus = 54L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_LocalBus 54
     * }
     */
    public static long BasicVehicleClass_transit_LocalBus() {
        return BasicVehicleClass_transit_LocalBus;
    }
    private static final long BasicVehicleClass_transit_SchoolBus = 55L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_SchoolBus 55
     * }
     */
    public static long BasicVehicleClass_transit_SchoolBus() {
        return BasicVehicleClass_transit_SchoolBus;
    }
    private static final long BasicVehicleClass_transit_FixedGuideway = 56L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_FixedGuideway 56
     * }
     */
    public static long BasicVehicleClass_transit_FixedGuideway() {
        return BasicVehicleClass_transit_FixedGuideway;
    }
    private static final long BasicVehicleClass_transit_Paratransit = 57L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_Paratransit 57
     * }
     */
    public static long BasicVehicleClass_transit_Paratransit() {
        return BasicVehicleClass_transit_Paratransit;
    }
    private static final long BasicVehicleClass_transit_Paratransit_Ambulance = 58L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_transit_Paratransit_Ambulance 58
     * }
     */
    public static long BasicVehicleClass_transit_Paratransit_Ambulance() {
        return BasicVehicleClass_transit_Paratransit_Ambulance;
    }
    private static final long BasicVehicleClass_emergency_TypeUnknown = 60L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_TypeUnknown 60
     * }
     */
    public static long BasicVehicleClass_emergency_TypeUnknown() {
        return BasicVehicleClass_emergency_TypeUnknown;
    }
    private static final long BasicVehicleClass_emergency_TypeOther = 61L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_TypeOther 61
     * }
     */
    public static long BasicVehicleClass_emergency_TypeOther() {
        return BasicVehicleClass_emergency_TypeOther;
    }
    private static final long BasicVehicleClass_emergency_Fire_Light_Vehicle = 62L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Fire_Light_Vehicle 62
     * }
     */
    public static long BasicVehicleClass_emergency_Fire_Light_Vehicle() {
        return BasicVehicleClass_emergency_Fire_Light_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Fire_Heavy_Vehicle = 63L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Fire_Heavy_Vehicle 63
     * }
     */
    public static long BasicVehicleClass_emergency_Fire_Heavy_Vehicle() {
        return BasicVehicleClass_emergency_Fire_Heavy_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Fire_Paramedic_Vehicle = 64L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Fire_Paramedic_Vehicle 64
     * }
     */
    public static long BasicVehicleClass_emergency_Fire_Paramedic_Vehicle() {
        return BasicVehicleClass_emergency_Fire_Paramedic_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Fire_Ambulance_Vehicle = 65L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Fire_Ambulance_Vehicle 65
     * }
     */
    public static long BasicVehicleClass_emergency_Fire_Ambulance_Vehicle() {
        return BasicVehicleClass_emergency_Fire_Ambulance_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Police_Light_Vehicle = 66L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Police_Light_Vehicle 66
     * }
     */
    public static long BasicVehicleClass_emergency_Police_Light_Vehicle() {
        return BasicVehicleClass_emergency_Police_Light_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Police_Heavy_Vehicle = 67L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Police_Heavy_Vehicle 67
     * }
     */
    public static long BasicVehicleClass_emergency_Police_Heavy_Vehicle() {
        return BasicVehicleClass_emergency_Police_Heavy_Vehicle;
    }
    private static final long BasicVehicleClass_emergency_Other_Responder = 68L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Other_Responder 68
     * }
     */
    public static long BasicVehicleClass_emergency_Other_Responder() {
        return BasicVehicleClass_emergency_Other_Responder;
    }
    private static final long BasicVehicleClass_emergency_Other_Ambulance = 69L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_emergency_Other_Ambulance 69
     * }
     */
    public static long BasicVehicleClass_emergency_Other_Ambulance() {
        return BasicVehicleClass_emergency_Other_Ambulance;
    }
    private static final long BasicVehicleClass_otherTraveler_TypeUnknown = 80L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_TypeUnknown 80
     * }
     */
    public static long BasicVehicleClass_otherTraveler_TypeUnknown() {
        return BasicVehicleClass_otherTraveler_TypeUnknown;
    }
    private static final long BasicVehicleClass_otherTraveler_TypeOther = 81L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_TypeOther 81
     * }
     */
    public static long BasicVehicleClass_otherTraveler_TypeOther() {
        return BasicVehicleClass_otherTraveler_TypeOther;
    }
    private static final long BasicVehicleClass_otherTraveler_Pedestrian = 82L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_Pedestrian 82
     * }
     */
    public static long BasicVehicleClass_otherTraveler_Pedestrian() {
        return BasicVehicleClass_otherTraveler_Pedestrian;
    }
    private static final long BasicVehicleClass_otherTraveler_Visually_Disabled = 83L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_Visually_Disabled 83
     * }
     */
    public static long BasicVehicleClass_otherTraveler_Visually_Disabled() {
        return BasicVehicleClass_otherTraveler_Visually_Disabled;
    }
    private static final long BasicVehicleClass_otherTraveler_Physically_Disabled = 84L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_Physically_Disabled 84
     * }
     */
    public static long BasicVehicleClass_otherTraveler_Physically_Disabled() {
        return BasicVehicleClass_otherTraveler_Physically_Disabled;
    }
    private static final long BasicVehicleClass_otherTraveler_Bicycle = 85L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_Bicycle 85
     * }
     */
    public static long BasicVehicleClass_otherTraveler_Bicycle() {
        return BasicVehicleClass_otherTraveler_Bicycle;
    }
    private static final long BasicVehicleClass_otherTraveler_Vulnerable_Roadworker = 86L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_otherTraveler_Vulnerable_Roadworker 86
     * }
     */
    public static long BasicVehicleClass_otherTraveler_Vulnerable_Roadworker() {
        return BasicVehicleClass_otherTraveler_Vulnerable_Roadworker;
    }
    private static final long BasicVehicleClass_infrastructure_TypeUnknown = 90L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_infrastructure_TypeUnknown 90
     * }
     */
    public static long BasicVehicleClass_infrastructure_TypeUnknown() {
        return BasicVehicleClass_infrastructure_TypeUnknown;
    }
    private static final long BasicVehicleClass_infrastructure_Fixed = 91L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_infrastructure_Fixed 91
     * }
     */
    public static long BasicVehicleClass_infrastructure_Fixed() {
        return BasicVehicleClass_infrastructure_Fixed;
    }
    private static final long BasicVehicleClass_infrastructure_Movable = 92L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_infrastructure_Movable 92
     * }
     */
    public static long BasicVehicleClass_infrastructure_Movable() {
        return BasicVehicleClass_infrastructure_Movable;
    }
    private static final long BasicVehicleClass_equipped_CargoTrailer = 93L;
    /**
     * {@snippet lang=c :
     * #define BasicVehicleClass_equipped_CargoTrailer 93
     * }
     */
    public static long BasicVehicleClass_equipped_CargoTrailer() {
        return BasicVehicleClass_equipped_CargoTrailer;
    }
    private static final long FuelType_unknownFuel = 0L;
    /**
     * {@snippet lang=c :
     * #define FuelType_unknownFuel 0
     * }
     */
    public static long FuelType_unknownFuel() {
        return FuelType_unknownFuel;
    }
    private static final long FuelType_gasoline = 1L;
    /**
     * {@snippet lang=c :
     * #define FuelType_gasoline 1
     * }
     */
    public static long FuelType_gasoline() {
        return FuelType_gasoline;
    }
    private static final long FuelType_ethanol = 2L;
    /**
     * {@snippet lang=c :
     * #define FuelType_ethanol 2
     * }
     */
    public static long FuelType_ethanol() {
        return FuelType_ethanol;
    }
    private static final long FuelType_diesel = 3L;
    /**
     * {@snippet lang=c :
     * #define FuelType_diesel 3
     * }
     */
    public static long FuelType_diesel() {
        return FuelType_diesel;
    }
    private static final long FuelType_electric = 4L;
    /**
     * {@snippet lang=c :
     * #define FuelType_electric 4
     * }
     */
    public static long FuelType_electric() {
        return FuelType_electric;
    }
    private static final long FuelType_hybrid = 5L;
    /**
     * {@snippet lang=c :
     * #define FuelType_hybrid 5
     * }
     */
    public static long FuelType_hybrid() {
        return FuelType_hybrid;
    }
    private static final long FuelType_hydrogen = 6L;
    /**
     * {@snippet lang=c :
     * #define FuelType_hydrogen 6
     * }
     */
    public static long FuelType_hydrogen() {
        return FuelType_hydrogen;
    }
    private static final long FuelType_natGasLiquid = 7L;
    /**
     * {@snippet lang=c :
     * #define FuelType_natGasLiquid 7
     * }
     */
    public static long FuelType_natGasLiquid() {
        return FuelType_natGasLiquid;
    }
    private static final long FuelType_natGasComp = 8L;
    /**
     * {@snippet lang=c :
     * #define FuelType_natGasComp 8
     * }
     */
    public static long FuelType_natGasComp() {
        return FuelType_natGasComp;
    }
    private static final long FuelType_propane = 9L;
    /**
     * {@snippet lang=c :
     * #define FuelType_propane 9
     * }
     */
    public static long FuelType_propane() {
        return FuelType_propane;
    }
    private static final int ASN_OID_ARC_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ASN_OID_ARC_MAX 4294967295
     * }
     */
    public static int ASN_OID_ARC_MAX() {
        return ASN_OID_ARC_MAX;
    }
    private static final long CooperativeControlMessage_PartII_Id_CooperativeControlMessage_vehicleSafetyExt = 0L;
    /**
     * {@snippet lang=c :
     * #define CooperativeControlMessage_PartII_Id_CooperativeControlMessage_vehicleSafetyExt 0
     * }
     */
    public static long CooperativeControlMessage_PartII_Id_CooperativeControlMessage_vehicleSafetyExt() {
        return CooperativeControlMessage_PartII_Id_CooperativeControlMessage_vehicleSafetyExt;
    }
    private static final long CooperativeControlMessage_PartII_Id_lightVehicleCCMExt = 1L;
    /**
     * {@snippet lang=c :
     * #define CooperativeControlMessage_PartII_Id_lightVehicleCCMExt 1
     * }
     */
    public static long CooperativeControlMessage_PartII_Id_lightVehicleCCMExt() {
        return CooperativeControlMessage_PartII_Id_lightVehicleCCMExt;
    }
    private static final long CooperativeControlMessage_PartII_Id_heavyTruckCCMExt = 2L;
    /**
     * {@snippet lang=c :
     * #define CooperativeControlMessage_PartII_Id_heavyTruckCCMExt 2
     * }
     */
    public static long CooperativeControlMessage_PartII_Id_heavyTruckCCMExt() {
        return CooperativeControlMessage_PartII_Id_heavyTruckCCMExt;
    }
}

