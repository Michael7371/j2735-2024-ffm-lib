// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DescriptionOfRoadSurface {
 *     DescriptionOfRoadSurface_PR present;
 *     union DescriptionOfRoadSurface_u {
 *         PortlandCement_t portlandCement;
 *         AsphaltOrTar_t asphaltOrTar;
 *         Gravel_t gravel;
 *         Grass_t grass;
 *         Cinders_t cinders;
 *         Rock_t rock;
 *         Ice_t ice;
 *         Snow_t snow;
 *     } choice;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class DescriptionOfRoadSurface {

    DescriptionOfRoadSurface() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("present"),
        MemoryLayout.paddingLayout(4),
        DescriptionOfRoadSurface_u.layout().withName("choice"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("DescriptionOfRoadSurface");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DescriptionOfRoadSurface_PR present
     * }
     */
    public static final OfInt present$layout() {
        return present$LAYOUT;
    }

    private static final long present$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DescriptionOfRoadSurface_PR present
     * }
     */
    public static final long present$offset() {
        return present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DescriptionOfRoadSurface_PR present
     * }
     */
    public static int present(MemorySegment struct) {
        return struct.get(present$LAYOUT, present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DescriptionOfRoadSurface_PR present
     * }
     */
    public static void present(MemorySegment struct, int fieldValue) {
        struct.set(present$LAYOUT, present$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union DescriptionOfRoadSurface_u {
     *     PortlandCement_t portlandCement;
     *     AsphaltOrTar_t asphaltOrTar;
     *     Gravel_t gravel;
     *     Grass_t grass;
     *     Cinders_t cinders;
     *     Rock_t rock;
     *     Ice_t ice;
     *     Snow_t snow;
     * }
     * }
     */
    public static class DescriptionOfRoadSurface_u {

        DescriptionOfRoadSurface_u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            PortlandCement.layout().withName("portlandCement"),
            AsphaltOrTar.layout().withName("asphaltOrTar"),
            Gravel.layout().withName("gravel"),
            Grass.layout().withName("grass"),
            Cinders.layout().withName("cinders"),
            Rock.layout().withName("rock"),
            Ice.layout().withName("ice"),
            Snow.layout().withName("snow")
        ).withName("DescriptionOfRoadSurface_u");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout portlandCement$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("portlandCement"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * PortlandCement_t portlandCement
         * }
         */
        public static final GroupLayout portlandCement$layout() {
            return portlandCement$LAYOUT;
        }

        private static final long portlandCement$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * PortlandCement_t portlandCement
         * }
         */
        public static final long portlandCement$offset() {
            return portlandCement$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * PortlandCement_t portlandCement
         * }
         */
        public static MemorySegment portlandCement(MemorySegment union) {
            return union.asSlice(portlandCement$OFFSET, portlandCement$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * PortlandCement_t portlandCement
         * }
         */
        public static void portlandCement(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, portlandCement$OFFSET, portlandCement$LAYOUT.byteSize());
        }

        private static final GroupLayout asphaltOrTar$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("asphaltOrTar"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * AsphaltOrTar_t asphaltOrTar
         * }
         */
        public static final GroupLayout asphaltOrTar$layout() {
            return asphaltOrTar$LAYOUT;
        }

        private static final long asphaltOrTar$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * AsphaltOrTar_t asphaltOrTar
         * }
         */
        public static final long asphaltOrTar$offset() {
            return asphaltOrTar$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * AsphaltOrTar_t asphaltOrTar
         * }
         */
        public static MemorySegment asphaltOrTar(MemorySegment union) {
            return union.asSlice(asphaltOrTar$OFFSET, asphaltOrTar$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * AsphaltOrTar_t asphaltOrTar
         * }
         */
        public static void asphaltOrTar(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, asphaltOrTar$OFFSET, asphaltOrTar$LAYOUT.byteSize());
        }

        private static final GroupLayout gravel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("gravel"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Gravel_t gravel
         * }
         */
        public static final GroupLayout gravel$layout() {
            return gravel$LAYOUT;
        }

        private static final long gravel$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Gravel_t gravel
         * }
         */
        public static final long gravel$offset() {
            return gravel$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Gravel_t gravel
         * }
         */
        public static MemorySegment gravel(MemorySegment union) {
            return union.asSlice(gravel$OFFSET, gravel$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Gravel_t gravel
         * }
         */
        public static void gravel(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, gravel$OFFSET, gravel$LAYOUT.byteSize());
        }

        private static final GroupLayout grass$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("grass"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Grass_t grass
         * }
         */
        public static final GroupLayout grass$layout() {
            return grass$LAYOUT;
        }

        private static final long grass$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Grass_t grass
         * }
         */
        public static final long grass$offset() {
            return grass$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Grass_t grass
         * }
         */
        public static MemorySegment grass(MemorySegment union) {
            return union.asSlice(grass$OFFSET, grass$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Grass_t grass
         * }
         */
        public static void grass(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, grass$OFFSET, grass$LAYOUT.byteSize());
        }

        private static final GroupLayout cinders$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cinders"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Cinders_t cinders
         * }
         */
        public static final GroupLayout cinders$layout() {
            return cinders$LAYOUT;
        }

        private static final long cinders$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Cinders_t cinders
         * }
         */
        public static final long cinders$offset() {
            return cinders$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Cinders_t cinders
         * }
         */
        public static MemorySegment cinders(MemorySegment union) {
            return union.asSlice(cinders$OFFSET, cinders$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Cinders_t cinders
         * }
         */
        public static void cinders(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, cinders$OFFSET, cinders$LAYOUT.byteSize());
        }

        private static final GroupLayout rock$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rock"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Rock_t rock
         * }
         */
        public static final GroupLayout rock$layout() {
            return rock$LAYOUT;
        }

        private static final long rock$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Rock_t rock
         * }
         */
        public static final long rock$offset() {
            return rock$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Rock_t rock
         * }
         */
        public static MemorySegment rock(MemorySegment union) {
            return union.asSlice(rock$OFFSET, rock$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Rock_t rock
         * }
         */
        public static void rock(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, rock$OFFSET, rock$LAYOUT.byteSize());
        }

        private static final GroupLayout ice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ice"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Ice_t ice
         * }
         */
        public static final GroupLayout ice$layout() {
            return ice$LAYOUT;
        }

        private static final long ice$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Ice_t ice
         * }
         */
        public static final long ice$offset() {
            return ice$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Ice_t ice
         * }
         */
        public static MemorySegment ice(MemorySegment union) {
            return union.asSlice(ice$OFFSET, ice$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Ice_t ice
         * }
         */
        public static void ice(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ice$OFFSET, ice$LAYOUT.byteSize());
        }

        private static final GroupLayout snow$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("snow"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Snow_t snow
         * }
         */
        public static final GroupLayout snow$layout() {
            return snow$LAYOUT;
        }

        private static final long snow$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Snow_t snow
         * }
         */
        public static final long snow$offset() {
            return snow$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Snow_t snow
         * }
         */
        public static MemorySegment snow(MemorySegment union) {
            return union.asSlice(snow$OFFSET, snow$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Snow_t snow
         * }
         */
        public static void snow(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, snow$OFFSET, snow$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union DescriptionOfRoadSurface_u choice
     * }
     */
    public static final GroupLayout choice$layout() {
        return choice$LAYOUT;
    }

    private static final long choice$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union DescriptionOfRoadSurface_u choice
     * }
     */
    public static final long choice$offset() {
        return choice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union DescriptionOfRoadSurface_u choice
     * }
     */
    public static MemorySegment choice(MemorySegment struct) {
        return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union DescriptionOfRoadSurface_u choice
     * }
     */
    public static void choice(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

