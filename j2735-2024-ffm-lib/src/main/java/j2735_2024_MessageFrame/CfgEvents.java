// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CfgEvents {
 *     BOOLEAN_t *absActivated;
 *     BOOLEAN_t *tractionCtlLoss;
 *     BOOLEAN_t *stabilityCtlActivated;
 *     BOOLEAN_t *hardBraking;
 *     long *swerveThreshold;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CfgEvents {

    CfgEvents() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("absActivated"),
        MessageFrame_h.C_POINTER.withName("tractionCtlLoss"),
        MessageFrame_h.C_POINTER.withName("stabilityCtlActivated"),
        MessageFrame_h.C_POINTER.withName("hardBraking"),
        MessageFrame_h.C_POINTER.withName("swerveThreshold"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CfgEvents");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout absActivated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("absActivated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *absActivated
     * }
     */
    public static final AddressLayout absActivated$layout() {
        return absActivated$LAYOUT;
    }

    private static final long absActivated$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *absActivated
     * }
     */
    public static final long absActivated$offset() {
        return absActivated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *absActivated
     * }
     */
    public static MemorySegment absActivated(MemorySegment struct) {
        return struct.get(absActivated$LAYOUT, absActivated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *absActivated
     * }
     */
    public static void absActivated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(absActivated$LAYOUT, absActivated$OFFSET, fieldValue);
    }

    private static final AddressLayout tractionCtlLoss$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tractionCtlLoss"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *tractionCtlLoss
     * }
     */
    public static final AddressLayout tractionCtlLoss$layout() {
        return tractionCtlLoss$LAYOUT;
    }

    private static final long tractionCtlLoss$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *tractionCtlLoss
     * }
     */
    public static final long tractionCtlLoss$offset() {
        return tractionCtlLoss$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *tractionCtlLoss
     * }
     */
    public static MemorySegment tractionCtlLoss(MemorySegment struct) {
        return struct.get(tractionCtlLoss$LAYOUT, tractionCtlLoss$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *tractionCtlLoss
     * }
     */
    public static void tractionCtlLoss(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tractionCtlLoss$LAYOUT, tractionCtlLoss$OFFSET, fieldValue);
    }

    private static final AddressLayout stabilityCtlActivated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stabilityCtlActivated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *stabilityCtlActivated
     * }
     */
    public static final AddressLayout stabilityCtlActivated$layout() {
        return stabilityCtlActivated$LAYOUT;
    }

    private static final long stabilityCtlActivated$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *stabilityCtlActivated
     * }
     */
    public static final long stabilityCtlActivated$offset() {
        return stabilityCtlActivated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *stabilityCtlActivated
     * }
     */
    public static MemorySegment stabilityCtlActivated(MemorySegment struct) {
        return struct.get(stabilityCtlActivated$LAYOUT, stabilityCtlActivated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *stabilityCtlActivated
     * }
     */
    public static void stabilityCtlActivated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stabilityCtlActivated$LAYOUT, stabilityCtlActivated$OFFSET, fieldValue);
    }

    private static final AddressLayout hardBraking$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hardBraking"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hardBraking
     * }
     */
    public static final AddressLayout hardBraking$layout() {
        return hardBraking$LAYOUT;
    }

    private static final long hardBraking$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hardBraking
     * }
     */
    public static final long hardBraking$offset() {
        return hardBraking$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hardBraking
     * }
     */
    public static MemorySegment hardBraking(MemorySegment struct) {
        return struct.get(hardBraking$LAYOUT, hardBraking$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *hardBraking
     * }
     */
    public static void hardBraking(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hardBraking$LAYOUT, hardBraking$OFFSET, fieldValue);
    }

    private static final AddressLayout swerveThreshold$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("swerveThreshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *swerveThreshold
     * }
     */
    public static final AddressLayout swerveThreshold$layout() {
        return swerveThreshold$LAYOUT;
    }

    private static final long swerveThreshold$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *swerveThreshold
     * }
     */
    public static final long swerveThreshold$offset() {
        return swerveThreshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *swerveThreshold
     * }
     */
    public static MemorySegment swerveThreshold(MemorySegment struct) {
        return struct.get(swerveThreshold$LAYOUT, swerveThreshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *swerveThreshold
     * }
     */
    public static void swerveThreshold(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(swerveThreshold$LAYOUT, swerveThreshold$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

