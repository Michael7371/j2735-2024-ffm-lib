// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class MessageFrame_h_3 extends MessageFrame_h_4 {

    MessageFrame_h_3() {
        // Should not be called directly
    }

    private static class ShortString_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ShortString_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ShortString_decode_uper$descriptor() {
        return ShortString_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ShortString_decode_uper$handle() {
        return ShortString_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ShortString_decode_uper$address() {
        return ShortString_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ShortString_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ShortString_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShortString_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShortString_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ShortString_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ShortString_encode_uper$descriptor() {
        return ShortString_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ShortString_encode_uper$handle() {
        return ShortString_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ShortString_encode_uper$address() {
        return ShortString_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ShortString_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ShortString_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShortString_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShortString_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ShortString_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ShortString_decode_aper$descriptor() {
        return ShortString_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ShortString_decode_aper$handle() {
        return ShortString_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ShortString_decode_aper$address() {
        return ShortString_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ShortString_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ShortString_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ShortString_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShortString_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShortString_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ShortString_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ShortString_encode_aper$descriptor() {
        return ShortString_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ShortString_encode_aper$handle() {
        return ShortString_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ShortString_encode_aper$address() {
        return ShortString_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ShortString_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ShortString_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ShortString_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShortString_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int DynamicInfoContainer__priority_low_priority = (int)0L;
    /**
     * {@snippet lang=c :
     * enum DynamicInfoContainer__priority.DynamicInfoContainer__priority_low_priority = 0
     * }
     */
    public static int DynamicInfoContainer__priority_low_priority() {
        return DynamicInfoContainer__priority_low_priority;
    }
    private static final int DynamicInfoContainer__priority_medium_priority = (int)1L;
    /**
     * {@snippet lang=c :
     * enum DynamicInfoContainer__priority.DynamicInfoContainer__priority_medium_priority = 1
     * }
     */
    public static int DynamicInfoContainer__priority_medium_priority() {
        return DynamicInfoContainer__priority_medium_priority;
    }
    private static final int DynamicInfoContainer__priority_high_priority = (int)2L;
    /**
     * {@snippet lang=c :
     * enum DynamicInfoContainer__priority.DynamicInfoContainer__priority_high_priority = 2
     * }
     */
    public static int DynamicInfoContainer__priority_high_priority() {
        return DynamicInfoContainer__priority_high_priority;
    }
    private static final int DynamicInfoContainer__priority_critical = (int)3L;
    /**
     * {@snippet lang=c :
     * enum DynamicInfoContainer__priority.DynamicInfoContainer__priority_critical = 3
     * }
     */
    public static int DynamicInfoContainer__priority_critical() {
        return DynamicInfoContainer__priority_critical;
    }

    private static class asn_DEF_DynamicInfoContainer$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DynamicInfoContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DynamicInfoContainer
     * }
     */
    public static GroupLayout asn_DEF_DynamicInfoContainer$layout() {
        return asn_DEF_DynamicInfoContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DynamicInfoContainer
     * }
     */
    public static MemorySegment asn_DEF_DynamicInfoContainer() {
        return asn_DEF_DynamicInfoContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DynamicInfoContainer
     * }
     */
    public static void asn_DEF_DynamicInfoContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DynamicInfoContainer$constants.SEGMENT, 0L, asn_DEF_DynamicInfoContainer$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DynamicInfoContainer_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DynamicInfoContainer_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DynamicInfoContainer_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DynamicInfoContainer_specs_1$layout() {
        return asn_SPC_DynamicInfoContainer_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DynamicInfoContainer_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DynamicInfoContainer_specs_1() {
        return asn_SPC_DynamicInfoContainer_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_DynamicInfoContainer_specs_1
     * }
     */
    public static void asn_SPC_DynamicInfoContainer_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DynamicInfoContainer_specs_1$constants.SEGMENT, 0L, asn_SPC_DynamicInfoContainer_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_DynamicInfoContainer_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_DynamicInfoContainer_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_DynamicInfoContainer_1$layout() {
        return asn_MBR_DynamicInfoContainer_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static long[] asn_MBR_DynamicInfoContainer_1$dimensions() {
        return asn_MBR_DynamicInfoContainer_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static MemorySegment asn_MBR_DynamicInfoContainer_1() {
        return asn_MBR_DynamicInfoContainer_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static void asn_MBR_DynamicInfoContainer_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DynamicInfoContainer_1$constants.SEGMENT, 0L, asn_MBR_DynamicInfoContainer_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static MemorySegment asn_MBR_DynamicInfoContainer_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_DynamicInfoContainer_1$constants.HANDLE.invokeExact(asn_MBR_DynamicInfoContainer_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_DynamicInfoContainer_1[3]
     * }
     */
    public static void asn_MBR_DynamicInfoContainer_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_DynamicInfoContainer_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_IncidentsContainer$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_IncidentsContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IncidentsContainer
     * }
     */
    public static GroupLayout asn_DEF_IncidentsContainer$layout() {
        return asn_DEF_IncidentsContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IncidentsContainer
     * }
     */
    public static MemorySegment asn_DEF_IncidentsContainer() {
        return asn_DEF_IncidentsContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IncidentsContainer
     * }
     */
    public static void asn_DEF_IncidentsContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_IncidentsContainer$constants.SEGMENT, 0L, asn_DEF_IncidentsContainer$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_IncidentsContainer_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_IncidentsContainer_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_IncidentsContainer_specs_1
     * }
     */
    public static GroupLayout asn_SPC_IncidentsContainer_specs_1$layout() {
        return asn_SPC_IncidentsContainer_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_IncidentsContainer_specs_1
     * }
     */
    public static MemorySegment asn_SPC_IncidentsContainer_specs_1() {
        return asn_SPC_IncidentsContainer_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_IncidentsContainer_specs_1
     * }
     */
    public static void asn_SPC_IncidentsContainer_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_IncidentsContainer_specs_1$constants.SEGMENT, 0L, asn_SPC_IncidentsContainer_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_IncidentsContainer_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_IncidentsContainer_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_IncidentsContainer_1$layout() {
        return asn_MBR_IncidentsContainer_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static long[] asn_MBR_IncidentsContainer_1$dimensions() {
        return asn_MBR_IncidentsContainer_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static MemorySegment asn_MBR_IncidentsContainer_1() {
        return asn_MBR_IncidentsContainer_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static void asn_MBR_IncidentsContainer_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_IncidentsContainer_1$constants.SEGMENT, 0L, asn_MBR_IncidentsContainer_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static MemorySegment asn_MBR_IncidentsContainer_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_IncidentsContainer_1$constants.HANDLE.invokeExact(asn_MBR_IncidentsContainer_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_IncidentsContainer_1[2]
     * }
     */
    public static void asn_MBR_IncidentsContainer_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_IncidentsContainer_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssVisibility_t
     * }
     */
    public static final OfLong NTCIPEssVisibility_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssVisibility_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssVisibility_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibility_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssVisibility_constr_1$layout() {
        return asn_PER_type_NTCIPEssVisibility_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibility_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssVisibility_constr_1() {
        return asn_PER_type_NTCIPEssVisibility_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibility_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssVisibility_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssVisibility_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssVisibility_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssVisibility$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssVisibility").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibility
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssVisibility$layout() {
        return asn_DEF_NTCIPEssVisibility$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibility
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssVisibility() {
        return asn_DEF_NTCIPEssVisibility$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibility
     * }
     */
    public static void asn_DEF_NTCIPEssVisibility(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssVisibility$constants.SEGMENT, 0L, asn_DEF_NTCIPEssVisibility$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssVisibility_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssVisibility_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_free$descriptor() {
        return NTCIPEssVisibility_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssVisibility_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_free$handle() {
        return NTCIPEssVisibility_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssVisibility_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_free$address() {
        return NTCIPEssVisibility_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssVisibility_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssVisibility_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssVisibility_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_print$descriptor() {
        return NTCIPEssVisibility_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_print$handle() {
        return NTCIPEssVisibility_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_print$address() {
        return NTCIPEssVisibility_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssVisibility_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssVisibility_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibility_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_constraint$descriptor() {
        return NTCIPEssVisibility_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_constraint$handle() {
        return NTCIPEssVisibility_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssVisibility_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_constraint$address() {
        return NTCIPEssVisibility_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssVisibility_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssVisibility_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibility_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_decode_ber$descriptor() {
        return NTCIPEssVisibility_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_decode_ber$handle() {
        return NTCIPEssVisibility_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_ber$address() {
        return NTCIPEssVisibility_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssVisibility_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_der$descriptor() {
        return NTCIPEssVisibility_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_der$handle() {
        return NTCIPEssVisibility_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_der$address() {
        return NTCIPEssVisibility_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssVisibility_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_decode_xer$descriptor() {
        return NTCIPEssVisibility_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_decode_xer$handle() {
        return NTCIPEssVisibility_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_xer$address() {
        return NTCIPEssVisibility_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssVisibility_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_xer$descriptor() {
        return NTCIPEssVisibility_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_xer$handle() {
        return NTCIPEssVisibility_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_xer$address() {
        return NTCIPEssVisibility_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssVisibility_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_jer$descriptor() {
        return NTCIPEssVisibility_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_jer$handle() {
        return NTCIPEssVisibility_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_jer$address() {
        return NTCIPEssVisibility_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssVisibility_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_decode_oer$descriptor() {
        return NTCIPEssVisibility_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_decode_oer$handle() {
        return NTCIPEssVisibility_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_oer$address() {
        return NTCIPEssVisibility_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssVisibility_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_oer$descriptor() {
        return NTCIPEssVisibility_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_oer$handle() {
        return NTCIPEssVisibility_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_oer$address() {
        return NTCIPEssVisibility_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibility_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_decode_uper$descriptor() {
        return NTCIPEssVisibility_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_decode_uper$handle() {
        return NTCIPEssVisibility_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_uper$address() {
        return NTCIPEssVisibility_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibility_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_uper$descriptor() {
        return NTCIPEssVisibility_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_uper$handle() {
        return NTCIPEssVisibility_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_uper$address() {
        return NTCIPEssVisibility_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibility_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_decode_aper$descriptor() {
        return NTCIPEssVisibility_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_decode_aper$handle() {
        return NTCIPEssVisibility_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_aper$address() {
        return NTCIPEssVisibility_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibility_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibility_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibility_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibility_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibility_encode_aper$descriptor() {
        return NTCIPEssVisibility_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibility_encode_aper$handle() {
        return NTCIPEssVisibility_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_aper$address() {
        return NTCIPEssVisibility_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibility_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibility_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibility_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibility_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_SituationalContainer$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SituationalContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SituationalContainer
     * }
     */
    public static GroupLayout asn_DEF_SituationalContainer$layout() {
        return asn_DEF_SituationalContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SituationalContainer
     * }
     */
    public static MemorySegment asn_DEF_SituationalContainer() {
        return asn_DEF_SituationalContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SituationalContainer
     * }
     */
    public static void asn_DEF_SituationalContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SituationalContainer$constants.SEGMENT, 0L, asn_DEF_SituationalContainer$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_SituationalContainer_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_SituationalContainer_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SituationalContainer_specs_1
     * }
     */
    public static GroupLayout asn_SPC_SituationalContainer_specs_1$layout() {
        return asn_SPC_SituationalContainer_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SituationalContainer_specs_1
     * }
     */
    public static MemorySegment asn_SPC_SituationalContainer_specs_1() {
        return asn_SPC_SituationalContainer_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SituationalContainer_specs_1
     * }
     */
    public static void asn_SPC_SituationalContainer_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_SituationalContainer_specs_1$constants.SEGMENT, 0L, asn_SPC_SituationalContainer_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_SituationalContainer_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_SituationalContainer_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_SituationalContainer_1$layout() {
        return asn_MBR_SituationalContainer_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static long[] asn_MBR_SituationalContainer_1$dimensions() {
        return asn_MBR_SituationalContainer_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static MemorySegment asn_MBR_SituationalContainer_1() {
        return asn_MBR_SituationalContainer_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static void asn_MBR_SituationalContainer_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SituationalContainer_1$constants.SEGMENT, 0L, asn_MBR_SituationalContainer_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static MemorySegment asn_MBR_SituationalContainer_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_SituationalContainer_1$constants.HANDLE.invokeExact(asn_MBR_SituationalContainer_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SituationalContainer_1[5]
     * }
     */
    public static void asn_MBR_SituationalContainer_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SituationalContainer_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Obstructions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Obstructions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Obstructions
     * }
     */
    public static GroupLayout asn_DEF_Obstructions$layout() {
        return asn_DEF_Obstructions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Obstructions
     * }
     */
    public static MemorySegment asn_DEF_Obstructions() {
        return asn_DEF_Obstructions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Obstructions
     * }
     */
    public static void asn_DEF_Obstructions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Obstructions$constants.SEGMENT, 0L, asn_DEF_Obstructions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Obstructions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Obstructions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Obstructions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_Obstructions_specs_1$layout() {
        return asn_SPC_Obstructions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Obstructions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_Obstructions_specs_1() {
        return asn_SPC_Obstructions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Obstructions_specs_1
     * }
     */
    public static void asn_SPC_Obstructions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Obstructions_specs_1$constants.SEGMENT, 0L, asn_SPC_Obstructions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Obstructions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Obstructions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_Obstructions_1$layout() {
        return asn_MBR_Obstructions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static long[] asn_MBR_Obstructions_1$dimensions() {
        return asn_MBR_Obstructions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static MemorySegment asn_MBR_Obstructions_1() {
        return asn_MBR_Obstructions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static void asn_MBR_Obstructions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Obstructions_1$constants.SEGMENT, 0L, asn_MBR_Obstructions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static MemorySegment asn_MBR_Obstructions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_Obstructions_1$constants.HANDLE.invokeExact(asn_MBR_Obstructions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Obstructions_1[2]
     * }
     */
    public static void asn_MBR_Obstructions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Obstructions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int ContentContainer_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_NOTHING = 0
     * }
     */
    public static int ContentContainer_PR_NOTHING() {
        return ContentContainer_PR_NOTHING;
    }
    private static final int ContentContainer_PR_rszContainer = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_rszContainer = 1
     * }
     */
    public static int ContentContainer_PR_rszContainer() {
        return ContentContainer_PR_rszContainer;
    }
    private static final int ContentContainer_PR_laneClosureContainer = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_laneClosureContainer = 2
     * }
     */
    public static int ContentContainer_PR_laneClosureContainer() {
        return ContentContainer_PR_laneClosureContainer;
    }
    private static final int ContentContainer_PR_curveContainer = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_curveContainer = 3
     * }
     */
    public static int ContentContainer_PR_curveContainer() {
        return ContentContainer_PR_curveContainer;
    }
    private static final int ContentContainer_PR_dynamicInfoContainer = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_dynamicInfoContainer = 4
     * }
     */
    public static int ContentContainer_PR_dynamicInfoContainer() {
        return ContentContainer_PR_dynamicInfoContainer;
    }
    private static final int ContentContainer_PR_incidentsContainer = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_incidentsContainer = 5
     * }
     */
    public static int ContentContainer_PR_incidentsContainer() {
        return ContentContainer_PR_incidentsContainer;
    }
    private static final int ContentContainer_PR_situationalContainer = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ContentContainer_PR.ContentContainer_PR_situationalContainer = 6
     * }
     */
    public static int ContentContainer_PR_situationalContainer() {
        return ContentContainer_PR_situationalContainer;
    }

    private static class asn_DEF_ContentContainer$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ContentContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ContentContainer
     * }
     */
    public static GroupLayout asn_DEF_ContentContainer$layout() {
        return asn_DEF_ContentContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ContentContainer
     * }
     */
    public static MemorySegment asn_DEF_ContentContainer() {
        return asn_DEF_ContentContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ContentContainer
     * }
     */
    public static void asn_DEF_ContentContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ContentContainer$constants.SEGMENT, 0L, asn_DEF_ContentContainer$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ContentContainer_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ContentContainer_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ContentContainer_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ContentContainer_specs_1$layout() {
        return asn_SPC_ContentContainer_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ContentContainer_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ContentContainer_specs_1() {
        return asn_SPC_ContentContainer_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ContentContainer_specs_1
     * }
     */
    public static void asn_SPC_ContentContainer_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ContentContainer_specs_1$constants.SEGMENT, 0L, asn_SPC_ContentContainer_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ContentContainer_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ContentContainer_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_ContentContainer_1$layout() {
        return asn_MBR_ContentContainer_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static long[] asn_MBR_ContentContainer_1$dimensions() {
        return asn_MBR_ContentContainer_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static MemorySegment asn_MBR_ContentContainer_1() {
        return asn_MBR_ContentContainer_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static void asn_MBR_ContentContainer_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ContentContainer_1$constants.SEGMENT, 0L, asn_MBR_ContentContainer_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static MemorySegment asn_MBR_ContentContainer_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ContentContainer_1$constants.HANDLE.invokeExact(asn_MBR_ContentContainer_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ContentContainer_1[6]
     * }
     */
    public static void asn_MBR_ContentContainer_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ContentContainer_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ContentContainer_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ContentContainer_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ContentContainer_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ContentContainer_constr_1$layout() {
        return asn_PER_type_ContentContainer_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ContentContainer_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ContentContainer_constr_1() {
        return asn_PER_type_ContentContainer_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ContentContainer_constr_1
     * }
     */
    public static void asn_PER_type_ContentContainer_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ContentContainer_constr_1$constants.SEGMENT, 0L, asn_PER_type_ContentContainer_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RwmSnapShot$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RwmSnapShot").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RwmSnapShot
     * }
     */
    public static GroupLayout asn_DEF_RwmSnapShot$layout() {
        return asn_DEF_RwmSnapShot$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RwmSnapShot
     * }
     */
    public static MemorySegment asn_DEF_RwmSnapShot() {
        return asn_DEF_RwmSnapShot$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RwmSnapShot
     * }
     */
    public static void asn_DEF_RwmSnapShot(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RwmSnapShot$constants.SEGMENT, 0L, asn_DEF_RwmSnapShot$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RwmSnapShot_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RwmSnapShot_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RwmSnapShot_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RwmSnapShot_specs_1$layout() {
        return asn_SPC_RwmSnapShot_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RwmSnapShot_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RwmSnapShot_specs_1() {
        return asn_SPC_RwmSnapShot_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RwmSnapShot_specs_1
     * }
     */
    public static void asn_SPC_RwmSnapShot_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RwmSnapShot_specs_1$constants.SEGMENT, 0L, asn_SPC_RwmSnapShot_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RwmSnapShot_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RwmSnapShot_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_RwmSnapShot_1$layout() {
        return asn_MBR_RwmSnapShot_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static long[] asn_MBR_RwmSnapShot_1$dimensions() {
        return asn_MBR_RwmSnapShot_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RwmSnapShot_1() {
        return asn_MBR_RwmSnapShot_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static void asn_MBR_RwmSnapShot_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RwmSnapShot_1$constants.SEGMENT, 0L, asn_MBR_RwmSnapShot_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RwmSnapShot_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RwmSnapShot_1$constants.HANDLE.invokeExact(asn_MBR_RwmSnapShot_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RwmSnapShot_1[4]
     * }
     */
    public static void asn_MBR_RwmSnapShot_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RwmSnapShot_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_NtcipEssData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipEssData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipEssData
     * }
     */
    public static GroupLayout asn_DEF_NtcipEssData$layout() {
        return asn_DEF_NtcipEssData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipEssData
     * }
     */
    public static MemorySegment asn_DEF_NtcipEssData() {
        return asn_DEF_NtcipEssData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipEssData
     * }
     */
    public static void asn_DEF_NtcipEssData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipEssData$constants.SEGMENT, 0L, asn_DEF_NtcipEssData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipEssData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipEssData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipEssData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipEssData_specs_1$layout() {
        return asn_SPC_NtcipEssData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipEssData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipEssData_specs_1() {
        return asn_SPC_NtcipEssData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipEssData_specs_1
     * }
     */
    public static void asn_SPC_NtcipEssData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipEssData_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipEssData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipEssData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(11, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipEssData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 11 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipEssData_1$layout() {
        return asn_MBR_NtcipEssData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static long[] asn_MBR_NtcipEssData_1$dimensions() {
        return asn_MBR_NtcipEssData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static MemorySegment asn_MBR_NtcipEssData_1() {
        return asn_MBR_NtcipEssData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static void asn_MBR_NtcipEssData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipEssData_1$constants.SEGMENT, 0L, asn_MBR_NtcipEssData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static MemorySegment asn_MBR_NtcipEssData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipEssData_1$constants.HANDLE.invokeExact(asn_MBR_NtcipEssData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipEssData_1[11]
     * }
     */
    public static void asn_MBR_NtcipEssData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipEssData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssAirTemperature_t
     * }
     */
    public static final OfLong NTCIPEssAirTemperature_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssAirTemperature_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssAirTemperature_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssAirTemperature_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssAirTemperature_constr_1$layout() {
        return asn_PER_type_NTCIPEssAirTemperature_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssAirTemperature_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssAirTemperature_constr_1() {
        return asn_PER_type_NTCIPEssAirTemperature_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssAirTemperature_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssAirTemperature_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssAirTemperature_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssAirTemperature_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssAirTemperature$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssAirTemperature").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssAirTemperature
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssAirTemperature$layout() {
        return asn_DEF_NTCIPEssAirTemperature$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssAirTemperature
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssAirTemperature() {
        return asn_DEF_NTCIPEssAirTemperature$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssAirTemperature
     * }
     */
    public static void asn_DEF_NTCIPEssAirTemperature(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssAirTemperature$constants.SEGMENT, 0L, asn_DEF_NTCIPEssAirTemperature$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssAirTemperature_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_free$descriptor() {
        return NTCIPEssAirTemperature_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_free$handle() {
        return NTCIPEssAirTemperature_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_free$address() {
        return NTCIPEssAirTemperature_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssAirTemperature_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssAirTemperature_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_print$descriptor() {
        return NTCIPEssAirTemperature_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_print$handle() {
        return NTCIPEssAirTemperature_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_print$address() {
        return NTCIPEssAirTemperature_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssAirTemperature_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssAirTemperature_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_constraint$descriptor() {
        return NTCIPEssAirTemperature_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_constraint$handle() {
        return NTCIPEssAirTemperature_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_constraint$address() {
        return NTCIPEssAirTemperature_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssAirTemperature_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssAirTemperature_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_decode_ber$descriptor() {
        return NTCIPEssAirTemperature_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_decode_ber$handle() {
        return NTCIPEssAirTemperature_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_ber$address() {
        return NTCIPEssAirTemperature_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssAirTemperature_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_der$descriptor() {
        return NTCIPEssAirTemperature_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_der$handle() {
        return NTCIPEssAirTemperature_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_der$address() {
        return NTCIPEssAirTemperature_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssAirTemperature_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_decode_xer$descriptor() {
        return NTCIPEssAirTemperature_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_decode_xer$handle() {
        return NTCIPEssAirTemperature_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_xer$address() {
        return NTCIPEssAirTemperature_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssAirTemperature_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_xer$descriptor() {
        return NTCIPEssAirTemperature_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_xer$handle() {
        return NTCIPEssAirTemperature_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_xer$address() {
        return NTCIPEssAirTemperature_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssAirTemperature_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_jer$descriptor() {
        return NTCIPEssAirTemperature_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_jer$handle() {
        return NTCIPEssAirTemperature_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_jer$address() {
        return NTCIPEssAirTemperature_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssAirTemperature_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_decode_oer$descriptor() {
        return NTCIPEssAirTemperature_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_decode_oer$handle() {
        return NTCIPEssAirTemperature_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_oer$address() {
        return NTCIPEssAirTemperature_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssAirTemperature_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_oer$descriptor() {
        return NTCIPEssAirTemperature_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_oer$handle() {
        return NTCIPEssAirTemperature_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_oer$address() {
        return NTCIPEssAirTemperature_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssAirTemperature_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_decode_uper$descriptor() {
        return NTCIPEssAirTemperature_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_decode_uper$handle() {
        return NTCIPEssAirTemperature_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_uper$address() {
        return NTCIPEssAirTemperature_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssAirTemperature_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_uper$descriptor() {
        return NTCIPEssAirTemperature_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_uper$handle() {
        return NTCIPEssAirTemperature_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_uper$address() {
        return NTCIPEssAirTemperature_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssAirTemperature_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_decode_aper$descriptor() {
        return NTCIPEssAirTemperature_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_decode_aper$handle() {
        return NTCIPEssAirTemperature_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_aper$address() {
        return NTCIPEssAirTemperature_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssAirTemperature_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssAirTemperature_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssAirTemperature_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssAirTemperature_encode_aper$descriptor() {
        return NTCIPEssAirTemperature_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssAirTemperature_encode_aper$handle() {
        return NTCIPEssAirTemperature_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_aper$address() {
        return NTCIPEssAirTemperature_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssAirTemperature_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssAirTemperature_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssAirTemperature_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TemperatureMeasurementStdDev_t
     * }
     */
    public static final OfLong TemperatureMeasurementStdDev_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TemperatureMeasurementStdDev_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TemperatureMeasurementStdDev_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TemperatureMeasurementStdDev_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TemperatureMeasurementStdDev_constr_1$layout() {
        return asn_PER_type_TemperatureMeasurementStdDev_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TemperatureMeasurementStdDev_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TemperatureMeasurementStdDev_constr_1() {
        return asn_PER_type_TemperatureMeasurementStdDev_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TemperatureMeasurementStdDev_constr_1
     * }
     */
    public static void asn_PER_type_TemperatureMeasurementStdDev_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TemperatureMeasurementStdDev_constr_1$constants.SEGMENT, 0L, asn_PER_type_TemperatureMeasurementStdDev_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TemperatureMeasurementStdDev$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TemperatureMeasurementStdDev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TemperatureMeasurementStdDev
     * }
     */
    public static GroupLayout asn_DEF_TemperatureMeasurementStdDev$layout() {
        return asn_DEF_TemperatureMeasurementStdDev$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TemperatureMeasurementStdDev
     * }
     */
    public static MemorySegment asn_DEF_TemperatureMeasurementStdDev() {
        return asn_DEF_TemperatureMeasurementStdDev$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TemperatureMeasurementStdDev
     * }
     */
    public static void asn_DEF_TemperatureMeasurementStdDev(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TemperatureMeasurementStdDev$constants.SEGMENT, 0L, asn_DEF_TemperatureMeasurementStdDev$constants.LAYOUT.byteSize());
    }

    private static class TemperatureMeasurementStdDev_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TemperatureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_free$descriptor() {
        return TemperatureMeasurementStdDev_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TemperatureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_free$handle() {
        return TemperatureMeasurementStdDev_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TemperatureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_free$address() {
        return TemperatureMeasurementStdDev_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TemperatureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TemperatureMeasurementStdDev_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TemperatureMeasurementStdDev_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_print$descriptor() {
        return TemperatureMeasurementStdDev_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_print$handle() {
        return TemperatureMeasurementStdDev_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_print$address() {
        return TemperatureMeasurementStdDev_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TemperatureMeasurementStdDev_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TemperatureMeasurementStdDev_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_constraint$descriptor() {
        return TemperatureMeasurementStdDev_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_constraint$handle() {
        return TemperatureMeasurementStdDev_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_constraint$address() {
        return TemperatureMeasurementStdDev_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TemperatureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TemperatureMeasurementStdDev_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TemperatureMeasurementStdDev_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_decode_ber$descriptor() {
        return TemperatureMeasurementStdDev_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_decode_ber$handle() {
        return TemperatureMeasurementStdDev_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_ber$address() {
        return TemperatureMeasurementStdDev_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TemperatureMeasurementStdDev_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_der$descriptor() {
        return TemperatureMeasurementStdDev_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_der$handle() {
        return TemperatureMeasurementStdDev_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_der$address() {
        return TemperatureMeasurementStdDev_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TemperatureMeasurementStdDev_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_decode_xer$descriptor() {
        return TemperatureMeasurementStdDev_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_decode_xer$handle() {
        return TemperatureMeasurementStdDev_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_xer$address() {
        return TemperatureMeasurementStdDev_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TemperatureMeasurementStdDev_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_xer$descriptor() {
        return TemperatureMeasurementStdDev_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_xer$handle() {
        return TemperatureMeasurementStdDev_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_xer$address() {
        return TemperatureMeasurementStdDev_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TemperatureMeasurementStdDev_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_jer$descriptor() {
        return TemperatureMeasurementStdDev_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_jer$handle() {
        return TemperatureMeasurementStdDev_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_jer$address() {
        return TemperatureMeasurementStdDev_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TemperatureMeasurementStdDev_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_decode_oer$descriptor() {
        return TemperatureMeasurementStdDev_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_decode_oer$handle() {
        return TemperatureMeasurementStdDev_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_oer$address() {
        return TemperatureMeasurementStdDev_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TemperatureMeasurementStdDev_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_oer$descriptor() {
        return TemperatureMeasurementStdDev_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_oer$handle() {
        return TemperatureMeasurementStdDev_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_oer$address() {
        return TemperatureMeasurementStdDev_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TemperatureMeasurementStdDev_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_decode_uper$descriptor() {
        return TemperatureMeasurementStdDev_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_decode_uper$handle() {
        return TemperatureMeasurementStdDev_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_uper$address() {
        return TemperatureMeasurementStdDev_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TemperatureMeasurementStdDev_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_uper$descriptor() {
        return TemperatureMeasurementStdDev_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_uper$handle() {
        return TemperatureMeasurementStdDev_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_uper$address() {
        return TemperatureMeasurementStdDev_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TemperatureMeasurementStdDev_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_decode_aper$descriptor() {
        return TemperatureMeasurementStdDev_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_decode_aper$handle() {
        return TemperatureMeasurementStdDev_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_aper$address() {
        return TemperatureMeasurementStdDev_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TemperatureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TemperatureMeasurementStdDev_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TemperatureMeasurementStdDev_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TemperatureMeasurementStdDev_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TemperatureMeasurementStdDev_encode_aper$descriptor() {
        return TemperatureMeasurementStdDev_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TemperatureMeasurementStdDev_encode_aper$handle() {
        return TemperatureMeasurementStdDev_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_aper$address() {
        return TemperatureMeasurementStdDev_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TemperatureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TemperatureMeasurementStdDev_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TemperatureMeasurementStdDev_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TemperatureMeasurementStdDev_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssTemperatureSensorHeight_t
     * }
     */
    public static final OfLong NTCIPEssTemperatureSensorHeight_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$layout() {
        return asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1() {
        return asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssTemperatureSensorHeight_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssTemperatureSensorHeight$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssTemperatureSensorHeight").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTemperatureSensorHeight
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssTemperatureSensorHeight$layout() {
        return asn_DEF_NTCIPEssTemperatureSensorHeight$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTemperatureSensorHeight
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssTemperatureSensorHeight() {
        return asn_DEF_NTCIPEssTemperatureSensorHeight$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTemperatureSensorHeight
     * }
     */
    public static void asn_DEF_NTCIPEssTemperatureSensorHeight(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssTemperatureSensorHeight$constants.SEGMENT, 0L, asn_DEF_NTCIPEssTemperatureSensorHeight$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssTemperatureSensorHeight_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssTemperatureSensorHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_free$descriptor() {
        return NTCIPEssTemperatureSensorHeight_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssTemperatureSensorHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_free$handle() {
        return NTCIPEssTemperatureSensorHeight_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssTemperatureSensorHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_free$address() {
        return NTCIPEssTemperatureSensorHeight_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssTemperatureSensorHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssTemperatureSensorHeight_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssTemperatureSensorHeight_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_print$descriptor() {
        return NTCIPEssTemperatureSensorHeight_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_print$handle() {
        return NTCIPEssTemperatureSensorHeight_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_print$address() {
        return NTCIPEssTemperatureSensorHeight_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssTemperatureSensorHeight_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTemperatureSensorHeight_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_constraint$descriptor() {
        return NTCIPEssTemperatureSensorHeight_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_constraint$handle() {
        return NTCIPEssTemperatureSensorHeight_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_constraint$address() {
        return NTCIPEssTemperatureSensorHeight_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTemperatureSensorHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssTemperatureSensorHeight_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTemperatureSensorHeight_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_decode_ber$descriptor() {
        return NTCIPEssTemperatureSensorHeight_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_decode_ber$handle() {
        return NTCIPEssTemperatureSensorHeight_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_ber$address() {
        return NTCIPEssTemperatureSensorHeight_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssTemperatureSensorHeight_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_der$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_der$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_der$address() {
        return NTCIPEssTemperatureSensorHeight_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_decode_xer$descriptor() {
        return NTCIPEssTemperatureSensorHeight_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_decode_xer$handle() {
        return NTCIPEssTemperatureSensorHeight_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_xer$address() {
        return NTCIPEssTemperatureSensorHeight_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTemperatureSensorHeight_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_xer$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_xer$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_xer$address() {
        return NTCIPEssTemperatureSensorHeight_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_jer$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_jer$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_jer$address() {
        return NTCIPEssTemperatureSensorHeight_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_decode_oer$descriptor() {
        return NTCIPEssTemperatureSensorHeight_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_decode_oer$handle() {
        return NTCIPEssTemperatureSensorHeight_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_oer$address() {
        return NTCIPEssTemperatureSensorHeight_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTemperatureSensorHeight_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_oer$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_oer$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_oer$address() {
        return NTCIPEssTemperatureSensorHeight_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_decode_uper$descriptor() {
        return NTCIPEssTemperatureSensorHeight_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_decode_uper$handle() {
        return NTCIPEssTemperatureSensorHeight_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_uper$address() {
        return NTCIPEssTemperatureSensorHeight_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTemperatureSensorHeight_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_uper$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_uper$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_uper$address() {
        return NTCIPEssTemperatureSensorHeight_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_decode_aper$descriptor() {
        return NTCIPEssTemperatureSensorHeight_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_decode_aper$handle() {
        return NTCIPEssTemperatureSensorHeight_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_aper$address() {
        return NTCIPEssTemperatureSensorHeight_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTemperatureSensorHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTemperatureSensorHeight_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTemperatureSensorHeight_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTemperatureSensorHeight_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTemperatureSensorHeight_encode_aper$descriptor() {
        return NTCIPEssTemperatureSensorHeight_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTemperatureSensorHeight_encode_aper$handle() {
        return NTCIPEssTemperatureSensorHeight_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_aper$address() {
        return NTCIPEssTemperatureSensorHeight_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTemperatureSensorHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTemperatureSensorHeight_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTemperatureSensorHeight_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTemperatureSensorHeight_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipAirTemperature$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipAirTemperature").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAirTemperature
     * }
     */
    public static GroupLayout asn_DEF_NtcipAirTemperature$layout() {
        return asn_DEF_NtcipAirTemperature$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAirTemperature
     * }
     */
    public static MemorySegment asn_DEF_NtcipAirTemperature() {
        return asn_DEF_NtcipAirTemperature$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAirTemperature
     * }
     */
    public static void asn_DEF_NtcipAirTemperature(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipAirTemperature$constants.SEGMENT, 0L, asn_DEF_NtcipAirTemperature$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipAirTemperature_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipAirTemperature_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAirTemperature_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipAirTemperature_specs_1$layout() {
        return asn_SPC_NtcipAirTemperature_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAirTemperature_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipAirTemperature_specs_1() {
        return asn_SPC_NtcipAirTemperature_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAirTemperature_specs_1
     * }
     */
    public static void asn_SPC_NtcipAirTemperature_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipAirTemperature_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipAirTemperature_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipAirTemperature_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipAirTemperature_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipAirTemperature_1$layout() {
        return asn_MBR_NtcipAirTemperature_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static long[] asn_MBR_NtcipAirTemperature_1$dimensions() {
        return asn_MBR_NtcipAirTemperature_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static MemorySegment asn_MBR_NtcipAirTemperature_1() {
        return asn_MBR_NtcipAirTemperature_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static void asn_MBR_NtcipAirTemperature_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipAirTemperature_1$constants.SEGMENT, 0L, asn_MBR_NtcipAirTemperature_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static MemorySegment asn_MBR_NtcipAirTemperature_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipAirTemperature_1$constants.HANDLE.invokeExact(asn_MBR_NtcipAirTemperature_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAirTemperature_1[3]
     * }
     */
    public static void asn_MBR_NtcipAirTemperature_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipAirTemperature_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPressureSensorAtmosphericPressure_t
     * }
     */
    public static final OfLong NTCIPEssPressureSensorAtmosphericPressure_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$layout() {
        return asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1() {
        return asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPressureSensorAtmosphericPressure_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPressureSensorAtmosphericPressure").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPressureSensorAtmosphericPressure
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$layout() {
        return asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPressureSensorAtmosphericPressure
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPressureSensorAtmosphericPressure() {
        return asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPressureSensorAtmosphericPressure
     * }
     */
    public static void asn_DEF_NTCIPEssPressureSensorAtmosphericPressure(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPressureSensorAtmosphericPressure$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPressureSensorAtmosphericPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_free$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPressureSensorAtmosphericPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_free$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPressureSensorAtmosphericPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_free$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPressureSensorAtmosphericPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPressureSensorAtmosphericPressure_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_print$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_print$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_print$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPressureSensorAtmosphericPressure_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_constraint$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_constraint$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_constraint$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPressureSensorAtmosphericPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPressureSensorAtmosphericPressure_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_decode_ber$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_decode_ber$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_ber$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_der$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_der$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_der$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_decode_xer$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_decode_xer$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_xer$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_xer$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_xer$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_xer$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_jer$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_jer$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_jer$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_decode_oer$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_decode_oer$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_oer$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_oer$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_oer$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_oer$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_decode_uper$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_decode_uper$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_uper$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_uper$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_uper$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_uper$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_decode_aper$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_decode_aper$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_aper$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPressureSensorAtmosphericPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPressureSensorAtmosphericPressure_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPressureSensorAtmosphericPressure_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPressureSensorAtmosphericPressure_encode_aper$descriptor() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPressureSensorAtmosphericPressure_encode_aper$handle() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_aper$address() {
        return NTCIPEssPressureSensorAtmosphericPressure_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPressureSensorAtmosphericPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPressureSensorAtmosphericPressure_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPressureSensorAtmosphericPressure_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPressureSensorAtmosphericPressure_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long AtmosPressureMeasurementStdDev_t
     * }
     */
    public static final OfLong AtmosPressureMeasurementStdDev_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_AtmosPressureMeasurementStdDev_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AtmosPressureMeasurementStdDev_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$layout() {
        return asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AtmosPressureMeasurementStdDev_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_AtmosPressureMeasurementStdDev_constr_1() {
        return asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AtmosPressureMeasurementStdDev_constr_1
     * }
     */
    public static void asn_PER_type_AtmosPressureMeasurementStdDev_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$constants.SEGMENT, 0L, asn_PER_type_AtmosPressureMeasurementStdDev_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_AtmosPressureMeasurementStdDev$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AtmosPressureMeasurementStdDev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AtmosPressureMeasurementStdDev
     * }
     */
    public static GroupLayout asn_DEF_AtmosPressureMeasurementStdDev$layout() {
        return asn_DEF_AtmosPressureMeasurementStdDev$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AtmosPressureMeasurementStdDev
     * }
     */
    public static MemorySegment asn_DEF_AtmosPressureMeasurementStdDev() {
        return asn_DEF_AtmosPressureMeasurementStdDev$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AtmosPressureMeasurementStdDev
     * }
     */
    public static void asn_DEF_AtmosPressureMeasurementStdDev(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AtmosPressureMeasurementStdDev$constants.SEGMENT, 0L, asn_DEF_AtmosPressureMeasurementStdDev$constants.LAYOUT.byteSize());
    }

    private static class AtmosPressureMeasurementStdDev_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AtmosPressureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_free$descriptor() {
        return AtmosPressureMeasurementStdDev_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AtmosPressureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_free$handle() {
        return AtmosPressureMeasurementStdDev_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AtmosPressureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_free$address() {
        return AtmosPressureMeasurementStdDev_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AtmosPressureMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void AtmosPressureMeasurementStdDev_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = AtmosPressureMeasurementStdDev_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_print$descriptor() {
        return AtmosPressureMeasurementStdDev_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_print$handle() {
        return AtmosPressureMeasurementStdDev_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_print$address() {
        return AtmosPressureMeasurementStdDev_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int AtmosPressureMeasurementStdDev_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AtmosPressureMeasurementStdDev_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_constraint$descriptor() {
        return AtmosPressureMeasurementStdDev_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_constraint$handle() {
        return AtmosPressureMeasurementStdDev_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_constraint$address() {
        return AtmosPressureMeasurementStdDev_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AtmosPressureMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int AtmosPressureMeasurementStdDev_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AtmosPressureMeasurementStdDev_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_decode_ber$descriptor() {
        return AtmosPressureMeasurementStdDev_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_decode_ber$handle() {
        return AtmosPressureMeasurementStdDev_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_ber$address() {
        return AtmosPressureMeasurementStdDev_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = AtmosPressureMeasurementStdDev_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_der$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_der$handle() {
        return AtmosPressureMeasurementStdDev_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_der$address() {
        return AtmosPressureMeasurementStdDev_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_decode_xer$descriptor() {
        return AtmosPressureMeasurementStdDev_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_decode_xer$handle() {
        return AtmosPressureMeasurementStdDev_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_xer$address() {
        return AtmosPressureMeasurementStdDev_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AtmosPressureMeasurementStdDev_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_xer$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_xer$handle() {
        return AtmosPressureMeasurementStdDev_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_xer$address() {
        return AtmosPressureMeasurementStdDev_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_jer$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_jer$handle() {
        return AtmosPressureMeasurementStdDev_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_jer$address() {
        return AtmosPressureMeasurementStdDev_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_decode_oer$descriptor() {
        return AtmosPressureMeasurementStdDev_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_decode_oer$handle() {
        return AtmosPressureMeasurementStdDev_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_oer$address() {
        return AtmosPressureMeasurementStdDev_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AtmosPressureMeasurementStdDev_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_oer$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_oer$handle() {
        return AtmosPressureMeasurementStdDev_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_oer$address() {
        return AtmosPressureMeasurementStdDev_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_decode_uper$descriptor() {
        return AtmosPressureMeasurementStdDev_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_decode_uper$handle() {
        return AtmosPressureMeasurementStdDev_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_uper$address() {
        return AtmosPressureMeasurementStdDev_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AtmosPressureMeasurementStdDev_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_uper$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_uper$handle() {
        return AtmosPressureMeasurementStdDev_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_uper$address() {
        return AtmosPressureMeasurementStdDev_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_decode_aper$descriptor() {
        return AtmosPressureMeasurementStdDev_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_decode_aper$handle() {
        return AtmosPressureMeasurementStdDev_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_aper$address() {
        return AtmosPressureMeasurementStdDev_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AtmosPressureMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AtmosPressureMeasurementStdDev_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AtmosPressureMeasurementStdDev_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AtmosPressureMeasurementStdDev_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AtmosPressureMeasurementStdDev_encode_aper$descriptor() {
        return AtmosPressureMeasurementStdDev_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AtmosPressureMeasurementStdDev_encode_aper$handle() {
        return AtmosPressureMeasurementStdDev_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_aper$address() {
        return AtmosPressureMeasurementStdDev_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AtmosPressureMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AtmosPressureMeasurementStdDev_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AtmosPressureMeasurementStdDev_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AtmosPressureMeasurementStdDev_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipAtmosphericPressure$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipAtmosphericPressure").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAtmosphericPressure
     * }
     */
    public static GroupLayout asn_DEF_NtcipAtmosphericPressure$layout() {
        return asn_DEF_NtcipAtmosphericPressure$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAtmosphericPressure
     * }
     */
    public static MemorySegment asn_DEF_NtcipAtmosphericPressure() {
        return asn_DEF_NtcipAtmosphericPressure$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipAtmosphericPressure
     * }
     */
    public static void asn_DEF_NtcipAtmosphericPressure(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipAtmosphericPressure$constants.SEGMENT, 0L, asn_DEF_NtcipAtmosphericPressure$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipAtmosphericPressure_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipAtmosphericPressure_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAtmosphericPressure_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipAtmosphericPressure_specs_1$layout() {
        return asn_SPC_NtcipAtmosphericPressure_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAtmosphericPressure_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipAtmosphericPressure_specs_1() {
        return asn_SPC_NtcipAtmosphericPressure_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipAtmosphericPressure_specs_1
     * }
     */
    public static void asn_SPC_NtcipAtmosphericPressure_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipAtmosphericPressure_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipAtmosphericPressure_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipAtmosphericPressure_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipAtmosphericPressure_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipAtmosphericPressure_1$layout() {
        return asn_MBR_NtcipAtmosphericPressure_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static long[] asn_MBR_NtcipAtmosphericPressure_1$dimensions() {
        return asn_MBR_NtcipAtmosphericPressure_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipAtmosphericPressure_1() {
        return asn_MBR_NtcipAtmosphericPressure_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static void asn_MBR_NtcipAtmosphericPressure_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipAtmosphericPressure_1$constants.SEGMENT, 0L, asn_MBR_NtcipAtmosphericPressure_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipAtmosphericPressure_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipAtmosphericPressure_1$constants.HANDLE.invokeExact(asn_MBR_NtcipAtmosphericPressure_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipAtmosphericPressure_1[2]
     * }
     */
    public static void asn_MBR_NtcipAtmosphericPressure_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipAtmosphericPressure_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorAvgSpeed_t
     * }
     */
    public static final OfLong NTCIPWindSensorAvgSpeed_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1() {
        return asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorAvgSpeed_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorAvgSpeed$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorAvgSpeed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgSpeed
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorAvgSpeed$layout() {
        return asn_DEF_NTCIPWindSensorAvgSpeed$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgSpeed
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorAvgSpeed() {
        return asn_DEF_NTCIPWindSensorAvgSpeed$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgSpeed
     * }
     */
    public static void asn_DEF_NTCIPWindSensorAvgSpeed(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorAvgSpeed$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorAvgSpeed$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorAvgSpeed_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_free$descriptor() {
        return NTCIPWindSensorAvgSpeed_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_free$handle() {
        return NTCIPWindSensorAvgSpeed_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_free$address() {
        return NTCIPWindSensorAvgSpeed_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorAvgSpeed_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorAvgSpeed_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_print$descriptor() {
        return NTCIPWindSensorAvgSpeed_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_print$handle() {
        return NTCIPWindSensorAvgSpeed_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_print$address() {
        return NTCIPWindSensorAvgSpeed_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorAvgSpeed_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgSpeed_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_constraint$descriptor() {
        return NTCIPWindSensorAvgSpeed_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_constraint$handle() {
        return NTCIPWindSensorAvgSpeed_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_constraint$address() {
        return NTCIPWindSensorAvgSpeed_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorAvgSpeed_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgSpeed_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_decode_ber$descriptor() {
        return NTCIPWindSensorAvgSpeed_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_decode_ber$handle() {
        return NTCIPWindSensorAvgSpeed_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_ber$address() {
        return NTCIPWindSensorAvgSpeed_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorAvgSpeed_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_der$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_der$handle() {
        return NTCIPWindSensorAvgSpeed_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_der$address() {
        return NTCIPWindSensorAvgSpeed_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_decode_xer$descriptor() {
        return NTCIPWindSensorAvgSpeed_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_decode_xer$handle() {
        return NTCIPWindSensorAvgSpeed_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_xer$address() {
        return NTCIPWindSensorAvgSpeed_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorAvgSpeed_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_xer$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_xer$handle() {
        return NTCIPWindSensorAvgSpeed_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_xer$address() {
        return NTCIPWindSensorAvgSpeed_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_jer$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_jer$handle() {
        return NTCIPWindSensorAvgSpeed_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_jer$address() {
        return NTCIPWindSensorAvgSpeed_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_decode_oer$descriptor() {
        return NTCIPWindSensorAvgSpeed_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_decode_oer$handle() {
        return NTCIPWindSensorAvgSpeed_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_oer$address() {
        return NTCIPWindSensorAvgSpeed_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorAvgSpeed_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_oer$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_oer$handle() {
        return NTCIPWindSensorAvgSpeed_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_oer$address() {
        return NTCIPWindSensorAvgSpeed_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_decode_uper$descriptor() {
        return NTCIPWindSensorAvgSpeed_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_decode_uper$handle() {
        return NTCIPWindSensorAvgSpeed_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_uper$address() {
        return NTCIPWindSensorAvgSpeed_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgSpeed_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_uper$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_uper$handle() {
        return NTCIPWindSensorAvgSpeed_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_uper$address() {
        return NTCIPWindSensorAvgSpeed_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_decode_aper$descriptor() {
        return NTCIPWindSensorAvgSpeed_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_decode_aper$handle() {
        return NTCIPWindSensorAvgSpeed_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_aper$address() {
        return NTCIPWindSensorAvgSpeed_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgSpeed_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgSpeed_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgSpeed_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgSpeed_encode_aper$descriptor() {
        return NTCIPWindSensorAvgSpeed_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgSpeed_encode_aper$handle() {
        return NTCIPWindSensorAvgSpeed_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_aper$address() {
        return NTCIPWindSensorAvgSpeed_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgSpeed_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgSpeed_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgSpeed_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorAvgDirection_t
     * }
     */
    public static final OfLong NTCIPWindSensorAvgDirection_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorAvgDirection_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgDirection_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgDirection_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorAvgDirection_constr_1() {
        return asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorAvgDirection_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorAvgDirection_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorAvgDirection_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorAvgDirection$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorAvgDirection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgDirection
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorAvgDirection$layout() {
        return asn_DEF_NTCIPWindSensorAvgDirection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgDirection
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorAvgDirection() {
        return asn_DEF_NTCIPWindSensorAvgDirection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorAvgDirection
     * }
     */
    public static void asn_DEF_NTCIPWindSensorAvgDirection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorAvgDirection$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorAvgDirection$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorAvgDirection_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_free$descriptor() {
        return NTCIPWindSensorAvgDirection_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_free$handle() {
        return NTCIPWindSensorAvgDirection_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_free$address() {
        return NTCIPWindSensorAvgDirection_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorAvgDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorAvgDirection_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorAvgDirection_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_print$descriptor() {
        return NTCIPWindSensorAvgDirection_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_print$handle() {
        return NTCIPWindSensorAvgDirection_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_print$address() {
        return NTCIPWindSensorAvgDirection_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorAvgDirection_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgDirection_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_constraint$descriptor() {
        return NTCIPWindSensorAvgDirection_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_constraint$handle() {
        return NTCIPWindSensorAvgDirection_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_constraint$address() {
        return NTCIPWindSensorAvgDirection_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorAvgDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorAvgDirection_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgDirection_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_decode_ber$descriptor() {
        return NTCIPWindSensorAvgDirection_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_decode_ber$handle() {
        return NTCIPWindSensorAvgDirection_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_ber$address() {
        return NTCIPWindSensorAvgDirection_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorAvgDirection_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_der$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_der$handle() {
        return NTCIPWindSensorAvgDirection_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_der$address() {
        return NTCIPWindSensorAvgDirection_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_decode_xer$descriptor() {
        return NTCIPWindSensorAvgDirection_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_decode_xer$handle() {
        return NTCIPWindSensorAvgDirection_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_xer$address() {
        return NTCIPWindSensorAvgDirection_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorAvgDirection_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_xer$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_xer$handle() {
        return NTCIPWindSensorAvgDirection_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_xer$address() {
        return NTCIPWindSensorAvgDirection_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_jer$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_jer$handle() {
        return NTCIPWindSensorAvgDirection_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_jer$address() {
        return NTCIPWindSensorAvgDirection_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_decode_oer$descriptor() {
        return NTCIPWindSensorAvgDirection_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_decode_oer$handle() {
        return NTCIPWindSensorAvgDirection_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_oer$address() {
        return NTCIPWindSensorAvgDirection_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorAvgDirection_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_oer$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_oer$handle() {
        return NTCIPWindSensorAvgDirection_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_oer$address() {
        return NTCIPWindSensorAvgDirection_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_decode_uper$descriptor() {
        return NTCIPWindSensorAvgDirection_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_decode_uper$handle() {
        return NTCIPWindSensorAvgDirection_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_uper$address() {
        return NTCIPWindSensorAvgDirection_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgDirection_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_uper$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_uper$handle() {
        return NTCIPWindSensorAvgDirection_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_uper$address() {
        return NTCIPWindSensorAvgDirection_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_decode_aper$descriptor() {
        return NTCIPWindSensorAvgDirection_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_decode_aper$handle() {
        return NTCIPWindSensorAvgDirection_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_aper$address() {
        return NTCIPWindSensorAvgDirection_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorAvgDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorAvgDirection_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorAvgDirection_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorAvgDirection_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorAvgDirection_encode_aper$descriptor() {
        return NTCIPWindSensorAvgDirection_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorAvgDirection_encode_aper$handle() {
        return NTCIPWindSensorAvgDirection_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_aper$address() {
        return NTCIPWindSensorAvgDirection_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorAvgDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorAvgDirection_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorAvgDirection_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorAvgDirection_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorSpotSpeed_t
     * }
     */
    public static final OfLong NTCIPWindSensorSpotSpeed_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1() {
        return asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorSpotSpeed_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorSpotSpeed$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorSpotSpeed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotSpeed
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorSpotSpeed$layout() {
        return asn_DEF_NTCIPWindSensorSpotSpeed$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotSpeed
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorSpotSpeed() {
        return asn_DEF_NTCIPWindSensorSpotSpeed$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotSpeed
     * }
     */
    public static void asn_DEF_NTCIPWindSensorSpotSpeed(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorSpotSpeed$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorSpotSpeed$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorSpotSpeed_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_free$descriptor() {
        return NTCIPWindSensorSpotSpeed_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_free$handle() {
        return NTCIPWindSensorSpotSpeed_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_free$address() {
        return NTCIPWindSensorSpotSpeed_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorSpotSpeed_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorSpotSpeed_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_print$descriptor() {
        return NTCIPWindSensorSpotSpeed_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_print$handle() {
        return NTCIPWindSensorSpotSpeed_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_print$address() {
        return NTCIPWindSensorSpotSpeed_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorSpotSpeed_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotSpeed_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_constraint$descriptor() {
        return NTCIPWindSensorSpotSpeed_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_constraint$handle() {
        return NTCIPWindSensorSpotSpeed_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_constraint$address() {
        return NTCIPWindSensorSpotSpeed_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorSpotSpeed_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotSpeed_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_decode_ber$descriptor() {
        return NTCIPWindSensorSpotSpeed_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_decode_ber$handle() {
        return NTCIPWindSensorSpotSpeed_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_ber$address() {
        return NTCIPWindSensorSpotSpeed_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorSpotSpeed_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_der$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_der$handle() {
        return NTCIPWindSensorSpotSpeed_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_der$address() {
        return NTCIPWindSensorSpotSpeed_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_decode_xer$descriptor() {
        return NTCIPWindSensorSpotSpeed_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_decode_xer$handle() {
        return NTCIPWindSensorSpotSpeed_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_xer$address() {
        return NTCIPWindSensorSpotSpeed_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorSpotSpeed_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_xer$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_xer$handle() {
        return NTCIPWindSensorSpotSpeed_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_xer$address() {
        return NTCIPWindSensorSpotSpeed_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_jer$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_jer$handle() {
        return NTCIPWindSensorSpotSpeed_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_jer$address() {
        return NTCIPWindSensorSpotSpeed_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_decode_oer$descriptor() {
        return NTCIPWindSensorSpotSpeed_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_decode_oer$handle() {
        return NTCIPWindSensorSpotSpeed_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_oer$address() {
        return NTCIPWindSensorSpotSpeed_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorSpotSpeed_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_oer$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_oer$handle() {
        return NTCIPWindSensorSpotSpeed_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_oer$address() {
        return NTCIPWindSensorSpotSpeed_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_decode_uper$descriptor() {
        return NTCIPWindSensorSpotSpeed_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_decode_uper$handle() {
        return NTCIPWindSensorSpotSpeed_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_uper$address() {
        return NTCIPWindSensorSpotSpeed_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotSpeed_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_uper$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_uper$handle() {
        return NTCIPWindSensorSpotSpeed_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_uper$address() {
        return NTCIPWindSensorSpotSpeed_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_decode_aper$descriptor() {
        return NTCIPWindSensorSpotSpeed_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_decode_aper$handle() {
        return NTCIPWindSensorSpotSpeed_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_aper$address() {
        return NTCIPWindSensorSpotSpeed_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotSpeed_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotSpeed_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotSpeed_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotSpeed_encode_aper$descriptor() {
        return NTCIPWindSensorSpotSpeed_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotSpeed_encode_aper$handle() {
        return NTCIPWindSensorSpotSpeed_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_aper$address() {
        return NTCIPWindSensorSpotSpeed_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotSpeed_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotSpeed_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotSpeed_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorSpotDirection_t
     * }
     */
    public static final OfLong NTCIPWindSensorSpotDirection_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorSpotDirection_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotDirection_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotDirection_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorSpotDirection_constr_1() {
        return asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorSpotDirection_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorSpotDirection_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorSpotDirection_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorSpotDirection$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorSpotDirection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotDirection
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorSpotDirection$layout() {
        return asn_DEF_NTCIPWindSensorSpotDirection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotDirection
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorSpotDirection() {
        return asn_DEF_NTCIPWindSensorSpotDirection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorSpotDirection
     * }
     */
    public static void asn_DEF_NTCIPWindSensorSpotDirection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorSpotDirection$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorSpotDirection$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorSpotDirection_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_free$descriptor() {
        return NTCIPWindSensorSpotDirection_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_free$handle() {
        return NTCIPWindSensorSpotDirection_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_free$address() {
        return NTCIPWindSensorSpotDirection_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorSpotDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorSpotDirection_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorSpotDirection_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_print$descriptor() {
        return NTCIPWindSensorSpotDirection_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_print$handle() {
        return NTCIPWindSensorSpotDirection_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_print$address() {
        return NTCIPWindSensorSpotDirection_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorSpotDirection_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotDirection_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_constraint$descriptor() {
        return NTCIPWindSensorSpotDirection_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_constraint$handle() {
        return NTCIPWindSensorSpotDirection_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_constraint$address() {
        return NTCIPWindSensorSpotDirection_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorSpotDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorSpotDirection_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotDirection_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_decode_ber$descriptor() {
        return NTCIPWindSensorSpotDirection_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_decode_ber$handle() {
        return NTCIPWindSensorSpotDirection_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_ber$address() {
        return NTCIPWindSensorSpotDirection_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorSpotDirection_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_der$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_der$handle() {
        return NTCIPWindSensorSpotDirection_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_der$address() {
        return NTCIPWindSensorSpotDirection_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_decode_xer$descriptor() {
        return NTCIPWindSensorSpotDirection_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_decode_xer$handle() {
        return NTCIPWindSensorSpotDirection_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_xer$address() {
        return NTCIPWindSensorSpotDirection_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorSpotDirection_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_xer$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_xer$handle() {
        return NTCIPWindSensorSpotDirection_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_xer$address() {
        return NTCIPWindSensorSpotDirection_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_jer$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_jer$handle() {
        return NTCIPWindSensorSpotDirection_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_jer$address() {
        return NTCIPWindSensorSpotDirection_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_decode_oer$descriptor() {
        return NTCIPWindSensorSpotDirection_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_decode_oer$handle() {
        return NTCIPWindSensorSpotDirection_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_oer$address() {
        return NTCIPWindSensorSpotDirection_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorSpotDirection_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_oer$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_oer$handle() {
        return NTCIPWindSensorSpotDirection_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_oer$address() {
        return NTCIPWindSensorSpotDirection_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_decode_uper$descriptor() {
        return NTCIPWindSensorSpotDirection_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_decode_uper$handle() {
        return NTCIPWindSensorSpotDirection_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_uper$address() {
        return NTCIPWindSensorSpotDirection_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotDirection_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_uper$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_uper$handle() {
        return NTCIPWindSensorSpotDirection_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_uper$address() {
        return NTCIPWindSensorSpotDirection_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_decode_aper$descriptor() {
        return NTCIPWindSensorSpotDirection_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_decode_aper$handle() {
        return NTCIPWindSensorSpotDirection_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_aper$address() {
        return NTCIPWindSensorSpotDirection_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorSpotDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorSpotDirection_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorSpotDirection_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorSpotDirection_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorSpotDirection_encode_aper$descriptor() {
        return NTCIPWindSensorSpotDirection_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorSpotDirection_encode_aper$handle() {
        return NTCIPWindSensorSpotDirection_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_aper$address() {
        return NTCIPWindSensorSpotDirection_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorSpotDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorSpotDirection_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorSpotDirection_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorSpotDirection_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorGustSpeed_t
     * }
     */
    public static final OfLong NTCIPWindSensorGustSpeed_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorGustSpeed_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustSpeed_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustSpeed_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorGustSpeed_constr_1() {
        return asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustSpeed_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorGustSpeed_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorGustSpeed_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorGustSpeed$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorGustSpeed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustSpeed
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorGustSpeed$layout() {
        return asn_DEF_NTCIPWindSensorGustSpeed$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustSpeed
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorGustSpeed() {
        return asn_DEF_NTCIPWindSensorGustSpeed$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustSpeed
     * }
     */
    public static void asn_DEF_NTCIPWindSensorGustSpeed(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorGustSpeed$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorGustSpeed$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorGustSpeed_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_free$descriptor() {
        return NTCIPWindSensorGustSpeed_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_free$handle() {
        return NTCIPWindSensorGustSpeed_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_free$address() {
        return NTCIPWindSensorGustSpeed_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorGustSpeed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorGustSpeed_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorGustSpeed_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_print$descriptor() {
        return NTCIPWindSensorGustSpeed_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_print$handle() {
        return NTCIPWindSensorGustSpeed_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_print$address() {
        return NTCIPWindSensorGustSpeed_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorGustSpeed_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustSpeed_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_constraint$descriptor() {
        return NTCIPWindSensorGustSpeed_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_constraint$handle() {
        return NTCIPWindSensorGustSpeed_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_constraint$address() {
        return NTCIPWindSensorGustSpeed_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorGustSpeed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorGustSpeed_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustSpeed_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_decode_ber$descriptor() {
        return NTCIPWindSensorGustSpeed_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_decode_ber$handle() {
        return NTCIPWindSensorGustSpeed_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_ber$address() {
        return NTCIPWindSensorGustSpeed_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorGustSpeed_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_der$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_der$handle() {
        return NTCIPWindSensorGustSpeed_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_der$address() {
        return NTCIPWindSensorGustSpeed_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_decode_xer$descriptor() {
        return NTCIPWindSensorGustSpeed_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_decode_xer$handle() {
        return NTCIPWindSensorGustSpeed_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_xer$address() {
        return NTCIPWindSensorGustSpeed_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorGustSpeed_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_xer$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_xer$handle() {
        return NTCIPWindSensorGustSpeed_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_xer$address() {
        return NTCIPWindSensorGustSpeed_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_jer$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_jer$handle() {
        return NTCIPWindSensorGustSpeed_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_jer$address() {
        return NTCIPWindSensorGustSpeed_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_decode_oer$descriptor() {
        return NTCIPWindSensorGustSpeed_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_decode_oer$handle() {
        return NTCIPWindSensorGustSpeed_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_oer$address() {
        return NTCIPWindSensorGustSpeed_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorGustSpeed_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_oer$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_oer$handle() {
        return NTCIPWindSensorGustSpeed_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_oer$address() {
        return NTCIPWindSensorGustSpeed_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_decode_uper$descriptor() {
        return NTCIPWindSensorGustSpeed_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_decode_uper$handle() {
        return NTCIPWindSensorGustSpeed_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_uper$address() {
        return NTCIPWindSensorGustSpeed_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustSpeed_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_uper$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_uper$handle() {
        return NTCIPWindSensorGustSpeed_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_uper$address() {
        return NTCIPWindSensorGustSpeed_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_decode_aper$descriptor() {
        return NTCIPWindSensorGustSpeed_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_decode_aper$handle() {
        return NTCIPWindSensorGustSpeed_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_aper$address() {
        return NTCIPWindSensorGustSpeed_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustSpeed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustSpeed_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustSpeed_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustSpeed_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustSpeed_encode_aper$descriptor() {
        return NTCIPWindSensorGustSpeed_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustSpeed_encode_aper$handle() {
        return NTCIPWindSensorGustSpeed_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_aper$address() {
        return NTCIPWindSensorGustSpeed_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustSpeed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustSpeed_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustSpeed_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustSpeed_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPWindSensorGustDirection_t
     * }
     */
    public static final OfLong NTCIPWindSensorGustDirection_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPWindSensorGustDirection_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPWindSensorGustDirection_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustDirection_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPWindSensorGustDirection_constr_1$layout() {
        return asn_PER_type_NTCIPWindSensorGustDirection_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustDirection_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPWindSensorGustDirection_constr_1() {
        return asn_PER_type_NTCIPWindSensorGustDirection_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPWindSensorGustDirection_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPWindSensorGustDirection_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPWindSensorGustDirection_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPWindSensorGustDirection_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPWindSensorGustDirection$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPWindSensorGustDirection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustDirection
     * }
     */
    public static GroupLayout asn_DEF_NTCIPWindSensorGustDirection$layout() {
        return asn_DEF_NTCIPWindSensorGustDirection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustDirection
     * }
     */
    public static MemorySegment asn_DEF_NTCIPWindSensorGustDirection() {
        return asn_DEF_NTCIPWindSensorGustDirection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPWindSensorGustDirection
     * }
     */
    public static void asn_DEF_NTCIPWindSensorGustDirection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPWindSensorGustDirection$constants.SEGMENT, 0L, asn_DEF_NTCIPWindSensorGustDirection$constants.LAYOUT.byteSize());
    }

    private static class NTCIPWindSensorGustDirection_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_free$descriptor() {
        return NTCIPWindSensorGustDirection_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_free$handle() {
        return NTCIPWindSensorGustDirection_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPWindSensorGustDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_free$address() {
        return NTCIPWindSensorGustDirection_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPWindSensorGustDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPWindSensorGustDirection_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPWindSensorGustDirection_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_print$descriptor() {
        return NTCIPWindSensorGustDirection_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_print$handle() {
        return NTCIPWindSensorGustDirection_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_print$address() {
        return NTCIPWindSensorGustDirection_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPWindSensorGustDirection_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustDirection_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_constraint$descriptor() {
        return NTCIPWindSensorGustDirection_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_constraint$handle() {
        return NTCIPWindSensorGustDirection_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_constraint$address() {
        return NTCIPWindSensorGustDirection_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPWindSensorGustDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPWindSensorGustDirection_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustDirection_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_decode_ber$descriptor() {
        return NTCIPWindSensorGustDirection_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_decode_ber$handle() {
        return NTCIPWindSensorGustDirection_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_ber$address() {
        return NTCIPWindSensorGustDirection_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPWindSensorGustDirection_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_der$descriptor() {
        return NTCIPWindSensorGustDirection_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_der$handle() {
        return NTCIPWindSensorGustDirection_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_der$address() {
        return NTCIPWindSensorGustDirection_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorGustDirection_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_decode_xer$descriptor() {
        return NTCIPWindSensorGustDirection_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_decode_xer$handle() {
        return NTCIPWindSensorGustDirection_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_xer$address() {
        return NTCIPWindSensorGustDirection_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorGustDirection_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_xer$descriptor() {
        return NTCIPWindSensorGustDirection_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_xer$handle() {
        return NTCIPWindSensorGustDirection_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_xer$address() {
        return NTCIPWindSensorGustDirection_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPWindSensorGustDirection_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_jer$descriptor() {
        return NTCIPWindSensorGustDirection_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_jer$handle() {
        return NTCIPWindSensorGustDirection_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_jer$address() {
        return NTCIPWindSensorGustDirection_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPWindSensorGustDirection_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_decode_oer$descriptor() {
        return NTCIPWindSensorGustDirection_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_decode_oer$handle() {
        return NTCIPWindSensorGustDirection_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_oer$address() {
        return NTCIPWindSensorGustDirection_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPWindSensorGustDirection_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_oer$descriptor() {
        return NTCIPWindSensorGustDirection_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_oer$handle() {
        return NTCIPWindSensorGustDirection_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_oer$address() {
        return NTCIPWindSensorGustDirection_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustDirection_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_decode_uper$descriptor() {
        return NTCIPWindSensorGustDirection_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_decode_uper$handle() {
        return NTCIPWindSensorGustDirection_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_uper$address() {
        return NTCIPWindSensorGustDirection_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustDirection_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_uper$descriptor() {
        return NTCIPWindSensorGustDirection_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_uper$handle() {
        return NTCIPWindSensorGustDirection_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_uper$address() {
        return NTCIPWindSensorGustDirection_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustDirection_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_decode_aper$descriptor() {
        return NTCIPWindSensorGustDirection_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_decode_aper$handle() {
        return NTCIPWindSensorGustDirection_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_aper$address() {
        return NTCIPWindSensorGustDirection_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPWindSensorGustDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPWindSensorGustDirection_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPWindSensorGustDirection_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPWindSensorGustDirection_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPWindSensorGustDirection_encode_aper$descriptor() {
        return NTCIPWindSensorGustDirection_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPWindSensorGustDirection_encode_aper$handle() {
        return NTCIPWindSensorGustDirection_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_aper$address() {
        return NTCIPWindSensorGustDirection_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPWindSensorGustDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPWindSensorGustDirection_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPWindSensorGustDirection_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPWindSensorGustDirection_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipWind$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipWind").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipWind
     * }
     */
    public static GroupLayout asn_DEF_NtcipWind$layout() {
        return asn_DEF_NtcipWind$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipWind
     * }
     */
    public static MemorySegment asn_DEF_NtcipWind() {
        return asn_DEF_NtcipWind$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipWind
     * }
     */
    public static void asn_DEF_NtcipWind(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipWind$constants.SEGMENT, 0L, asn_DEF_NtcipWind$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipWind_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipWind_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipWind_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipWind_specs_1$layout() {
        return asn_SPC_NtcipWind_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipWind_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipWind_specs_1() {
        return asn_SPC_NtcipWind_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipWind_specs_1
     * }
     */
    public static void asn_SPC_NtcipWind_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipWind_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipWind_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipWind_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipWind_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipWind_1$layout() {
        return asn_MBR_NtcipWind_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static long[] asn_MBR_NtcipWind_1$dimensions() {
        return asn_MBR_NtcipWind_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static MemorySegment asn_MBR_NtcipWind_1() {
        return asn_MBR_NtcipWind_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static void asn_MBR_NtcipWind_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipWind_1$constants.SEGMENT, 0L, asn_MBR_NtcipWind_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static MemorySegment asn_MBR_NtcipWind_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipWind_1$constants.HANDLE.invokeExact(asn_MBR_NtcipWind_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipWind_1[6]
     * }
     */
    public static void asn_MBR_NtcipWind_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipWind_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPHumiditySensorRelativeHumidity_t
     * }
     */
    public static final OfLong NTCIPHumiditySensorRelativeHumidity_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$layout() {
        return asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1() {
        return asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPHumiditySensorRelativeHumidity_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPHumiditySensorRelativeHumidity$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPHumiditySensorRelativeHumidity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPHumiditySensorRelativeHumidity
     * }
     */
    public static GroupLayout asn_DEF_NTCIPHumiditySensorRelativeHumidity$layout() {
        return asn_DEF_NTCIPHumiditySensorRelativeHumidity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPHumiditySensorRelativeHumidity
     * }
     */
    public static MemorySegment asn_DEF_NTCIPHumiditySensorRelativeHumidity() {
        return asn_DEF_NTCIPHumiditySensorRelativeHumidity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPHumiditySensorRelativeHumidity
     * }
     */
    public static void asn_DEF_NTCIPHumiditySensorRelativeHumidity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPHumiditySensorRelativeHumidity$constants.SEGMENT, 0L, asn_DEF_NTCIPHumiditySensorRelativeHumidity$constants.LAYOUT.byteSize());
    }

    private static class NTCIPHumiditySensorRelativeHumidity_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPHumiditySensorRelativeHumidity_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_free$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPHumiditySensorRelativeHumidity_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_free$handle() {
        return NTCIPHumiditySensorRelativeHumidity_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPHumiditySensorRelativeHumidity_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_free$address() {
        return NTCIPHumiditySensorRelativeHumidity_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPHumiditySensorRelativeHumidity_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPHumiditySensorRelativeHumidity_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_print$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_print$handle() {
        return NTCIPHumiditySensorRelativeHumidity_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_print$address() {
        return NTCIPHumiditySensorRelativeHumidity_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPHumiditySensorRelativeHumidity_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_constraint$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_constraint$handle() {
        return NTCIPHumiditySensorRelativeHumidity_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_constraint$address() {
        return NTCIPHumiditySensorRelativeHumidity_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPHumiditySensorRelativeHumidity_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPHumiditySensorRelativeHumidity_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_decode_ber$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_decode_ber$handle() {
        return NTCIPHumiditySensorRelativeHumidity_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_ber$address() {
        return NTCIPHumiditySensorRelativeHumidity_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_der$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_der$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_der$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_decode_xer$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_decode_xer$handle() {
        return NTCIPHumiditySensorRelativeHumidity_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_xer$address() {
        return NTCIPHumiditySensorRelativeHumidity_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_xer$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_xer$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_xer$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_jer$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_jer$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_jer$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_decode_oer$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_decode_oer$handle() {
        return NTCIPHumiditySensorRelativeHumidity_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_oer$address() {
        return NTCIPHumiditySensorRelativeHumidity_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_oer$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_oer$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_oer$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_decode_uper$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_decode_uper$handle() {
        return NTCIPHumiditySensorRelativeHumidity_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_uper$address() {
        return NTCIPHumiditySensorRelativeHumidity_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_uper$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_uper$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_uper$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_decode_aper$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_decode_aper$handle() {
        return NTCIPHumiditySensorRelativeHumidity_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_aper$address() {
        return NTCIPHumiditySensorRelativeHumidity_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPHumiditySensorRelativeHumidity_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPHumiditySensorRelativeHumidity_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPHumiditySensorRelativeHumidity_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPHumiditySensorRelativeHumidity_encode_aper$descriptor() {
        return NTCIPHumiditySensorRelativeHumidity_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPHumiditySensorRelativeHumidity_encode_aper$handle() {
        return NTCIPHumiditySensorRelativeHumidity_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_aper$address() {
        return NTCIPHumiditySensorRelativeHumidity_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPHumiditySensorRelativeHumidity_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPHumiditySensorRelativeHumidity_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPHumiditySensorRelativeHumidity_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPHumiditySensorRelativeHumidity_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int DataSourceInfo_measured = (int)0L;
    /**
     * {@snippet lang=c :
     * enum DataSourceInfo.DataSourceInfo_measured = 0
     * }
     */
    public static int DataSourceInfo_measured() {
        return DataSourceInfo_measured;
    }
    private static final int DataSourceInfo_derived = (int)1L;
    /**
     * {@snippet lang=c :
     * enum DataSourceInfo.DataSourceInfo_derived = 1
     * }
     */
    public static int DataSourceInfo_derived() {
        return DataSourceInfo_derived;
    }
    /**
     * {@snippet lang=c :
     * typedef long DataSourceInfo_t
     * }
     */
    public static final OfLong DataSourceInfo_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_DataSourceInfo_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_DataSourceInfo_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DataSourceInfo_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_DataSourceInfo_constr_1$layout() {
        return asn_PER_type_DataSourceInfo_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DataSourceInfo_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_DataSourceInfo_constr_1() {
        return asn_PER_type_DataSourceInfo_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DataSourceInfo_constr_1
     * }
     */
    public static void asn_PER_type_DataSourceInfo_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_DataSourceInfo_constr_1$constants.SEGMENT, 0L, asn_PER_type_DataSourceInfo_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_DataSourceInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DataSourceInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DataSourceInfo
     * }
     */
    public static GroupLayout asn_DEF_DataSourceInfo$layout() {
        return asn_DEF_DataSourceInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DataSourceInfo
     * }
     */
    public static MemorySegment asn_DEF_DataSourceInfo() {
        return asn_DEF_DataSourceInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DataSourceInfo
     * }
     */
    public static void asn_DEF_DataSourceInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DataSourceInfo$constants.SEGMENT, 0L, asn_DEF_DataSourceInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_DataSourceInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_DataSourceInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_DataSourceInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_DataSourceInfo_specs_1$layout() {
        return asn_SPC_DataSourceInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_DataSourceInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_DataSourceInfo_specs_1() {
        return asn_SPC_DataSourceInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_DataSourceInfo_specs_1
     * }
     */
    public static void asn_SPC_DataSourceInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_DataSourceInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_DataSourceInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class DataSourceInfo_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void DataSourceInfo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_free$descriptor() {
        return DataSourceInfo_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void DataSourceInfo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle DataSourceInfo_free$handle() {
        return DataSourceInfo_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void DataSourceInfo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment DataSourceInfo_free$address() {
        return DataSourceInfo_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void DataSourceInfo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void DataSourceInfo_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = DataSourceInfo_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int DataSourceInfo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_print$descriptor() {
        return DataSourceInfo_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int DataSourceInfo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_print$handle() {
        return DataSourceInfo_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int DataSourceInfo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_print$address() {
        return DataSourceInfo_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int DataSourceInfo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int DataSourceInfo_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DataSourceInfo_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int DataSourceInfo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_constraint$descriptor() {
        return DataSourceInfo_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int DataSourceInfo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_constraint$handle() {
        return DataSourceInfo_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int DataSourceInfo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_constraint$address() {
        return DataSourceInfo_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int DataSourceInfo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int DataSourceInfo_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DataSourceInfo_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_decode_ber$descriptor() {
        return DataSourceInfo_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle DataSourceInfo_decode_ber$handle() {
        return DataSourceInfo_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_ber$address() {
        return DataSourceInfo_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = DataSourceInfo_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_der$descriptor() {
        return DataSourceInfo_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_der$handle() {
        return DataSourceInfo_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_der$address() {
        return DataSourceInfo_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = DataSourceInfo_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_decode_xer$descriptor() {
        return DataSourceInfo_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle DataSourceInfo_decode_xer$handle() {
        return DataSourceInfo_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_xer$address() {
        return DataSourceInfo_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = DataSourceInfo_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_xer$descriptor() {
        return DataSourceInfo_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_xer$handle() {
        return DataSourceInfo_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_xer$address() {
        return DataSourceInfo_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = DataSourceInfo_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_jer$descriptor() {
        return DataSourceInfo_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_jer$handle() {
        return DataSourceInfo_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_jer$address() {
        return DataSourceInfo_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = DataSourceInfo_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_decode_oer$descriptor() {
        return DataSourceInfo_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle DataSourceInfo_decode_oer$handle() {
        return DataSourceInfo_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_oer$address() {
        return DataSourceInfo_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = DataSourceInfo_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_oer$descriptor() {
        return DataSourceInfo_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_oer$handle() {
        return DataSourceInfo_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_oer$address() {
        return DataSourceInfo_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DataSourceInfo_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_decode_uper$descriptor() {
        return DataSourceInfo_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle DataSourceInfo_decode_uper$handle() {
        return DataSourceInfo_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_uper$address() {
        return DataSourceInfo_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DataSourceInfo_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_uper$descriptor() {
        return DataSourceInfo_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_uper$handle() {
        return DataSourceInfo_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_uper$address() {
        return DataSourceInfo_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DataSourceInfo_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_decode_aper$descriptor() {
        return DataSourceInfo_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle DataSourceInfo_decode_aper$handle() {
        return DataSourceInfo_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_aper$address() {
        return DataSourceInfo_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DataSourceInfo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DataSourceInfo_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DataSourceInfo_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DataSourceInfo_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor DataSourceInfo_encode_aper$descriptor() {
        return DataSourceInfo_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle DataSourceInfo_encode_aper$handle() {
        return DataSourceInfo_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_aper$address() {
        return DataSourceInfo_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DataSourceInfo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DataSourceInfo_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DataSourceInfo_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DataSourceInfo_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipRelativeHumidity$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipRelativeHumidity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipRelativeHumidity
     * }
     */
    public static GroupLayout asn_DEF_NtcipRelativeHumidity$layout() {
        return asn_DEF_NtcipRelativeHumidity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipRelativeHumidity
     * }
     */
    public static MemorySegment asn_DEF_NtcipRelativeHumidity() {
        return asn_DEF_NtcipRelativeHumidity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipRelativeHumidity
     * }
     */
    public static void asn_DEF_NtcipRelativeHumidity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipRelativeHumidity$constants.SEGMENT, 0L, asn_DEF_NtcipRelativeHumidity$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipRelativeHumidity_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipRelativeHumidity_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipRelativeHumidity_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipRelativeHumidity_specs_1$layout() {
        return asn_SPC_NtcipRelativeHumidity_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipRelativeHumidity_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipRelativeHumidity_specs_1() {
        return asn_SPC_NtcipRelativeHumidity_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipRelativeHumidity_specs_1
     * }
     */
    public static void asn_SPC_NtcipRelativeHumidity_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipRelativeHumidity_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipRelativeHumidity_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipRelativeHumidity_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipRelativeHumidity_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipRelativeHumidity_1$layout() {
        return asn_MBR_NtcipRelativeHumidity_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static long[] asn_MBR_NtcipRelativeHumidity_1$dimensions() {
        return asn_MBR_NtcipRelativeHumidity_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipRelativeHumidity_1() {
        return asn_MBR_NtcipRelativeHumidity_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static void asn_MBR_NtcipRelativeHumidity_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipRelativeHumidity_1$constants.SEGMENT, 0L, asn_MBR_NtcipRelativeHumidity_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipRelativeHumidity_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipRelativeHumidity_1$constants.HANDLE.invokeExact(asn_MBR_NtcipRelativeHumidity_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipRelativeHumidity_1[2]
     * }
     */
    public static void asn_MBR_NtcipRelativeHumidity_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipRelativeHumidity_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssDewpointTemp_t
     * }
     */
    public static final OfLong NTCIPEssDewpointTemp_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssDewpointTemp_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssDewpointTemp_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssDewpointTemp_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssDewpointTemp_constr_1$layout() {
        return asn_PER_type_NTCIPEssDewpointTemp_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssDewpointTemp_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssDewpointTemp_constr_1() {
        return asn_PER_type_NTCIPEssDewpointTemp_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssDewpointTemp_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssDewpointTemp_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssDewpointTemp_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssDewpointTemp_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssDewpointTemp$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssDewpointTemp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssDewpointTemp
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssDewpointTemp$layout() {
        return asn_DEF_NTCIPEssDewpointTemp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssDewpointTemp
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssDewpointTemp() {
        return asn_DEF_NTCIPEssDewpointTemp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssDewpointTemp
     * }
     */
    public static void asn_DEF_NTCIPEssDewpointTemp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssDewpointTemp$constants.SEGMENT, 0L, asn_DEF_NTCIPEssDewpointTemp$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssDewpointTemp_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssDewpointTemp_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_free$descriptor() {
        return NTCIPEssDewpointTemp_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssDewpointTemp_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_free$handle() {
        return NTCIPEssDewpointTemp_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssDewpointTemp_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_free$address() {
        return NTCIPEssDewpointTemp_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssDewpointTemp_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssDewpointTemp_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssDewpointTemp_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_print$descriptor() {
        return NTCIPEssDewpointTemp_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_print$handle() {
        return NTCIPEssDewpointTemp_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_print$address() {
        return NTCIPEssDewpointTemp_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssDewpointTemp_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssDewpointTemp_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_constraint$descriptor() {
        return NTCIPEssDewpointTemp_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_constraint$handle() {
        return NTCIPEssDewpointTemp_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_constraint$address() {
        return NTCIPEssDewpointTemp_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssDewpointTemp_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssDewpointTemp_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssDewpointTemp_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_decode_ber$descriptor() {
        return NTCIPEssDewpointTemp_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_decode_ber$handle() {
        return NTCIPEssDewpointTemp_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_ber$address() {
        return NTCIPEssDewpointTemp_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssDewpointTemp_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_der$descriptor() {
        return NTCIPEssDewpointTemp_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_der$handle() {
        return NTCIPEssDewpointTemp_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_der$address() {
        return NTCIPEssDewpointTemp_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssDewpointTemp_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_decode_xer$descriptor() {
        return NTCIPEssDewpointTemp_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_decode_xer$handle() {
        return NTCIPEssDewpointTemp_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_xer$address() {
        return NTCIPEssDewpointTemp_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssDewpointTemp_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_xer$descriptor() {
        return NTCIPEssDewpointTemp_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_xer$handle() {
        return NTCIPEssDewpointTemp_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_xer$address() {
        return NTCIPEssDewpointTemp_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssDewpointTemp_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_jer$descriptor() {
        return NTCIPEssDewpointTemp_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_jer$handle() {
        return NTCIPEssDewpointTemp_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_jer$address() {
        return NTCIPEssDewpointTemp_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssDewpointTemp_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_decode_oer$descriptor() {
        return NTCIPEssDewpointTemp_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_decode_oer$handle() {
        return NTCIPEssDewpointTemp_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_oer$address() {
        return NTCIPEssDewpointTemp_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssDewpointTemp_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_oer$descriptor() {
        return NTCIPEssDewpointTemp_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_oer$handle() {
        return NTCIPEssDewpointTemp_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_oer$address() {
        return NTCIPEssDewpointTemp_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssDewpointTemp_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_decode_uper$descriptor() {
        return NTCIPEssDewpointTemp_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_decode_uper$handle() {
        return NTCIPEssDewpointTemp_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_uper$address() {
        return NTCIPEssDewpointTemp_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssDewpointTemp_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_uper$descriptor() {
        return NTCIPEssDewpointTemp_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_uper$handle() {
        return NTCIPEssDewpointTemp_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_uper$address() {
        return NTCIPEssDewpointTemp_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssDewpointTemp_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_decode_aper$descriptor() {
        return NTCIPEssDewpointTemp_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_decode_aper$handle() {
        return NTCIPEssDewpointTemp_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_aper$address() {
        return NTCIPEssDewpointTemp_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssDewpointTemp_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssDewpointTemp_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssDewpointTemp_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssDewpointTemp_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssDewpointTemp_encode_aper$descriptor() {
        return NTCIPEssDewpointTemp_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssDewpointTemp_encode_aper$handle() {
        return NTCIPEssDewpointTemp_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_aper$address() {
        return NTCIPEssDewpointTemp_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssDewpointTemp_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssDewpointTemp_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssDewpointTemp_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssDewpointTemp_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long DewPointTempMeasurementStdDev_t
     * }
     */
    public static final OfLong DewPointTempMeasurementStdDev_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_DewPointTempMeasurementStdDev_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_DewPointTempMeasurementStdDev_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DewPointTempMeasurementStdDev_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_DewPointTempMeasurementStdDev_constr_1$layout() {
        return asn_PER_type_DewPointTempMeasurementStdDev_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DewPointTempMeasurementStdDev_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_DewPointTempMeasurementStdDev_constr_1() {
        return asn_PER_type_DewPointTempMeasurementStdDev_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_DewPointTempMeasurementStdDev_constr_1
     * }
     */
    public static void asn_PER_type_DewPointTempMeasurementStdDev_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_DewPointTempMeasurementStdDev_constr_1$constants.SEGMENT, 0L, asn_PER_type_DewPointTempMeasurementStdDev_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_DewPointTempMeasurementStdDev$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_DewPointTempMeasurementStdDev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DewPointTempMeasurementStdDev
     * }
     */
    public static GroupLayout asn_DEF_DewPointTempMeasurementStdDev$layout() {
        return asn_DEF_DewPointTempMeasurementStdDev$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DewPointTempMeasurementStdDev
     * }
     */
    public static MemorySegment asn_DEF_DewPointTempMeasurementStdDev() {
        return asn_DEF_DewPointTempMeasurementStdDev$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_DewPointTempMeasurementStdDev
     * }
     */
    public static void asn_DEF_DewPointTempMeasurementStdDev(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_DewPointTempMeasurementStdDev$constants.SEGMENT, 0L, asn_DEF_DewPointTempMeasurementStdDev$constants.LAYOUT.byteSize());
    }

    private static class DewPointTempMeasurementStdDev_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void DewPointTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_free$descriptor() {
        return DewPointTempMeasurementStdDev_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void DewPointTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_free$handle() {
        return DewPointTempMeasurementStdDev_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void DewPointTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_free$address() {
        return DewPointTempMeasurementStdDev_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void DewPointTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void DewPointTempMeasurementStdDev_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = DewPointTempMeasurementStdDev_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_print$descriptor() {
        return DewPointTempMeasurementStdDev_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_print$handle() {
        return DewPointTempMeasurementStdDev_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_print$address() {
        return DewPointTempMeasurementStdDev_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int DewPointTempMeasurementStdDev_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DewPointTempMeasurementStdDev_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_constraint$descriptor() {
        return DewPointTempMeasurementStdDev_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_constraint$handle() {
        return DewPointTempMeasurementStdDev_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_constraint$address() {
        return DewPointTempMeasurementStdDev_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int DewPointTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int DewPointTempMeasurementStdDev_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DewPointTempMeasurementStdDev_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_decode_ber$descriptor() {
        return DewPointTempMeasurementStdDev_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_decode_ber$handle() {
        return DewPointTempMeasurementStdDev_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_ber$address() {
        return DewPointTempMeasurementStdDev_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = DewPointTempMeasurementStdDev_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_der$descriptor() {
        return DewPointTempMeasurementStdDev_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_der$handle() {
        return DewPointTempMeasurementStdDev_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_der$address() {
        return DewPointTempMeasurementStdDev_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = DewPointTempMeasurementStdDev_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_decode_xer$descriptor() {
        return DewPointTempMeasurementStdDev_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_decode_xer$handle() {
        return DewPointTempMeasurementStdDev_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_xer$address() {
        return DewPointTempMeasurementStdDev_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = DewPointTempMeasurementStdDev_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_xer$descriptor() {
        return DewPointTempMeasurementStdDev_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_xer$handle() {
        return DewPointTempMeasurementStdDev_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_xer$address() {
        return DewPointTempMeasurementStdDev_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = DewPointTempMeasurementStdDev_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_jer$descriptor() {
        return DewPointTempMeasurementStdDev_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_jer$handle() {
        return DewPointTempMeasurementStdDev_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_jer$address() {
        return DewPointTempMeasurementStdDev_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = DewPointTempMeasurementStdDev_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_decode_oer$descriptor() {
        return DewPointTempMeasurementStdDev_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_decode_oer$handle() {
        return DewPointTempMeasurementStdDev_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_oer$address() {
        return DewPointTempMeasurementStdDev_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = DewPointTempMeasurementStdDev_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_oer$descriptor() {
        return DewPointTempMeasurementStdDev_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_oer$handle() {
        return DewPointTempMeasurementStdDev_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_oer$address() {
        return DewPointTempMeasurementStdDev_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DewPointTempMeasurementStdDev_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_decode_uper$descriptor() {
        return DewPointTempMeasurementStdDev_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_decode_uper$handle() {
        return DewPointTempMeasurementStdDev_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_uper$address() {
        return DewPointTempMeasurementStdDev_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DewPointTempMeasurementStdDev_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_uper$descriptor() {
        return DewPointTempMeasurementStdDev_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_uper$handle() {
        return DewPointTempMeasurementStdDev_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_uper$address() {
        return DewPointTempMeasurementStdDev_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DewPointTempMeasurementStdDev_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_decode_aper$descriptor() {
        return DewPointTempMeasurementStdDev_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_decode_aper$handle() {
        return DewPointTempMeasurementStdDev_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_aper$address() {
        return DewPointTempMeasurementStdDev_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t DewPointTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = DewPointTempMeasurementStdDev_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DewPointTempMeasurementStdDev_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("DewPointTempMeasurementStdDev_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor DewPointTempMeasurementStdDev_encode_aper$descriptor() {
        return DewPointTempMeasurementStdDev_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle DewPointTempMeasurementStdDev_encode_aper$handle() {
        return DewPointTempMeasurementStdDev_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_aper$address() {
        return DewPointTempMeasurementStdDev_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t DewPointTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment DewPointTempMeasurementStdDev_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = DewPointTempMeasurementStdDev_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DewPointTempMeasurementStdDev_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipDewPoint$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipDewPoint").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipDewPoint
     * }
     */
    public static GroupLayout asn_DEF_NtcipDewPoint$layout() {
        return asn_DEF_NtcipDewPoint$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipDewPoint
     * }
     */
    public static MemorySegment asn_DEF_NtcipDewPoint() {
        return asn_DEF_NtcipDewPoint$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipDewPoint
     * }
     */
    public static void asn_DEF_NtcipDewPoint(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipDewPoint$constants.SEGMENT, 0L, asn_DEF_NtcipDewPoint$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipDewPoint_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipDewPoint_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipDewPoint_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipDewPoint_specs_1$layout() {
        return asn_SPC_NtcipDewPoint_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipDewPoint_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipDewPoint_specs_1() {
        return asn_SPC_NtcipDewPoint_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipDewPoint_specs_1
     * }
     */
    public static void asn_SPC_NtcipDewPoint_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipDewPoint_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipDewPoint_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipDewPoint_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipDewPoint_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipDewPoint_1$layout() {
        return asn_MBR_NtcipDewPoint_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static long[] asn_MBR_NtcipDewPoint_1$dimensions() {
        return asn_MBR_NtcipDewPoint_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static MemorySegment asn_MBR_NtcipDewPoint_1() {
        return asn_MBR_NtcipDewPoint_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static void asn_MBR_NtcipDewPoint_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipDewPoint_1$constants.SEGMENT, 0L, asn_MBR_NtcipDewPoint_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static MemorySegment asn_MBR_NtcipDewPoint_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipDewPoint_1$constants.HANDLE.invokeExact(asn_MBR_NtcipDewPoint_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipDewPoint_1[3]
     * }
     */
    public static void asn_MBR_NtcipDewPoint_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipDewPoint_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssSurfaceTemperature_t
     * }
     */
    public static final OfLong NTCIPEssSurfaceTemperature_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssSurfaceTemperature_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceTemperature_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$layout() {
        return asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceTemperature_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssSurfaceTemperature_constr_1() {
        return asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceTemperature_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssSurfaceTemperature_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssSurfaceTemperature_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssSurfaceTemperature$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssSurfaceTemperature").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceTemperature
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssSurfaceTemperature$layout() {
        return asn_DEF_NTCIPEssSurfaceTemperature$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceTemperature
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssSurfaceTemperature() {
        return asn_DEF_NTCIPEssSurfaceTemperature$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceTemperature
     * }
     */
    public static void asn_DEF_NTCIPEssSurfaceTemperature(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssSurfaceTemperature$constants.SEGMENT, 0L, asn_DEF_NTCIPEssSurfaceTemperature$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssSurfaceTemperature_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_free$descriptor() {
        return NTCIPEssSurfaceTemperature_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_free$handle() {
        return NTCIPEssSurfaceTemperature_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_free$address() {
        return NTCIPEssSurfaceTemperature_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssSurfaceTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssSurfaceTemperature_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssSurfaceTemperature_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_print$descriptor() {
        return NTCIPEssSurfaceTemperature_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_print$handle() {
        return NTCIPEssSurfaceTemperature_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_print$address() {
        return NTCIPEssSurfaceTemperature_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssSurfaceTemperature_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceTemperature_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_constraint$descriptor() {
        return NTCIPEssSurfaceTemperature_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_constraint$handle() {
        return NTCIPEssSurfaceTemperature_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_constraint$address() {
        return NTCIPEssSurfaceTemperature_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssSurfaceTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssSurfaceTemperature_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceTemperature_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_decode_ber$descriptor() {
        return NTCIPEssSurfaceTemperature_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_decode_ber$handle() {
        return NTCIPEssSurfaceTemperature_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_ber$address() {
        return NTCIPEssSurfaceTemperature_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssSurfaceTemperature_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_der$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_der$handle() {
        return NTCIPEssSurfaceTemperature_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_der$address() {
        return NTCIPEssSurfaceTemperature_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_decode_xer$descriptor() {
        return NTCIPEssSurfaceTemperature_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_decode_xer$handle() {
        return NTCIPEssSurfaceTemperature_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_xer$address() {
        return NTCIPEssSurfaceTemperature_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssSurfaceTemperature_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_xer$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_xer$handle() {
        return NTCIPEssSurfaceTemperature_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_xer$address() {
        return NTCIPEssSurfaceTemperature_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_jer$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_jer$handle() {
        return NTCIPEssSurfaceTemperature_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_jer$address() {
        return NTCIPEssSurfaceTemperature_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_decode_oer$descriptor() {
        return NTCIPEssSurfaceTemperature_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_decode_oer$handle() {
        return NTCIPEssSurfaceTemperature_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_oer$address() {
        return NTCIPEssSurfaceTemperature_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssSurfaceTemperature_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_oer$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_oer$handle() {
        return NTCIPEssSurfaceTemperature_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_oer$address() {
        return NTCIPEssSurfaceTemperature_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_decode_uper$descriptor() {
        return NTCIPEssSurfaceTemperature_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_decode_uper$handle() {
        return NTCIPEssSurfaceTemperature_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_uper$address() {
        return NTCIPEssSurfaceTemperature_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceTemperature_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_uper$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_uper$handle() {
        return NTCIPEssSurfaceTemperature_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_uper$address() {
        return NTCIPEssSurfaceTemperature_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_decode_aper$descriptor() {
        return NTCIPEssSurfaceTemperature_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_decode_aper$handle() {
        return NTCIPEssSurfaceTemperature_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_aper$address() {
        return NTCIPEssSurfaceTemperature_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceTemperature_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceTemperature_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceTemperature_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceTemperature_encode_aper$descriptor() {
        return NTCIPEssSurfaceTemperature_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceTemperature_encode_aper$handle() {
        return NTCIPEssSurfaceTemperature_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_aper$address() {
        return NTCIPEssSurfaceTemperature_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceTemperature_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceTemperature_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceTemperature_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long SurfaceTempMeasurementStdDev_t
     * }
     */
    public static final OfLong SurfaceTempMeasurementStdDev_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_SurfaceTempMeasurementStdDev_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SurfaceTempMeasurementStdDev_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$layout() {
        return asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SurfaceTempMeasurementStdDev_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_SurfaceTempMeasurementStdDev_constr_1() {
        return asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_SurfaceTempMeasurementStdDev_constr_1
     * }
     */
    public static void asn_PER_type_SurfaceTempMeasurementStdDev_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$constants.SEGMENT, 0L, asn_PER_type_SurfaceTempMeasurementStdDev_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_SurfaceTempMeasurementStdDev$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SurfaceTempMeasurementStdDev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SurfaceTempMeasurementStdDev
     * }
     */
    public static GroupLayout asn_DEF_SurfaceTempMeasurementStdDev$layout() {
        return asn_DEF_SurfaceTempMeasurementStdDev$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SurfaceTempMeasurementStdDev
     * }
     */
    public static MemorySegment asn_DEF_SurfaceTempMeasurementStdDev() {
        return asn_DEF_SurfaceTempMeasurementStdDev$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SurfaceTempMeasurementStdDev
     * }
     */
    public static void asn_DEF_SurfaceTempMeasurementStdDev(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SurfaceTempMeasurementStdDev$constants.SEGMENT, 0L, asn_DEF_SurfaceTempMeasurementStdDev$constants.LAYOUT.byteSize());
    }

    private static class SurfaceTempMeasurementStdDev_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SurfaceTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_free$descriptor() {
        return SurfaceTempMeasurementStdDev_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SurfaceTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_free$handle() {
        return SurfaceTempMeasurementStdDev_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SurfaceTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_free$address() {
        return SurfaceTempMeasurementStdDev_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SurfaceTempMeasurementStdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void SurfaceTempMeasurementStdDev_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = SurfaceTempMeasurementStdDev_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_print$descriptor() {
        return SurfaceTempMeasurementStdDev_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_print$handle() {
        return SurfaceTempMeasurementStdDev_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_print$address() {
        return SurfaceTempMeasurementStdDev_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int SurfaceTempMeasurementStdDev_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SurfaceTempMeasurementStdDev_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_constraint$descriptor() {
        return SurfaceTempMeasurementStdDev_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_constraint$handle() {
        return SurfaceTempMeasurementStdDev_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_constraint$address() {
        return SurfaceTempMeasurementStdDev_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SurfaceTempMeasurementStdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int SurfaceTempMeasurementStdDev_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SurfaceTempMeasurementStdDev_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_decode_ber$descriptor() {
        return SurfaceTempMeasurementStdDev_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_decode_ber$handle() {
        return SurfaceTempMeasurementStdDev_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_ber$address() {
        return SurfaceTempMeasurementStdDev_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = SurfaceTempMeasurementStdDev_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_der$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_der$handle() {
        return SurfaceTempMeasurementStdDev_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_der$address() {
        return SurfaceTempMeasurementStdDev_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_decode_xer$descriptor() {
        return SurfaceTempMeasurementStdDev_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_decode_xer$handle() {
        return SurfaceTempMeasurementStdDev_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_xer$address() {
        return SurfaceTempMeasurementStdDev_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SurfaceTempMeasurementStdDev_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_xer$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_xer$handle() {
        return SurfaceTempMeasurementStdDev_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_xer$address() {
        return SurfaceTempMeasurementStdDev_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_jer$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_jer$handle() {
        return SurfaceTempMeasurementStdDev_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_jer$address() {
        return SurfaceTempMeasurementStdDev_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_decode_oer$descriptor() {
        return SurfaceTempMeasurementStdDev_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_decode_oer$handle() {
        return SurfaceTempMeasurementStdDev_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_oer$address() {
        return SurfaceTempMeasurementStdDev_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = SurfaceTempMeasurementStdDev_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_oer$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_oer$handle() {
        return SurfaceTempMeasurementStdDev_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_oer$address() {
        return SurfaceTempMeasurementStdDev_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_decode_uper$descriptor() {
        return SurfaceTempMeasurementStdDev_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_decode_uper$handle() {
        return SurfaceTempMeasurementStdDev_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_uper$address() {
        return SurfaceTempMeasurementStdDev_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SurfaceTempMeasurementStdDev_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_uper$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_uper$handle() {
        return SurfaceTempMeasurementStdDev_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_uper$address() {
        return SurfaceTempMeasurementStdDev_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_decode_aper$descriptor() {
        return SurfaceTempMeasurementStdDev_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_decode_aper$handle() {
        return SurfaceTempMeasurementStdDev_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_aper$address() {
        return SurfaceTempMeasurementStdDev_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t SurfaceTempMeasurementStdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = SurfaceTempMeasurementStdDev_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SurfaceTempMeasurementStdDev_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("SurfaceTempMeasurementStdDev_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor SurfaceTempMeasurementStdDev_encode_aper$descriptor() {
        return SurfaceTempMeasurementStdDev_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle SurfaceTempMeasurementStdDev_encode_aper$handle() {
        return SurfaceTempMeasurementStdDev_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_aper$address() {
        return SurfaceTempMeasurementStdDev_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t SurfaceTempMeasurementStdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment SurfaceTempMeasurementStdDev_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = SurfaceTempMeasurementStdDev_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SurfaceTempMeasurementStdDev_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int NTCIPPavementSensorSurfaceCondition_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_other = 1
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_other() {
        return NTCIPPavementSensorSurfaceCondition_other;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_error = (int)2L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_error = 2
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_error() {
        return NTCIPPavementSensorSurfaceCondition_error;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_dry = (int)3L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_dry = 3
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_dry() {
        return NTCIPPavementSensorSurfaceCondition_dry;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_moist = (int)4L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_moist = 4
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_moist() {
        return NTCIPPavementSensorSurfaceCondition_moist;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_chemicallyMoist = (int)5L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_chemicallyMoist = 5
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_chemicallyMoist() {
        return NTCIPPavementSensorSurfaceCondition_chemicallyMoist;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_wet = (int)6L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_wet = 6
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_wet() {
        return NTCIPPavementSensorSurfaceCondition_wet;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_chemicallyWet = (int)7L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_chemicallyWet = 7
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_chemicallyWet() {
        return NTCIPPavementSensorSurfaceCondition_chemicallyWet;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_standingWater = (int)8L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_standingWater = 8
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_standingWater() {
        return NTCIPPavementSensorSurfaceCondition_standingWater;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_frost = (int)9L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_frost = 9
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_frost() {
        return NTCIPPavementSensorSurfaceCondition_frost;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_slush = (int)10L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_slush = 10
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_slush() {
        return NTCIPPavementSensorSurfaceCondition_slush;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_snow = (int)11L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_snow = 11
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_snow() {
        return NTCIPPavementSensorSurfaceCondition_snow;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_ice = (int)12L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_ice = 12
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_ice() {
        return NTCIPPavementSensorSurfaceCondition_ice;
    }
    private static final int NTCIPPavementSensorSurfaceCondition_noReport = (int)13L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPavementSensorSurfaceCondition.NTCIPPavementSensorSurfaceCondition_noReport = 13
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_noReport() {
        return NTCIPPavementSensorSurfaceCondition_noReport;
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPPavementSensorSurfaceCondition_t
     * }
     */
    public static final OfLong NTCIPPavementSensorSurfaceCondition_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$layout() {
        return asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1() {
        return asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPPavementSensorSurfaceCondition_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPPavementSensorSurfaceCondition$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPPavementSensorSurfaceCondition").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPavementSensorSurfaceCondition
     * }
     */
    public static GroupLayout asn_DEF_NTCIPPavementSensorSurfaceCondition$layout() {
        return asn_DEF_NTCIPPavementSensorSurfaceCondition$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPavementSensorSurfaceCondition
     * }
     */
    public static MemorySegment asn_DEF_NTCIPPavementSensorSurfaceCondition() {
        return asn_DEF_NTCIPPavementSensorSurfaceCondition$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPavementSensorSurfaceCondition
     * }
     */
    public static void asn_DEF_NTCIPPavementSensorSurfaceCondition(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPPavementSensorSurfaceCondition$constants.SEGMENT, 0L, asn_DEF_NTCIPPavementSensorSurfaceCondition$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$layout() {
        return asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1() {
        return asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1
     * }
     */
    public static void asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$constants.SEGMENT, 0L, asn_SPC_NTCIPPavementSensorSurfaceCondition_specs_1$constants.LAYOUT.byteSize());
    }

    private static class NTCIPPavementSensorSurfaceCondition_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPPavementSensorSurfaceCondition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_free$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPPavementSensorSurfaceCondition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_free$handle() {
        return NTCIPPavementSensorSurfaceCondition_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPPavementSensorSurfaceCondition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_free$address() {
        return NTCIPPavementSensorSurfaceCondition_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPPavementSensorSurfaceCondition_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPPavementSensorSurfaceCondition_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_print$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_print$handle() {
        return NTCIPPavementSensorSurfaceCondition_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_print$address() {
        return NTCIPPavementSensorSurfaceCondition_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_constraint$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_constraint$handle() {
        return NTCIPPavementSensorSurfaceCondition_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_constraint$address() {
        return NTCIPPavementSensorSurfaceCondition_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPPavementSensorSurfaceCondition_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPPavementSensorSurfaceCondition_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_decode_ber$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_decode_ber$handle() {
        return NTCIPPavementSensorSurfaceCondition_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_ber$address() {
        return NTCIPPavementSensorSurfaceCondition_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_der$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_der$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_der$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_decode_xer$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_decode_xer$handle() {
        return NTCIPPavementSensorSurfaceCondition_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_xer$address() {
        return NTCIPPavementSensorSurfaceCondition_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_xer$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_xer$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_xer$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_jer$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_jer$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_jer$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_decode_oer$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_decode_oer$handle() {
        return NTCIPPavementSensorSurfaceCondition_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_oer$address() {
        return NTCIPPavementSensorSurfaceCondition_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_oer$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_oer$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_oer$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_decode_uper$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_decode_uper$handle() {
        return NTCIPPavementSensorSurfaceCondition_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_uper$address() {
        return NTCIPPavementSensorSurfaceCondition_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_uper$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_uper$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_uper$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_decode_aper$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_decode_aper$handle() {
        return NTCIPPavementSensorSurfaceCondition_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_aper$address() {
        return NTCIPPavementSensorSurfaceCondition_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPavementSensorSurfaceCondition_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPavementSensorSurfaceCondition_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPavementSensorSurfaceCondition_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPavementSensorSurfaceCondition_encode_aper$descriptor() {
        return NTCIPPavementSensorSurfaceCondition_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPPavementSensorSurfaceCondition_encode_aper$handle() {
        return NTCIPPavementSensorSurfaceCondition_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_aper$address() {
        return NTCIPPavementSensorSurfaceCondition_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPavementSensorSurfaceCondition_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPavementSensorSurfaceCondition_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPavementSensorSurfaceCondition_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPavementSensorSurfaceCondition_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssSurfaceIceOrWaterDepth_t
     * }
     */
    public static final OfLong NTCIPEssSurfaceIceOrWaterDepth_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$layout() {
        return asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1() {
        return asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssSurfaceIceOrWaterDepth_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssSurfaceIceOrWaterDepth").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceIceOrWaterDepth
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$layout() {
        return asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceIceOrWaterDepth
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssSurfaceIceOrWaterDepth() {
        return asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssSurfaceIceOrWaterDepth
     * }
     */
    public static void asn_DEF_NTCIPEssSurfaceIceOrWaterDepth(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$constants.SEGMENT, 0L, asn_DEF_NTCIPEssSurfaceIceOrWaterDepth$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceIceOrWaterDepth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_free$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceIceOrWaterDepth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_free$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssSurfaceIceOrWaterDepth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_free$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssSurfaceIceOrWaterDepth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssSurfaceIceOrWaterDepth_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_print$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_print$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_print$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssSurfaceIceOrWaterDepth_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_constraint$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_constraint$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_constraint$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssSurfaceIceOrWaterDepth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssSurfaceIceOrWaterDepth_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_decode_ber$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_decode_ber$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_ber$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_der$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_der$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_der$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_decode_xer$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_decode_xer$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_xer$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_xer$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_xer$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_xer$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_jer$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_jer$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_jer$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_decode_oer$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_decode_oer$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_oer$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_oer$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_oer$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_oer$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_decode_uper$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_decode_uper$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_uper$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_uper$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_uper$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_uper$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_decode_aper$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_decode_aper$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_aper$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssSurfaceIceOrWaterDepth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssSurfaceIceOrWaterDepth_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssSurfaceIceOrWaterDepth_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssSurfaceIceOrWaterDepth_encode_aper$descriptor() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssSurfaceIceOrWaterDepth_encode_aper$handle() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_aper$address() {
        return NTCIPEssSurfaceIceOrWaterDepth_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssSurfaceIceOrWaterDepth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssSurfaceIceOrWaterDepth_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssSurfaceIceOrWaterDepth_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssSurfaceIceOrWaterDepth_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipPavement$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipPavement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavement
     * }
     */
    public static GroupLayout asn_DEF_NtcipPavement$layout() {
        return asn_DEF_NtcipPavement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavement
     * }
     */
    public static MemorySegment asn_DEF_NtcipPavement() {
        return asn_DEF_NtcipPavement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavement
     * }
     */
    public static void asn_DEF_NtcipPavement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipPavement$constants.SEGMENT, 0L, asn_DEF_NtcipPavement$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipPavement_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipPavement_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavement_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipPavement_specs_1$layout() {
        return asn_SPC_NtcipPavement_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavement_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipPavement_specs_1() {
        return asn_SPC_NtcipPavement_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavement_specs_1
     * }
     */
    public static void asn_SPC_NtcipPavement_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipPavement_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipPavement_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipPavement_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipPavement_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipPavement_1$layout() {
        return asn_MBR_NtcipPavement_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static long[] asn_MBR_NtcipPavement_1$dimensions() {
        return asn_MBR_NtcipPavement_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPavement_1() {
        return asn_MBR_NtcipPavement_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static void asn_MBR_NtcipPavement_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPavement_1$constants.SEGMENT, 0L, asn_MBR_NtcipPavement_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPavement_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipPavement_1$constants.HANDLE.invokeExact(asn_MBR_NtcipPavement_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavement_1[5]
     * }
     */
    public static void asn_MBR_NtcipPavement_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPavement_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_NtcipVisibility$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipVisibility").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibility
     * }
     */
    public static GroupLayout asn_DEF_NtcipVisibility$layout() {
        return asn_DEF_NtcipVisibility$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibility
     * }
     */
    public static MemorySegment asn_DEF_NtcipVisibility() {
        return asn_DEF_NtcipVisibility$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibility
     * }
     */
    public static void asn_DEF_NtcipVisibility(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipVisibility$constants.SEGMENT, 0L, asn_DEF_NtcipVisibility$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipVisibility_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipVisibility_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibility_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipVisibility_specs_1$layout() {
        return asn_SPC_NtcipVisibility_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibility_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipVisibility_specs_1() {
        return asn_SPC_NtcipVisibility_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibility_specs_1
     * }
     */
    public static void asn_SPC_NtcipVisibility_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipVisibility_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipVisibility_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipVisibility_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipVisibility_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipVisibility_1$layout() {
        return asn_MBR_NtcipVisibility_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static long[] asn_MBR_NtcipVisibility_1$dimensions() {
        return asn_MBR_NtcipVisibility_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipVisibility_1() {
        return asn_MBR_NtcipVisibility_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static void asn_MBR_NtcipVisibility_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipVisibility_1$constants.SEGMENT, 0L, asn_MBR_NtcipVisibility_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipVisibility_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipVisibility_1$constants.HANDLE.invokeExact(asn_MBR_NtcipVisibility_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibility_1[1]
     * }
     */
    public static void asn_MBR_NtcipVisibility_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipVisibility_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int NTCIPEssVisibilitySituation_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_other = 1
     * }
     */
    public static int NTCIPEssVisibilitySituation_other() {
        return NTCIPEssVisibilitySituation_other;
    }
    private static final int NTCIPEssVisibilitySituation_unknown = (int)2L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_unknown = 2
     * }
     */
    public static int NTCIPEssVisibilitySituation_unknown() {
        return NTCIPEssVisibilitySituation_unknown;
    }
    private static final int NTCIPEssVisibilitySituation_clear = (int)3L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_clear = 3
     * }
     */
    public static int NTCIPEssVisibilitySituation_clear() {
        return NTCIPEssVisibilitySituation_clear;
    }
    private static final int NTCIPEssVisibilitySituation_fogNotPatchy = (int)4L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_fogNotPatchy = 4
     * }
     */
    public static int NTCIPEssVisibilitySituation_fogNotPatchy() {
        return NTCIPEssVisibilitySituation_fogNotPatchy;
    }
    private static final int NTCIPEssVisibilitySituation_patchyFog = (int)5L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_patchyFog = 5
     * }
     */
    public static int NTCIPEssVisibilitySituation_patchyFog() {
        return NTCIPEssVisibilitySituation_patchyFog;
    }
    private static final int NTCIPEssVisibilitySituation_blowingSnow = (int)6L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_blowingSnow = 6
     * }
     */
    public static int NTCIPEssVisibilitySituation_blowingSnow() {
        return NTCIPEssVisibilitySituation_blowingSnow;
    }
    private static final int NTCIPEssVisibilitySituation_smoke = (int)7L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_smoke = 7
     * }
     */
    public static int NTCIPEssVisibilitySituation_smoke() {
        return NTCIPEssVisibilitySituation_smoke;
    }
    private static final int NTCIPEssVisibilitySituation_seaSpray = (int)8L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_seaSpray = 8
     * }
     */
    public static int NTCIPEssVisibilitySituation_seaSpray() {
        return NTCIPEssVisibilitySituation_seaSpray;
    }
    private static final int NTCIPEssVisibilitySituation_vehicleSpray = (int)9L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_vehicleSpray = 9
     * }
     */
    public static int NTCIPEssVisibilitySituation_vehicleSpray() {
        return NTCIPEssVisibilitySituation_vehicleSpray;
    }
    private static final int NTCIPEssVisibilitySituation_blowingDustOrSand = (int)10L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_blowingDustOrSand = 10
     * }
     */
    public static int NTCIPEssVisibilitySituation_blowingDustOrSand() {
        return NTCIPEssVisibilitySituation_blowingDustOrSand;
    }
    private static final int NTCIPEssVisibilitySituation_sunGlare = (int)11L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_sunGlare = 11
     * }
     */
    public static int NTCIPEssVisibilitySituation_sunGlare() {
        return NTCIPEssVisibilitySituation_sunGlare;
    }
    private static final int NTCIPEssVisibilitySituation_swarmsOfInsects = (int)12L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssVisibilitySituation.NTCIPEssVisibilitySituation_swarmsOfInsects = 12
     * }
     */
    public static int NTCIPEssVisibilitySituation_swarmsOfInsects() {
        return NTCIPEssVisibilitySituation_swarmsOfInsects;
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssVisibilitySituation_t
     * }
     */
    public static final OfLong NTCIPEssVisibilitySituation_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssVisibilitySituation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssVisibilitySituation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibilitySituation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssVisibilitySituation_constr_1$layout() {
        return asn_PER_type_NTCIPEssVisibilitySituation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibilitySituation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssVisibilitySituation_constr_1() {
        return asn_PER_type_NTCIPEssVisibilitySituation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssVisibilitySituation_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssVisibilitySituation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssVisibilitySituation_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssVisibilitySituation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssVisibilitySituation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssVisibilitySituation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibilitySituation
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssVisibilitySituation$layout() {
        return asn_DEF_NTCIPEssVisibilitySituation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibilitySituation
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssVisibilitySituation() {
        return asn_DEF_NTCIPEssVisibilitySituation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssVisibilitySituation
     * }
     */
    public static void asn_DEF_NTCIPEssVisibilitySituation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssVisibilitySituation$constants.SEGMENT, 0L, asn_DEF_NTCIPEssVisibilitySituation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NTCIPEssVisibilitySituation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NTCIPEssVisibilitySituation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssVisibilitySituation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NTCIPEssVisibilitySituation_specs_1$layout() {
        return asn_SPC_NTCIPEssVisibilitySituation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssVisibilitySituation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NTCIPEssVisibilitySituation_specs_1() {
        return asn_SPC_NTCIPEssVisibilitySituation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssVisibilitySituation_specs_1
     * }
     */
    public static void asn_SPC_NTCIPEssVisibilitySituation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NTCIPEssVisibilitySituation_specs_1$constants.SEGMENT, 0L, asn_SPC_NTCIPEssVisibilitySituation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssVisibilitySituation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssVisibilitySituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_free$descriptor() {
        return NTCIPEssVisibilitySituation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssVisibilitySituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_free$handle() {
        return NTCIPEssVisibilitySituation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssVisibilitySituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_free$address() {
        return NTCIPEssVisibilitySituation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssVisibilitySituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssVisibilitySituation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssVisibilitySituation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_print$descriptor() {
        return NTCIPEssVisibilitySituation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_print$handle() {
        return NTCIPEssVisibilitySituation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_print$address() {
        return NTCIPEssVisibilitySituation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssVisibilitySituation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibilitySituation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_constraint$descriptor() {
        return NTCIPEssVisibilitySituation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_constraint$handle() {
        return NTCIPEssVisibilitySituation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_constraint$address() {
        return NTCIPEssVisibilitySituation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssVisibilitySituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssVisibilitySituation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibilitySituation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_decode_ber$descriptor() {
        return NTCIPEssVisibilitySituation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_decode_ber$handle() {
        return NTCIPEssVisibilitySituation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_ber$address() {
        return NTCIPEssVisibilitySituation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssVisibilitySituation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_der$descriptor() {
        return NTCIPEssVisibilitySituation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_der$handle() {
        return NTCIPEssVisibilitySituation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_der$address() {
        return NTCIPEssVisibilitySituation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssVisibilitySituation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_decode_xer$descriptor() {
        return NTCIPEssVisibilitySituation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_decode_xer$handle() {
        return NTCIPEssVisibilitySituation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_xer$address() {
        return NTCIPEssVisibilitySituation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssVisibilitySituation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_xer$descriptor() {
        return NTCIPEssVisibilitySituation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_xer$handle() {
        return NTCIPEssVisibilitySituation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_xer$address() {
        return NTCIPEssVisibilitySituation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssVisibilitySituation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_jer$descriptor() {
        return NTCIPEssVisibilitySituation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_jer$handle() {
        return NTCIPEssVisibilitySituation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_jer$address() {
        return NTCIPEssVisibilitySituation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssVisibilitySituation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_decode_oer$descriptor() {
        return NTCIPEssVisibilitySituation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_decode_oer$handle() {
        return NTCIPEssVisibilitySituation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_oer$address() {
        return NTCIPEssVisibilitySituation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssVisibilitySituation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_oer$descriptor() {
        return NTCIPEssVisibilitySituation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_oer$handle() {
        return NTCIPEssVisibilitySituation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_oer$address() {
        return NTCIPEssVisibilitySituation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibilitySituation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_decode_uper$descriptor() {
        return NTCIPEssVisibilitySituation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_decode_uper$handle() {
        return NTCIPEssVisibilitySituation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_uper$address() {
        return NTCIPEssVisibilitySituation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibilitySituation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_uper$descriptor() {
        return NTCIPEssVisibilitySituation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_uper$handle() {
        return NTCIPEssVisibilitySituation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_uper$address() {
        return NTCIPEssVisibilitySituation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibilitySituation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_decode_aper$descriptor() {
        return NTCIPEssVisibilitySituation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_decode_aper$handle() {
        return NTCIPEssVisibilitySituation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_aper$address() {
        return NTCIPEssVisibilitySituation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssVisibilitySituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssVisibilitySituation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssVisibilitySituation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssVisibilitySituation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssVisibilitySituation_encode_aper$descriptor() {
        return NTCIPEssVisibilitySituation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssVisibilitySituation_encode_aper$handle() {
        return NTCIPEssVisibilitySituation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_aper$address() {
        return NTCIPEssVisibilitySituation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssVisibilitySituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssVisibilitySituation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssVisibilitySituation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssVisibilitySituation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipVisibilitySituation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipVisibilitySituation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibilitySituation
     * }
     */
    public static GroupLayout asn_DEF_NtcipVisibilitySituation$layout() {
        return asn_DEF_NtcipVisibilitySituation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibilitySituation
     * }
     */
    public static MemorySegment asn_DEF_NtcipVisibilitySituation() {
        return asn_DEF_NtcipVisibilitySituation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipVisibilitySituation
     * }
     */
    public static void asn_DEF_NtcipVisibilitySituation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipVisibilitySituation$constants.SEGMENT, 0L, asn_DEF_NtcipVisibilitySituation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipVisibilitySituation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipVisibilitySituation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibilitySituation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipVisibilitySituation_specs_1$layout() {
        return asn_SPC_NtcipVisibilitySituation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibilitySituation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipVisibilitySituation_specs_1() {
        return asn_SPC_NtcipVisibilitySituation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipVisibilitySituation_specs_1
     * }
     */
    public static void asn_SPC_NtcipVisibilitySituation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipVisibilitySituation_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipVisibilitySituation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipVisibilitySituation_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipVisibilitySituation_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipVisibilitySituation_1$layout() {
        return asn_MBR_NtcipVisibilitySituation_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static long[] asn_MBR_NtcipVisibilitySituation_1$dimensions() {
        return asn_MBR_NtcipVisibilitySituation_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipVisibilitySituation_1() {
        return asn_MBR_NtcipVisibilitySituation_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static void asn_MBR_NtcipVisibilitySituation_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipVisibilitySituation_1$constants.SEGMENT, 0L, asn_MBR_NtcipVisibilitySituation_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipVisibilitySituation_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipVisibilitySituation_1$constants.HANDLE.invokeExact(asn_MBR_NtcipVisibilitySituation_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipVisibilitySituation_1[1]
     * }
     */
    public static void asn_MBR_NtcipVisibilitySituation_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipVisibilitySituation_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssCloudSituationV4_t
     * }
     */
    public static final OfLong NTCIPEssCloudSituationV4_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssCloudSituationV4_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssCloudSituationV4_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssCloudSituationV4_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssCloudSituationV4_constr_1$layout() {
        return asn_PER_type_NTCIPEssCloudSituationV4_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssCloudSituationV4_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssCloudSituationV4_constr_1() {
        return asn_PER_type_NTCIPEssCloudSituationV4_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssCloudSituationV4_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssCloudSituationV4_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssCloudSituationV4_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssCloudSituationV4_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssCloudSituationV4$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssCloudSituationV4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssCloudSituationV4
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssCloudSituationV4$layout() {
        return asn_DEF_NTCIPEssCloudSituationV4$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssCloudSituationV4
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssCloudSituationV4() {
        return asn_DEF_NTCIPEssCloudSituationV4$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssCloudSituationV4
     * }
     */
    public static void asn_DEF_NTCIPEssCloudSituationV4(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssCloudSituationV4$constants.SEGMENT, 0L, asn_DEF_NTCIPEssCloudSituationV4$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssCloudSituationV4_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssCloudSituationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_free$descriptor() {
        return NTCIPEssCloudSituationV4_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssCloudSituationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_free$handle() {
        return NTCIPEssCloudSituationV4_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssCloudSituationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_free$address() {
        return NTCIPEssCloudSituationV4_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssCloudSituationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssCloudSituationV4_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssCloudSituationV4_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_print$descriptor() {
        return NTCIPEssCloudSituationV4_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_print$handle() {
        return NTCIPEssCloudSituationV4_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_print$address() {
        return NTCIPEssCloudSituationV4_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssCloudSituationV4_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssCloudSituationV4_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_constraint$descriptor() {
        return NTCIPEssCloudSituationV4_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_constraint$handle() {
        return NTCIPEssCloudSituationV4_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_constraint$address() {
        return NTCIPEssCloudSituationV4_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssCloudSituationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssCloudSituationV4_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssCloudSituationV4_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_decode_ber$descriptor() {
        return NTCIPEssCloudSituationV4_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_decode_ber$handle() {
        return NTCIPEssCloudSituationV4_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_ber$address() {
        return NTCIPEssCloudSituationV4_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssCloudSituationV4_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_der$descriptor() {
        return NTCIPEssCloudSituationV4_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_der$handle() {
        return NTCIPEssCloudSituationV4_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_der$address() {
        return NTCIPEssCloudSituationV4_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssCloudSituationV4_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_decode_xer$descriptor() {
        return NTCIPEssCloudSituationV4_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_decode_xer$handle() {
        return NTCIPEssCloudSituationV4_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_xer$address() {
        return NTCIPEssCloudSituationV4_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssCloudSituationV4_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_xer$descriptor() {
        return NTCIPEssCloudSituationV4_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_xer$handle() {
        return NTCIPEssCloudSituationV4_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_xer$address() {
        return NTCIPEssCloudSituationV4_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssCloudSituationV4_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_jer$descriptor() {
        return NTCIPEssCloudSituationV4_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_jer$handle() {
        return NTCIPEssCloudSituationV4_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_jer$address() {
        return NTCIPEssCloudSituationV4_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssCloudSituationV4_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_decode_oer$descriptor() {
        return NTCIPEssCloudSituationV4_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_decode_oer$handle() {
        return NTCIPEssCloudSituationV4_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_oer$address() {
        return NTCIPEssCloudSituationV4_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssCloudSituationV4_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_oer$descriptor() {
        return NTCIPEssCloudSituationV4_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_oer$handle() {
        return NTCIPEssCloudSituationV4_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_oer$address() {
        return NTCIPEssCloudSituationV4_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssCloudSituationV4_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_decode_uper$descriptor() {
        return NTCIPEssCloudSituationV4_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_decode_uper$handle() {
        return NTCIPEssCloudSituationV4_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_uper$address() {
        return NTCIPEssCloudSituationV4_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssCloudSituationV4_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_uper$descriptor() {
        return NTCIPEssCloudSituationV4_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_uper$handle() {
        return NTCIPEssCloudSituationV4_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_uper$address() {
        return NTCIPEssCloudSituationV4_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssCloudSituationV4_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_decode_aper$descriptor() {
        return NTCIPEssCloudSituationV4_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_decode_aper$handle() {
        return NTCIPEssCloudSituationV4_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_aper$address() {
        return NTCIPEssCloudSituationV4_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssCloudSituationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssCloudSituationV4_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssCloudSituationV4_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssCloudSituationV4_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssCloudSituationV4_encode_aper$descriptor() {
        return NTCIPEssCloudSituationV4_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssCloudSituationV4_encode_aper$handle() {
        return NTCIPEssCloudSituationV4_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_aper$address() {
        return NTCIPEssCloudSituationV4_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssCloudSituationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssCloudSituationV4_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssCloudSituationV4_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssCloudSituationV4_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipCloudSituation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipCloudSituation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipCloudSituation
     * }
     */
    public static GroupLayout asn_DEF_NtcipCloudSituation$layout() {
        return asn_DEF_NtcipCloudSituation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipCloudSituation
     * }
     */
    public static MemorySegment asn_DEF_NtcipCloudSituation() {
        return asn_DEF_NtcipCloudSituation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipCloudSituation
     * }
     */
    public static void asn_DEF_NtcipCloudSituation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipCloudSituation$constants.SEGMENT, 0L, asn_DEF_NtcipCloudSituation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipCloudSituation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipCloudSituation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipCloudSituation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipCloudSituation_specs_1$layout() {
        return asn_SPC_NtcipCloudSituation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipCloudSituation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipCloudSituation_specs_1() {
        return asn_SPC_NtcipCloudSituation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipCloudSituation_specs_1
     * }
     */
    public static void asn_SPC_NtcipCloudSituation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipCloudSituation_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipCloudSituation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipCloudSituation_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipCloudSituation_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipCloudSituation_1$layout() {
        return asn_MBR_NtcipCloudSituation_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static long[] asn_MBR_NtcipCloudSituation_1$dimensions() {
        return asn_MBR_NtcipCloudSituation_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipCloudSituation_1() {
        return asn_MBR_NtcipCloudSituation_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static void asn_MBR_NtcipCloudSituation_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipCloudSituation_1$constants.SEGMENT, 0L, asn_MBR_NtcipCloudSituation_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipCloudSituation_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipCloudSituation_1$constants.HANDLE.invokeExact(asn_MBR_NtcipCloudSituation_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipCloudSituation_1[1]
     * }
     */
    public static void asn_MBR_NtcipCloudSituation_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipCloudSituation_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_other = 1
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_other() {
        return NTCIPPrecipitationSensorPrecipSituation_other;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_unknown = (int)2L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_unknown = 2
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_unknown() {
        return NTCIPPrecipitationSensorPrecipSituation_unknown;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_noPrecipitation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_noPrecipitation = 3
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_noPrecipitation() {
        return NTCIPPrecipitationSensorPrecipSituation_noPrecipitation;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_unidentifiedSlight = (int)4L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_unidentifiedSlight = 4
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_unidentifiedSlight() {
        return NTCIPPrecipitationSensorPrecipSituation_unidentifiedSlight;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_unidentifiedModerate = (int)5L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_unidentifiedModerate = 5
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_unidentifiedModerate() {
        return NTCIPPrecipitationSensorPrecipSituation_unidentifiedModerate;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_unidentifiedHeavy = (int)6L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_unidentifiedHeavy = 6
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_unidentifiedHeavy() {
        return NTCIPPrecipitationSensorPrecipSituation_unidentifiedHeavy;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_snowSlight = (int)7L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_snowSlight = 7
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_snowSlight() {
        return NTCIPPrecipitationSensorPrecipSituation_snowSlight;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_snowModerate = (int)8L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_snowModerate = 8
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_snowModerate() {
        return NTCIPPrecipitationSensorPrecipSituation_snowModerate;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_snowHeavy = (int)9L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_snowHeavy = 9
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_snowHeavy() {
        return NTCIPPrecipitationSensorPrecipSituation_snowHeavy;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_rainSlight = (int)10L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_rainSlight = 10
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_rainSlight() {
        return NTCIPPrecipitationSensorPrecipSituation_rainSlight;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_rainModerate = (int)11L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_rainModerate = 11
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_rainModerate() {
        return NTCIPPrecipitationSensorPrecipSituation_rainModerate;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_rainHeavy = (int)12L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_rainHeavy = 12
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_rainHeavy() {
        return NTCIPPrecipitationSensorPrecipSituation_rainHeavy;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationSlight = (int)13L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationSlight = 13
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationSlight() {
        return NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationSlight;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationModerate = (int)14L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationModerate = 14
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationModerate() {
        return NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationModerate;
    }
    private static final int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationHeavy = (int)15L;
    /**
     * {@snippet lang=c :
     * enum NTCIPPrecipitationSensorPrecipSituation.NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationHeavy = 15
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationHeavy() {
        return NTCIPPrecipitationSensorPrecipSituation_frozenPrecipitationHeavy;
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPPrecipitationSensorPrecipSituation_t
     * }
     */
    public static final OfLong NTCIPPrecipitationSensorPrecipSituation_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$layout() {
        return asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1() {
        return asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPPrecipitationSensorPrecipSituation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPPrecipitationSensorPrecipSituation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPPrecipitationSensorPrecipSituation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPrecipitationSensorPrecipSituation
     * }
     */
    public static GroupLayout asn_DEF_NTCIPPrecipitationSensorPrecipSituation$layout() {
        return asn_DEF_NTCIPPrecipitationSensorPrecipSituation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPrecipitationSensorPrecipSituation
     * }
     */
    public static MemorySegment asn_DEF_NTCIPPrecipitationSensorPrecipSituation() {
        return asn_DEF_NTCIPPrecipitationSensorPrecipSituation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPPrecipitationSensorPrecipSituation
     * }
     */
    public static void asn_DEF_NTCIPPrecipitationSensorPrecipSituation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPPrecipitationSensorPrecipSituation$constants.SEGMENT, 0L, asn_DEF_NTCIPPrecipitationSensorPrecipSituation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$layout() {
        return asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1() {
        return asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1
     * }
     */
    public static void asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$constants.SEGMENT, 0L, asn_SPC_NTCIPPrecipitationSensorPrecipSituation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPPrecipitationSensorPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_free$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPPrecipitationSensorPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_free$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPPrecipitationSensorPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_free$address() {
        return NTCIPPrecipitationSensorPrecipSituation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPPrecipitationSensorPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPPrecipitationSensorPrecipSituation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_print$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_print$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_print$address() {
        return NTCIPPrecipitationSensorPrecipSituation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_constraint$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_constraint$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_constraint$address() {
        return NTCIPPrecipitationSensorPrecipSituation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPPrecipitationSensorPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPPrecipitationSensorPrecipSituation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_decode_ber$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_decode_ber$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_ber$address() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_der$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_der$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_der$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_decode_xer$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_decode_xer$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_xer$address() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_xer$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_xer$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_xer$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_jer$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_jer$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_jer$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_decode_oer$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_decode_oer$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_oer$address() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_oer$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_oer$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_oer$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_decode_uper$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_decode_uper$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_uper$address() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_uper$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_uper$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_uper$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_decode_aper$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_decode_aper$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_aper$address() {
        return NTCIPPrecipitationSensorPrecipSituation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPPrecipitationSensorPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPPrecipitationSensorPrecipSituation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPPrecipitationSensorPrecipSituation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPPrecipitationSensorPrecipSituation_encode_aper$descriptor() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPPrecipitationSensorPrecipSituation_encode_aper$handle() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_aper$address() {
        return NTCIPPrecipitationSensorPrecipSituation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPPrecipitationSensorPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPPrecipitationSensorPrecipSituation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPPrecipitationSensorPrecipSituation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPPrecipitationSensorPrecipSituation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipPrecipitation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipPrecipitation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPrecipitation
     * }
     */
    public static GroupLayout asn_DEF_NtcipPrecipitation$layout() {
        return asn_DEF_NtcipPrecipitation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPrecipitation
     * }
     */
    public static MemorySegment asn_DEF_NtcipPrecipitation() {
        return asn_DEF_NtcipPrecipitation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPrecipitation
     * }
     */
    public static void asn_DEF_NtcipPrecipitation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipPrecipitation$constants.SEGMENT, 0L, asn_DEF_NtcipPrecipitation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipPrecipitation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipPrecipitation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPrecipitation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipPrecipitation_specs_1$layout() {
        return asn_SPC_NtcipPrecipitation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPrecipitation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipPrecipitation_specs_1() {
        return asn_SPC_NtcipPrecipitation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPrecipitation_specs_1
     * }
     */
    public static void asn_SPC_NtcipPrecipitation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipPrecipitation_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipPrecipitation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipPrecipitation_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipPrecipitation_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipPrecipitation_1$layout() {
        return asn_MBR_NtcipPrecipitation_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static long[] asn_MBR_NtcipPrecipitation_1$dimensions() {
        return asn_MBR_NtcipPrecipitation_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPrecipitation_1() {
        return asn_MBR_NtcipPrecipitation_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static void asn_MBR_NtcipPrecipitation_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPrecipitation_1$constants.SEGMENT, 0L, asn_MBR_NtcipPrecipitation_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPrecipitation_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipPrecipitation_1$constants.HANDLE.invokeExact(asn_MBR_NtcipPrecipitation_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPrecipitation_1[1]
     * }
     */
    public static void asn_MBR_NtcipPrecipitation_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPrecipitation_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssTotalRadiationV4_t
     * }
     */
    public static final OfLong NTCIPEssTotalRadiationV4_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssTotalRadiationV4_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationV4_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$layout() {
        return asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationV4_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssTotalRadiationV4_constr_1() {
        return asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationV4_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssTotalRadiationV4_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssTotalRadiationV4_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssTotalRadiationV4$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssTotalRadiationV4").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationV4
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssTotalRadiationV4$layout() {
        return asn_DEF_NTCIPEssTotalRadiationV4$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationV4
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssTotalRadiationV4() {
        return asn_DEF_NTCIPEssTotalRadiationV4$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationV4
     * }
     */
    public static void asn_DEF_NTCIPEssTotalRadiationV4(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssTotalRadiationV4$constants.SEGMENT, 0L, asn_DEF_NTCIPEssTotalRadiationV4$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssTotalRadiationV4_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_free$descriptor() {
        return NTCIPEssTotalRadiationV4_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_free$handle() {
        return NTCIPEssTotalRadiationV4_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_free$address() {
        return NTCIPEssTotalRadiationV4_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationV4_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssTotalRadiationV4_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssTotalRadiationV4_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_print$descriptor() {
        return NTCIPEssTotalRadiationV4_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_print$handle() {
        return NTCIPEssTotalRadiationV4_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_print$address() {
        return NTCIPEssTotalRadiationV4_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssTotalRadiationV4_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationV4_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_constraint$descriptor() {
        return NTCIPEssTotalRadiationV4_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_constraint$handle() {
        return NTCIPEssTotalRadiationV4_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_constraint$address() {
        return NTCIPEssTotalRadiationV4_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationV4_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssTotalRadiationV4_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationV4_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_decode_ber$descriptor() {
        return NTCIPEssTotalRadiationV4_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_decode_ber$handle() {
        return NTCIPEssTotalRadiationV4_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_ber$address() {
        return NTCIPEssTotalRadiationV4_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssTotalRadiationV4_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_der$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_der$handle() {
        return NTCIPEssTotalRadiationV4_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_der$address() {
        return NTCIPEssTotalRadiationV4_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_decode_xer$descriptor() {
        return NTCIPEssTotalRadiationV4_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_decode_xer$handle() {
        return NTCIPEssTotalRadiationV4_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_xer$address() {
        return NTCIPEssTotalRadiationV4_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTotalRadiationV4_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_xer$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_xer$handle() {
        return NTCIPEssTotalRadiationV4_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_xer$address() {
        return NTCIPEssTotalRadiationV4_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_jer$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_jer$handle() {
        return NTCIPEssTotalRadiationV4_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_jer$address() {
        return NTCIPEssTotalRadiationV4_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_decode_oer$descriptor() {
        return NTCIPEssTotalRadiationV4_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_decode_oer$handle() {
        return NTCIPEssTotalRadiationV4_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_oer$address() {
        return NTCIPEssTotalRadiationV4_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTotalRadiationV4_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_oer$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_oer$handle() {
        return NTCIPEssTotalRadiationV4_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_oer$address() {
        return NTCIPEssTotalRadiationV4_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_decode_uper$descriptor() {
        return NTCIPEssTotalRadiationV4_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_decode_uper$handle() {
        return NTCIPEssTotalRadiationV4_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_uper$address() {
        return NTCIPEssTotalRadiationV4_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationV4_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_uper$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_uper$handle() {
        return NTCIPEssTotalRadiationV4_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_uper$address() {
        return NTCIPEssTotalRadiationV4_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_decode_aper$descriptor() {
        return NTCIPEssTotalRadiationV4_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_decode_aper$handle() {
        return NTCIPEssTotalRadiationV4_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_aper$address() {
        return NTCIPEssTotalRadiationV4_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationV4_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationV4_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationV4_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationV4_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationV4_encode_aper$descriptor() {
        return NTCIPEssTotalRadiationV4_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationV4_encode_aper$handle() {
        return NTCIPEssTotalRadiationV4_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_aper$address() {
        return NTCIPEssTotalRadiationV4_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationV4_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationV4_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationV4_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationV4_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssTotalRadiationPeriod_t
     * }
     */
    public static final OfLong NTCIPEssTotalRadiationPeriod_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$layout() {
        return asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1() {
        return asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssTotalRadiationPeriod_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssTotalRadiationPeriod$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssTotalRadiationPeriod").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationPeriod
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssTotalRadiationPeriod$layout() {
        return asn_DEF_NTCIPEssTotalRadiationPeriod$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationPeriod
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssTotalRadiationPeriod() {
        return asn_DEF_NTCIPEssTotalRadiationPeriod$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssTotalRadiationPeriod
     * }
     */
    public static void asn_DEF_NTCIPEssTotalRadiationPeriod(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssTotalRadiationPeriod$constants.SEGMENT, 0L, asn_DEF_NTCIPEssTotalRadiationPeriod$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssTotalRadiationPeriod_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationPeriod_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_free$descriptor() {
        return NTCIPEssTotalRadiationPeriod_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationPeriod_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_free$handle() {
        return NTCIPEssTotalRadiationPeriod_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationPeriod_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_free$address() {
        return NTCIPEssTotalRadiationPeriod_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssTotalRadiationPeriod_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssTotalRadiationPeriod_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssTotalRadiationPeriod_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_print$descriptor() {
        return NTCIPEssTotalRadiationPeriod_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_print$handle() {
        return NTCIPEssTotalRadiationPeriod_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_print$address() {
        return NTCIPEssTotalRadiationPeriod_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssTotalRadiationPeriod_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationPeriod_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_constraint$descriptor() {
        return NTCIPEssTotalRadiationPeriod_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_constraint$handle() {
        return NTCIPEssTotalRadiationPeriod_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_constraint$address() {
        return NTCIPEssTotalRadiationPeriod_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssTotalRadiationPeriod_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssTotalRadiationPeriod_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationPeriod_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_decode_ber$descriptor() {
        return NTCIPEssTotalRadiationPeriod_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_decode_ber$handle() {
        return NTCIPEssTotalRadiationPeriod_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_ber$address() {
        return NTCIPEssTotalRadiationPeriod_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssTotalRadiationPeriod_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_der$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_der$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_der$address() {
        return NTCIPEssTotalRadiationPeriod_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_decode_xer$descriptor() {
        return NTCIPEssTotalRadiationPeriod_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_decode_xer$handle() {
        return NTCIPEssTotalRadiationPeriod_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_xer$address() {
        return NTCIPEssTotalRadiationPeriod_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTotalRadiationPeriod_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_xer$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_xer$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_xer$address() {
        return NTCIPEssTotalRadiationPeriod_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_jer$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_jer$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_jer$address() {
        return NTCIPEssTotalRadiationPeriod_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_decode_oer$descriptor() {
        return NTCIPEssTotalRadiationPeriod_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_decode_oer$handle() {
        return NTCIPEssTotalRadiationPeriod_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_oer$address() {
        return NTCIPEssTotalRadiationPeriod_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssTotalRadiationPeriod_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_oer$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_oer$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_oer$address() {
        return NTCIPEssTotalRadiationPeriod_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_decode_uper$descriptor() {
        return NTCIPEssTotalRadiationPeriod_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_decode_uper$handle() {
        return NTCIPEssTotalRadiationPeriod_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_uper$address() {
        return NTCIPEssTotalRadiationPeriod_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationPeriod_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_uper$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_uper$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_uper$address() {
        return NTCIPEssTotalRadiationPeriod_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_decode_aper$descriptor() {
        return NTCIPEssTotalRadiationPeriod_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_decode_aper$handle() {
        return NTCIPEssTotalRadiationPeriod_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_aper$address() {
        return NTCIPEssTotalRadiationPeriod_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssTotalRadiationPeriod_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssTotalRadiationPeriod_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssTotalRadiationPeriod_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssTotalRadiationPeriod_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssTotalRadiationPeriod_encode_aper$descriptor() {
        return NTCIPEssTotalRadiationPeriod_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssTotalRadiationPeriod_encode_aper$handle() {
        return NTCIPEssTotalRadiationPeriod_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_aper$address() {
        return NTCIPEssTotalRadiationPeriod_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssTotalRadiationPeriod_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssTotalRadiationPeriod_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssTotalRadiationPeriod_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssTotalRadiationPeriod_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipSolarRadiation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipSolarRadiation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipSolarRadiation
     * }
     */
    public static GroupLayout asn_DEF_NtcipSolarRadiation$layout() {
        return asn_DEF_NtcipSolarRadiation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipSolarRadiation
     * }
     */
    public static MemorySegment asn_DEF_NtcipSolarRadiation() {
        return asn_DEF_NtcipSolarRadiation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipSolarRadiation
     * }
     */
    public static void asn_DEF_NtcipSolarRadiation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipSolarRadiation$constants.SEGMENT, 0L, asn_DEF_NtcipSolarRadiation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipSolarRadiation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipSolarRadiation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipSolarRadiation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipSolarRadiation_specs_1$layout() {
        return asn_SPC_NtcipSolarRadiation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipSolarRadiation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipSolarRadiation_specs_1() {
        return asn_SPC_NtcipSolarRadiation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipSolarRadiation_specs_1
     * }
     */
    public static void asn_SPC_NtcipSolarRadiation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipSolarRadiation_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipSolarRadiation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipSolarRadiation_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipSolarRadiation_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipSolarRadiation_1$layout() {
        return asn_MBR_NtcipSolarRadiation_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static long[] asn_MBR_NtcipSolarRadiation_1$dimensions() {
        return asn_MBR_NtcipSolarRadiation_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipSolarRadiation_1() {
        return asn_MBR_NtcipSolarRadiation_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static void asn_MBR_NtcipSolarRadiation_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipSolarRadiation_1$constants.SEGMENT, 0L, asn_MBR_NtcipSolarRadiation_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static MemorySegment asn_MBR_NtcipSolarRadiation_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipSolarRadiation_1$constants.HANDLE.invokeExact(asn_MBR_NtcipSolarRadiation_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipSolarRadiation_1[2]
     * }
     */
    public static void asn_MBR_NtcipSolarRadiation_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipSolarRadiation_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RoadWeatherUpload_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherUpload_PR.RoadWeatherUpload_PR_NOTHING = 0
     * }
     */
    public static int RoadWeatherUpload_PR_NOTHING() {
        return RoadWeatherUpload_PR_NOTHING;
    }
    private static final int RoadWeatherUpload_PR_vehicleReport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherUpload_PR.RoadWeatherUpload_PR_vehicleReport = 1
     * }
     */
    public static int RoadWeatherUpload_PR_vehicleReport() {
        return RoadWeatherUpload_PR_vehicleReport;
    }
    private static final int RoadWeatherUpload_PR_citizenReport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherUpload_PR.RoadWeatherUpload_PR_citizenReport = 2
     * }
     */
    public static int RoadWeatherUpload_PR_citizenReport() {
        return RoadWeatherUpload_PR_citizenReport;
    }

    private static class asn_DEF_RoadWeatherUpload$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RoadWeatherUpload").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherUpload
     * }
     */
    public static GroupLayout asn_DEF_RoadWeatherUpload$layout() {
        return asn_DEF_RoadWeatherUpload$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherUpload
     * }
     */
    public static MemorySegment asn_DEF_RoadWeatherUpload() {
        return asn_DEF_RoadWeatherUpload$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherUpload
     * }
     */
    public static void asn_DEF_RoadWeatherUpload(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RoadWeatherUpload$constants.SEGMENT, 0L, asn_DEF_RoadWeatherUpload$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RoadWeatherUpload_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RoadWeatherUpload_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherUpload_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RoadWeatherUpload_specs_1$layout() {
        return asn_SPC_RoadWeatherUpload_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherUpload_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RoadWeatherUpload_specs_1() {
        return asn_SPC_RoadWeatherUpload_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherUpload_specs_1
     * }
     */
    public static void asn_SPC_RoadWeatherUpload_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RoadWeatherUpload_specs_1$constants.SEGMENT, 0L, asn_SPC_RoadWeatherUpload_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RoadWeatherUpload_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RoadWeatherUpload_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RoadWeatherUpload_1$layout() {
        return asn_MBR_RoadWeatherUpload_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static long[] asn_MBR_RoadWeatherUpload_1$dimensions() {
        return asn_MBR_RoadWeatherUpload_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherUpload_1() {
        return asn_MBR_RoadWeatherUpload_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherUpload_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherUpload_1$constants.SEGMENT, 0L, asn_MBR_RoadWeatherUpload_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherUpload_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RoadWeatherUpload_1$constants.HANDLE.invokeExact(asn_MBR_RoadWeatherUpload_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherUpload_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherUpload_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherUpload_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RoadWeatherUpload_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RoadWeatherUpload_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherUpload_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RoadWeatherUpload_constr_1$layout() {
        return asn_PER_type_RoadWeatherUpload_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherUpload_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RoadWeatherUpload_constr_1() {
        return asn_PER_type_RoadWeatherUpload_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherUpload_constr_1
     * }
     */
    public static void asn_PER_type_RoadWeatherUpload_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RoadWeatherUpload_constr_1$constants.SEGMENT, 0L, asn_PER_type_RoadWeatherUpload_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VehicleReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleReport
     * }
     */
    public static GroupLayout asn_DEF_VehicleReport$layout() {
        return asn_DEF_VehicleReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleReport
     * }
     */
    public static MemorySegment asn_DEF_VehicleReport() {
        return asn_DEF_VehicleReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleReport
     * }
     */
    public static void asn_DEF_VehicleReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleReport$constants.SEGMENT, 0L, asn_DEF_VehicleReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehicleReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehicleReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehicleReport_specs_1$layout() {
        return asn_SPC_VehicleReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehicleReport_specs_1() {
        return asn_SPC_VehicleReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleReport_specs_1
     * }
     */
    public static void asn_SPC_VehicleReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehicleReport_specs_1$constants.SEGMENT, 0L, asn_SPC_VehicleReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_VehicleReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_VehicleReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_VehicleReport_1$layout() {
        return asn_MBR_VehicleReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static long[] asn_MBR_VehicleReport_1$dimensions() {
        return asn_MBR_VehicleReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_VehicleReport_1() {
        return asn_MBR_VehicleReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static void asn_MBR_VehicleReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleReport_1$constants.SEGMENT, 0L, asn_MBR_VehicleReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static MemorySegment asn_MBR_VehicleReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_VehicleReport_1$constants.HANDLE.invokeExact(asn_MBR_VehicleReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleReport_1[2]
     * }
     */
    public static void asn_MBR_VehicleReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_WDMSFleetData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WDMSFleetData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WDMSFleetData
     * }
     */
    public static GroupLayout asn_DEF_WDMSFleetData$layout() {
        return asn_DEF_WDMSFleetData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WDMSFleetData
     * }
     */
    public static MemorySegment asn_DEF_WDMSFleetData() {
        return asn_DEF_WDMSFleetData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WDMSFleetData
     * }
     */
    public static void asn_DEF_WDMSFleetData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WDMSFleetData$constants.SEGMENT, 0L, asn_DEF_WDMSFleetData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WDMSFleetData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WDMSFleetData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WDMSFleetData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WDMSFleetData_specs_1$layout() {
        return asn_SPC_WDMSFleetData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WDMSFleetData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WDMSFleetData_specs_1() {
        return asn_SPC_WDMSFleetData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WDMSFleetData_specs_1
     * }
     */
    public static void asn_SPC_WDMSFleetData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WDMSFleetData_specs_1$constants.SEGMENT, 0L, asn_SPC_WDMSFleetData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WDMSFleetData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WDMSFleetData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_WDMSFleetData_1$layout() {
        return asn_MBR_WDMSFleetData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static long[] asn_MBR_WDMSFleetData_1$dimensions() {
        return asn_MBR_WDMSFleetData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_WDMSFleetData_1() {
        return asn_MBR_WDMSFleetData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static void asn_MBR_WDMSFleetData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WDMSFleetData_1$constants.SEGMENT, 0L, asn_MBR_WDMSFleetData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static MemorySegment asn_MBR_WDMSFleetData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WDMSFleetData_1$constants.HANDLE.invokeExact(asn_MBR_WDMSFleetData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WDMSFleetData_1[2]
     * }
     */
    public static void asn_MBR_WDMSFleetData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WDMSFleetData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPavementTreatmentLatitude_t
     * }
     */
    public static final OfLong NTCIPEssPavementTreatmentLatitude_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$layout() {
        return asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1() {
        return asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPavementTreatmentLatitude_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPavementTreatmentLatitude$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPavementTreatmentLatitude").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLatitude
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPavementTreatmentLatitude$layout() {
        return asn_DEF_NTCIPEssPavementTreatmentLatitude$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLatitude
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPavementTreatmentLatitude() {
        return asn_DEF_NTCIPEssPavementTreatmentLatitude$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLatitude
     * }
     */
    public static void asn_DEF_NTCIPEssPavementTreatmentLatitude(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPavementTreatmentLatitude$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPavementTreatmentLatitude$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPavementTreatmentLatitude_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLatitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_free$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLatitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_free$handle() {
        return NTCIPEssPavementTreatmentLatitude_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLatitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_free$address() {
        return NTCIPEssPavementTreatmentLatitude_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLatitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPavementTreatmentLatitude_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_print$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_print$handle() {
        return NTCIPEssPavementTreatmentLatitude_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_print$address() {
        return NTCIPEssPavementTreatmentLatitude_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLatitude_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_constraint$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_constraint$handle() {
        return NTCIPEssPavementTreatmentLatitude_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_constraint$address() {
        return NTCIPEssPavementTreatmentLatitude_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLatitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLatitude_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_decode_ber$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_decode_ber$handle() {
        return NTCIPEssPavementTreatmentLatitude_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_ber$address() {
        return NTCIPEssPavementTreatmentLatitude_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_der$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_der$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_der$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_decode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_decode_xer$handle() {
        return NTCIPEssPavementTreatmentLatitude_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_xer$address() {
        return NTCIPEssPavementTreatmentLatitude_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_xer$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_xer$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_jer$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_jer$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_jer$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_decode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_decode_oer$handle() {
        return NTCIPEssPavementTreatmentLatitude_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_oer$address() {
        return NTCIPEssPavementTreatmentLatitude_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_oer$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_oer$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_decode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_decode_uper$handle() {
        return NTCIPEssPavementTreatmentLatitude_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_uper$address() {
        return NTCIPEssPavementTreatmentLatitude_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_uper$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_uper$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_decode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_decode_aper$handle() {
        return NTCIPEssPavementTreatmentLatitude_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_aper$address() {
        return NTCIPEssPavementTreatmentLatitude_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLatitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLatitude_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLatitude_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLatitude_encode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLatitude_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLatitude_encode_aper$handle() {
        return NTCIPEssPavementTreatmentLatitude_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_aper$address() {
        return NTCIPEssPavementTreatmentLatitude_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLatitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLatitude_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLatitude_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLatitude_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPavementTreatmentLongitude_t
     * }
     */
    public static final OfLong NTCIPEssPavementTreatmentLongitude_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$layout() {
        return asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1() {
        return asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPavementTreatmentLongitude_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPavementTreatmentLongitude$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPavementTreatmentLongitude").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLongitude
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPavementTreatmentLongitude$layout() {
        return asn_DEF_NTCIPEssPavementTreatmentLongitude$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLongitude
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPavementTreatmentLongitude() {
        return asn_DEF_NTCIPEssPavementTreatmentLongitude$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLongitude
     * }
     */
    public static void asn_DEF_NTCIPEssPavementTreatmentLongitude(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPavementTreatmentLongitude$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPavementTreatmentLongitude$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPavementTreatmentLongitude_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLongitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_free$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLongitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_free$handle() {
        return NTCIPEssPavementTreatmentLongitude_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLongitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_free$address() {
        return NTCIPEssPavementTreatmentLongitude_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLongitude_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPavementTreatmentLongitude_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_print$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_print$handle() {
        return NTCIPEssPavementTreatmentLongitude_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_print$address() {
        return NTCIPEssPavementTreatmentLongitude_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLongitude_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_constraint$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_constraint$handle() {
        return NTCIPEssPavementTreatmentLongitude_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_constraint$address() {
        return NTCIPEssPavementTreatmentLongitude_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLongitude_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLongitude_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_decode_ber$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_decode_ber$handle() {
        return NTCIPEssPavementTreatmentLongitude_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_ber$address() {
        return NTCIPEssPavementTreatmentLongitude_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_der$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_der$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_der$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_decode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_decode_xer$handle() {
        return NTCIPEssPavementTreatmentLongitude_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_xer$address() {
        return NTCIPEssPavementTreatmentLongitude_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_xer$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_xer$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_jer$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_jer$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_jer$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_decode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_decode_oer$handle() {
        return NTCIPEssPavementTreatmentLongitude_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_oer$address() {
        return NTCIPEssPavementTreatmentLongitude_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_oer$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_oer$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_decode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_decode_uper$handle() {
        return NTCIPEssPavementTreatmentLongitude_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_uper$address() {
        return NTCIPEssPavementTreatmentLongitude_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_uper$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_uper$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_decode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_decode_aper$handle() {
        return NTCIPEssPavementTreatmentLongitude_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_aper$address() {
        return NTCIPEssPavementTreatmentLongitude_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLongitude_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLongitude_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLongitude_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLongitude_encode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLongitude_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLongitude_encode_aper$handle() {
        return NTCIPEssPavementTreatmentLongitude_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_aper$address() {
        return NTCIPEssPavementTreatmentLongitude_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLongitude_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLongitude_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLongitude_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLongitude_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$layout() {
        return asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1() {
        return asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPavementTreatmentLocation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPavementTreatmentLocation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPavementTreatmentLocation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLocation
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPavementTreatmentLocation$layout() {
        return asn_DEF_NTCIPEssPavementTreatmentLocation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLocation
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPavementTreatmentLocation() {
        return asn_DEF_NTCIPEssPavementTreatmentLocation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPavementTreatmentLocation
     * }
     */
    public static void asn_DEF_NTCIPEssPavementTreatmentLocation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPavementTreatmentLocation$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPavementTreatmentLocation$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPavementTreatmentLocation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLocation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_free$descriptor() {
        return NTCIPEssPavementTreatmentLocation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLocation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_free$handle() {
        return NTCIPEssPavementTreatmentLocation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLocation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_free$address() {
        return NTCIPEssPavementTreatmentLocation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPavementTreatmentLocation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPavementTreatmentLocation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPavementTreatmentLocation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_print$descriptor() {
        return NTCIPEssPavementTreatmentLocation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_print$handle() {
        return NTCIPEssPavementTreatmentLocation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_print$address() {
        return NTCIPEssPavementTreatmentLocation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLocation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLocation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_constraint$descriptor() {
        return NTCIPEssPavementTreatmentLocation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_constraint$handle() {
        return NTCIPEssPavementTreatmentLocation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_constraint$address() {
        return NTCIPEssPavementTreatmentLocation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPavementTreatmentLocation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPavementTreatmentLocation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLocation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_decode_ber$descriptor() {
        return NTCIPEssPavementTreatmentLocation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_decode_ber$handle() {
        return NTCIPEssPavementTreatmentLocation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_ber$address() {
        return NTCIPEssPavementTreatmentLocation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPavementTreatmentLocation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_der$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_der$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_der$address() {
        return NTCIPEssPavementTreatmentLocation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_decode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLocation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_decode_xer$handle() {
        return NTCIPEssPavementTreatmentLocation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_xer$address() {
        return NTCIPEssPavementTreatmentLocation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLocation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_xer$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_xer$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_xer$address() {
        return NTCIPEssPavementTreatmentLocation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_jer$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_jer$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_jer$address() {
        return NTCIPEssPavementTreatmentLocation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_decode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLocation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_decode_oer$handle() {
        return NTCIPEssPavementTreatmentLocation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_oer$address() {
        return NTCIPEssPavementTreatmentLocation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPavementTreatmentLocation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_oer$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_oer$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_oer$address() {
        return NTCIPEssPavementTreatmentLocation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_decode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLocation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_decode_uper$handle() {
        return NTCIPEssPavementTreatmentLocation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_uper$address() {
        return NTCIPEssPavementTreatmentLocation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLocation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_uper$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_uper$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_uper$address() {
        return NTCIPEssPavementTreatmentLocation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_decode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLocation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_decode_aper$handle() {
        return NTCIPEssPavementTreatmentLocation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_aper$address() {
        return NTCIPEssPavementTreatmentLocation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPavementTreatmentLocation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPavementTreatmentLocation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPavementTreatmentLocation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPavementTreatmentLocation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPavementTreatmentLocation_encode_aper$descriptor() {
        return NTCIPEssPavementTreatmentLocation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPavementTreatmentLocation_encode_aper$handle() {
        return NTCIPEssPavementTreatmentLocation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_aper$address() {
        return NTCIPEssPavementTreatmentLocation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPavementTreatmentLocation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPavementTreatmentLocation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPavementTreatmentLocation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPavementTreatmentLocation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int NTCIPEssPaveTreatProductType_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_other = 1
     * }
     */
    public static int NTCIPEssPaveTreatProductType_other() {
        return NTCIPEssPaveTreatProductType_other;
    }
    private static final int NTCIPEssPaveTreatProductType_sand = (int)2L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_sand = 2
     * }
     */
    public static int NTCIPEssPaveTreatProductType_sand() {
        return NTCIPEssPaveTreatProductType_sand;
    }
    private static final int NTCIPEssPaveTreatProductType_dirt = (int)3L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_dirt = 3
     * }
     */
    public static int NTCIPEssPaveTreatProductType_dirt() {
        return NTCIPEssPaveTreatProductType_dirt;
    }
    private static final int NTCIPEssPaveTreatProductType_gravel = (int)4L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_gravel = 4
     * }
     */
    public static int NTCIPEssPaveTreatProductType_gravel() {
        return NTCIPEssPaveTreatProductType_gravel;
    }
    private static final int NTCIPEssPaveTreatProductType_cinders = (int)5L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_cinders = 5
     * }
     */
    public static int NTCIPEssPaveTreatProductType_cinders() {
        return NTCIPEssPaveTreatProductType_cinders;
    }
    private static final int NTCIPEssPaveTreatProductType_water = (int)6L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_water = 6
     * }
     */
    public static int NTCIPEssPaveTreatProductType_water() {
        return NTCIPEssPaveTreatProductType_water;
    }
    private static final int NTCIPEssPaveTreatProductType_enhancedSalts = (int)7L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_enhancedSalts = 7
     * }
     */
    public static int NTCIPEssPaveTreatProductType_enhancedSalts() {
        return NTCIPEssPaveTreatProductType_enhancedSalts;
    }
    private static final int NTCIPEssPaveTreatProductType_naCl = (int)8L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_naCl = 8
     * }
     */
    public static int NTCIPEssPaveTreatProductType_naCl() {
        return NTCIPEssPaveTreatProductType_naCl;
    }
    private static final int NTCIPEssPaveTreatProductType_caCl = (int)9L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_caCl = 9
     * }
     */
    public static int NTCIPEssPaveTreatProductType_caCl() {
        return NTCIPEssPaveTreatProductType_caCl;
    }
    private static final int NTCIPEssPaveTreatProductType_mgCl = (int)10L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_mgCl = 10
     * }
     */
    public static int NTCIPEssPaveTreatProductType_mgCl() {
        return NTCIPEssPaveTreatProductType_mgCl;
    }
    private static final int NTCIPEssPaveTreatProductType_cMA = (int)11L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_cMA = 11
     * }
     */
    public static int NTCIPEssPaveTreatProductType_cMA() {
        return NTCIPEssPaveTreatProductType_cMA;
    }
    private static final int NTCIPEssPaveTreatProductType_kAC = (int)12L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_kAC = 12
     * }
     */
    public static int NTCIPEssPaveTreatProductType_kAC() {
        return NTCIPEssPaveTreatProductType_kAC;
    }
    private static final int NTCIPEssPaveTreatProductType_naFormate = (int)13L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_naFormate = 13
     * }
     */
    public static int NTCIPEssPaveTreatProductType_naFormate() {
        return NTCIPEssPaveTreatProductType_naFormate;
    }
    private static final int NTCIPEssPaveTreatProductType_naA = (int)14L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductType.NTCIPEssPaveTreatProductType_naA = 14
     * }
     */
    public static int NTCIPEssPaveTreatProductType_naA() {
        return NTCIPEssPaveTreatProductType_naA;
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPaveTreatProductType_t
     * }
     */
    public static final OfLong NTCIPEssPaveTreatProductType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPaveTreatProductType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$layout() {
        return asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPaveTreatProductType_constr_1() {
        return asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductType_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPaveTreatProductType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPaveTreatProductType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPaveTreatProductType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPaveTreatProductType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductType
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPaveTreatProductType$layout() {
        return asn_DEF_NTCIPEssPaveTreatProductType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductType
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPaveTreatProductType() {
        return asn_DEF_NTCIPEssPaveTreatProductType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductType
     * }
     */
    public static void asn_DEF_NTCIPEssPaveTreatProductType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPaveTreatProductType$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPaveTreatProductType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NTCIPEssPaveTreatProductType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NTCIPEssPaveTreatProductType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NTCIPEssPaveTreatProductType_specs_1$layout() {
        return asn_SPC_NTCIPEssPaveTreatProductType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NTCIPEssPaveTreatProductType_specs_1() {
        return asn_SPC_NTCIPEssPaveTreatProductType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductType_specs_1
     * }
     */
    public static void asn_SPC_NTCIPEssPaveTreatProductType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NTCIPEssPaveTreatProductType_specs_1$constants.SEGMENT, 0L, asn_SPC_NTCIPEssPaveTreatProductType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPaveTreatProductType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_free$descriptor() {
        return NTCIPEssPaveTreatProductType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_free$handle() {
        return NTCIPEssPaveTreatProductType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_free$address() {
        return NTCIPEssPaveTreatProductType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPaveTreatProductType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPaveTreatProductType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_print$descriptor() {
        return NTCIPEssPaveTreatProductType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_print$handle() {
        return NTCIPEssPaveTreatProductType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_print$address() {
        return NTCIPEssPaveTreatProductType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatProductType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_constraint$descriptor() {
        return NTCIPEssPaveTreatProductType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_constraint$handle() {
        return NTCIPEssPaveTreatProductType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_constraint$address() {
        return NTCIPEssPaveTreatProductType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatProductType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_decode_ber$descriptor() {
        return NTCIPEssPaveTreatProductType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_decode_ber$handle() {
        return NTCIPEssPaveTreatProductType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_ber$address() {
        return NTCIPEssPaveTreatProductType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPaveTreatProductType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_der$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_der$handle() {
        return NTCIPEssPaveTreatProductType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_der$address() {
        return NTCIPEssPaveTreatProductType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_decode_xer$descriptor() {
        return NTCIPEssPaveTreatProductType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_decode_xer$handle() {
        return NTCIPEssPaveTreatProductType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_xer$address() {
        return NTCIPEssPaveTreatProductType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatProductType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_xer$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_xer$handle() {
        return NTCIPEssPaveTreatProductType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_xer$address() {
        return NTCIPEssPaveTreatProductType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_jer$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_jer$handle() {
        return NTCIPEssPaveTreatProductType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_jer$address() {
        return NTCIPEssPaveTreatProductType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_decode_oer$descriptor() {
        return NTCIPEssPaveTreatProductType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_decode_oer$handle() {
        return NTCIPEssPaveTreatProductType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_oer$address() {
        return NTCIPEssPaveTreatProductType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatProductType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_oer$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_oer$handle() {
        return NTCIPEssPaveTreatProductType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_oer$address() {
        return NTCIPEssPaveTreatProductType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_decode_uper$descriptor() {
        return NTCIPEssPaveTreatProductType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_decode_uper$handle() {
        return NTCIPEssPaveTreatProductType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_uper$address() {
        return NTCIPEssPaveTreatProductType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_uper$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_uper$handle() {
        return NTCIPEssPaveTreatProductType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_uper$address() {
        return NTCIPEssPaveTreatProductType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_decode_aper$descriptor() {
        return NTCIPEssPaveTreatProductType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_decode_aper$handle() {
        return NTCIPEssPaveTreatProductType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_aper$address() {
        return NTCIPEssPaveTreatProductType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductType_encode_aper$descriptor() {
        return NTCIPEssPaveTreatProductType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductType_encode_aper$handle() {
        return NTCIPEssPaveTreatProductType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_aper$address() {
        return NTCIPEssPaveTreatProductType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int NTCIPEssPaveTreatProductForm_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductForm.NTCIPEssPaveTreatProductForm_other = 1
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_other() {
        return NTCIPEssPaveTreatProductForm_other;
    }
    private static final int NTCIPEssPaveTreatProductForm_dry = (int)2L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductForm.NTCIPEssPaveTreatProductForm_dry = 2
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_dry() {
        return NTCIPEssPaveTreatProductForm_dry;
    }
    private static final int NTCIPEssPaveTreatProductForm_prewet = (int)3L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductForm.NTCIPEssPaveTreatProductForm_prewet = 3
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_prewet() {
        return NTCIPEssPaveTreatProductForm_prewet;
    }
    private static final int NTCIPEssPaveTreatProductForm_liquid = (int)4L;
    /**
     * {@snippet lang=c :
     * enum NTCIPEssPaveTreatProductForm.NTCIPEssPaveTreatProductForm_liquid = 4
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_liquid() {
        return NTCIPEssPaveTreatProductForm_liquid;
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPaveTreatProductForm_t
     * }
     */
    public static final OfLong NTCIPEssPaveTreatProductForm_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$layout() {
        return asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1() {
        return asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPaveTreatProductForm_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPaveTreatProductForm$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPaveTreatProductForm").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductForm
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPaveTreatProductForm$layout() {
        return asn_DEF_NTCIPEssPaveTreatProductForm$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductForm
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPaveTreatProductForm() {
        return asn_DEF_NTCIPEssPaveTreatProductForm$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatProductForm
     * }
     */
    public static void asn_DEF_NTCIPEssPaveTreatProductForm(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPaveTreatProductForm$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPaveTreatProductForm$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NTCIPEssPaveTreatProductForm_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductForm_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$layout() {
        return asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductForm_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NTCIPEssPaveTreatProductForm_specs_1() {
        return asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_NTCIPEssPaveTreatProductForm_specs_1
     * }
     */
    public static void asn_SPC_NTCIPEssPaveTreatProductForm_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$constants.SEGMENT, 0L, asn_SPC_NTCIPEssPaveTreatProductForm_specs_1$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPaveTreatProductForm_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductForm_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_free$descriptor() {
        return NTCIPEssPaveTreatProductForm_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductForm_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_free$handle() {
        return NTCIPEssPaveTreatProductForm_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductForm_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_free$address() {
        return NTCIPEssPaveTreatProductForm_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatProductForm_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPaveTreatProductForm_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPaveTreatProductForm_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_print$descriptor() {
        return NTCIPEssPaveTreatProductForm_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_print$handle() {
        return NTCIPEssPaveTreatProductForm_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_print$address() {
        return NTCIPEssPaveTreatProductForm_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductForm_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_constraint$descriptor() {
        return NTCIPEssPaveTreatProductForm_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_constraint$handle() {
        return NTCIPEssPaveTreatProductForm_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_constraint$address() {
        return NTCIPEssPaveTreatProductForm_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatProductForm_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatProductForm_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductForm_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_decode_ber$descriptor() {
        return NTCIPEssPaveTreatProductForm_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_decode_ber$handle() {
        return NTCIPEssPaveTreatProductForm_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_ber$address() {
        return NTCIPEssPaveTreatProductForm_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPaveTreatProductForm_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_der$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_der$handle() {
        return NTCIPEssPaveTreatProductForm_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_der$address() {
        return NTCIPEssPaveTreatProductForm_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_decode_xer$descriptor() {
        return NTCIPEssPaveTreatProductForm_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_decode_xer$handle() {
        return NTCIPEssPaveTreatProductForm_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_xer$address() {
        return NTCIPEssPaveTreatProductForm_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatProductForm_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_xer$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_xer$handle() {
        return NTCIPEssPaveTreatProductForm_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_xer$address() {
        return NTCIPEssPaveTreatProductForm_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_jer$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_jer$handle() {
        return NTCIPEssPaveTreatProductForm_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_jer$address() {
        return NTCIPEssPaveTreatProductForm_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_decode_oer$descriptor() {
        return NTCIPEssPaveTreatProductForm_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_decode_oer$handle() {
        return NTCIPEssPaveTreatProductForm_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_oer$address() {
        return NTCIPEssPaveTreatProductForm_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatProductForm_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_oer$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_oer$handle() {
        return NTCIPEssPaveTreatProductForm_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_oer$address() {
        return NTCIPEssPaveTreatProductForm_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_decode_uper$descriptor() {
        return NTCIPEssPaveTreatProductForm_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_decode_uper$handle() {
        return NTCIPEssPaveTreatProductForm_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_uper$address() {
        return NTCIPEssPaveTreatProductForm_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductForm_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_uper$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_uper$handle() {
        return NTCIPEssPaveTreatProductForm_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_uper$address() {
        return NTCIPEssPaveTreatProductForm_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_decode_aper$descriptor() {
        return NTCIPEssPaveTreatProductForm_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_decode_aper$handle() {
        return NTCIPEssPaveTreatProductForm_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_aper$address() {
        return NTCIPEssPaveTreatProductForm_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatProductForm_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatProductForm_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatProductForm_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatProductForm_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatProductForm_encode_aper$descriptor() {
        return NTCIPEssPaveTreatProductForm_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatProductForm_encode_aper$handle() {
        return NTCIPEssPaveTreatProductForm_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_aper$address() {
        return NTCIPEssPaveTreatProductForm_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatProductForm_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatProductForm_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatProductForm_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatProductForm_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPercentProductMix_t
     * }
     */
    public static final OfLong NTCIPEssPercentProductMix_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPercentProductMix_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPercentProductMix_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPercentProductMix_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPercentProductMix_constr_1$layout() {
        return asn_PER_type_NTCIPEssPercentProductMix_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPercentProductMix_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPercentProductMix_constr_1() {
        return asn_PER_type_NTCIPEssPercentProductMix_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPercentProductMix_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPercentProductMix_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPercentProductMix_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPercentProductMix_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPercentProductMix$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPercentProductMix").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPercentProductMix
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPercentProductMix$layout() {
        return asn_DEF_NTCIPEssPercentProductMix$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPercentProductMix
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPercentProductMix() {
        return asn_DEF_NTCIPEssPercentProductMix$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPercentProductMix
     * }
     */
    public static void asn_DEF_NTCIPEssPercentProductMix(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPercentProductMix$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPercentProductMix$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPercentProductMix_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPercentProductMix_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_free$descriptor() {
        return NTCIPEssPercentProductMix_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPercentProductMix_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_free$handle() {
        return NTCIPEssPercentProductMix_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPercentProductMix_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_free$address() {
        return NTCIPEssPercentProductMix_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPercentProductMix_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPercentProductMix_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPercentProductMix_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_print$descriptor() {
        return NTCIPEssPercentProductMix_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_print$handle() {
        return NTCIPEssPercentProductMix_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_print$address() {
        return NTCIPEssPercentProductMix_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPercentProductMix_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPercentProductMix_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_constraint$descriptor() {
        return NTCIPEssPercentProductMix_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_constraint$handle() {
        return NTCIPEssPercentProductMix_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_constraint$address() {
        return NTCIPEssPercentProductMix_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPercentProductMix_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPercentProductMix_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPercentProductMix_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_decode_ber$descriptor() {
        return NTCIPEssPercentProductMix_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_decode_ber$handle() {
        return NTCIPEssPercentProductMix_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_ber$address() {
        return NTCIPEssPercentProductMix_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPercentProductMix_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_der$descriptor() {
        return NTCIPEssPercentProductMix_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_der$handle() {
        return NTCIPEssPercentProductMix_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_der$address() {
        return NTCIPEssPercentProductMix_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPercentProductMix_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_decode_xer$descriptor() {
        return NTCIPEssPercentProductMix_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_decode_xer$handle() {
        return NTCIPEssPercentProductMix_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_xer$address() {
        return NTCIPEssPercentProductMix_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPercentProductMix_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_xer$descriptor() {
        return NTCIPEssPercentProductMix_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_xer$handle() {
        return NTCIPEssPercentProductMix_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_xer$address() {
        return NTCIPEssPercentProductMix_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPercentProductMix_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_jer$descriptor() {
        return NTCIPEssPercentProductMix_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_jer$handle() {
        return NTCIPEssPercentProductMix_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_jer$address() {
        return NTCIPEssPercentProductMix_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPercentProductMix_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_decode_oer$descriptor() {
        return NTCIPEssPercentProductMix_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_decode_oer$handle() {
        return NTCIPEssPercentProductMix_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_oer$address() {
        return NTCIPEssPercentProductMix_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPercentProductMix_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_oer$descriptor() {
        return NTCIPEssPercentProductMix_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_oer$handle() {
        return NTCIPEssPercentProductMix_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_oer$address() {
        return NTCIPEssPercentProductMix_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPercentProductMix_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_decode_uper$descriptor() {
        return NTCIPEssPercentProductMix_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_decode_uper$handle() {
        return NTCIPEssPercentProductMix_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_uper$address() {
        return NTCIPEssPercentProductMix_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPercentProductMix_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_uper$descriptor() {
        return NTCIPEssPercentProductMix_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_uper$handle() {
        return NTCIPEssPercentProductMix_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_uper$address() {
        return NTCIPEssPercentProductMix_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPercentProductMix_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_decode_aper$descriptor() {
        return NTCIPEssPercentProductMix_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_decode_aper$handle() {
        return NTCIPEssPercentProductMix_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_aper$address() {
        return NTCIPEssPercentProductMix_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPercentProductMix_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPercentProductMix_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPercentProductMix_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPercentProductMix_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPercentProductMix_encode_aper$descriptor() {
        return NTCIPEssPercentProductMix_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPercentProductMix_encode_aper$handle() {
        return NTCIPEssPercentProductMix_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_aper$address() {
        return NTCIPEssPercentProductMix_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPercentProductMix_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPercentProductMix_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPercentProductMix_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPercentProductMix_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPaveTreatmentAmount_t
     * }
     */
    public static final OfLong NTCIPEssPaveTreatmentAmount_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$layout() {
        return asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1() {
        return asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPaveTreatmentAmount_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPaveTreatmentAmount$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPaveTreatmentAmount").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentAmount
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPaveTreatmentAmount$layout() {
        return asn_DEF_NTCIPEssPaveTreatmentAmount$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentAmount
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPaveTreatmentAmount() {
        return asn_DEF_NTCIPEssPaveTreatmentAmount$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentAmount
     * }
     */
    public static void asn_DEF_NTCIPEssPaveTreatmentAmount(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPaveTreatmentAmount$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPaveTreatmentAmount$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPaveTreatmentAmount_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentAmount_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_free$descriptor() {
        return NTCIPEssPaveTreatmentAmount_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentAmount_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_free$handle() {
        return NTCIPEssPaveTreatmentAmount_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentAmount_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_free$address() {
        return NTCIPEssPaveTreatmentAmount_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentAmount_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPaveTreatmentAmount_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPaveTreatmentAmount_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_print$descriptor() {
        return NTCIPEssPaveTreatmentAmount_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_print$handle() {
        return NTCIPEssPaveTreatmentAmount_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_print$address() {
        return NTCIPEssPaveTreatmentAmount_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatmentAmount_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentAmount_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_constraint$descriptor() {
        return NTCIPEssPaveTreatmentAmount_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_constraint$handle() {
        return NTCIPEssPaveTreatmentAmount_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_constraint$address() {
        return NTCIPEssPaveTreatmentAmount_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentAmount_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatmentAmount_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentAmount_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_decode_ber$descriptor() {
        return NTCIPEssPaveTreatmentAmount_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_decode_ber$handle() {
        return NTCIPEssPaveTreatmentAmount_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_ber$address() {
        return NTCIPEssPaveTreatmentAmount_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPaveTreatmentAmount_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_der$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_der$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_der$address() {
        return NTCIPEssPaveTreatmentAmount_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_decode_xer$descriptor() {
        return NTCIPEssPaveTreatmentAmount_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_decode_xer$handle() {
        return NTCIPEssPaveTreatmentAmount_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_xer$address() {
        return NTCIPEssPaveTreatmentAmount_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatmentAmount_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_xer$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_xer$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_xer$address() {
        return NTCIPEssPaveTreatmentAmount_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_jer$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_jer$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_jer$address() {
        return NTCIPEssPaveTreatmentAmount_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_decode_oer$descriptor() {
        return NTCIPEssPaveTreatmentAmount_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_decode_oer$handle() {
        return NTCIPEssPaveTreatmentAmount_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_oer$address() {
        return NTCIPEssPaveTreatmentAmount_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatmentAmount_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_oer$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_oer$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_oer$address() {
        return NTCIPEssPaveTreatmentAmount_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_decode_uper$descriptor() {
        return NTCIPEssPaveTreatmentAmount_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_decode_uper$handle() {
        return NTCIPEssPaveTreatmentAmount_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_uper$address() {
        return NTCIPEssPaveTreatmentAmount_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentAmount_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_uper$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_uper$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_uper$address() {
        return NTCIPEssPaveTreatmentAmount_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_decode_aper$descriptor() {
        return NTCIPEssPaveTreatmentAmount_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_decode_aper$handle() {
        return NTCIPEssPaveTreatmentAmount_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_aper$address() {
        return NTCIPEssPaveTreatmentAmount_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentAmount_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentAmount_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentAmount_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentAmount_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentAmount_encode_aper$descriptor() {
        return NTCIPEssPaveTreatmentAmount_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentAmount_encode_aper$handle() {
        return NTCIPEssPaveTreatmentAmount_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_aper$address() {
        return NTCIPEssPaveTreatmentAmount_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentAmount_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentAmount_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentAmount_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentAmount_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long NTCIPEssPaveTreatmentWidth_t
     * }
     */
    public static final OfLong NTCIPEssPaveTreatmentWidth_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$layout() {
        return asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1() {
        return asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1
     * }
     */
    public static void asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$constants.SEGMENT, 0L, asn_PER_type_NTCIPEssPaveTreatmentWidth_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_NTCIPEssPaveTreatmentWidth$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NTCIPEssPaveTreatmentWidth").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentWidth
     * }
     */
    public static GroupLayout asn_DEF_NTCIPEssPaveTreatmentWidth$layout() {
        return asn_DEF_NTCIPEssPaveTreatmentWidth$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentWidth
     * }
     */
    public static MemorySegment asn_DEF_NTCIPEssPaveTreatmentWidth() {
        return asn_DEF_NTCIPEssPaveTreatmentWidth$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NTCIPEssPaveTreatmentWidth
     * }
     */
    public static void asn_DEF_NTCIPEssPaveTreatmentWidth(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NTCIPEssPaveTreatmentWidth$constants.SEGMENT, 0L, asn_DEF_NTCIPEssPaveTreatmentWidth$constants.LAYOUT.byteSize());
    }

    private static class NTCIPEssPaveTreatmentWidth_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentWidth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_free$descriptor() {
        return NTCIPEssPaveTreatmentWidth_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentWidth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_free$handle() {
        return NTCIPEssPaveTreatmentWidth_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentWidth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_free$address() {
        return NTCIPEssPaveTreatmentWidth_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NTCIPEssPaveTreatmentWidth_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NTCIPEssPaveTreatmentWidth_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NTCIPEssPaveTreatmentWidth_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_print$descriptor() {
        return NTCIPEssPaveTreatmentWidth_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_print$handle() {
        return NTCIPEssPaveTreatmentWidth_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_print$address() {
        return NTCIPEssPaveTreatmentWidth_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatmentWidth_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentWidth_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_constraint$descriptor() {
        return NTCIPEssPaveTreatmentWidth_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_constraint$handle() {
        return NTCIPEssPaveTreatmentWidth_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_constraint$address() {
        return NTCIPEssPaveTreatmentWidth_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NTCIPEssPaveTreatmentWidth_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int NTCIPEssPaveTreatmentWidth_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentWidth_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_decode_ber$descriptor() {
        return NTCIPEssPaveTreatmentWidth_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_decode_ber$handle() {
        return NTCIPEssPaveTreatmentWidth_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_ber$address() {
        return NTCIPEssPaveTreatmentWidth_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NTCIPEssPaveTreatmentWidth_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_der$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_der$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_der$address() {
        return NTCIPEssPaveTreatmentWidth_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_decode_xer$descriptor() {
        return NTCIPEssPaveTreatmentWidth_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_decode_xer$handle() {
        return NTCIPEssPaveTreatmentWidth_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_xer$address() {
        return NTCIPEssPaveTreatmentWidth_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatmentWidth_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_xer$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_xer$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_xer$address() {
        return NTCIPEssPaveTreatmentWidth_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_jer$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_jer$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_jer$address() {
        return NTCIPEssPaveTreatmentWidth_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_decode_oer$descriptor() {
        return NTCIPEssPaveTreatmentWidth_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_decode_oer$handle() {
        return NTCIPEssPaveTreatmentWidth_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_oer$address() {
        return NTCIPEssPaveTreatmentWidth_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NTCIPEssPaveTreatmentWidth_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_oer$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_oer$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_oer$address() {
        return NTCIPEssPaveTreatmentWidth_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_decode_uper$descriptor() {
        return NTCIPEssPaveTreatmentWidth_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_decode_uper$handle() {
        return NTCIPEssPaveTreatmentWidth_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_uper$address() {
        return NTCIPEssPaveTreatmentWidth_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentWidth_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_uper$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_uper$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_uper$address() {
        return NTCIPEssPaveTreatmentWidth_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_decode_aper$descriptor() {
        return NTCIPEssPaveTreatmentWidth_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_decode_aper$handle() {
        return NTCIPEssPaveTreatmentWidth_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_aper$address() {
        return NTCIPEssPaveTreatmentWidth_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NTCIPEssPaveTreatmentWidth_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NTCIPEssPaveTreatmentWidth_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NTCIPEssPaveTreatmentWidth_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NTCIPEssPaveTreatmentWidth_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NTCIPEssPaveTreatmentWidth_encode_aper$descriptor() {
        return NTCIPEssPaveTreatmentWidth_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NTCIPEssPaveTreatmentWidth_encode_aper$handle() {
        return NTCIPEssPaveTreatmentWidth_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_aper$address() {
        return NTCIPEssPaveTreatmentWidth_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NTCIPEssPaveTreatmentWidth_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NTCIPEssPaveTreatmentWidth_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NTCIPEssPaveTreatmentWidth_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NTCIPEssPaveTreatmentWidth_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_NtcipPavementTreatment$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NtcipPavementTreatment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavementTreatment
     * }
     */
    public static GroupLayout asn_DEF_NtcipPavementTreatment$layout() {
        return asn_DEF_NtcipPavementTreatment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavementTreatment
     * }
     */
    public static MemorySegment asn_DEF_NtcipPavementTreatment() {
        return asn_DEF_NtcipPavementTreatment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NtcipPavementTreatment
     * }
     */
    public static void asn_DEF_NtcipPavementTreatment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NtcipPavementTreatment$constants.SEGMENT, 0L, asn_DEF_NtcipPavementTreatment$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_NtcipPavementTreatment_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_NtcipPavementTreatment_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavementTreatment_specs_1
     * }
     */
    public static GroupLayout asn_SPC_NtcipPavementTreatment_specs_1$layout() {
        return asn_SPC_NtcipPavementTreatment_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavementTreatment_specs_1
     * }
     */
    public static MemorySegment asn_SPC_NtcipPavementTreatment_specs_1() {
        return asn_SPC_NtcipPavementTreatment_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_NtcipPavementTreatment_specs_1
     * }
     */
    public static void asn_SPC_NtcipPavementTreatment_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_NtcipPavementTreatment_specs_1$constants.SEGMENT, 0L, asn_SPC_NtcipPavementTreatment_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_NtcipPavementTreatment_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(8, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_NtcipPavementTreatment_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 8 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static SequenceLayout asn_MBR_NtcipPavementTreatment_1$layout() {
        return asn_MBR_NtcipPavementTreatment_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static long[] asn_MBR_NtcipPavementTreatment_1$dimensions() {
        return asn_MBR_NtcipPavementTreatment_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPavementTreatment_1() {
        return asn_MBR_NtcipPavementTreatment_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static void asn_MBR_NtcipPavementTreatment_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPavementTreatment_1$constants.SEGMENT, 0L, asn_MBR_NtcipPavementTreatment_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static MemorySegment asn_MBR_NtcipPavementTreatment_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_NtcipPavementTreatment_1$constants.HANDLE.invokeExact(asn_MBR_NtcipPavementTreatment_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_NtcipPavementTreatment_1[8]
     * }
     */
    public static void asn_MBR_NtcipPavementTreatment_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_NtcipPavementTreatment_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RoadWeatherDownload$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RoadWeatherDownload").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherDownload
     * }
     */
    public static GroupLayout asn_DEF_RoadWeatherDownload$layout() {
        return asn_DEF_RoadWeatherDownload$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherDownload
     * }
     */
    public static MemorySegment asn_DEF_RoadWeatherDownload() {
        return asn_DEF_RoadWeatherDownload$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherDownload
     * }
     */
    public static void asn_DEF_RoadWeatherDownload(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RoadWeatherDownload$constants.SEGMENT, 0L, asn_DEF_RoadWeatherDownload$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RoadWeatherDownload_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RoadWeatherDownload_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadWeatherDownload_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RoadWeatherDownload_specs_1$layout() {
        return asn_SPC_RoadWeatherDownload_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadWeatherDownload_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RoadWeatherDownload_specs_1() {
        return asn_SPC_RoadWeatherDownload_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RoadWeatherDownload_specs_1
     * }
     */
    public static void asn_SPC_RoadWeatherDownload_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RoadWeatherDownload_specs_1$constants.SEGMENT, 0L, asn_SPC_RoadWeatherDownload_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RoadWeatherDownload_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RoadWeatherDownload_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RoadWeatherDownload_1$layout() {
        return asn_MBR_RoadWeatherDownload_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static long[] asn_MBR_RoadWeatherDownload_1$dimensions() {
        return asn_MBR_RoadWeatherDownload_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherDownload_1() {
        return asn_MBR_RoadWeatherDownload_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherDownload_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherDownload_1$constants.SEGMENT, 0L, asn_MBR_RoadWeatherDownload_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherDownload_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RoadWeatherDownload_1$constants.HANDLE.invokeExact(asn_MBR_RoadWeatherDownload_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherDownload_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherDownload_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherDownload_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RoadWeatherMessage_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherMessage_PR.RoadWeatherMessage_PR_NOTHING = 0
     * }
     */
    public static int RoadWeatherMessage_PR_NOTHING() {
        return RoadWeatherMessage_PR_NOTHING;
    }
    private static final int RoadWeatherMessage_PR_upload = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherMessage_PR.RoadWeatherMessage_PR_upload = 1
     * }
     */
    public static int RoadWeatherMessage_PR_upload() {
        return RoadWeatherMessage_PR_upload;
    }
    private static final int RoadWeatherMessage_PR_download = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RoadWeatherMessage_PR.RoadWeatherMessage_PR_download = 2
     * }
     */
    public static int RoadWeatherMessage_PR_download() {
        return RoadWeatherMessage_PR_download;
    }

    private static class asn_DEF_RoadWeatherMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RoadWeatherMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherMessage
     * }
     */
    public static GroupLayout asn_DEF_RoadWeatherMessage$layout() {
        return asn_DEF_RoadWeatherMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherMessage
     * }
     */
    public static MemorySegment asn_DEF_RoadWeatherMessage() {
        return asn_DEF_RoadWeatherMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RoadWeatherMessage
     * }
     */
    public static void asn_DEF_RoadWeatherMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RoadWeatherMessage$constants.SEGMENT, 0L, asn_DEF_RoadWeatherMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RoadWeatherMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RoadWeatherMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RoadWeatherMessage_specs_1$layout() {
        return asn_SPC_RoadWeatherMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RoadWeatherMessage_specs_1() {
        return asn_SPC_RoadWeatherMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RoadWeatherMessage_specs_1
     * }
     */
    public static void asn_SPC_RoadWeatherMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RoadWeatherMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_RoadWeatherMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RoadWeatherMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RoadWeatherMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RoadWeatherMessage_1$layout() {
        return asn_MBR_RoadWeatherMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static long[] asn_MBR_RoadWeatherMessage_1$dimensions() {
        return asn_MBR_RoadWeatherMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherMessage_1() {
        return asn_MBR_RoadWeatherMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherMessage_1$constants.SEGMENT, 0L, asn_MBR_RoadWeatherMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RoadWeatherMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RoadWeatherMessage_1$constants.HANDLE.invokeExact(asn_MBR_RoadWeatherMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RoadWeatherMessage_1[2]
     * }
     */
    public static void asn_MBR_RoadWeatherMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RoadWeatherMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RoadWeatherMessage_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RoadWeatherMessage_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherMessage_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RoadWeatherMessage_constr_1$layout() {
        return asn_PER_type_RoadWeatherMessage_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherMessage_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RoadWeatherMessage_constr_1() {
        return asn_PER_type_RoadWeatherMessage_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RoadWeatherMessage_constr_1
     * }
     */
    public static void asn_PER_type_RoadWeatherMessage_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RoadWeatherMessage_constr_1$constants.SEGMENT, 0L, asn_PER_type_RoadWeatherMessage_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ProbeDataConfigMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ProbeDataConfigMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfigMessage
     * }
     */
    public static GroupLayout asn_DEF_ProbeDataConfigMessage$layout() {
        return asn_DEF_ProbeDataConfigMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfigMessage
     * }
     */
    public static MemorySegment asn_DEF_ProbeDataConfigMessage() {
        return asn_DEF_ProbeDataConfigMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfigMessage
     * }
     */
    public static void asn_DEF_ProbeDataConfigMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ProbeDataConfigMessage$constants.SEGMENT, 0L, asn_DEF_ProbeDataConfigMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ProbeDataConfigMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ProbeDataConfigMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_ProbeDataConfigMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ProbeDataConfigMessage_specs_1$layout() {
        return asn_SPC_ProbeDataConfigMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_ProbeDataConfigMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ProbeDataConfigMessage_specs_1() {
        return asn_SPC_ProbeDataConfigMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_ProbeDataConfigMessage_specs_1
     * }
     */
    public static void asn_SPC_ProbeDataConfigMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ProbeDataConfigMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_ProbeDataConfigMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ProbeDataConfigMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ProbeDataConfigMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_ProbeDataConfigMessage_1$layout() {
        return asn_MBR_ProbeDataConfigMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static long[] asn_MBR_ProbeDataConfigMessage_1$dimensions() {
        return asn_MBR_ProbeDataConfigMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataConfigMessage_1() {
        return asn_MBR_ProbeDataConfigMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static void asn_MBR_ProbeDataConfigMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataConfigMessage_1$constants.SEGMENT, 0L, asn_MBR_ProbeDataConfigMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataConfigMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ProbeDataConfigMessage_1$constants.HANDLE.invokeExact(asn_MBR_ProbeDataConfigMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfigMessage_1[1]
     * }
     */
    public static void asn_MBR_ProbeDataConfigMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataConfigMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ProbeDataConfigMessage_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ProbeDataConfigMessage_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataConfigMessage_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ProbeDataConfigMessage_constr_1$layout() {
        return asn_PER_type_ProbeDataConfigMessage_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataConfigMessage_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ProbeDataConfigMessage_constr_1() {
        return asn_PER_type_ProbeDataConfigMessage_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataConfigMessage_constr_1
     * }
     */
    public static void asn_PER_type_ProbeDataConfigMessage_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ProbeDataConfigMessage_constr_1$constants.SEGMENT, 0L, asn_PER_type_ProbeDataConfigMessage_constr_1$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long ConfigId_t
     * }
     */
    public static final OfLong ConfigId_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ConfigId_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ConfigId_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigId_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ConfigId_constr_1$layout() {
        return asn_PER_type_ConfigId_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigId_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ConfigId_constr_1() {
        return asn_PER_type_ConfigId_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigId_constr_1
     * }
     */
    public static void asn_PER_type_ConfigId_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ConfigId_constr_1$constants.SEGMENT, 0L, asn_PER_type_ConfigId_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ConfigId$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConfigId").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigId
     * }
     */
    public static GroupLayout asn_DEF_ConfigId$layout() {
        return asn_DEF_ConfigId$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigId
     * }
     */
    public static MemorySegment asn_DEF_ConfigId() {
        return asn_DEF_ConfigId$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigId
     * }
     */
    public static void asn_DEF_ConfigId(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConfigId$constants.SEGMENT, 0L, asn_DEF_ConfigId$constants.LAYOUT.byteSize());
    }

    private static class ConfigId_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ConfigId_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ConfigId_free$descriptor() {
        return ConfigId_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ConfigId_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ConfigId_free$handle() {
        return ConfigId_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ConfigId_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ConfigId_free$address() {
        return ConfigId_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ConfigId_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ConfigId_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ConfigId_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ConfigId_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_print$descriptor() {
        return ConfigId_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ConfigId_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_print$handle() {
        return ConfigId_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ConfigId_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_print$address() {
        return ConfigId_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ConfigId_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ConfigId_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConfigId_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ConfigId_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_constraint$descriptor() {
        return ConfigId_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ConfigId_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_constraint$handle() {
        return ConfigId_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ConfigId_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_constraint$address() {
        return ConfigId_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ConfigId_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ConfigId_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConfigId_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ConfigId_decode_ber$descriptor() {
        return ConfigId_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ConfigId_decode_ber$handle() {
        return ConfigId_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ConfigId_decode_ber$address() {
        return ConfigId_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ConfigId_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ConfigId_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_der$descriptor() {
        return ConfigId_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_encode_der$handle() {
        return ConfigId_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_der$address() {
        return ConfigId_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ConfigId_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ConfigId_decode_xer$descriptor() {
        return ConfigId_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ConfigId_decode_xer$handle() {
        return ConfigId_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ConfigId_decode_xer$address() {
        return ConfigId_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ConfigId_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ConfigId_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_xer$descriptor() {
        return ConfigId_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_encode_xer$handle() {
        return ConfigId_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_xer$address() {
        return ConfigId_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ConfigId_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_jer$descriptor() {
        return ConfigId_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_encode_jer$handle() {
        return ConfigId_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_jer$address() {
        return ConfigId_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ConfigId_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ConfigId_decode_oer$descriptor() {
        return ConfigId_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ConfigId_decode_oer$handle() {
        return ConfigId_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ConfigId_decode_oer$address() {
        return ConfigId_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ConfigId_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ConfigId_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_oer$descriptor() {
        return ConfigId_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ConfigId_encode_oer$handle() {
        return ConfigId_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_oer$address() {
        return ConfigId_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ConfigId_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConfigId_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ConfigId_decode_uper$descriptor() {
        return ConfigId_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ConfigId_decode_uper$handle() {
        return ConfigId_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConfigId_decode_uper$address() {
        return ConfigId_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConfigId_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConfigId_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_uper$descriptor() {
        return ConfigId_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ConfigId_encode_uper$handle() {
        return ConfigId_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConfigId_encode_uper$address() {
        return ConfigId_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConfigId_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConfigId_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ConfigId_decode_aper$descriptor() {
        return ConfigId_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ConfigId_decode_aper$handle() {
        return ConfigId_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConfigId_decode_aper$address() {
        return ConfigId_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ConfigId_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ConfigId_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ConfigId_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigId_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ConfigId_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ConfigId_encode_aper$descriptor() {
        return ConfigId_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ConfigId_encode_aper$handle() {
        return ConfigId_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConfigId_encode_aper$address() {
        return ConfigId_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ConfigId_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ConfigId_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ConfigId_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigId_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_ConfigDescriptor$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConfigDescriptor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigDescriptor
     * }
     */
    public static GroupLayout asn_DEF_ConfigDescriptor$layout() {
        return asn_DEF_ConfigDescriptor$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigDescriptor
     * }
     */
    public static MemorySegment asn_DEF_ConfigDescriptor() {
        return asn_DEF_ConfigDescriptor$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigDescriptor
     * }
     */
    public static void asn_DEF_ConfigDescriptor(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConfigDescriptor$constants.SEGMENT, 0L, asn_DEF_ConfigDescriptor$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ConfigDescriptor_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ConfigDescriptor_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigDescriptor_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ConfigDescriptor_specs_1$layout() {
        return asn_SPC_ConfigDescriptor_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigDescriptor_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ConfigDescriptor_specs_1() {
        return asn_SPC_ConfigDescriptor_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigDescriptor_specs_1
     * }
     */
    public static void asn_SPC_ConfigDescriptor_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ConfigDescriptor_specs_1$constants.SEGMENT, 0L, asn_SPC_ConfigDescriptor_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ConfigDescriptor_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ConfigDescriptor_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_ConfigDescriptor_1$layout() {
        return asn_MBR_ConfigDescriptor_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static long[] asn_MBR_ConfigDescriptor_1$dimensions() {
        return asn_MBR_ConfigDescriptor_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ConfigDescriptor_1() {
        return asn_MBR_ConfigDescriptor_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static void asn_MBR_ConfigDescriptor_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigDescriptor_1$constants.SEGMENT, 0L, asn_MBR_ConfigDescriptor_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ConfigDescriptor_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ConfigDescriptor_1$constants.HANDLE.invokeExact(asn_MBR_ConfigDescriptor_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigDescriptor_1[4]
     * }
     */
    public static void asn_MBR_ConfigDescriptor_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigDescriptor_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgVehicleClass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgVehicleClass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleClass
     * }
     */
    public static GroupLayout asn_DEF_CfgVehicleClass$layout() {
        return asn_DEF_CfgVehicleClass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleClass
     * }
     */
    public static MemorySegment asn_DEF_CfgVehicleClass() {
        return asn_DEF_CfgVehicleClass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleClass
     * }
     */
    public static void asn_DEF_CfgVehicleClass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgVehicleClass$constants.SEGMENT, 0L, asn_DEF_CfgVehicleClass$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgVehicleClass_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgVehicleClass_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleClass_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgVehicleClass_specs_1$layout() {
        return asn_SPC_CfgVehicleClass_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleClass_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgVehicleClass_specs_1() {
        return asn_SPC_CfgVehicleClass_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleClass_specs_1
     * }
     */
    public static void asn_SPC_CfgVehicleClass_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgVehicleClass_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgVehicleClass_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgVehicleClass_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(13, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgVehicleClass_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 13 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static SequenceLayout asn_MBR_CfgVehicleClass_1$layout() {
        return asn_MBR_CfgVehicleClass_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static long[] asn_MBR_CfgVehicleClass_1$dimensions() {
        return asn_MBR_CfgVehicleClass_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static MemorySegment asn_MBR_CfgVehicleClass_1() {
        return asn_MBR_CfgVehicleClass_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static void asn_MBR_CfgVehicleClass_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgVehicleClass_1$constants.SEGMENT, 0L, asn_MBR_CfgVehicleClass_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static MemorySegment asn_MBR_CfgVehicleClass_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgVehicleClass_1$constants.HANDLE.invokeExact(asn_MBR_CfgVehicleClass_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleClass_1[13]
     * }
     */
    public static void asn_MBR_CfgVehicleClass_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgVehicleClass_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int CfgInterval_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CfgInterval_PR.CfgInterval_PR_NOTHING = 0
     * }
     */
    public static int CfgInterval_PR_NOTHING() {
        return CfgInterval_PR_NOTHING;
    }
    private static final int CfgInterval_PR_timeInterval = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CfgInterval_PR.CfgInterval_PR_timeInterval = 1
     * }
     */
    public static int CfgInterval_PR_timeInterval() {
        return CfgInterval_PR_timeInterval;
    }
    private static final int CfgInterval_PR_distanceInterval = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CfgInterval_PR.CfgInterval_PR_distanceInterval = 2
     * }
     */
    public static int CfgInterval_PR_distanceInterval() {
        return CfgInterval_PR_distanceInterval;
    }

    private static class asn_DEF_CfgInterval$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgInterval").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInterval
     * }
     */
    public static GroupLayout asn_DEF_CfgInterval$layout() {
        return asn_DEF_CfgInterval$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInterval
     * }
     */
    public static MemorySegment asn_DEF_CfgInterval() {
        return asn_DEF_CfgInterval$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInterval
     * }
     */
    public static void asn_DEF_CfgInterval(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgInterval$constants.SEGMENT, 0L, asn_DEF_CfgInterval$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgInterval_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgInterval_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInterval_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgInterval_specs_1$layout() {
        return asn_SPC_CfgInterval_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInterval_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgInterval_specs_1() {
        return asn_SPC_CfgInterval_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInterval_specs_1
     * }
     */
    public static void asn_SPC_CfgInterval_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgInterval_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgInterval_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgInterval_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgInterval_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgInterval_1$layout() {
        return asn_MBR_CfgInterval_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static long[] asn_MBR_CfgInterval_1$dimensions() {
        return asn_MBR_CfgInterval_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgInterval_1() {
        return asn_MBR_CfgInterval_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static void asn_MBR_CfgInterval_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgInterval_1$constants.SEGMENT, 0L, asn_MBR_CfgInterval_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgInterval_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgInterval_1$constants.HANDLE.invokeExact(asn_MBR_CfgInterval_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInterval_1[2]
     * }
     */
    public static void asn_MBR_CfgInterval_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgInterval_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_CfgInterval_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CfgInterval_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInterval_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CfgInterval_constr_1$layout() {
        return asn_PER_type_CfgInterval_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInterval_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CfgInterval_constr_1() {
        return asn_PER_type_CfgInterval_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInterval_constr_1
     * }
     */
    public static void asn_PER_type_CfgInterval_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CfgInterval_constr_1$constants.SEGMENT, 0L, asn_PER_type_CfgInterval_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CfgIntervalEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgIntervalEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgIntervalEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgIntervalEvents$layout() {
        return asn_DEF_CfgIntervalEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgIntervalEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgIntervalEvents() {
        return asn_DEF_CfgIntervalEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgIntervalEvents
     * }
     */
    public static void asn_DEF_CfgIntervalEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgIntervalEvents$constants.SEGMENT, 0L, asn_DEF_CfgIntervalEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgIntervalEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgIntervalEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgIntervalEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgIntervalEvents_specs_1$layout() {
        return asn_SPC_CfgIntervalEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgIntervalEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgIntervalEvents_specs_1() {
        return asn_SPC_CfgIntervalEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgIntervalEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgIntervalEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgIntervalEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgIntervalEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgIntervalEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgIntervalEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_CfgIntervalEvents_1$layout() {
        return asn_MBR_CfgIntervalEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static long[] asn_MBR_CfgIntervalEvents_1$dimensions() {
        return asn_MBR_CfgIntervalEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static MemorySegment asn_MBR_CfgIntervalEvents_1() {
        return asn_MBR_CfgIntervalEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static void asn_MBR_CfgIntervalEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgIntervalEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgIntervalEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static MemorySegment asn_MBR_CfgIntervalEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgIntervalEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgIntervalEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgIntervalEvents_1[6]
     * }
     */
    public static void asn_MBR_CfgIntervalEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgIntervalEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgTransitVehicleData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgTransitVehicleData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTransitVehicleData
     * }
     */
    public static GroupLayout asn_DEF_CfgTransitVehicleData$layout() {
        return asn_DEF_CfgTransitVehicleData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTransitVehicleData
     * }
     */
    public static MemorySegment asn_DEF_CfgTransitVehicleData() {
        return asn_DEF_CfgTransitVehicleData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTransitVehicleData
     * }
     */
    public static void asn_DEF_CfgTransitVehicleData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgTransitVehicleData$constants.SEGMENT, 0L, asn_DEF_CfgTransitVehicleData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgTransitVehicleData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgTransitVehicleData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTransitVehicleData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgTransitVehicleData_specs_1$layout() {
        return asn_SPC_CfgTransitVehicleData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTransitVehicleData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgTransitVehicleData_specs_1() {
        return asn_SPC_CfgTransitVehicleData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTransitVehicleData_specs_1
     * }
     */
    public static void asn_SPC_CfgTransitVehicleData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgTransitVehicleData_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgTransitVehicleData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgTransitVehicleData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgTransitVehicleData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_CfgTransitVehicleData_1$layout() {
        return asn_MBR_CfgTransitVehicleData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static long[] asn_MBR_CfgTransitVehicleData_1$dimensions() {
        return asn_MBR_CfgTransitVehicleData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_CfgTransitVehicleData_1() {
        return asn_MBR_CfgTransitVehicleData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static void asn_MBR_CfgTransitVehicleData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgTransitVehicleData_1$constants.SEGMENT, 0L, asn_MBR_CfgTransitVehicleData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_CfgTransitVehicleData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgTransitVehicleData_1$constants.HANDLE.invokeExact(asn_MBR_CfgTransitVehicleData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTransitVehicleData_1[3]
     * }
     */
    public static void asn_MBR_CfgTransitVehicleData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgTransitVehicleData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgVehicleEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgVehicleEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgVehicleEvents$layout() {
        return asn_DEF_CfgVehicleEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgVehicleEvents() {
        return asn_DEF_CfgVehicleEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgVehicleEvents
     * }
     */
    public static void asn_DEF_CfgVehicleEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgVehicleEvents$constants.SEGMENT, 0L, asn_DEF_CfgVehicleEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgVehicleEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgVehicleEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgVehicleEvents_specs_1$layout() {
        return asn_SPC_CfgVehicleEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgVehicleEvents_specs_1() {
        return asn_SPC_CfgVehicleEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgVehicleEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgVehicleEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgVehicleEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgVehicleEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgVehicleEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(12, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgVehicleEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 12 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static SequenceLayout asn_MBR_CfgVehicleEvents_1$layout() {
        return asn_MBR_CfgVehicleEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static long[] asn_MBR_CfgVehicleEvents_1$dimensions() {
        return asn_MBR_CfgVehicleEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgVehicleEvents_1() {
        return asn_MBR_CfgVehicleEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static void asn_MBR_CfgVehicleEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgVehicleEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgVehicleEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgVehicleEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgVehicleEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgVehicleEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgVehicleEvents_1[12]
     * }
     */
    public static void asn_MBR_CfgVehicleEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgVehicleEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgEvents$layout() {
        return asn_DEF_CfgEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgEvents() {
        return asn_DEF_CfgEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEvents
     * }
     */
    public static void asn_DEF_CfgEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgEvents$constants.SEGMENT, 0L, asn_DEF_CfgEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgEvents_specs_1$layout() {
        return asn_SPC_CfgEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgEvents_specs_1() {
        return asn_SPC_CfgEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_CfgEvents_1$layout() {
        return asn_MBR_CfgEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static long[] asn_MBR_CfgEvents_1$dimensions() {
        return asn_MBR_CfgEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_CfgEvents_1() {
        return asn_MBR_CfgEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static void asn_MBR_CfgEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_CfgEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEvents_1[5]
     * }
     */
    public static void asn_MBR_CfgEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgKinematicEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgKinematicEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgKinematicEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgKinematicEvents$layout() {
        return asn_DEF_CfgKinematicEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgKinematicEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgKinematicEvents() {
        return asn_DEF_CfgKinematicEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgKinematicEvents
     * }
     */
    public static void asn_DEF_CfgKinematicEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgKinematicEvents$constants.SEGMENT, 0L, asn_DEF_CfgKinematicEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgKinematicEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgKinematicEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgKinematicEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgKinematicEvents_specs_1$layout() {
        return asn_SPC_CfgKinematicEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgKinematicEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgKinematicEvents_specs_1() {
        return asn_SPC_CfgKinematicEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgKinematicEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgKinematicEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgKinematicEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgKinematicEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgKinematicEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgKinematicEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgKinematicEvents_1$layout() {
        return asn_MBR_CfgKinematicEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static long[] asn_MBR_CfgKinematicEvents_1$dimensions() {
        return asn_MBR_CfgKinematicEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgKinematicEvents_1() {
        return asn_MBR_CfgKinematicEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static void asn_MBR_CfgKinematicEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgKinematicEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgKinematicEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgKinematicEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgKinematicEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgKinematicEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgKinematicEvents_1[2]
     * }
     */
    public static void asn_MBR_CfgKinematicEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgKinematicEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgHysteresis$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgHysteresis").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgHysteresis
     * }
     */
    public static GroupLayout asn_DEF_CfgHysteresis$layout() {
        return asn_DEF_CfgHysteresis$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgHysteresis
     * }
     */
    public static MemorySegment asn_DEF_CfgHysteresis() {
        return asn_DEF_CfgHysteresis$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgHysteresis
     * }
     */
    public static void asn_DEF_CfgHysteresis(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgHysteresis$constants.SEGMENT, 0L, asn_DEF_CfgHysteresis$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgHysteresis_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgHysteresis_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgHysteresis_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgHysteresis_specs_1$layout() {
        return asn_SPC_CfgHysteresis_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgHysteresis_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgHysteresis_specs_1() {
        return asn_SPC_CfgHysteresis_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgHysteresis_specs_1
     * }
     */
    public static void asn_SPC_CfgHysteresis_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgHysteresis_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgHysteresis_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgHysteresis_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgHysteresis_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgHysteresis_1$layout() {
        return asn_MBR_CfgHysteresis_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static long[] asn_MBR_CfgHysteresis_1$dimensions() {
        return asn_MBR_CfgHysteresis_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgHysteresis_1() {
        return asn_MBR_CfgHysteresis_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static void asn_MBR_CfgHysteresis_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgHysteresis_1$constants.SEGMENT, 0L, asn_MBR_CfgHysteresis_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgHysteresis_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgHysteresis_1$constants.HANDLE.invokeExact(asn_MBR_CfgHysteresis_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgHysteresis_1[2]
     * }
     */
    public static void asn_MBR_CfgHysteresis_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgHysteresis_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgLowSpeedCriteria$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgLowSpeedCriteria").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgLowSpeedCriteria
     * }
     */
    public static GroupLayout asn_DEF_CfgLowSpeedCriteria$layout() {
        return asn_DEF_CfgLowSpeedCriteria$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgLowSpeedCriteria
     * }
     */
    public static MemorySegment asn_DEF_CfgLowSpeedCriteria() {
        return asn_DEF_CfgLowSpeedCriteria$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgLowSpeedCriteria
     * }
     */
    public static void asn_DEF_CfgLowSpeedCriteria(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgLowSpeedCriteria$constants.SEGMENT, 0L, asn_DEF_CfgLowSpeedCriteria$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgLowSpeedCriteria_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgLowSpeedCriteria_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgLowSpeedCriteria_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgLowSpeedCriteria_specs_1$layout() {
        return asn_SPC_CfgLowSpeedCriteria_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgLowSpeedCriteria_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgLowSpeedCriteria_specs_1() {
        return asn_SPC_CfgLowSpeedCriteria_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgLowSpeedCriteria_specs_1
     * }
     */
    public static void asn_SPC_CfgLowSpeedCriteria_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgLowSpeedCriteria_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgLowSpeedCriteria_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgLowSpeedCriteria_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgLowSpeedCriteria_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgLowSpeedCriteria_1$layout() {
        return asn_MBR_CfgLowSpeedCriteria_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static long[] asn_MBR_CfgLowSpeedCriteria_1$dimensions() {
        return asn_MBR_CfgLowSpeedCriteria_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgLowSpeedCriteria_1() {
        return asn_MBR_CfgLowSpeedCriteria_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static void asn_MBR_CfgLowSpeedCriteria_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgLowSpeedCriteria_1$constants.SEGMENT, 0L, asn_MBR_CfgLowSpeedCriteria_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgLowSpeedCriteria_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgLowSpeedCriteria_1$constants.HANDLE.invokeExact(asn_MBR_CfgLowSpeedCriteria_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgLowSpeedCriteria_1[2]
     * }
     */
    public static void asn_MBR_CfgLowSpeedCriteria_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgLowSpeedCriteria_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int CfgEmerAndTransitInfo_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CfgEmerAndTransitInfo_PR.CfgEmerAndTransitInfo_PR_NOTHING = 0
     * }
     */
    public static int CfgEmerAndTransitInfo_PR_NOTHING() {
        return CfgEmerAndTransitInfo_PR_NOTHING;
    }
    private static final int CfgEmerAndTransitInfo_PR_emerVehLightBar = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CfgEmerAndTransitInfo_PR.CfgEmerAndTransitInfo_PR_emerVehLightBar = 1
     * }
     */
    public static int CfgEmerAndTransitInfo_PR_emerVehLightBar() {
        return CfgEmerAndTransitInfo_PR_emerVehLightBar;
    }
    private static final int CfgEmerAndTransitInfo_PR_reqTspEvp = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CfgEmerAndTransitInfo_PR.CfgEmerAndTransitInfo_PR_reqTspEvp = 2
     * }
     */
    public static int CfgEmerAndTransitInfo_PR_reqTspEvp() {
        return CfgEmerAndTransitInfo_PR_reqTspEvp;
    }
    private static final int CfgEmerAndTransitInfo_PR_transitVehPassCnt = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CfgEmerAndTransitInfo_PR.CfgEmerAndTransitInfo_PR_transitVehPassCnt = 3
     * }
     */
    public static int CfgEmerAndTransitInfo_PR_transitVehPassCnt() {
        return CfgEmerAndTransitInfo_PR_transitVehPassCnt;
    }
    private static final int CfgEmerAndTransitInfo_PR_transitVehDoor = (int)4L;
    /**
     * {@snippet lang=c :
     * enum CfgEmerAndTransitInfo_PR.CfgEmerAndTransitInfo_PR_transitVehDoor = 4
     * }
     */
    public static int CfgEmerAndTransitInfo_PR_transitVehDoor() {
        return CfgEmerAndTransitInfo_PR_transitVehDoor;
    }

    private static class asn_DEF_CfgEmerAndTransitInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgEmerAndTransitInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEmerAndTransitInfo
     * }
     */
    public static GroupLayout asn_DEF_CfgEmerAndTransitInfo$layout() {
        return asn_DEF_CfgEmerAndTransitInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEmerAndTransitInfo
     * }
     */
    public static MemorySegment asn_DEF_CfgEmerAndTransitInfo() {
        return asn_DEF_CfgEmerAndTransitInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEmerAndTransitInfo
     * }
     */
    public static void asn_DEF_CfgEmerAndTransitInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgEmerAndTransitInfo$constants.SEGMENT, 0L, asn_DEF_CfgEmerAndTransitInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgEmerAndTransitInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgEmerAndTransitInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgEmerAndTransitInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgEmerAndTransitInfo_specs_1$layout() {
        return asn_SPC_CfgEmerAndTransitInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgEmerAndTransitInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgEmerAndTransitInfo_specs_1() {
        return asn_SPC_CfgEmerAndTransitInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgEmerAndTransitInfo_specs_1
     * }
     */
    public static void asn_SPC_CfgEmerAndTransitInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgEmerAndTransitInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgEmerAndTransitInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgEmerAndTransitInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgEmerAndTransitInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_CfgEmerAndTransitInfo_1$layout() {
        return asn_MBR_CfgEmerAndTransitInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static long[] asn_MBR_CfgEmerAndTransitInfo_1$dimensions() {
        return asn_MBR_CfgEmerAndTransitInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static MemorySegment asn_MBR_CfgEmerAndTransitInfo_1() {
        return asn_MBR_CfgEmerAndTransitInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static void asn_MBR_CfgEmerAndTransitInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEmerAndTransitInfo_1$constants.SEGMENT, 0L, asn_MBR_CfgEmerAndTransitInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static MemorySegment asn_MBR_CfgEmerAndTransitInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgEmerAndTransitInfo_1$constants.HANDLE.invokeExact(asn_MBR_CfgEmerAndTransitInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEmerAndTransitInfo_1[4]
     * }
     */
    public static void asn_MBR_CfgEmerAndTransitInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEmerAndTransitInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_CfgEmerAndTransitInfo_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CfgEmerAndTransitInfo_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgEmerAndTransitInfo_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CfgEmerAndTransitInfo_constr_1$layout() {
        return asn_PER_type_CfgEmerAndTransitInfo_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgEmerAndTransitInfo_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CfgEmerAndTransitInfo_constr_1() {
        return asn_PER_type_CfgEmerAndTransitInfo_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgEmerAndTransitInfo_constr_1
     * }
     */
    public static void asn_PER_type_CfgEmerAndTransitInfo_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CfgEmerAndTransitInfo_constr_1$constants.SEGMENT, 0L, asn_PER_type_CfgEmerAndTransitInfo_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int CfgMsgDictionary_sae = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CfgMsgDictionary.CfgMsgDictionary_sae = 1
     * }
     */
    public static int CfgMsgDictionary_sae() {
        return CfgMsgDictionary_sae;
    }
    private static final int CfgMsgDictionary_etsi = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CfgMsgDictionary.CfgMsgDictionary_etsi = 2
     * }
     */
    public static int CfgMsgDictionary_etsi() {
        return CfgMsgDictionary_etsi;
    }
    private static final int CfgMsgDictionary_iso = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CfgMsgDictionary.CfgMsgDictionary_iso = 3
     * }
     */
    public static int CfgMsgDictionary_iso() {
        return CfgMsgDictionary_iso;
    }
    /**
     * {@snippet lang=c :
     * typedef long CfgMsgDictionary_t
     * }
     */
    public static final OfLong CfgMsgDictionary_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CfgMsgDictionary_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CfgMsgDictionary_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgMsgDictionary_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CfgMsgDictionary_constr_1$layout() {
        return asn_PER_type_CfgMsgDictionary_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgMsgDictionary_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CfgMsgDictionary_constr_1() {
        return asn_PER_type_CfgMsgDictionary_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgMsgDictionary_constr_1
     * }
     */
    public static void asn_PER_type_CfgMsgDictionary_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CfgMsgDictionary_constr_1$constants.SEGMENT, 0L, asn_PER_type_CfgMsgDictionary_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CfgMsgDictionary$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgMsgDictionary").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgDictionary
     * }
     */
    public static GroupLayout asn_DEF_CfgMsgDictionary$layout() {
        return asn_DEF_CfgMsgDictionary$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgDictionary
     * }
     */
    public static MemorySegment asn_DEF_CfgMsgDictionary() {
        return asn_DEF_CfgMsgDictionary$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgDictionary
     * }
     */
    public static void asn_DEF_CfgMsgDictionary(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgMsgDictionary$constants.SEGMENT, 0L, asn_DEF_CfgMsgDictionary$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgMsgDictionary_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgMsgDictionary_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_CfgMsgDictionary_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgMsgDictionary_specs_1$layout() {
        return asn_SPC_CfgMsgDictionary_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_CfgMsgDictionary_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgMsgDictionary_specs_1() {
        return asn_SPC_CfgMsgDictionary_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_CfgMsgDictionary_specs_1
     * }
     */
    public static void asn_SPC_CfgMsgDictionary_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgMsgDictionary_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgMsgDictionary_specs_1$constants.LAYOUT.byteSize());
    }

    private static class CfgMsgDictionary_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CfgMsgDictionary_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_free$descriptor() {
        return CfgMsgDictionary_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CfgMsgDictionary_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CfgMsgDictionary_free$handle() {
        return CfgMsgDictionary_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CfgMsgDictionary_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CfgMsgDictionary_free$address() {
        return CfgMsgDictionary_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CfgMsgDictionary_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CfgMsgDictionary_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CfgMsgDictionary_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_print$descriptor() {
        return CfgMsgDictionary_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_print$handle() {
        return CfgMsgDictionary_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_print$address() {
        return CfgMsgDictionary_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CfgMsgDictionary_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CfgMsgDictionary_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CfgMsgDictionary_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_constraint$descriptor() {
        return CfgMsgDictionary_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_constraint$handle() {
        return CfgMsgDictionary_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CfgMsgDictionary_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_constraint$address() {
        return CfgMsgDictionary_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CfgMsgDictionary_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CfgMsgDictionary_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CfgMsgDictionary_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_decode_ber$descriptor() {
        return CfgMsgDictionary_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CfgMsgDictionary_decode_ber$handle() {
        return CfgMsgDictionary_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_ber$address() {
        return CfgMsgDictionary_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CfgMsgDictionary_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_der$descriptor() {
        return CfgMsgDictionary_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_der$handle() {
        return CfgMsgDictionary_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_der$address() {
        return CfgMsgDictionary_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CfgMsgDictionary_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_decode_xer$descriptor() {
        return CfgMsgDictionary_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CfgMsgDictionary_decode_xer$handle() {
        return CfgMsgDictionary_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_xer$address() {
        return CfgMsgDictionary_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CfgMsgDictionary_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_xer$descriptor() {
        return CfgMsgDictionary_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_xer$handle() {
        return CfgMsgDictionary_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_xer$address() {
        return CfgMsgDictionary_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CfgMsgDictionary_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_jer$descriptor() {
        return CfgMsgDictionary_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_jer$handle() {
        return CfgMsgDictionary_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_jer$address() {
        return CfgMsgDictionary_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CfgMsgDictionary_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_decode_oer$descriptor() {
        return CfgMsgDictionary_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CfgMsgDictionary_decode_oer$handle() {
        return CfgMsgDictionary_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_oer$address() {
        return CfgMsgDictionary_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CfgMsgDictionary_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_oer$descriptor() {
        return CfgMsgDictionary_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_oer$handle() {
        return CfgMsgDictionary_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_oer$address() {
        return CfgMsgDictionary_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CfgMsgDictionary_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_decode_uper$descriptor() {
        return CfgMsgDictionary_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_decode_uper$handle() {
        return CfgMsgDictionary_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_uper$address() {
        return CfgMsgDictionary_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CfgMsgDictionary_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_uper$descriptor() {
        return CfgMsgDictionary_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_uper$handle() {
        return CfgMsgDictionary_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_uper$address() {
        return CfgMsgDictionary_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CfgMsgDictionary_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_decode_aper$descriptor() {
        return CfgMsgDictionary_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_decode_aper$handle() {
        return CfgMsgDictionary_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_aper$address() {
        return CfgMsgDictionary_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CfgMsgDictionary_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CfgMsgDictionary_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CfgMsgDictionary_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CfgMsgDictionary_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CfgMsgDictionary_encode_aper$descriptor() {
        return CfgMsgDictionary_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CfgMsgDictionary_encode_aper$handle() {
        return CfgMsgDictionary_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_aper$address() {
        return CfgMsgDictionary_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CfgMsgDictionary_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CfgMsgDictionary_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CfgMsgDictionary_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CfgMsgDictionary_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_CfgMsgRecepIndicators$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgMsgRecepIndicators").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgRecepIndicators
     * }
     */
    public static GroupLayout asn_DEF_CfgMsgRecepIndicators$layout() {
        return asn_DEF_CfgMsgRecepIndicators$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgRecepIndicators
     * }
     */
    public static MemorySegment asn_DEF_CfgMsgRecepIndicators() {
        return asn_DEF_CfgMsgRecepIndicators$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgMsgRecepIndicators
     * }
     */
    public static void asn_DEF_CfgMsgRecepIndicators(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgMsgRecepIndicators$constants.SEGMENT, 0L, asn_DEF_CfgMsgRecepIndicators$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgMsgRecepIndicators_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgMsgRecepIndicators_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgMsgRecepIndicators_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgMsgRecepIndicators_specs_1$layout() {
        return asn_SPC_CfgMsgRecepIndicators_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgMsgRecepIndicators_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgMsgRecepIndicators_specs_1() {
        return asn_SPC_CfgMsgRecepIndicators_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgMsgRecepIndicators_specs_1
     * }
     */
    public static void asn_SPC_CfgMsgRecepIndicators_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgMsgRecepIndicators_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgMsgRecepIndicators_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgMsgRecepIndicators_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgMsgRecepIndicators_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgMsgRecepIndicators_1$layout() {
        return asn_MBR_CfgMsgRecepIndicators_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static long[] asn_MBR_CfgMsgRecepIndicators_1$dimensions() {
        return asn_MBR_CfgMsgRecepIndicators_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgMsgRecepIndicators_1() {
        return asn_MBR_CfgMsgRecepIndicators_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static void asn_MBR_CfgMsgRecepIndicators_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgMsgRecepIndicators_1$constants.SEGMENT, 0L, asn_MBR_CfgMsgRecepIndicators_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgMsgRecepIndicators_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgMsgRecepIndicators_1$constants.HANDLE.invokeExact(asn_MBR_CfgMsgRecepIndicators_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgMsgRecepIndicators_1[2]
     * }
     */
    public static void asn_MBR_CfgMsgRecepIndicators_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgMsgRecepIndicators_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgRoadwayEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgRoadwayEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadwayEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgRoadwayEvents$layout() {
        return asn_DEF_CfgRoadwayEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadwayEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgRoadwayEvents() {
        return asn_DEF_CfgRoadwayEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadwayEvents
     * }
     */
    public static void asn_DEF_CfgRoadwayEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgRoadwayEvents$constants.SEGMENT, 0L, asn_DEF_CfgRoadwayEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgRoadwayEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgRoadwayEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadwayEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgRoadwayEvents_specs_1$layout() {
        return asn_SPC_CfgRoadwayEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadwayEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgRoadwayEvents_specs_1() {
        return asn_SPC_CfgRoadwayEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadwayEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgRoadwayEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgRoadwayEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgRoadwayEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgRoadwayEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(14, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgRoadwayEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 14 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static SequenceLayout asn_MBR_CfgRoadwayEvents_1$layout() {
        return asn_MBR_CfgRoadwayEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static long[] asn_MBR_CfgRoadwayEvents_1$dimensions() {
        return asn_MBR_CfgRoadwayEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadwayEvents_1() {
        return asn_MBR_CfgRoadwayEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static void asn_MBR_CfgRoadwayEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadwayEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgRoadwayEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadwayEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgRoadwayEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgRoadwayEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadwayEvents_1[14]
     * }
     */
    public static void asn_MBR_CfgRoadwayEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadwayEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgTrafficSigEncounters$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgTrafficSigEncounters").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTrafficSigEncounters
     * }
     */
    public static GroupLayout asn_DEF_CfgTrafficSigEncounters$layout() {
        return asn_DEF_CfgTrafficSigEncounters$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTrafficSigEncounters
     * }
     */
    public static MemorySegment asn_DEF_CfgTrafficSigEncounters() {
        return asn_DEF_CfgTrafficSigEncounters$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgTrafficSigEncounters
     * }
     */
    public static void asn_DEF_CfgTrafficSigEncounters(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgTrafficSigEncounters$constants.SEGMENT, 0L, asn_DEF_CfgTrafficSigEncounters$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgTrafficSigEncounters_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgTrafficSigEncounters_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTrafficSigEncounters_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgTrafficSigEncounters_specs_1$layout() {
        return asn_SPC_CfgTrafficSigEncounters_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTrafficSigEncounters_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgTrafficSigEncounters_specs_1() {
        return asn_SPC_CfgTrafficSigEncounters_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgTrafficSigEncounters_specs_1
     * }
     */
    public static void asn_SPC_CfgTrafficSigEncounters_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgTrafficSigEncounters_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgTrafficSigEncounters_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgTrafficSigEncounters_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(8, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgTrafficSigEncounters_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 8 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static SequenceLayout asn_MBR_CfgTrafficSigEncounters_1$layout() {
        return asn_MBR_CfgTrafficSigEncounters_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static long[] asn_MBR_CfgTrafficSigEncounters_1$dimensions() {
        return asn_MBR_CfgTrafficSigEncounters_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static MemorySegment asn_MBR_CfgTrafficSigEncounters_1() {
        return asn_MBR_CfgTrafficSigEncounters_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static void asn_MBR_CfgTrafficSigEncounters_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgTrafficSigEncounters_1$constants.SEGMENT, 0L, asn_MBR_CfgTrafficSigEncounters_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static MemorySegment asn_MBR_CfgTrafficSigEncounters_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgTrafficSigEncounters_1$constants.HANDLE.invokeExact(asn_MBR_CfgTrafficSigEncounters_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgTrafficSigEncounters_1[8]
     * }
     */
    public static void asn_MBR_CfgTrafficSigEncounters_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgTrafficSigEncounters_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgRoadSignTypes$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgRoadSignTypes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignTypes
     * }
     */
    public static GroupLayout asn_DEF_CfgRoadSignTypes$layout() {
        return asn_DEF_CfgRoadSignTypes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignTypes
     * }
     */
    public static MemorySegment asn_DEF_CfgRoadSignTypes() {
        return asn_DEF_CfgRoadSignTypes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignTypes
     * }
     */
    public static void asn_DEF_CfgRoadSignTypes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgRoadSignTypes$constants.SEGMENT, 0L, asn_DEF_CfgRoadSignTypes$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgRoadSignTypes_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgRoadSignTypes_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignTypes_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgRoadSignTypes_specs_1$layout() {
        return asn_SPC_CfgRoadSignTypes_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignTypes_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgRoadSignTypes_specs_1() {
        return asn_SPC_CfgRoadSignTypes_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignTypes_specs_1
     * }
     */
    public static void asn_SPC_CfgRoadSignTypes_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgRoadSignTypes_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgRoadSignTypes_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgRoadSignTypes_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(14, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgRoadSignTypes_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 14 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static SequenceLayout asn_MBR_CfgRoadSignTypes_1$layout() {
        return asn_MBR_CfgRoadSignTypes_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static long[] asn_MBR_CfgRoadSignTypes_1$dimensions() {
        return asn_MBR_CfgRoadSignTypes_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadSignTypes_1() {
        return asn_MBR_CfgRoadSignTypes_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static void asn_MBR_CfgRoadSignTypes_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadSignTypes_1$constants.SEGMENT, 0L, asn_MBR_CfgRoadSignTypes_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadSignTypes_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgRoadSignTypes_1$constants.HANDLE.invokeExact(asn_MBR_CfgRoadSignTypes_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignTypes_1[14]
     * }
     */
    public static void asn_MBR_CfgRoadSignTypes_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadSignTypes_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgRoadSignInfo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgRoadSignInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignInfo
     * }
     */
    public static GroupLayout asn_DEF_CfgRoadSignInfo$layout() {
        return asn_DEF_CfgRoadSignInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignInfo
     * }
     */
    public static MemorySegment asn_DEF_CfgRoadSignInfo() {
        return asn_DEF_CfgRoadSignInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgRoadSignInfo
     * }
     */
    public static void asn_DEF_CfgRoadSignInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgRoadSignInfo$constants.SEGMENT, 0L, asn_DEF_CfgRoadSignInfo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgRoadSignInfo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgRoadSignInfo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignInfo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgRoadSignInfo_specs_1$layout() {
        return asn_SPC_CfgRoadSignInfo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignInfo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgRoadSignInfo_specs_1() {
        return asn_SPC_CfgRoadSignInfo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgRoadSignInfo_specs_1
     * }
     */
    public static void asn_SPC_CfgRoadSignInfo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgRoadSignInfo_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgRoadSignInfo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgRoadSignInfo_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgRoadSignInfo_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_CfgRoadSignInfo_1$layout() {
        return asn_MBR_CfgRoadSignInfo_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static long[] asn_MBR_CfgRoadSignInfo_1$dimensions() {
        return asn_MBR_CfgRoadSignInfo_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadSignInfo_1() {
        return asn_MBR_CfgRoadSignInfo_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static void asn_MBR_CfgRoadSignInfo_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadSignInfo_1$constants.SEGMENT, 0L, asn_MBR_CfgRoadSignInfo_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static MemorySegment asn_MBR_CfgRoadSignInfo_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgRoadSignInfo_1$constants.HANDLE.invokeExact(asn_MBR_CfgRoadSignInfo_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgRoadSignInfo_1[3]
     * }
     */
    public static void asn_MBR_CfgRoadSignInfo_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgRoadSignInfo_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgCommSysPerfEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgCommSysPerfEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgCommSysPerfEvents
     * }
     */
    public static GroupLayout asn_DEF_CfgCommSysPerfEvents$layout() {
        return asn_DEF_CfgCommSysPerfEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgCommSysPerfEvents
     * }
     */
    public static MemorySegment asn_DEF_CfgCommSysPerfEvents() {
        return asn_DEF_CfgCommSysPerfEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgCommSysPerfEvents
     * }
     */
    public static void asn_DEF_CfgCommSysPerfEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgCommSysPerfEvents$constants.SEGMENT, 0L, asn_DEF_CfgCommSysPerfEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgCommSysPerfEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgCommSysPerfEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgCommSysPerfEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgCommSysPerfEvents_specs_1$layout() {
        return asn_SPC_CfgCommSysPerfEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgCommSysPerfEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgCommSysPerfEvents_specs_1() {
        return asn_SPC_CfgCommSysPerfEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgCommSysPerfEvents_specs_1
     * }
     */
    public static void asn_SPC_CfgCommSysPerfEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgCommSysPerfEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgCommSysPerfEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgCommSysPerfEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(10, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgCommSysPerfEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 10 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static SequenceLayout asn_MBR_CfgCommSysPerfEvents_1$layout() {
        return asn_MBR_CfgCommSysPerfEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static long[] asn_MBR_CfgCommSysPerfEvents_1$dimensions() {
        return asn_MBR_CfgCommSysPerfEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static MemorySegment asn_MBR_CfgCommSysPerfEvents_1() {
        return asn_MBR_CfgCommSysPerfEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static void asn_MBR_CfgCommSysPerfEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgCommSysPerfEvents_1$constants.SEGMENT, 0L, asn_MBR_CfgCommSysPerfEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static MemorySegment asn_MBR_CfgCommSysPerfEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgCommSysPerfEvents_1$constants.HANDLE.invokeExact(asn_MBR_CfgCommSysPerfEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgCommSysPerfEvents_1[10]
     * }
     */
    public static void asn_MBR_CfgCommSysPerfEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgCommSysPerfEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int CfgInstantaneousEventTriggers_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CfgInstantaneousEventTriggers_PR.CfgInstantaneousEventTriggers_PR_NOTHING = 0
     * }
     */
    public static int CfgInstantaneousEventTriggers_PR_NOTHING() {
        return CfgInstantaneousEventTriggers_PR_NOTHING;
    }
    private static final int CfgInstantaneousEventTriggers_PR_intervalEvents = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CfgInstantaneousEventTriggers_PR.CfgInstantaneousEventTriggers_PR_intervalEvents = 1
     * }
     */
    public static int CfgInstantaneousEventTriggers_PR_intervalEvents() {
        return CfgInstantaneousEventTriggers_PR_intervalEvents;
    }
    private static final int CfgInstantaneousEventTriggers_PR_vehicleEvents = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CfgInstantaneousEventTriggers_PR.CfgInstantaneousEventTriggers_PR_vehicleEvents = 2
     * }
     */
    public static int CfgInstantaneousEventTriggers_PR_vehicleEvents() {
        return CfgInstantaneousEventTriggers_PR_vehicleEvents;
    }
    private static final int CfgInstantaneousEventTriggers_PR_roadwayEvents = (int)3L;
    /**
     * {@snippet lang=c :
     * enum CfgInstantaneousEventTriggers_PR.CfgInstantaneousEventTriggers_PR_roadwayEvents = 3
     * }
     */
    public static int CfgInstantaneousEventTriggers_PR_roadwayEvents() {
        return CfgInstantaneousEventTriggers_PR_roadwayEvents;
    }
    private static final int CfgInstantaneousEventTriggers_PR_commSysPerfEvents = (int)4L;
    /**
     * {@snippet lang=c :
     * enum CfgInstantaneousEventTriggers_PR.CfgInstantaneousEventTriggers_PR_commSysPerfEvents = 4
     * }
     */
    public static int CfgInstantaneousEventTriggers_PR_commSysPerfEvents() {
        return CfgInstantaneousEventTriggers_PR_commSysPerfEvents;
    }

    private static class asn_DEF_CfgInstantaneousEventTriggers$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgInstantaneousEventTriggers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInstantaneousEventTriggers
     * }
     */
    public static GroupLayout asn_DEF_CfgInstantaneousEventTriggers$layout() {
        return asn_DEF_CfgInstantaneousEventTriggers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInstantaneousEventTriggers
     * }
     */
    public static MemorySegment asn_DEF_CfgInstantaneousEventTriggers() {
        return asn_DEF_CfgInstantaneousEventTriggers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgInstantaneousEventTriggers
     * }
     */
    public static void asn_DEF_CfgInstantaneousEventTriggers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgInstantaneousEventTriggers$constants.SEGMENT, 0L, asn_DEF_CfgInstantaneousEventTriggers$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgInstantaneousEventTriggers_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgInstantaneousEventTriggers_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInstantaneousEventTriggers_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgInstantaneousEventTriggers_specs_1$layout() {
        return asn_SPC_CfgInstantaneousEventTriggers_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInstantaneousEventTriggers_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgInstantaneousEventTriggers_specs_1() {
        return asn_SPC_CfgInstantaneousEventTriggers_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgInstantaneousEventTriggers_specs_1
     * }
     */
    public static void asn_SPC_CfgInstantaneousEventTriggers_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgInstantaneousEventTriggers_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgInstantaneousEventTriggers_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgInstantaneousEventTriggers_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgInstantaneousEventTriggers_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_CfgInstantaneousEventTriggers_1$layout() {
        return asn_MBR_CfgInstantaneousEventTriggers_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static long[] asn_MBR_CfgInstantaneousEventTriggers_1$dimensions() {
        return asn_MBR_CfgInstantaneousEventTriggers_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static MemorySegment asn_MBR_CfgInstantaneousEventTriggers_1() {
        return asn_MBR_CfgInstantaneousEventTriggers_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static void asn_MBR_CfgInstantaneousEventTriggers_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgInstantaneousEventTriggers_1$constants.SEGMENT, 0L, asn_MBR_CfgInstantaneousEventTriggers_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static MemorySegment asn_MBR_CfgInstantaneousEventTriggers_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgInstantaneousEventTriggers_1$constants.HANDLE.invokeExact(asn_MBR_CfgInstantaneousEventTriggers_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgInstantaneousEventTriggers_1[4]
     * }
     */
    public static void asn_MBR_CfgInstantaneousEventTriggers_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgInstantaneousEventTriggers_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_CfgInstantaneousEventTriggers_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CfgInstantaneousEventTriggers_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInstantaneousEventTriggers_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CfgInstantaneousEventTriggers_constr_1$layout() {
        return asn_PER_type_CfgInstantaneousEventTriggers_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInstantaneousEventTriggers_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CfgInstantaneousEventTriggers_constr_1() {
        return asn_PER_type_CfgInstantaneousEventTriggers_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgInstantaneousEventTriggers_constr_1
     * }
     */
    public static void asn_PER_type_CfgInstantaneousEventTriggers_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CfgInstantaneousEventTriggers_constr_1$constants.SEGMENT, 0L, asn_PER_type_CfgInstantaneousEventTriggers_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CfgAveragedTriggers$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgAveragedTriggers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedTriggers
     * }
     */
    public static GroupLayout asn_DEF_CfgAveragedTriggers$layout() {
        return asn_DEF_CfgAveragedTriggers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedTriggers
     * }
     */
    public static MemorySegment asn_DEF_CfgAveragedTriggers() {
        return asn_DEF_CfgAveragedTriggers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedTriggers
     * }
     */
    public static void asn_DEF_CfgAveragedTriggers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgAveragedTriggers$constants.SEGMENT, 0L, asn_DEF_CfgAveragedTriggers$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgAveragedTriggers_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgAveragedTriggers_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgAveragedTriggers_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgAveragedTriggers_specs_1$layout() {
        return asn_SPC_CfgAveragedTriggers_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgAveragedTriggers_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgAveragedTriggers_specs_1() {
        return asn_SPC_CfgAveragedTriggers_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgAveragedTriggers_specs_1
     * }
     */
    public static void asn_SPC_CfgAveragedTriggers_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgAveragedTriggers_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgAveragedTriggers_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgAveragedTriggers_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgAveragedTriggers_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_CfgAveragedTriggers_1$layout() {
        return asn_MBR_CfgAveragedTriggers_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static long[] asn_MBR_CfgAveragedTriggers_1$dimensions() {
        return asn_MBR_CfgAveragedTriggers_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static MemorySegment asn_MBR_CfgAveragedTriggers_1() {
        return asn_MBR_CfgAveragedTriggers_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static void asn_MBR_CfgAveragedTriggers_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgAveragedTriggers_1$constants.SEGMENT, 0L, asn_MBR_CfgAveragedTriggers_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static MemorySegment asn_MBR_CfgAveragedTriggers_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgAveragedTriggers_1$constants.HANDLE.invokeExact(asn_MBR_CfgAveragedTriggers_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedTriggers_1[5]
     * }
     */
    public static void asn_MBR_CfgAveragedTriggers_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgAveragedTriggers_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgSummaryTriggers$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgSummaryTriggers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgSummaryTriggers
     * }
     */
    public static GroupLayout asn_DEF_CfgSummaryTriggers$layout() {
        return asn_DEF_CfgSummaryTriggers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgSummaryTriggers
     * }
     */
    public static MemorySegment asn_DEF_CfgSummaryTriggers() {
        return asn_DEF_CfgSummaryTriggers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgSummaryTriggers
     * }
     */
    public static void asn_DEF_CfgSummaryTriggers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgSummaryTriggers$constants.SEGMENT, 0L, asn_DEF_CfgSummaryTriggers$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgSummaryTriggers_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgSummaryTriggers_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgSummaryTriggers_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgSummaryTriggers_specs_1$layout() {
        return asn_SPC_CfgSummaryTriggers_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgSummaryTriggers_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgSummaryTriggers_specs_1() {
        return asn_SPC_CfgSummaryTriggers_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgSummaryTriggers_specs_1
     * }
     */
    public static void asn_SPC_CfgSummaryTriggers_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgSummaryTriggers_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgSummaryTriggers_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgSummaryTriggers_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(12, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgSummaryTriggers_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 12 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static SequenceLayout asn_MBR_CfgSummaryTriggers_1$layout() {
        return asn_MBR_CfgSummaryTriggers_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static long[] asn_MBR_CfgSummaryTriggers_1$dimensions() {
        return asn_MBR_CfgSummaryTriggers_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgSummaryTriggers_1() {
        return asn_MBR_CfgSummaryTriggers_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static void asn_MBR_CfgSummaryTriggers_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgSummaryTriggers_1$constants.SEGMENT, 0L, asn_MBR_CfgSummaryTriggers_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgSummaryTriggers_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgSummaryTriggers_1$constants.HANDLE.invokeExact(asn_MBR_CfgSummaryTriggers_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgSummaryTriggers_1[12]
     * }
     */
    public static void asn_MBR_CfgSummaryTriggers_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgSummaryTriggers_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgStoppedCriteria$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgStoppedCriteria").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgStoppedCriteria
     * }
     */
    public static GroupLayout asn_DEF_CfgStoppedCriteria$layout() {
        return asn_DEF_CfgStoppedCriteria$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgStoppedCriteria
     * }
     */
    public static MemorySegment asn_DEF_CfgStoppedCriteria() {
        return asn_DEF_CfgStoppedCriteria$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgStoppedCriteria
     * }
     */
    public static void asn_DEF_CfgStoppedCriteria(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgStoppedCriteria$constants.SEGMENT, 0L, asn_DEF_CfgStoppedCriteria$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgStoppedCriteria_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgStoppedCriteria_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgStoppedCriteria_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgStoppedCriteria_specs_1$layout() {
        return asn_SPC_CfgStoppedCriteria_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgStoppedCriteria_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgStoppedCriteria_specs_1() {
        return asn_SPC_CfgStoppedCriteria_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgStoppedCriteria_specs_1
     * }
     */
    public static void asn_SPC_CfgStoppedCriteria_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgStoppedCriteria_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgStoppedCriteria_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgStoppedCriteria_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgStoppedCriteria_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgStoppedCriteria_1$layout() {
        return asn_MBR_CfgStoppedCriteria_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static long[] asn_MBR_CfgStoppedCriteria_1$dimensions() {
        return asn_MBR_CfgStoppedCriteria_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgStoppedCriteria_1() {
        return asn_MBR_CfgStoppedCriteria_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static void asn_MBR_CfgStoppedCriteria_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgStoppedCriteria_1$constants.SEGMENT, 0L, asn_MBR_CfgStoppedCriteria_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgStoppedCriteria_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgStoppedCriteria_1$constants.HANDLE.invokeExact(asn_MBR_CfgStoppedCriteria_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgStoppedCriteria_1[2]
     * }
     */
    public static void asn_MBR_CfgStoppedCriteria_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgStoppedCriteria_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int CfgAveragedAndSummaryTriggers_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CfgAveragedAndSummaryTriggers_PR.CfgAveragedAndSummaryTriggers_PR_NOTHING = 0
     * }
     */
    public static int CfgAveragedAndSummaryTriggers_PR_NOTHING() {
        return CfgAveragedAndSummaryTriggers_PR_NOTHING;
    }
    private static final int CfgAveragedAndSummaryTriggers_PR_averagedTriggers = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CfgAveragedAndSummaryTriggers_PR.CfgAveragedAndSummaryTriggers_PR_averagedTriggers = 1
     * }
     */
    public static int CfgAveragedAndSummaryTriggers_PR_averagedTriggers() {
        return CfgAveragedAndSummaryTriggers_PR_averagedTriggers;
    }
    private static final int CfgAveragedAndSummaryTriggers_PR_summaryTriggers = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CfgAveragedAndSummaryTriggers_PR.CfgAveragedAndSummaryTriggers_PR_summaryTriggers = 2
     * }
     */
    public static int CfgAveragedAndSummaryTriggers_PR_summaryTriggers() {
        return CfgAveragedAndSummaryTriggers_PR_summaryTriggers;
    }

    private static class asn_DEF_CfgAveragedAndSummaryTriggers$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgAveragedAndSummaryTriggers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedAndSummaryTriggers
     * }
     */
    public static GroupLayout asn_DEF_CfgAveragedAndSummaryTriggers$layout() {
        return asn_DEF_CfgAveragedAndSummaryTriggers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedAndSummaryTriggers
     * }
     */
    public static MemorySegment asn_DEF_CfgAveragedAndSummaryTriggers() {
        return asn_DEF_CfgAveragedAndSummaryTriggers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgAveragedAndSummaryTriggers
     * }
     */
    public static void asn_DEF_CfgAveragedAndSummaryTriggers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgAveragedAndSummaryTriggers$constants.SEGMENT, 0L, asn_DEF_CfgAveragedAndSummaryTriggers$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgAveragedAndSummaryTriggers_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgAveragedAndSummaryTriggers_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$layout() {
        return asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgAveragedAndSummaryTriggers_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgAveragedAndSummaryTriggers_specs_1() {
        return asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_CfgAveragedAndSummaryTriggers_specs_1
     * }
     */
    public static void asn_SPC_CfgAveragedAndSummaryTriggers_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgAveragedAndSummaryTriggers_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgAveragedAndSummaryTriggers_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgAveragedAndSummaryTriggers_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_CfgAveragedAndSummaryTriggers_1$layout() {
        return asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static long[] asn_MBR_CfgAveragedAndSummaryTriggers_1$dimensions() {
        return asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgAveragedAndSummaryTriggers_1() {
        return asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static void asn_MBR_CfgAveragedAndSummaryTriggers_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.SEGMENT, 0L, asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static MemorySegment asn_MBR_CfgAveragedAndSummaryTriggers_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.HANDLE.invokeExact(asn_MBR_CfgAveragedAndSummaryTriggers_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgAveragedAndSummaryTriggers_1[2]
     * }
     */
    public static void asn_MBR_CfgAveragedAndSummaryTriggers_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgAveragedAndSummaryTriggers_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$layout() {
        return asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1() {
        return asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1
     * }
     */
    public static void asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$constants.SEGMENT, 0L, asn_PER_type_CfgAveragedAndSummaryTriggers_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int ConfigTriggers_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ConfigTriggers_PR.ConfigTriggers_PR_NOTHING = 0
     * }
     */
    public static int ConfigTriggers_PR_NOTHING() {
        return ConfigTriggers_PR_NOTHING;
    }
    private static final int ConfigTriggers_PR_instantaneousTriggers = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ConfigTriggers_PR.ConfigTriggers_PR_instantaneousTriggers = 1
     * }
     */
    public static int ConfigTriggers_PR_instantaneousTriggers() {
        return ConfigTriggers_PR_instantaneousTriggers;
    }
    private static final int ConfigTriggers_PR_avgAndSumTriggers = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ConfigTriggers_PR.ConfigTriggers_PR_avgAndSumTriggers = 2
     * }
     */
    public static int ConfigTriggers_PR_avgAndSumTriggers() {
        return ConfigTriggers_PR_avgAndSumTriggers;
    }

    private static class asn_DEF_ConfigTriggers$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConfigTriggers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTriggers
     * }
     */
    public static GroupLayout asn_DEF_ConfigTriggers$layout() {
        return asn_DEF_ConfigTriggers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTriggers
     * }
     */
    public static MemorySegment asn_DEF_ConfigTriggers() {
        return asn_DEF_ConfigTriggers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTriggers
     * }
     */
    public static void asn_DEF_ConfigTriggers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConfigTriggers$constants.SEGMENT, 0L, asn_DEF_ConfigTriggers$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ConfigTriggers_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ConfigTriggers_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigTriggers_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ConfigTriggers_specs_1$layout() {
        return asn_SPC_ConfigTriggers_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigTriggers_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ConfigTriggers_specs_1() {
        return asn_SPC_ConfigTriggers_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigTriggers_specs_1
     * }
     */
    public static void asn_SPC_ConfigTriggers_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ConfigTriggers_specs_1$constants.SEGMENT, 0L, asn_SPC_ConfigTriggers_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ConfigTriggers_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ConfigTriggers_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_ConfigTriggers_1$layout() {
        return asn_MBR_ConfigTriggers_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static long[] asn_MBR_ConfigTriggers_1$dimensions() {
        return asn_MBR_ConfigTriggers_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ConfigTriggers_1() {
        return asn_MBR_ConfigTriggers_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static void asn_MBR_ConfigTriggers_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigTriggers_1$constants.SEGMENT, 0L, asn_MBR_ConfigTriggers_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ConfigTriggers_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ConfigTriggers_1$constants.HANDLE.invokeExact(asn_MBR_ConfigTriggers_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTriggers_1[2]
     * }
     */
    public static void asn_MBR_ConfigTriggers_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigTriggers_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ConfigTriggers_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ConfigTriggers_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigTriggers_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ConfigTriggers_constr_1$layout() {
        return asn_PER_type_ConfigTriggers_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigTriggers_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ConfigTriggers_constr_1() {
        return asn_PER_type_ConfigTriggers_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigTriggers_constr_1
     * }
     */
    public static void asn_PER_type_ConfigTriggers_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ConfigTriggers_constr_1$constants.SEGMENT, 0L, asn_PER_type_ConfigTriggers_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ProbeDataConfig$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ProbeDataConfig").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfig
     * }
     */
    public static GroupLayout asn_DEF_ProbeDataConfig$layout() {
        return asn_DEF_ProbeDataConfig$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfig
     * }
     */
    public static MemorySegment asn_DEF_ProbeDataConfig() {
        return asn_DEF_ProbeDataConfig$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataConfig
     * }
     */
    public static void asn_DEF_ProbeDataConfig(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ProbeDataConfig$constants.SEGMENT, 0L, asn_DEF_ProbeDataConfig$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ProbeDataConfig_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ProbeDataConfig_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataConfig_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ProbeDataConfig_specs_1$layout() {
        return asn_SPC_ProbeDataConfig_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataConfig_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ProbeDataConfig_specs_1() {
        return asn_SPC_ProbeDataConfig_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataConfig_specs_1
     * }
     */
    public static void asn_SPC_ProbeDataConfig_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ProbeDataConfig_specs_1$constants.SEGMENT, 0L, asn_SPC_ProbeDataConfig_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ProbeDataConfig_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ProbeDataConfig_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_ProbeDataConfig_1$layout() {
        return asn_MBR_ProbeDataConfig_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static long[] asn_MBR_ProbeDataConfig_1$dimensions() {
        return asn_MBR_ProbeDataConfig_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataConfig_1() {
        return asn_MBR_ProbeDataConfig_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static void asn_MBR_ProbeDataConfig_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataConfig_1$constants.SEGMENT, 0L, asn_MBR_ProbeDataConfig_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataConfig_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ProbeDataConfig_1$constants.HANDLE.invokeExact(asn_MBR_ProbeDataConfig_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataConfig_1[4]
     * }
     */
    public static void asn_MBR_ProbeDataConfig_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataConfig_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_CfgEventRecurrence$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CfgEventRecurrence").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEventRecurrence
     * }
     */
    public static GroupLayout asn_DEF_CfgEventRecurrence$layout() {
        return asn_DEF_CfgEventRecurrence$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEventRecurrence
     * }
     */
    public static MemorySegment asn_DEF_CfgEventRecurrence() {
        return asn_DEF_CfgEventRecurrence$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CfgEventRecurrence
     * }
     */
    public static void asn_DEF_CfgEventRecurrence(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CfgEventRecurrence$constants.SEGMENT, 0L, asn_DEF_CfgEventRecurrence$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_CfgEventRecurrence_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_CfgEventRecurrence_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEventRecurrence_specs_1
     * }
     */
    public static GroupLayout asn_SPC_CfgEventRecurrence_specs_1$layout() {
        return asn_SPC_CfgEventRecurrence_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEventRecurrence_specs_1
     * }
     */
    public static MemorySegment asn_SPC_CfgEventRecurrence_specs_1() {
        return asn_SPC_CfgEventRecurrence_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_CfgEventRecurrence_specs_1
     * }
     */
    public static void asn_SPC_CfgEventRecurrence_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_CfgEventRecurrence_specs_1$constants.SEGMENT, 0L, asn_SPC_CfgEventRecurrence_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_CfgEventRecurrence_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(12, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_CfgEventRecurrence_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 12 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static SequenceLayout asn_MBR_CfgEventRecurrence_1$layout() {
        return asn_MBR_CfgEventRecurrence_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static long[] asn_MBR_CfgEventRecurrence_1$dimensions() {
        return asn_MBR_CfgEventRecurrence_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgEventRecurrence_1() {
        return asn_MBR_CfgEventRecurrence_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static void asn_MBR_CfgEventRecurrence_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEventRecurrence_1$constants.SEGMENT, 0L, asn_MBR_CfgEventRecurrence_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static MemorySegment asn_MBR_CfgEventRecurrence_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_CfgEventRecurrence_1$constants.HANDLE.invokeExact(asn_MBR_CfgEventRecurrence_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_CfgEventRecurrence_1[12]
     * }
     */
    public static void asn_MBR_CfgEventRecurrence_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_CfgEventRecurrence_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ConfigTemporalBoundary$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConfigTemporalBoundary").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTemporalBoundary
     * }
     */
    public static GroupLayout asn_DEF_ConfigTemporalBoundary$layout() {
        return asn_DEF_ConfigTemporalBoundary$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTemporalBoundary
     * }
     */
    public static MemorySegment asn_DEF_ConfigTemporalBoundary() {
        return asn_DEF_ConfigTemporalBoundary$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigTemporalBoundary
     * }
     */
    public static void asn_DEF_ConfigTemporalBoundary(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConfigTemporalBoundary$constants.SEGMENT, 0L, asn_DEF_ConfigTemporalBoundary$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ConfigTemporalBoundary_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ConfigTemporalBoundary_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigTemporalBoundary_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ConfigTemporalBoundary_specs_1$layout() {
        return asn_SPC_ConfigTemporalBoundary_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigTemporalBoundary_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ConfigTemporalBoundary_specs_1() {
        return asn_SPC_ConfigTemporalBoundary_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ConfigTemporalBoundary_specs_1
     * }
     */
    public static void asn_SPC_ConfigTemporalBoundary_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ConfigTemporalBoundary_specs_1$constants.SEGMENT, 0L, asn_SPC_ConfigTemporalBoundary_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ConfigTemporalBoundary_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ConfigTemporalBoundary_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_ConfigTemporalBoundary_1$layout() {
        return asn_MBR_ConfigTemporalBoundary_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static long[] asn_MBR_ConfigTemporalBoundary_1$dimensions() {
        return asn_MBR_ConfigTemporalBoundary_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ConfigTemporalBoundary_1() {
        return asn_MBR_ConfigTemporalBoundary_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static void asn_MBR_ConfigTemporalBoundary_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigTemporalBoundary_1$constants.SEGMENT, 0L, asn_MBR_ConfigTemporalBoundary_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static MemorySegment asn_MBR_ConfigTemporalBoundary_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ConfigTemporalBoundary_1$constants.HANDLE.invokeExact(asn_MBR_ConfigTemporalBoundary_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigTemporalBoundary_1[3]
     * }
     */
    public static void asn_MBR_ConfigTemporalBoundary_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigTemporalBoundary_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int ConfigBoundary_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ConfigBoundary_PR.ConfigBoundary_PR_NOTHING = 0
     * }
     */
    public static int ConfigBoundary_PR_NOTHING() {
        return ConfigBoundary_PR_NOTHING;
    }
    private static final int ConfigBoundary_PR_temporalBoundary = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ConfigBoundary_PR.ConfigBoundary_PR_temporalBoundary = 1
     * }
     */
    public static int ConfigBoundary_PR_temporalBoundary() {
        return ConfigBoundary_PR_temporalBoundary;
    }
    private static final int ConfigBoundary_PR_geoAndDistBoundary = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ConfigBoundary_PR.ConfigBoundary_PR_geoAndDistBoundary = 2
     * }
     */
    public static int ConfigBoundary_PR_geoAndDistBoundary() {
        return ConfigBoundary_PR_geoAndDistBoundary;
    }

    private static class asn_DEF_ConfigBoundary$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ConfigBoundary").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigBoundary
     * }
     */
    public static GroupLayout asn_DEF_ConfigBoundary$layout() {
        return asn_DEF_ConfigBoundary$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigBoundary
     * }
     */
    public static MemorySegment asn_DEF_ConfigBoundary() {
        return asn_DEF_ConfigBoundary$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ConfigBoundary
     * }
     */
    public static void asn_DEF_ConfigBoundary(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ConfigBoundary$constants.SEGMENT, 0L, asn_DEF_ConfigBoundary$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ConfigBoundary_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ConfigBoundary_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigBoundary_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ConfigBoundary_specs_1$layout() {
        return asn_SPC_ConfigBoundary_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigBoundary_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ConfigBoundary_specs_1() {
        return asn_SPC_ConfigBoundary_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_ConfigBoundary_specs_1
     * }
     */
    public static void asn_SPC_ConfigBoundary_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ConfigBoundary_specs_1$constants.SEGMENT, 0L, asn_SPC_ConfigBoundary_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ConfigBoundary_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ConfigBoundary_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_ConfigBoundary_1$layout() {
        return asn_MBR_ConfigBoundary_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static long[] asn_MBR_ConfigBoundary_1$dimensions() {
        return asn_MBR_ConfigBoundary_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ConfigBoundary_1() {
        return asn_MBR_ConfigBoundary_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static void asn_MBR_ConfigBoundary_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigBoundary_1$constants.SEGMENT, 0L, asn_MBR_ConfigBoundary_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static MemorySegment asn_MBR_ConfigBoundary_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ConfigBoundary_1$constants.HANDLE.invokeExact(asn_MBR_ConfigBoundary_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ConfigBoundary_1[2]
     * }
     */
    public static void asn_MBR_ConfigBoundary_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ConfigBoundary_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ConfigBoundary_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ConfigBoundary_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigBoundary_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ConfigBoundary_constr_1$layout() {
        return asn_PER_type_ConfigBoundary_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigBoundary_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ConfigBoundary_constr_1() {
        return asn_PER_type_ConfigBoundary_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ConfigBoundary_constr_1
     * }
     */
    public static void asn_PER_type_ConfigBoundary_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ConfigBoundary_constr_1$constants.SEGMENT, 0L, asn_PER_type_ConfigBoundary_constr_1$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long StdDev_t
     * }
     */
    public static final OfLong StdDev_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_StdDev_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_StdDev_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_StdDev_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_StdDev_constr_1$layout() {
        return asn_PER_type_StdDev_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_StdDev_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_StdDev_constr_1() {
        return asn_PER_type_StdDev_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_StdDev_constr_1
     * }
     */
    public static void asn_PER_type_StdDev_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_StdDev_constr_1$constants.SEGMENT, 0L, asn_PER_type_StdDev_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_StdDev$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_StdDev").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_StdDev
     * }
     */
    public static GroupLayout asn_DEF_StdDev$layout() {
        return asn_DEF_StdDev$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_StdDev
     * }
     */
    public static MemorySegment asn_DEF_StdDev() {
        return asn_DEF_StdDev$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_StdDev
     * }
     */
    public static void asn_DEF_StdDev(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_StdDev$constants.SEGMENT, 0L, asn_DEF_StdDev$constants.LAYOUT.byteSize());
    }

    private static class StdDev_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void StdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor StdDev_free$descriptor() {
        return StdDev_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void StdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle StdDev_free$handle() {
        return StdDev_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void StdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment StdDev_free$address() {
        return StdDev_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void StdDev_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void StdDev_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = StdDev_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int StdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_print$descriptor() {
        return StdDev_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int StdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle StdDev_print$handle() {
        return StdDev_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int StdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_print$address() {
        return StdDev_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int StdDev_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int StdDev_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = StdDev_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int StdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_constraint$descriptor() {
        return StdDev_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int StdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle StdDev_constraint$handle() {
        return StdDev_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int StdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment StdDev_constraint$address() {
        return StdDev_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int StdDev_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int StdDev_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = StdDev_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor StdDev_decode_ber$descriptor() {
        return StdDev_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle StdDev_decode_ber$handle() {
        return StdDev_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment StdDev_decode_ber$address() {
        return StdDev_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment StdDev_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = StdDev_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_der$descriptor() {
        return StdDev_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle StdDev_encode_der$handle() {
        return StdDev_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_der$address() {
        return StdDev_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = StdDev_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor StdDev_decode_xer$descriptor() {
        return StdDev_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle StdDev_decode_xer$handle() {
        return StdDev_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment StdDev_decode_xer$address() {
        return StdDev_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment StdDev_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = StdDev_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_xer$descriptor() {
        return StdDev_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle StdDev_encode_xer$handle() {
        return StdDev_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_xer$address() {
        return StdDev_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = StdDev_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_jer$descriptor() {
        return StdDev_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle StdDev_encode_jer$handle() {
        return StdDev_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_jer$address() {
        return StdDev_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = StdDev_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor StdDev_decode_oer$descriptor() {
        return StdDev_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle StdDev_decode_oer$handle() {
        return StdDev_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment StdDev_decode_oer$address() {
        return StdDev_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment StdDev_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = StdDev_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_oer$descriptor() {
        return StdDev_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle StdDev_encode_oer$handle() {
        return StdDev_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_oer$address() {
        return StdDev_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment StdDev_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = StdDev_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor StdDev_decode_uper$descriptor() {
        return StdDev_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle StdDev_decode_uper$handle() {
        return StdDev_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment StdDev_decode_uper$address() {
        return StdDev_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment StdDev_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = StdDev_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_uper$descriptor() {
        return StdDev_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle StdDev_encode_uper$handle() {
        return StdDev_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment StdDev_encode_uper$address() {
        return StdDev_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment StdDev_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = StdDev_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor StdDev_decode_aper$descriptor() {
        return StdDev_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle StdDev_decode_aper$handle() {
        return StdDev_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment StdDev_decode_aper$address() {
        return StdDev_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t StdDev_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment StdDev_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = StdDev_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StdDev_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("StdDev_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor StdDev_encode_aper$descriptor() {
        return StdDev_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle StdDev_encode_aper$handle() {
        return StdDev_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment StdDev_encode_aper$address() {
        return StdDev_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t StdDev_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment StdDev_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = StdDev_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StdDev_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_RptVelocity$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptVelocity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVelocity
     * }
     */
    public static GroupLayout asn_DEF_RptVelocity$layout() {
        return asn_DEF_RptVelocity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVelocity
     * }
     */
    public static MemorySegment asn_DEF_RptVelocity() {
        return asn_DEF_RptVelocity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVelocity
     * }
     */
    public static void asn_DEF_RptVelocity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptVelocity$constants.SEGMENT, 0L, asn_DEF_RptVelocity$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptVelocity_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptVelocity_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptVelocity_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptVelocity_specs_1$layout() {
        return asn_SPC_RptVelocity_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptVelocity_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptVelocity_specs_1() {
        return asn_SPC_RptVelocity_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptVelocity_specs_1
     * }
     */
    public static void asn_SPC_RptVelocity_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptVelocity_specs_1$constants.SEGMENT, 0L, asn_SPC_RptVelocity_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptVelocity_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptVelocity_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_RptVelocity_1$layout() {
        return asn_MBR_RptVelocity_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static long[] asn_MBR_RptVelocity_1$dimensions() {
        return asn_MBR_RptVelocity_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptVelocity_1() {
        return asn_MBR_RptVelocity_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static void asn_MBR_RptVelocity_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVelocity_1$constants.SEGMENT, 0L, asn_MBR_RptVelocity_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptVelocity_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptVelocity_1$constants.HANDLE.invokeExact(asn_MBR_RptVelocity_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVelocity_1[3]
     * }
     */
    public static void asn_MBR_RptVelocity_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVelocity_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ReportCharacteristics$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ReportCharacteristics").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReportCharacteristics
     * }
     */
    public static GroupLayout asn_DEF_ReportCharacteristics$layout() {
        return asn_DEF_ReportCharacteristics$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReportCharacteristics
     * }
     */
    public static MemorySegment asn_DEF_ReportCharacteristics() {
        return asn_DEF_ReportCharacteristics$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ReportCharacteristics
     * }
     */
    public static void asn_DEF_ReportCharacteristics(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ReportCharacteristics$constants.SEGMENT, 0L, asn_DEF_ReportCharacteristics$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ReportCharacteristics_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ReportCharacteristics_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ReportCharacteristics_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ReportCharacteristics_specs_1$layout() {
        return asn_SPC_ReportCharacteristics_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ReportCharacteristics_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ReportCharacteristics_specs_1() {
        return asn_SPC_ReportCharacteristics_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ReportCharacteristics_specs_1
     * }
     */
    public static void asn_SPC_ReportCharacteristics_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ReportCharacteristics_specs_1$constants.SEGMENT, 0L, asn_SPC_ReportCharacteristics_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ReportCharacteristics_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(9, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ReportCharacteristics_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 9 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static SequenceLayout asn_MBR_ReportCharacteristics_1$layout() {
        return asn_MBR_ReportCharacteristics_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static long[] asn_MBR_ReportCharacteristics_1$dimensions() {
        return asn_MBR_ReportCharacteristics_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static MemorySegment asn_MBR_ReportCharacteristics_1() {
        return asn_MBR_ReportCharacteristics_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static void asn_MBR_ReportCharacteristics_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ReportCharacteristics_1$constants.SEGMENT, 0L, asn_MBR_ReportCharacteristics_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static MemorySegment asn_MBR_ReportCharacteristics_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ReportCharacteristics_1$constants.HANDLE.invokeExact(asn_MBR_ReportCharacteristics_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ReportCharacteristics_1[9]
     * }
     */
    public static void asn_MBR_ReportCharacteristics_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ReportCharacteristics_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptDevType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptDevType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDevType
     * }
     */
    public static GroupLayout asn_DEF_RptDevType$layout() {
        return asn_DEF_RptDevType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDevType
     * }
     */
    public static MemorySegment asn_DEF_RptDevType() {
        return asn_DEF_RptDevType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDevType
     * }
     */
    public static void asn_DEF_RptDevType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptDevType$constants.SEGMENT, 0L, asn_DEF_RptDevType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptDevType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptDevType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptDevType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptDevType_specs_1$layout() {
        return asn_SPC_RptDevType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptDevType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptDevType_specs_1() {
        return asn_SPC_RptDevType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptDevType_specs_1
     * }
     */
    public static void asn_SPC_RptDevType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptDevType_specs_1$constants.SEGMENT, 0L, asn_SPC_RptDevType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptDevType_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptDevType_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_RptDevType_1$layout() {
        return asn_MBR_RptDevType_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static long[] asn_MBR_RptDevType_1$dimensions() {
        return asn_MBR_RptDevType_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptDevType_1() {
        return asn_MBR_RptDevType_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static void asn_MBR_RptDevType_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptDevType_1$constants.SEGMENT, 0L, asn_MBR_RptDevType_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptDevType_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptDevType_1$constants.HANDLE.invokeExact(asn_MBR_RptDevType_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDevType_1[3]
     * }
     */
    public static void asn_MBR_RptDevType_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptDevType_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_ProbeDataReportMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ProbeDataReportMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReportMessage
     * }
     */
    public static GroupLayout asn_DEF_ProbeDataReportMessage$layout() {
        return asn_DEF_ProbeDataReportMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReportMessage
     * }
     */
    public static MemorySegment asn_DEF_ProbeDataReportMessage() {
        return asn_DEF_ProbeDataReportMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ProbeDataReportMessage
     * }
     */
    public static void asn_DEF_ProbeDataReportMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ProbeDataReportMessage$constants.SEGMENT, 0L, asn_DEF_ProbeDataReportMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ProbeDataReportMessage_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ProbeDataReportMessage_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataReportMessage_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ProbeDataReportMessage_specs_1$layout() {
        return asn_SPC_ProbeDataReportMessage_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataReportMessage_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ProbeDataReportMessage_specs_1() {
        return asn_SPC_ProbeDataReportMessage_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_ProbeDataReportMessage_specs_1
     * }
     */
    public static void asn_SPC_ProbeDataReportMessage_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ProbeDataReportMessage_specs_1$constants.SEGMENT, 0L, asn_SPC_ProbeDataReportMessage_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_ProbeDataReportMessage_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_ProbeDataReportMessage_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_ProbeDataReportMessage_1$layout() {
        return asn_MBR_ProbeDataReportMessage_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static long[] asn_MBR_ProbeDataReportMessage_1$dimensions() {
        return asn_MBR_ProbeDataReportMessage_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataReportMessage_1() {
        return asn_MBR_ProbeDataReportMessage_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static void asn_MBR_ProbeDataReportMessage_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataReportMessage_1$constants.SEGMENT, 0L, asn_MBR_ProbeDataReportMessage_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static MemorySegment asn_MBR_ProbeDataReportMessage_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_ProbeDataReportMessage_1$constants.HANDLE.invokeExact(asn_MBR_ProbeDataReportMessage_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_ProbeDataReportMessage_1[5]
     * }
     */
    public static void asn_MBR_ProbeDataReportMessage_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_ProbeDataReportMessage_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_ProbeDataReportMessage_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ProbeDataReportMessage_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReportMessage_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ProbeDataReportMessage_constr_1$layout() {
        return asn_PER_type_ProbeDataReportMessage_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReportMessage_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ProbeDataReportMessage_constr_1() {
        return asn_PER_type_ProbeDataReportMessage_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ProbeDataReportMessage_constr_1
     * }
     */
    public static void asn_PER_type_ProbeDataReportMessage_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ProbeDataReportMessage_constr_1$constants.SEGMENT, 0L, asn_PER_type_ProbeDataReportMessage_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptInstantaneousRecords$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptInstantaneousRecords").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecords
     * }
     */
    public static GroupLayout asn_DEF_RptInstantaneousRecords$layout() {
        return asn_DEF_RptInstantaneousRecords$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecords
     * }
     */
    public static MemorySegment asn_DEF_RptInstantaneousRecords() {
        return asn_DEF_RptInstantaneousRecords$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecords
     * }
     */
    public static void asn_DEF_RptInstantaneousRecords(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptInstantaneousRecords$constants.SEGMENT, 0L, asn_DEF_RptInstantaneousRecords$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptInstantaneousRecords_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptInstantaneousRecords_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptInstantaneousRecords_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptInstantaneousRecords_specs_1$layout() {
        return asn_SPC_RptInstantaneousRecords_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptInstantaneousRecords_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptInstantaneousRecords_specs_1() {
        return asn_SPC_RptInstantaneousRecords_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptInstantaneousRecords_specs_1
     * }
     */
    public static void asn_SPC_RptInstantaneousRecords_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptInstantaneousRecords_specs_1$constants.SEGMENT, 0L, asn_SPC_RptInstantaneousRecords_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptInstantaneousRecords_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptInstantaneousRecords_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_RptInstantaneousRecords_1$layout() {
        return asn_MBR_RptInstantaneousRecords_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static long[] asn_MBR_RptInstantaneousRecords_1$dimensions() {
        return asn_MBR_RptInstantaneousRecords_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecords_1() {
        return asn_MBR_RptInstantaneousRecords_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecords_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecords_1$constants.SEGMENT, 0L, asn_MBR_RptInstantaneousRecords_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecords_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptInstantaneousRecords_1$constants.HANDLE.invokeExact(asn_MBR_RptInstantaneousRecords_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecords_1[1]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecords_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecords_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptInstantaneousRecords_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptInstantaneousRecords_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecords_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptInstantaneousRecords_constr_1$layout() {
        return asn_PER_type_RptInstantaneousRecords_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecords_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptInstantaneousRecords_constr_1() {
        return asn_PER_type_RptInstantaneousRecords_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptInstantaneousRecords_constr_1
     * }
     */
    public static void asn_PER_type_RptInstantaneousRecords_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptInstantaneousRecords_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptInstantaneousRecords_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptInstantaneousRecord$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptInstantaneousRecord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecord
     * }
     */
    public static GroupLayout asn_DEF_RptInstantaneousRecord$layout() {
        return asn_DEF_RptInstantaneousRecord$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecord
     * }
     */
    public static MemorySegment asn_DEF_RptInstantaneousRecord() {
        return asn_DEF_RptInstantaneousRecord$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptInstantaneousRecord
     * }
     */
    public static void asn_DEF_RptInstantaneousRecord(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptInstantaneousRecord$constants.SEGMENT, 0L, asn_DEF_RptInstantaneousRecord$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptInstantaneousRecord_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptInstantaneousRecord_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptInstantaneousRecord_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptInstantaneousRecord_specs_1$layout() {
        return asn_SPC_RptInstantaneousRecord_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptInstantaneousRecord_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptInstantaneousRecord_specs_1() {
        return asn_SPC_RptInstantaneousRecord_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptInstantaneousRecord_specs_1
     * }
     */
    public static void asn_SPC_RptInstantaneousRecord_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptInstantaneousRecord_specs_1$constants.SEGMENT, 0L, asn_SPC_RptInstantaneousRecord_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptInstantaneousRecord_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptInstantaneousRecord_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_RptInstantaneousRecord_1$layout() {
        return asn_MBR_RptInstantaneousRecord_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static long[] asn_MBR_RptInstantaneousRecord_1$dimensions() {
        return asn_MBR_RptInstantaneousRecord_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecord_1() {
        return asn_MBR_RptInstantaneousRecord_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecord_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecord_1$constants.SEGMENT, 0L, asn_MBR_RptInstantaneousRecord_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptInstantaneousRecord_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptInstantaneousRecord_1$constants.HANDLE.invokeExact(asn_MBR_RptInstantaneousRecord_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptInstantaneousRecord_1[5]
     * }
     */
    public static void asn_MBR_RptInstantaneousRecord_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptInstantaneousRecord_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RptWiperStatus_off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptWiperStatus.RptWiperStatus_off = 0
     * }
     */
    public static int RptWiperStatus_off() {
        return RptWiperStatus_off;
    }
    private static final int RptWiperStatus_low = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptWiperStatus.RptWiperStatus_low = 1
     * }
     */
    public static int RptWiperStatus_low() {
        return RptWiperStatus_low;
    }
    private static final int RptWiperStatus_medium = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptWiperStatus.RptWiperStatus_medium = 2
     * }
     */
    public static int RptWiperStatus_medium() {
        return RptWiperStatus_medium;
    }
    private static final int RptWiperStatus_high = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptWiperStatus.RptWiperStatus_high = 3
     * }
     */
    public static int RptWiperStatus_high() {
        return RptWiperStatus_high;
    }
    /**
     * {@snippet lang=c :
     * typedef long RptWiperStatus_t
     * }
     */
    public static final OfLong RptWiperStatus_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_RptWiperStatus_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptWiperStatus_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptWiperStatus_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptWiperStatus_constr_1$layout() {
        return asn_PER_type_RptWiperStatus_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptWiperStatus_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptWiperStatus_constr_1() {
        return asn_PER_type_RptWiperStatus_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptWiperStatus_constr_1
     * }
     */
    public static void asn_PER_type_RptWiperStatus_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptWiperStatus_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptWiperStatus_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptWiperStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptWiperStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptWiperStatus
     * }
     */
    public static GroupLayout asn_DEF_RptWiperStatus$layout() {
        return asn_DEF_RptWiperStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptWiperStatus
     * }
     */
    public static MemorySegment asn_DEF_RptWiperStatus() {
        return asn_DEF_RptWiperStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptWiperStatus
     * }
     */
    public static void asn_DEF_RptWiperStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptWiperStatus$constants.SEGMENT, 0L, asn_DEF_RptWiperStatus$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptWiperStatus_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptWiperStatus_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptWiperStatus_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptWiperStatus_specs_1$layout() {
        return asn_SPC_RptWiperStatus_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptWiperStatus_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptWiperStatus_specs_1() {
        return asn_SPC_RptWiperStatus_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptWiperStatus_specs_1
     * }
     */
    public static void asn_SPC_RptWiperStatus_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptWiperStatus_specs_1$constants.SEGMENT, 0L, asn_SPC_RptWiperStatus_specs_1$constants.LAYOUT.byteSize());
    }

    private static class RptWiperStatus_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RptWiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_free$descriptor() {
        return RptWiperStatus_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RptWiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle RptWiperStatus_free$handle() {
        return RptWiperStatus_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RptWiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment RptWiperStatus_free$address() {
        return RptWiperStatus_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RptWiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void RptWiperStatus_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = RptWiperStatus_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RptWiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_print$descriptor() {
        return RptWiperStatus_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RptWiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_print$handle() {
        return RptWiperStatus_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RptWiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_print$address() {
        return RptWiperStatus_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RptWiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int RptWiperStatus_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptWiperStatus_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RptWiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_constraint$descriptor() {
        return RptWiperStatus_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RptWiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_constraint$handle() {
        return RptWiperStatus_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RptWiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_constraint$address() {
        return RptWiperStatus_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RptWiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int RptWiperStatus_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptWiperStatus_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_decode_ber$descriptor() {
        return RptWiperStatus_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle RptWiperStatus_decode_ber$handle() {
        return RptWiperStatus_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_ber$address() {
        return RptWiperStatus_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = RptWiperStatus_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_der$descriptor() {
        return RptWiperStatus_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_der$handle() {
        return RptWiperStatus_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_der$address() {
        return RptWiperStatus_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RptWiperStatus_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_decode_xer$descriptor() {
        return RptWiperStatus_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle RptWiperStatus_decode_xer$handle() {
        return RptWiperStatus_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_xer$address() {
        return RptWiperStatus_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RptWiperStatus_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_xer$descriptor() {
        return RptWiperStatus_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_xer$handle() {
        return RptWiperStatus_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_xer$address() {
        return RptWiperStatus_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RptWiperStatus_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_jer$descriptor() {
        return RptWiperStatus_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_jer$handle() {
        return RptWiperStatus_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_jer$address() {
        return RptWiperStatus_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = RptWiperStatus_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_decode_oer$descriptor() {
        return RptWiperStatus_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle RptWiperStatus_decode_oer$handle() {
        return RptWiperStatus_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_oer$address() {
        return RptWiperStatus_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RptWiperStatus_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_oer$descriptor() {
        return RptWiperStatus_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_oer$handle() {
        return RptWiperStatus_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_oer$address() {
        return RptWiperStatus_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptWiperStatus_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_decode_uper$descriptor() {
        return RptWiperStatus_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RptWiperStatus_decode_uper$handle() {
        return RptWiperStatus_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_uper$address() {
        return RptWiperStatus_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptWiperStatus_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_uper$descriptor() {
        return RptWiperStatus_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_uper$handle() {
        return RptWiperStatus_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_uper$address() {
        return RptWiperStatus_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptWiperStatus_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_decode_aper$descriptor() {
        return RptWiperStatus_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RptWiperStatus_decode_aper$handle() {
        return RptWiperStatus_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_aper$address() {
        return RptWiperStatus_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptWiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptWiperStatus_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptWiperStatus_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptWiperStatus_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RptWiperStatus_encode_aper$descriptor() {
        return RptWiperStatus_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RptWiperStatus_encode_aper$handle() {
        return RptWiperStatus_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_aper$address() {
        return RptWiperStatus_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptWiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptWiperStatus_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptWiperStatus_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptWiperStatus_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_RptIntervalEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptIntervalEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptIntervalEvents
     * }
     */
    public static GroupLayout asn_DEF_RptIntervalEvents$layout() {
        return asn_DEF_RptIntervalEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptIntervalEvents
     * }
     */
    public static MemorySegment asn_DEF_RptIntervalEvents() {
        return asn_DEF_RptIntervalEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptIntervalEvents
     * }
     */
    public static void asn_DEF_RptIntervalEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptIntervalEvents$constants.SEGMENT, 0L, asn_DEF_RptIntervalEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptIntervalEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptIntervalEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptIntervalEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptIntervalEvents_specs_1$layout() {
        return asn_SPC_RptIntervalEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptIntervalEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptIntervalEvents_specs_1() {
        return asn_SPC_RptIntervalEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptIntervalEvents_specs_1
     * }
     */
    public static void asn_SPC_RptIntervalEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptIntervalEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptIntervalEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptIntervalEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptIntervalEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_RptIntervalEvents_1$layout() {
        return asn_MBR_RptIntervalEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static long[] asn_MBR_RptIntervalEvents_1$dimensions() {
        return asn_MBR_RptIntervalEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptIntervalEvents_1() {
        return asn_MBR_RptIntervalEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static void asn_MBR_RptIntervalEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptIntervalEvents_1$constants.SEGMENT, 0L, asn_MBR_RptIntervalEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptIntervalEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptIntervalEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptIntervalEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptIntervalEvents_1[5]
     * }
     */
    public static void asn_MBR_RptIntervalEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptIntervalEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptVehicleReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptVehicleReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleReport
     * }
     */
    public static GroupLayout asn_DEF_RptVehicleReport$layout() {
        return asn_DEF_RptVehicleReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleReport
     * }
     */
    public static MemorySegment asn_DEF_RptVehicleReport() {
        return asn_DEF_RptVehicleReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleReport
     * }
     */
    public static void asn_DEF_RptVehicleReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptVehicleReport$constants.SEGMENT, 0L, asn_DEF_RptVehicleReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptVehicleReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptVehicleReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptVehicleReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptVehicleReport_specs_1$layout() {
        return asn_SPC_RptVehicleReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptVehicleReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptVehicleReport_specs_1() {
        return asn_SPC_RptVehicleReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptVehicleReport_specs_1
     * }
     */
    public static void asn_SPC_RptVehicleReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptVehicleReport_specs_1$constants.SEGMENT, 0L, asn_SPC_RptVehicleReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptVehicleReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptVehicleReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_RptVehicleReport_1$layout() {
        return asn_MBR_RptVehicleReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static long[] asn_MBR_RptVehicleReport_1$dimensions() {
        return asn_MBR_RptVehicleReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptVehicleReport_1() {
        return asn_MBR_RptVehicleReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static void asn_MBR_RptVehicleReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVehicleReport_1$constants.SEGMENT, 0L, asn_MBR_RptVehicleReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptVehicleReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptVehicleReport_1$constants.HANDLE.invokeExact(asn_MBR_RptVehicleReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptVehicleReport_1[1]
     * }
     */
    public static void asn_MBR_RptVehicleReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptVehicleReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptVehicleReport_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptVehicleReport_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleReport_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptVehicleReport_constr_1$layout() {
        return asn_PER_type_RptVehicleReport_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleReport_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptVehicleReport_constr_1() {
        return asn_PER_type_RptVehicleReport_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleReport_constr_1
     * }
     */
    public static void asn_PER_type_RptVehicleReport_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptVehicleReport_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptVehicleReport_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptTransitVehData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptTransitVehData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTransitVehData
     * }
     */
    public static GroupLayout asn_DEF_RptTransitVehData$layout() {
        return asn_DEF_RptTransitVehData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTransitVehData
     * }
     */
    public static MemorySegment asn_DEF_RptTransitVehData() {
        return asn_DEF_RptTransitVehData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptTransitVehData
     * }
     */
    public static void asn_DEF_RptTransitVehData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptTransitVehData$constants.SEGMENT, 0L, asn_DEF_RptTransitVehData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptTransitVehData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptTransitVehData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTransitVehData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptTransitVehData_specs_1$layout() {
        return asn_SPC_RptTransitVehData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTransitVehData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptTransitVehData_specs_1() {
        return asn_SPC_RptTransitVehData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptTransitVehData_specs_1
     * }
     */
    public static void asn_SPC_RptTransitVehData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptTransitVehData_specs_1$constants.SEGMENT, 0L, asn_SPC_RptTransitVehData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptTransitVehData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptTransitVehData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_RptTransitVehData_1$layout() {
        return asn_MBR_RptTransitVehData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static long[] asn_MBR_RptTransitVehData_1$dimensions() {
        return asn_MBR_RptTransitVehData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptTransitVehData_1() {
        return asn_MBR_RptTransitVehData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static void asn_MBR_RptTransitVehData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTransitVehData_1$constants.SEGMENT, 0L, asn_MBR_RptTransitVehData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_RptTransitVehData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptTransitVehData_1$constants.HANDLE.invokeExact(asn_MBR_RptTransitVehData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptTransitVehData_1[3]
     * }
     */
    public static void asn_MBR_RptTransitVehData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptTransitVehData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef int NULL_t
     * }
     */
    public static final OfInt NULL_t = MessageFrame_h.C_INT;

    private static class asn_DEF_NULL$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_NULL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NULL
     * }
     */
    public static GroupLayout asn_DEF_NULL$layout() {
        return asn_DEF_NULL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NULL
     * }
     */
    public static MemorySegment asn_DEF_NULL() {
        return asn_DEF_NULL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_NULL
     * }
     */
    public static void asn_DEF_NULL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_NULL$constants.SEGMENT, 0L, asn_DEF_NULL$constants.LAYOUT.byteSize());
    }

    private static class asn_OP_NULL$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_operation_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_OP_NULL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_NULL
     * }
     */
    public static GroupLayout asn_OP_NULL$layout() {
        return asn_OP_NULL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_NULL
     * }
     */
    public static MemorySegment asn_OP_NULL() {
        return asn_OP_NULL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_NULL
     * }
     */
    public static void asn_OP_NULL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_OP_NULL$constants.SEGMENT, 0L, asn_OP_NULL$constants.LAYOUT.byteSize());
    }

    private static class NULL_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void NULL_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor NULL_free$descriptor() {
        return NULL_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void NULL_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle NULL_free$handle() {
        return NULL_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void NULL_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment NULL_free$address() {
        return NULL_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void NULL_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void NULL_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = NULL_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NULL_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NULL_print$descriptor() {
        return NULL_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NULL_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NULL_print$handle() {
        return NULL_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NULL_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_print$address() {
        return NULL_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NULL_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int NULL_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NULL_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_compare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NULL_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static FunctionDescriptor NULL_compare$descriptor() {
        return NULL_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NULL_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static MethodHandle NULL_compare$handle() {
        return NULL_compare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NULL_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static MemorySegment NULL_compare$address() {
        return NULL_compare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NULL_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static int NULL_compare(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = NULL_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_compare", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int NULL_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static FunctionDescriptor NULL_copy$descriptor() {
        return NULL_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int NULL_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static MethodHandle NULL_copy$handle() {
        return NULL_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int NULL_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static MemorySegment NULL_copy$address() {
        return NULL_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int NULL_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static int NULL_copy(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = NULL_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_copy", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor NULL_decode_ber$descriptor() {
        return NULL_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle NULL_decode_ber$handle() {
        return NULL_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NULL_decode_ber$address() {
        return NULL_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment NULL_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = NULL_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NULL_encode_der$descriptor() {
        return NULL_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NULL_encode_der$handle() {
        return NULL_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_der$address() {
        return NULL_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NULL_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NULL_decode_xer$descriptor() {
        return NULL_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle NULL_decode_xer$handle() {
        return NULL_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_xer$address() {
        return NULL_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NULL_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NULL_encode_xer$descriptor() {
        return NULL_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NULL_encode_xer$handle() {
        return NULL_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_xer$address() {
        return NULL_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = NULL_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NULL_decode_jer$descriptor() {
        return NULL_decode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NULL_decode_jer$handle() {
        return NULL_decode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_jer$address() {
        return NULL_decode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NULL_decode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_jer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NULL_encode_jer$descriptor() {
        return NULL_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NULL_encode_jer$handle() {
        return NULL_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_jer$address() {
        return NULL_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = NULL_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor NULL_decode_oer$descriptor() {
        return NULL_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle NULL_decode_oer$handle() {
        return NULL_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_oer$address() {
        return NULL_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment NULL_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = NULL_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor NULL_encode_oer$descriptor() {
        return NULL_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle NULL_encode_oer$handle() {
        return NULL_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_oer$address() {
        return NULL_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment NULL_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NULL_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NULL_decode_uper$descriptor() {
        return NULL_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NULL_decode_uper$handle() {
        return NULL_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NULL_decode_uper$address() {
        return NULL_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NULL_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NULL_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NULL_encode_uper$descriptor() {
        return NULL_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NULL_encode_uper$handle() {
        return NULL_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NULL_encode_uper$address() {
        return NULL_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NULL_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NULL_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor NULL_decode_aper$descriptor() {
        return NULL_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle NULL_decode_aper$handle() {
        return NULL_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NULL_decode_aper$address() {
        return NULL_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t NULL_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment NULL_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = NULL_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor NULL_encode_aper$descriptor() {
        return NULL_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle NULL_encode_aper$handle() {
        return NULL_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NULL_encode_aper$address() {
        return NULL_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t NULL_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment NULL_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = NULL_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NULL_random_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_random_fill_result_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("NULL_random_fill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_random_fill_result_t NULL_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static FunctionDescriptor NULL_random_fill$descriptor() {
        return NULL_random_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_random_fill_result_t NULL_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MethodHandle NULL_random_fill$handle() {
        return NULL_random_fill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_random_fill_result_t NULL_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MemorySegment NULL_random_fill$address() {
        return NULL_random_fill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_random_fill_result_t NULL_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MemorySegment NULL_random_fill(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = NULL_random_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NULL_random_fill", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RptEvents_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_NOTHING = 0
     * }
     */
    public static int RptEvents_PR_NOTHING() {
        return RptEvents_PR_NOTHING;
    }
    private static final int RptEvents_PR_absActive = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_absActive = 1
     * }
     */
    public static int RptEvents_PR_absActive() {
        return RptEvents_PR_absActive;
    }
    private static final int RptEvents_PR_tractionCtlLoss = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_tractionCtlLoss = 2
     * }
     */
    public static int RptEvents_PR_tractionCtlLoss() {
        return RptEvents_PR_tractionCtlLoss;
    }
    private static final int RptEvents_PR_stabilityCtlActive = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_stabilityCtlActive = 3
     * }
     */
    public static int RptEvents_PR_stabilityCtlActive() {
        return RptEvents_PR_stabilityCtlActive;
    }
    private static final int RptEvents_PR_hardBraking = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_hardBraking = 4
     * }
     */
    public static int RptEvents_PR_hardBraking() {
        return RptEvents_PR_hardBraking;
    }
    private static final int RptEvents_PR_swerve = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptEvents_PR.RptEvents_PR_swerve = 5
     * }
     */
    public static int RptEvents_PR_swerve() {
        return RptEvents_PR_swerve;
    }

    private static class asn_DEF_RptEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEvents
     * }
     */
    public static GroupLayout asn_DEF_RptEvents$layout() {
        return asn_DEF_RptEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEvents
     * }
     */
    public static MemorySegment asn_DEF_RptEvents() {
        return asn_DEF_RptEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptEvents
     * }
     */
    public static void asn_DEF_RptEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptEvents$constants.SEGMENT, 0L, asn_DEF_RptEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptEvents_specs_1$layout() {
        return asn_SPC_RptEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptEvents_specs_1() {
        return asn_SPC_RptEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptEvents_specs_1
     * }
     */
    public static void asn_SPC_RptEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_RptEvents_1$layout() {
        return asn_MBR_RptEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static long[] asn_MBR_RptEvents_1$dimensions() {
        return asn_MBR_RptEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptEvents_1() {
        return asn_MBR_RptEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static void asn_MBR_RptEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptEvents_1$constants.SEGMENT, 0L, asn_MBR_RptEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static MemorySegment asn_MBR_RptEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptEvents_1[5]
     * }
     */
    public static void asn_MBR_RptEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptEvents_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptEvents_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptEvents_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptEvents_constr_1$layout() {
        return asn_PER_type_RptEvents_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptEvents_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptEvents_constr_1() {
        return asn_PER_type_RptEvents_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptEvents_constr_1
     * }
     */
    public static void asn_PER_type_RptEvents_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptEvents_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptEvents_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptKinematicEvents$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptKinematicEvents").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptKinematicEvents
     * }
     */
    public static GroupLayout asn_DEF_RptKinematicEvents$layout() {
        return asn_DEF_RptKinematicEvents$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptKinematicEvents
     * }
     */
    public static MemorySegment asn_DEF_RptKinematicEvents() {
        return asn_DEF_RptKinematicEvents$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptKinematicEvents
     * }
     */
    public static void asn_DEF_RptKinematicEvents(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptKinematicEvents$constants.SEGMENT, 0L, asn_DEF_RptKinematicEvents$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptKinematicEvents_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptKinematicEvents_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptKinematicEvents_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptKinematicEvents_specs_1$layout() {
        return asn_SPC_RptKinematicEvents_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptKinematicEvents_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptKinematicEvents_specs_1() {
        return asn_SPC_RptKinematicEvents_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptKinematicEvents_specs_1
     * }
     */
    public static void asn_SPC_RptKinematicEvents_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptKinematicEvents_specs_1$constants.SEGMENT, 0L, asn_SPC_RptKinematicEvents_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptKinematicEvents_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptKinematicEvents_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_RptKinematicEvents_1$layout() {
        return asn_MBR_RptKinematicEvents_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static long[] asn_MBR_RptKinematicEvents_1$dimensions() {
        return asn_MBR_RptKinematicEvents_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptKinematicEvents_1() {
        return asn_MBR_RptKinematicEvents_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static void asn_MBR_RptKinematicEvents_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptKinematicEvents_1$constants.SEGMENT, 0L, asn_MBR_RptKinematicEvents_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static MemorySegment asn_MBR_RptKinematicEvents_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptKinematicEvents_1$constants.HANDLE.invokeExact(asn_MBR_RptKinematicEvents_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptKinematicEvents_1[2]
     * }
     */
    public static void asn_MBR_RptKinematicEvents_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptKinematicEvents_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_RptHysteresisRecord$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptHysteresisRecord").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresisRecord
     * }
     */
    public static GroupLayout asn_DEF_RptHysteresisRecord$layout() {
        return asn_DEF_RptHysteresisRecord$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresisRecord
     * }
     */
    public static MemorySegment asn_DEF_RptHysteresisRecord() {
        return asn_DEF_RptHysteresisRecord$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresisRecord
     * }
     */
    public static void asn_DEF_RptHysteresisRecord(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptHysteresisRecord$constants.SEGMENT, 0L, asn_DEF_RptHysteresisRecord$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptHysteresisRecord_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptHysteresisRecord_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptHysteresisRecord_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptHysteresisRecord_specs_1$layout() {
        return asn_SPC_RptHysteresisRecord_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptHysteresisRecord_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptHysteresisRecord_specs_1() {
        return asn_SPC_RptHysteresisRecord_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_RptHysteresisRecord_specs_1
     * }
     */
    public static void asn_SPC_RptHysteresisRecord_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptHysteresisRecord_specs_1$constants.SEGMENT, 0L, asn_SPC_RptHysteresisRecord_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptHysteresisRecord_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptHysteresisRecord_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_RptHysteresisRecord_1$layout() {
        return asn_MBR_RptHysteresisRecord_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static long[] asn_MBR_RptHysteresisRecord_1$dimensions() {
        return asn_MBR_RptHysteresisRecord_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptHysteresisRecord_1() {
        return asn_MBR_RptHysteresisRecord_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static void asn_MBR_RptHysteresisRecord_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptHysteresisRecord_1$constants.SEGMENT, 0L, asn_MBR_RptHysteresisRecord_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static MemorySegment asn_MBR_RptHysteresisRecord_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptHysteresisRecord_1$constants.HANDLE.invokeExact(asn_MBR_RptHysteresisRecord_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresisRecord_1[1]
     * }
     */
    public static void asn_MBR_RptHysteresisRecord_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptHysteresisRecord_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptHysteresisRecord_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptHysteresisRecord_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptHysteresisRecord_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptHysteresisRecord_constr_1$layout() {
        return asn_PER_type_RptHysteresisRecord_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptHysteresisRecord_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptHysteresisRecord_constr_1() {
        return asn_PER_type_RptHysteresisRecord_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptHysteresisRecord_constr_1
     * }
     */
    public static void asn_PER_type_RptHysteresisRecord_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptHysteresisRecord_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptHysteresisRecord_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptHysteresis$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptHysteresis").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresis
     * }
     */
    public static GroupLayout asn_DEF_RptHysteresis$layout() {
        return asn_DEF_RptHysteresis$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresis
     * }
     */
    public static MemorySegment asn_DEF_RptHysteresis() {
        return asn_DEF_RptHysteresis$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptHysteresis
     * }
     */
    public static void asn_DEF_RptHysteresis(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptHysteresis$constants.SEGMENT, 0L, asn_DEF_RptHysteresis$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptHysteresis_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptHysteresis_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptHysteresis_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptHysteresis_specs_1$layout() {
        return asn_SPC_RptHysteresis_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptHysteresis_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptHysteresis_specs_1() {
        return asn_SPC_RptHysteresis_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_RptHysteresis_specs_1
     * }
     */
    public static void asn_SPC_RptHysteresis_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptHysteresis_specs_1$constants.SEGMENT, 0L, asn_SPC_RptHysteresis_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptHysteresis_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptHysteresis_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_RptHysteresis_1$layout() {
        return asn_MBR_RptHysteresis_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static long[] asn_MBR_RptHysteresis_1$dimensions() {
        return asn_MBR_RptHysteresis_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptHysteresis_1() {
        return asn_MBR_RptHysteresis_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static void asn_MBR_RptHysteresis_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptHysteresis_1$constants.SEGMENT, 0L, asn_MBR_RptHysteresis_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static MemorySegment asn_MBR_RptHysteresis_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptHysteresis_1$constants.HANDLE.invokeExact(asn_MBR_RptHysteresis_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptHysteresis_1[4]
     * }
     */
    public static void asn_MBR_RptHysteresis_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptHysteresis_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int RptDriverAlertsAndWarnings_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_NOTHING = 0
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_NOTHING() {
        return RptDriverAlertsAndWarnings_PR_NOTHING;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1Eebl = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1Eebl = 1
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1Eebl() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1Eebl;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1Fcw = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1Fcw = 2
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1Fcw() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1Fcw;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1BswLcw = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1BswLcw = 3
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1BswLcw() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1BswLcw;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1Ima = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1Ima = 4
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1Ima() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1Ima;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1Lta = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1Lta = 5
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1Lta() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1Lta;
    }
    private static final int RptDriverAlertsAndWarnings_PR_j2945Slash1Clw = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_j2945Slash1Clw = 6
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_j2945Slash1Clw() {
        return RptDriverAlertsAndWarnings_PR_j2945Slash1Clw;
    }
    private static final int RptDriverAlertsAndWarnings_PR_redLightViolationWarn = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_redLightViolationWarn = 7
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_redLightViolationWarn() {
        return RptDriverAlertsAndWarnings_PR_redLightViolationWarn;
    }
    private static final int RptDriverAlertsAndWarnings_PR_emerVehAlert = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_emerVehAlert = 8
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_emerVehAlert() {
        return RptDriverAlertsAndWarnings_PR_emerVehAlert;
    }
    private static final int RptDriverAlertsAndWarnings_PR_otherAlert = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_otherAlert = 9
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_otherAlert() {
        return RptDriverAlertsAndWarnings_PR_otherAlert;
    }
    private static final int RptDriverAlertsAndWarnings_PR_otherWarning = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RptDriverAlertsAndWarnings_PR.RptDriverAlertsAndWarnings_PR_otherWarning = 10
     * }
     */
    public static int RptDriverAlertsAndWarnings_PR_otherWarning() {
        return RptDriverAlertsAndWarnings_PR_otherWarning;
    }

    private static class asn_DEF_RptDriverAlertsAndWarnings$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptDriverAlertsAndWarnings").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDriverAlertsAndWarnings
     * }
     */
    public static GroupLayout asn_DEF_RptDriverAlertsAndWarnings$layout() {
        return asn_DEF_RptDriverAlertsAndWarnings$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDriverAlertsAndWarnings
     * }
     */
    public static MemorySegment asn_DEF_RptDriverAlertsAndWarnings() {
        return asn_DEF_RptDriverAlertsAndWarnings$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptDriverAlertsAndWarnings
     * }
     */
    public static void asn_DEF_RptDriverAlertsAndWarnings(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptDriverAlertsAndWarnings$constants.SEGMENT, 0L, asn_DEF_RptDriverAlertsAndWarnings$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptDriverAlertsAndWarnings_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_CHOICE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptDriverAlertsAndWarnings_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptDriverAlertsAndWarnings_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptDriverAlertsAndWarnings_specs_1$layout() {
        return asn_SPC_RptDriverAlertsAndWarnings_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptDriverAlertsAndWarnings_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptDriverAlertsAndWarnings_specs_1() {
        return asn_SPC_RptDriverAlertsAndWarnings_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_CHOICE_specifics_t asn_SPC_RptDriverAlertsAndWarnings_specs_1
     * }
     */
    public static void asn_SPC_RptDriverAlertsAndWarnings_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptDriverAlertsAndWarnings_specs_1$constants.SEGMENT, 0L, asn_SPC_RptDriverAlertsAndWarnings_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_RptDriverAlertsAndWarnings_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(10, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_RptDriverAlertsAndWarnings_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 10 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static SequenceLayout asn_MBR_RptDriverAlertsAndWarnings_1$layout() {
        return asn_MBR_RptDriverAlertsAndWarnings_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static long[] asn_MBR_RptDriverAlertsAndWarnings_1$dimensions() {
        return asn_MBR_RptDriverAlertsAndWarnings_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static MemorySegment asn_MBR_RptDriverAlertsAndWarnings_1() {
        return asn_MBR_RptDriverAlertsAndWarnings_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static void asn_MBR_RptDriverAlertsAndWarnings_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptDriverAlertsAndWarnings_1$constants.SEGMENT, 0L, asn_MBR_RptDriverAlertsAndWarnings_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static MemorySegment asn_MBR_RptDriverAlertsAndWarnings_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_RptDriverAlertsAndWarnings_1$constants.HANDLE.invokeExact(asn_MBR_RptDriverAlertsAndWarnings_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_RptDriverAlertsAndWarnings_1[10]
     * }
     */
    public static void asn_MBR_RptDriverAlertsAndWarnings_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_RptDriverAlertsAndWarnings_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_RptDriverAlertsAndWarnings_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptDriverAlertsAndWarnings_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptDriverAlertsAndWarnings_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptDriverAlertsAndWarnings_constr_1$layout() {
        return asn_PER_type_RptDriverAlertsAndWarnings_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptDriverAlertsAndWarnings_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptDriverAlertsAndWarnings_constr_1() {
        return asn_PER_type_RptDriverAlertsAndWarnings_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptDriverAlertsAndWarnings_constr_1
     * }
     */
    public static void asn_PER_type_RptDriverAlertsAndWarnings_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptDriverAlertsAndWarnings_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptDriverAlertsAndWarnings_constr_1$constants.LAYOUT.byteSize());
    }
    private static final int RptVehicleEvents_PR_NOTHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_NOTHING = 0
     * }
     */
    public static int RptVehicleEvents_PR_NOTHING() {
        return RptVehicleEvents_PR_NOTHING;
    }
    private static final int RptVehicleEvents_PR_headLights = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_headLights = 1
     * }
     */
    public static int RptVehicleEvents_PR_headLights() {
        return RptVehicleEvents_PR_headLights;
    }
    private static final int RptVehicleEvents_PR_fogLights = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleEvents_PR.RptVehicleEvents_PR_fogLights = 2
     * }
     */
    public static int RptVehicleEvents_PR_fogLights() {
        return RptVehicleEvents_PR_fogLights;
    }
}

