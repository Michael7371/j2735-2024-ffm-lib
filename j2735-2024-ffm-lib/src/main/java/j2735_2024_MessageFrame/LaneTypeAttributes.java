// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LaneTypeAttributes {
 *     LaneTypeAttributes_PR present;
 *     union LaneTypeAttributes_u {
 *         LaneAttributes_Vehicle_t vehicle;
 *         LaneAttributes_Crosswalk_t crosswalk;
 *         LaneAttributes_Bike_t bikeLane;
 *         LaneAttributes_Sidewalk_t sidewalk;
 *         LaneAttributes_Barrier_t median;
 *         LaneAttributes_Striping_t striping;
 *         LaneAttributes_TrackedVehicle_t trackedVehicle;
 *         LaneAttributes_Parking_t parking;
 *     } choice;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class LaneTypeAttributes {

    LaneTypeAttributes() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("present"),
        MemoryLayout.paddingLayout(4),
        LaneTypeAttributes_u.layout().withName("choice"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("LaneTypeAttributes");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_PR present
     * }
     */
    public static final OfInt present$layout() {
        return present$LAYOUT;
    }

    private static final long present$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_PR present
     * }
     */
    public static final long present$offset() {
        return present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_PR present
     * }
     */
    public static int present(MemorySegment struct) {
        return struct.get(present$LAYOUT, present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LaneTypeAttributes_PR present
     * }
     */
    public static void present(MemorySegment struct, int fieldValue) {
        struct.set(present$LAYOUT, present$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union LaneTypeAttributes_u {
     *     LaneAttributes_Vehicle_t vehicle;
     *     LaneAttributes_Crosswalk_t crosswalk;
     *     LaneAttributes_Bike_t bikeLane;
     *     LaneAttributes_Sidewalk_t sidewalk;
     *     LaneAttributes_Barrier_t median;
     *     LaneAttributes_Striping_t striping;
     *     LaneAttributes_TrackedVehicle_t trackedVehicle;
     *     LaneAttributes_Parking_t parking;
     * }
     * }
     */
    public static class LaneTypeAttributes_u {

        LaneTypeAttributes_u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            BIT_STRING_s.layout().withName("vehicle"),
            BIT_STRING_s.layout().withName("crosswalk"),
            BIT_STRING_s.layout().withName("bikeLane"),
            BIT_STRING_s.layout().withName("sidewalk"),
            BIT_STRING_s.layout().withName("median"),
            BIT_STRING_s.layout().withName("striping"),
            BIT_STRING_s.layout().withName("trackedVehicle"),
            BIT_STRING_s.layout().withName("parking")
        ).withName("LaneTypeAttributes_u");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout vehicle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("vehicle"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Vehicle_t vehicle
         * }
         */
        public static final GroupLayout vehicle$layout() {
            return vehicle$LAYOUT;
        }

        private static final long vehicle$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Vehicle_t vehicle
         * }
         */
        public static final long vehicle$offset() {
            return vehicle$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Vehicle_t vehicle
         * }
         */
        public static MemorySegment vehicle(MemorySegment union) {
            return union.asSlice(vehicle$OFFSET, vehicle$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Vehicle_t vehicle
         * }
         */
        public static void vehicle(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, vehicle$OFFSET, vehicle$LAYOUT.byteSize());
        }

        private static final GroupLayout crosswalk$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("crosswalk"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Crosswalk_t crosswalk
         * }
         */
        public static final GroupLayout crosswalk$layout() {
            return crosswalk$LAYOUT;
        }

        private static final long crosswalk$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Crosswalk_t crosswalk
         * }
         */
        public static final long crosswalk$offset() {
            return crosswalk$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Crosswalk_t crosswalk
         * }
         */
        public static MemorySegment crosswalk(MemorySegment union) {
            return union.asSlice(crosswalk$OFFSET, crosswalk$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Crosswalk_t crosswalk
         * }
         */
        public static void crosswalk(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, crosswalk$OFFSET, crosswalk$LAYOUT.byteSize());
        }

        private static final GroupLayout bikeLane$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bikeLane"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Bike_t bikeLane
         * }
         */
        public static final GroupLayout bikeLane$layout() {
            return bikeLane$LAYOUT;
        }

        private static final long bikeLane$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Bike_t bikeLane
         * }
         */
        public static final long bikeLane$offset() {
            return bikeLane$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Bike_t bikeLane
         * }
         */
        public static MemorySegment bikeLane(MemorySegment union) {
            return union.asSlice(bikeLane$OFFSET, bikeLane$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Bike_t bikeLane
         * }
         */
        public static void bikeLane(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, bikeLane$OFFSET, bikeLane$LAYOUT.byteSize());
        }

        private static final GroupLayout sidewalk$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sidewalk"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Sidewalk_t sidewalk
         * }
         */
        public static final GroupLayout sidewalk$layout() {
            return sidewalk$LAYOUT;
        }

        private static final long sidewalk$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Sidewalk_t sidewalk
         * }
         */
        public static final long sidewalk$offset() {
            return sidewalk$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Sidewalk_t sidewalk
         * }
         */
        public static MemorySegment sidewalk(MemorySegment union) {
            return union.asSlice(sidewalk$OFFSET, sidewalk$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Sidewalk_t sidewalk
         * }
         */
        public static void sidewalk(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, sidewalk$OFFSET, sidewalk$LAYOUT.byteSize());
        }

        private static final GroupLayout median$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("median"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Barrier_t median
         * }
         */
        public static final GroupLayout median$layout() {
            return median$LAYOUT;
        }

        private static final long median$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Barrier_t median
         * }
         */
        public static final long median$offset() {
            return median$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Barrier_t median
         * }
         */
        public static MemorySegment median(MemorySegment union) {
            return union.asSlice(median$OFFSET, median$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Barrier_t median
         * }
         */
        public static void median(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, median$OFFSET, median$LAYOUT.byteSize());
        }

        private static final GroupLayout striping$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("striping"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Striping_t striping
         * }
         */
        public static final GroupLayout striping$layout() {
            return striping$LAYOUT;
        }

        private static final long striping$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Striping_t striping
         * }
         */
        public static final long striping$offset() {
            return striping$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Striping_t striping
         * }
         */
        public static MemorySegment striping(MemorySegment union) {
            return union.asSlice(striping$OFFSET, striping$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Striping_t striping
         * }
         */
        public static void striping(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, striping$OFFSET, striping$LAYOUT.byteSize());
        }

        private static final GroupLayout trackedVehicle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("trackedVehicle"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_TrackedVehicle_t trackedVehicle
         * }
         */
        public static final GroupLayout trackedVehicle$layout() {
            return trackedVehicle$LAYOUT;
        }

        private static final long trackedVehicle$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_TrackedVehicle_t trackedVehicle
         * }
         */
        public static final long trackedVehicle$offset() {
            return trackedVehicle$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_TrackedVehicle_t trackedVehicle
         * }
         */
        public static MemorySegment trackedVehicle(MemorySegment union) {
            return union.asSlice(trackedVehicle$OFFSET, trackedVehicle$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_TrackedVehicle_t trackedVehicle
         * }
         */
        public static void trackedVehicle(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, trackedVehicle$OFFSET, trackedVehicle$LAYOUT.byteSize());
        }

        private static final GroupLayout parking$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parking"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * LaneAttributes_Parking_t parking
         * }
         */
        public static final GroupLayout parking$layout() {
            return parking$LAYOUT;
        }

        private static final long parking$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * LaneAttributes_Parking_t parking
         * }
         */
        public static final long parking$offset() {
            return parking$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * LaneAttributes_Parking_t parking
         * }
         */
        public static MemorySegment parking(MemorySegment union) {
            return union.asSlice(parking$OFFSET, parking$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * LaneAttributes_Parking_t parking
         * }
         */
        public static void parking(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, parking$OFFSET, parking$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union LaneTypeAttributes_u choice
     * }
     */
    public static final GroupLayout choice$layout() {
        return choice$LAYOUT;
    }

    private static final long choice$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union LaneTypeAttributes_u choice
     * }
     */
    public static final long choice$offset() {
        return choice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union LaneTypeAttributes_u choice
     * }
     */
    public static MemorySegment choice(MemorySegment struct) {
        return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union LaneTypeAttributes_u choice
     * }
     */
    public static void choice(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

