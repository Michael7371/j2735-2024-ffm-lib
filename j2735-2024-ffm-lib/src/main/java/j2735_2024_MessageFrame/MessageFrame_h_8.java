// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.invoke.*;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class MessageFrame_h_8 extends MessageFrame_h_9 {

    MessageFrame_h_8() {
        // Should not be called directly
    }

    private static class asn_MBR_Reg_CommonSafetyRequest_34$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_CommonSafetyRequest_34").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_CommonSafetyRequest_34$layout() {
        return asn_MBR_Reg_CommonSafetyRequest_34$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static long[] asn_MBR_Reg_CommonSafetyRequest_34$dimensions() {
        return asn_MBR_Reg_CommonSafetyRequest_34$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_CommonSafetyRequest_34() {
        return asn_MBR_Reg_CommonSafetyRequest_34$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static void asn_MBR_Reg_CommonSafetyRequest_34(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_CommonSafetyRequest_34$constants.SEGMENT, 0L, asn_MBR_Reg_CommonSafetyRequest_34$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_CommonSafetyRequest_34(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_CommonSafetyRequest_34$constants.HANDLE.invokeExact(asn_MBR_Reg_CommonSafetyRequest_34$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_CommonSafetyRequest_34[2]
     * }
     */
    public static void asn_MBR_Reg_CommonSafetyRequest_34(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_CommonSafetyRequest_34(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_EmergencyVehicleAlert$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_EmergencyVehicleAlert").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_EmergencyVehicleAlert
     * }
     */
    public static GroupLayout asn_DEF_Reg_EmergencyVehicleAlert$layout() {
        return asn_DEF_Reg_EmergencyVehicleAlert$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_EmergencyVehicleAlert
     * }
     */
    public static MemorySegment asn_DEF_Reg_EmergencyVehicleAlert() {
        return asn_DEF_Reg_EmergencyVehicleAlert$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_EmergencyVehicleAlert
     * }
     */
    public static void asn_DEF_Reg_EmergencyVehicleAlert(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_EmergencyVehicleAlert$constants.SEGMENT, 0L, asn_DEF_Reg_EmergencyVehicleAlert$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_EmergencyVehicleAlert_specs_37$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_EmergencyVehicleAlert_specs_37").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_EmergencyVehicleAlert_specs_37
     * }
     */
    public static GroupLayout asn_SPC_Reg_EmergencyVehicleAlert_specs_37$layout() {
        return asn_SPC_Reg_EmergencyVehicleAlert_specs_37$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_EmergencyVehicleAlert_specs_37
     * }
     */
    public static MemorySegment asn_SPC_Reg_EmergencyVehicleAlert_specs_37() {
        return asn_SPC_Reg_EmergencyVehicleAlert_specs_37$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_EmergencyVehicleAlert_specs_37
     * }
     */
    public static void asn_SPC_Reg_EmergencyVehicleAlert_specs_37(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_EmergencyVehicleAlert_specs_37$constants.SEGMENT, 0L, asn_SPC_Reg_EmergencyVehicleAlert_specs_37$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_EmergencyVehicleAlert_37$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_EmergencyVehicleAlert_37").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_EmergencyVehicleAlert_37$layout() {
        return asn_MBR_Reg_EmergencyVehicleAlert_37$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static long[] asn_MBR_Reg_EmergencyVehicleAlert_37$dimensions() {
        return asn_MBR_Reg_EmergencyVehicleAlert_37$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_EmergencyVehicleAlert_37() {
        return asn_MBR_Reg_EmergencyVehicleAlert_37$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static void asn_MBR_Reg_EmergencyVehicleAlert_37(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_EmergencyVehicleAlert_37$constants.SEGMENT, 0L, asn_MBR_Reg_EmergencyVehicleAlert_37$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_EmergencyVehicleAlert_37(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_EmergencyVehicleAlert_37$constants.HANDLE.invokeExact(asn_MBR_Reg_EmergencyVehicleAlert_37$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_EmergencyVehicleAlert_37[2]
     * }
     */
    public static void asn_MBR_Reg_EmergencyVehicleAlert_37(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_EmergencyVehicleAlert_37(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_IntersectionCollision$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_IntersectionCollision").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionCollision
     * }
     */
    public static GroupLayout asn_DEF_Reg_IntersectionCollision$layout() {
        return asn_DEF_Reg_IntersectionCollision$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionCollision
     * }
     */
    public static MemorySegment asn_DEF_Reg_IntersectionCollision() {
        return asn_DEF_Reg_IntersectionCollision$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionCollision
     * }
     */
    public static void asn_DEF_Reg_IntersectionCollision(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_IntersectionCollision$constants.SEGMENT, 0L, asn_DEF_Reg_IntersectionCollision$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_IntersectionCollision_specs_40$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_IntersectionCollision_specs_40").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionCollision_specs_40
     * }
     */
    public static GroupLayout asn_SPC_Reg_IntersectionCollision_specs_40$layout() {
        return asn_SPC_Reg_IntersectionCollision_specs_40$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionCollision_specs_40
     * }
     */
    public static MemorySegment asn_SPC_Reg_IntersectionCollision_specs_40() {
        return asn_SPC_Reg_IntersectionCollision_specs_40$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionCollision_specs_40
     * }
     */
    public static void asn_SPC_Reg_IntersectionCollision_specs_40(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_IntersectionCollision_specs_40$constants.SEGMENT, 0L, asn_SPC_Reg_IntersectionCollision_specs_40$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_IntersectionCollision_40$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_IntersectionCollision_40").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_IntersectionCollision_40$layout() {
        return asn_MBR_Reg_IntersectionCollision_40$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static long[] asn_MBR_Reg_IntersectionCollision_40$dimensions() {
        return asn_MBR_Reg_IntersectionCollision_40$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionCollision_40() {
        return asn_MBR_Reg_IntersectionCollision_40$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionCollision_40(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionCollision_40$constants.SEGMENT, 0L, asn_MBR_Reg_IntersectionCollision_40$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionCollision_40(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_IntersectionCollision_40$constants.HANDLE.invokeExact(asn_MBR_Reg_IntersectionCollision_40$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionCollision_40[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionCollision_40(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionCollision_40(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_MapData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_MapData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MapData
     * }
     */
    public static GroupLayout asn_DEF_Reg_MapData$layout() {
        return asn_DEF_Reg_MapData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MapData
     * }
     */
    public static MemorySegment asn_DEF_Reg_MapData() {
        return asn_DEF_Reg_MapData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MapData
     * }
     */
    public static void asn_DEF_Reg_MapData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_MapData$constants.SEGMENT, 0L, asn_DEF_Reg_MapData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_MapData_specs_43$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_MapData_specs_43").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MapData_specs_43
     * }
     */
    public static GroupLayout asn_SPC_Reg_MapData_specs_43$layout() {
        return asn_SPC_Reg_MapData_specs_43$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MapData_specs_43
     * }
     */
    public static MemorySegment asn_SPC_Reg_MapData_specs_43() {
        return asn_SPC_Reg_MapData_specs_43$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MapData_specs_43
     * }
     */
    public static void asn_SPC_Reg_MapData_specs_43(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_MapData_specs_43$constants.SEGMENT, 0L, asn_SPC_Reg_MapData_specs_43$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_MapData_43$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_MapData_43").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_MapData_43$layout() {
        return asn_MBR_Reg_MapData_43$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static long[] asn_MBR_Reg_MapData_43$dimensions() {
        return asn_MBR_Reg_MapData_43$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MapData_43() {
        return asn_MBR_Reg_MapData_43$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static void asn_MBR_Reg_MapData_43(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MapData_43$constants.SEGMENT, 0L, asn_MBR_Reg_MapData_43$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MapData_43(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_MapData_43$constants.HANDLE.invokeExact(asn_MBR_Reg_MapData_43$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MapData_43[2]
     * }
     */
    public static void asn_MBR_Reg_MapData_43(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MapData_43(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_GenericLane$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_GenericLane").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GenericLane
     * }
     */
    public static GroupLayout asn_DEF_Reg_GenericLane$layout() {
        return asn_DEF_Reg_GenericLane$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GenericLane
     * }
     */
    public static MemorySegment asn_DEF_Reg_GenericLane() {
        return asn_DEF_Reg_GenericLane$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GenericLane
     * }
     */
    public static void asn_DEF_Reg_GenericLane(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_GenericLane$constants.SEGMENT, 0L, asn_DEF_Reg_GenericLane$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_GenericLane_specs_46$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_GenericLane_specs_46").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GenericLane_specs_46
     * }
     */
    public static GroupLayout asn_SPC_Reg_GenericLane_specs_46$layout() {
        return asn_SPC_Reg_GenericLane_specs_46$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GenericLane_specs_46
     * }
     */
    public static MemorySegment asn_SPC_Reg_GenericLane_specs_46() {
        return asn_SPC_Reg_GenericLane_specs_46$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GenericLane_specs_46
     * }
     */
    public static void asn_SPC_Reg_GenericLane_specs_46(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_GenericLane_specs_46$constants.SEGMENT, 0L, asn_SPC_Reg_GenericLane_specs_46$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_GenericLane_46$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_GenericLane_46").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_GenericLane_46$layout() {
        return asn_MBR_Reg_GenericLane_46$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static long[] asn_MBR_Reg_GenericLane_46$dimensions() {
        return asn_MBR_Reg_GenericLane_46$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GenericLane_46() {
        return asn_MBR_Reg_GenericLane_46$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static void asn_MBR_Reg_GenericLane_46(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GenericLane_46$constants.SEGMENT, 0L, asn_MBR_Reg_GenericLane_46$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GenericLane_46(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_GenericLane_46$constants.HANDLE.invokeExact(asn_MBR_Reg_GenericLane_46$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GenericLane_46[2]
     * }
     */
    public static void asn_MBR_Reg_GenericLane_46(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GenericLane_46(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_IntersectionGeometry$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_IntersectionGeometry").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionGeometry
     * }
     */
    public static GroupLayout asn_DEF_Reg_IntersectionGeometry$layout() {
        return asn_DEF_Reg_IntersectionGeometry$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionGeometry
     * }
     */
    public static MemorySegment asn_DEF_Reg_IntersectionGeometry() {
        return asn_DEF_Reg_IntersectionGeometry$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionGeometry
     * }
     */
    public static void asn_DEF_Reg_IntersectionGeometry(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_IntersectionGeometry$constants.SEGMENT, 0L, asn_DEF_Reg_IntersectionGeometry$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_IntersectionGeometry_specs_49$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_IntersectionGeometry_specs_49").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionGeometry_specs_49
     * }
     */
    public static GroupLayout asn_SPC_Reg_IntersectionGeometry_specs_49$layout() {
        return asn_SPC_Reg_IntersectionGeometry_specs_49$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionGeometry_specs_49
     * }
     */
    public static MemorySegment asn_SPC_Reg_IntersectionGeometry_specs_49() {
        return asn_SPC_Reg_IntersectionGeometry_specs_49$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionGeometry_specs_49
     * }
     */
    public static void asn_SPC_Reg_IntersectionGeometry_specs_49(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_IntersectionGeometry_specs_49$constants.SEGMENT, 0L, asn_SPC_Reg_IntersectionGeometry_specs_49$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_IntersectionGeometry_49$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_IntersectionGeometry_49").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_IntersectionGeometry_49$layout() {
        return asn_MBR_Reg_IntersectionGeometry_49$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static long[] asn_MBR_Reg_IntersectionGeometry_49$dimensions() {
        return asn_MBR_Reg_IntersectionGeometry_49$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionGeometry_49() {
        return asn_MBR_Reg_IntersectionGeometry_49$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionGeometry_49(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionGeometry_49$constants.SEGMENT, 0L, asn_MBR_Reg_IntersectionGeometry_49$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionGeometry_49(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_IntersectionGeometry_49$constants.HANDLE.invokeExact(asn_MBR_Reg_IntersectionGeometry_49$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionGeometry_49[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionGeometry_49(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionGeometry_49(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_LaneAttributes$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_LaneAttributes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_LaneAttributes
     * }
     */
    public static GroupLayout asn_DEF_Reg_LaneAttributes$layout() {
        return asn_DEF_Reg_LaneAttributes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_LaneAttributes
     * }
     */
    public static MemorySegment asn_DEF_Reg_LaneAttributes() {
        return asn_DEF_Reg_LaneAttributes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_LaneAttributes
     * }
     */
    public static void asn_DEF_Reg_LaneAttributes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_LaneAttributes$constants.SEGMENT, 0L, asn_DEF_Reg_LaneAttributes$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_LaneAttributes_specs_52$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_LaneAttributes_specs_52").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_LaneAttributes_specs_52
     * }
     */
    public static GroupLayout asn_SPC_Reg_LaneAttributes_specs_52$layout() {
        return asn_SPC_Reg_LaneAttributes_specs_52$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_LaneAttributes_specs_52
     * }
     */
    public static MemorySegment asn_SPC_Reg_LaneAttributes_specs_52() {
        return asn_SPC_Reg_LaneAttributes_specs_52$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_LaneAttributes_specs_52
     * }
     */
    public static void asn_SPC_Reg_LaneAttributes_specs_52(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_LaneAttributes_specs_52$constants.SEGMENT, 0L, asn_SPC_Reg_LaneAttributes_specs_52$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_LaneAttributes_52$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_LaneAttributes_52").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_LaneAttributes_52$layout() {
        return asn_MBR_Reg_LaneAttributes_52$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static long[] asn_MBR_Reg_LaneAttributes_52$dimensions() {
        return asn_MBR_Reg_LaneAttributes_52$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_LaneAttributes_52() {
        return asn_MBR_Reg_LaneAttributes_52$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static void asn_MBR_Reg_LaneAttributes_52(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_LaneAttributes_52$constants.SEGMENT, 0L, asn_MBR_Reg_LaneAttributes_52$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_LaneAttributes_52(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_LaneAttributes_52$constants.HANDLE.invokeExact(asn_MBR_Reg_LaneAttributes_52$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_LaneAttributes_52[2]
     * }
     */
    public static void asn_MBR_Reg_LaneAttributes_52(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_LaneAttributes_52(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalControlZone$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalControlZone").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalControlZone
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalControlZone$layout() {
        return asn_DEF_Reg_SignalControlZone$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalControlZone
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalControlZone() {
        return asn_DEF_Reg_SignalControlZone$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalControlZone
     * }
     */
    public static void asn_DEF_Reg_SignalControlZone(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalControlZone$constants.SEGMENT, 0L, asn_DEF_Reg_SignalControlZone$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalControlZone_specs_55$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalControlZone_specs_55").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalControlZone_specs_55
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalControlZone_specs_55$layout() {
        return asn_SPC_Reg_SignalControlZone_specs_55$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalControlZone_specs_55
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalControlZone_specs_55() {
        return asn_SPC_Reg_SignalControlZone_specs_55$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalControlZone_specs_55
     * }
     */
    public static void asn_SPC_Reg_SignalControlZone_specs_55(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalControlZone_specs_55$constants.SEGMENT, 0L, asn_SPC_Reg_SignalControlZone_specs_55$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalControlZone_55$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalControlZone_55").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalControlZone_55$layout() {
        return asn_MBR_Reg_SignalControlZone_55$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalControlZone_55$dimensions() {
        return asn_MBR_Reg_SignalControlZone_55$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalControlZone_55() {
        return asn_MBR_Reg_SignalControlZone_55$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static void asn_MBR_Reg_SignalControlZone_55(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalControlZone_55$constants.SEGMENT, 0L, asn_MBR_Reg_SignalControlZone_55$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalControlZone_55(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalControlZone_55$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalControlZone_55$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalControlZone_55[2]
     * }
     */
    public static void asn_MBR_Reg_SignalControlZone_55(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalControlZone_55(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_RestrictionUserType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_RestrictionUserType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RestrictionUserType
     * }
     */
    public static GroupLayout asn_DEF_Reg_RestrictionUserType$layout() {
        return asn_DEF_Reg_RestrictionUserType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RestrictionUserType
     * }
     */
    public static MemorySegment asn_DEF_Reg_RestrictionUserType() {
        return asn_DEF_Reg_RestrictionUserType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RestrictionUserType
     * }
     */
    public static void asn_DEF_Reg_RestrictionUserType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_RestrictionUserType$constants.SEGMENT, 0L, asn_DEF_Reg_RestrictionUserType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_RestrictionUserType_specs_58$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_RestrictionUserType_specs_58").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RestrictionUserType_specs_58
     * }
     */
    public static GroupLayout asn_SPC_Reg_RestrictionUserType_specs_58$layout() {
        return asn_SPC_Reg_RestrictionUserType_specs_58$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RestrictionUserType_specs_58
     * }
     */
    public static MemorySegment asn_SPC_Reg_RestrictionUserType_specs_58() {
        return asn_SPC_Reg_RestrictionUserType_specs_58$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RestrictionUserType_specs_58
     * }
     */
    public static void asn_SPC_Reg_RestrictionUserType_specs_58(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_RestrictionUserType_specs_58$constants.SEGMENT, 0L, asn_SPC_Reg_RestrictionUserType_specs_58$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_RestrictionUserType_58$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_RestrictionUserType_58").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_RestrictionUserType_58$layout() {
        return asn_MBR_Reg_RestrictionUserType_58$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static long[] asn_MBR_Reg_RestrictionUserType_58$dimensions() {
        return asn_MBR_Reg_RestrictionUserType_58$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RestrictionUserType_58() {
        return asn_MBR_Reg_RestrictionUserType_58$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static void asn_MBR_Reg_RestrictionUserType_58(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RestrictionUserType_58$constants.SEGMENT, 0L, asn_MBR_Reg_RestrictionUserType_58$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RestrictionUserType_58(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_RestrictionUserType_58$constants.HANDLE.invokeExact(asn_MBR_Reg_RestrictionUserType_58$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RestrictionUserType_58[2]
     * }
     */
    public static void asn_MBR_Reg_RestrictionUserType_58(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RestrictionUserType_58(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_RoadSegment$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_RoadSegment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSegment
     * }
     */
    public static GroupLayout asn_DEF_Reg_RoadSegment$layout() {
        return asn_DEF_Reg_RoadSegment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSegment
     * }
     */
    public static MemorySegment asn_DEF_Reg_RoadSegment() {
        return asn_DEF_Reg_RoadSegment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSegment
     * }
     */
    public static void asn_DEF_Reg_RoadSegment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_RoadSegment$constants.SEGMENT, 0L, asn_DEF_Reg_RoadSegment$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_RoadSegment_specs_61$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_RoadSegment_specs_61").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSegment_specs_61
     * }
     */
    public static GroupLayout asn_SPC_Reg_RoadSegment_specs_61$layout() {
        return asn_SPC_Reg_RoadSegment_specs_61$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSegment_specs_61
     * }
     */
    public static MemorySegment asn_SPC_Reg_RoadSegment_specs_61() {
        return asn_SPC_Reg_RoadSegment_specs_61$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSegment_specs_61
     * }
     */
    public static void asn_SPC_Reg_RoadSegment_specs_61(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_RoadSegment_specs_61$constants.SEGMENT, 0L, asn_SPC_Reg_RoadSegment_specs_61$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_RoadSegment_61$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_RoadSegment_61").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_RoadSegment_61$layout() {
        return asn_MBR_Reg_RoadSegment_61$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static long[] asn_MBR_Reg_RoadSegment_61$dimensions() {
        return asn_MBR_Reg_RoadSegment_61$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RoadSegment_61() {
        return asn_MBR_Reg_RoadSegment_61$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static void asn_MBR_Reg_RoadSegment_61(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RoadSegment_61$constants.SEGMENT, 0L, asn_MBR_Reg_RoadSegment_61$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RoadSegment_61(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_RoadSegment_61$constants.HANDLE.invokeExact(asn_MBR_Reg_RoadSegment_61$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSegment_61[2]
     * }
     */
    public static void asn_MBR_Reg_RoadSegment_61(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RoadSegment_61(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_NMEAcorrections$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_NMEAcorrections").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NMEAcorrections
     * }
     */
    public static GroupLayout asn_DEF_Reg_NMEAcorrections$layout() {
        return asn_DEF_Reg_NMEAcorrections$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NMEAcorrections
     * }
     */
    public static MemorySegment asn_DEF_Reg_NMEAcorrections() {
        return asn_DEF_Reg_NMEAcorrections$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NMEAcorrections
     * }
     */
    public static void asn_DEF_Reg_NMEAcorrections(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_NMEAcorrections$constants.SEGMENT, 0L, asn_DEF_Reg_NMEAcorrections$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_NMEAcorrections_specs_64$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_NMEAcorrections_specs_64").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NMEAcorrections_specs_64
     * }
     */
    public static GroupLayout asn_SPC_Reg_NMEAcorrections_specs_64$layout() {
        return asn_SPC_Reg_NMEAcorrections_specs_64$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NMEAcorrections_specs_64
     * }
     */
    public static MemorySegment asn_SPC_Reg_NMEAcorrections_specs_64() {
        return asn_SPC_Reg_NMEAcorrections_specs_64$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NMEAcorrections_specs_64
     * }
     */
    public static void asn_SPC_Reg_NMEAcorrections_specs_64(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_NMEAcorrections_specs_64$constants.SEGMENT, 0L, asn_SPC_Reg_NMEAcorrections_specs_64$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_NMEAcorrections_64$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_NMEAcorrections_64").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_NMEAcorrections_64$layout() {
        return asn_MBR_Reg_NMEAcorrections_64$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static long[] asn_MBR_Reg_NMEAcorrections_64$dimensions() {
        return asn_MBR_Reg_NMEAcorrections_64$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NMEAcorrections_64() {
        return asn_MBR_Reg_NMEAcorrections_64$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static void asn_MBR_Reg_NMEAcorrections_64(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NMEAcorrections_64$constants.SEGMENT, 0L, asn_MBR_Reg_NMEAcorrections_64$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NMEAcorrections_64(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_NMEAcorrections_64$constants.HANDLE.invokeExact(asn_MBR_Reg_NMEAcorrections_64$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NMEAcorrections_64[2]
     * }
     */
    public static void asn_MBR_Reg_NMEAcorrections_64(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NMEAcorrections_64(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_PersonalSafetyMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_PersonalSafetyMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_PersonalSafetyMessage
     * }
     */
    public static GroupLayout asn_DEF_Reg_PersonalSafetyMessage$layout() {
        return asn_DEF_Reg_PersonalSafetyMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_PersonalSafetyMessage
     * }
     */
    public static MemorySegment asn_DEF_Reg_PersonalSafetyMessage() {
        return asn_DEF_Reg_PersonalSafetyMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_PersonalSafetyMessage
     * }
     */
    public static void asn_DEF_Reg_PersonalSafetyMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_PersonalSafetyMessage$constants.SEGMENT, 0L, asn_DEF_Reg_PersonalSafetyMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_PersonalSafetyMessage_specs_67$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_PersonalSafetyMessage_specs_67").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_PersonalSafetyMessage_specs_67
     * }
     */
    public static GroupLayout asn_SPC_Reg_PersonalSafetyMessage_specs_67$layout() {
        return asn_SPC_Reg_PersonalSafetyMessage_specs_67$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_PersonalSafetyMessage_specs_67
     * }
     */
    public static MemorySegment asn_SPC_Reg_PersonalSafetyMessage_specs_67() {
        return asn_SPC_Reg_PersonalSafetyMessage_specs_67$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_PersonalSafetyMessage_specs_67
     * }
     */
    public static void asn_SPC_Reg_PersonalSafetyMessage_specs_67(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_PersonalSafetyMessage_specs_67$constants.SEGMENT, 0L, asn_SPC_Reg_PersonalSafetyMessage_specs_67$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_PersonalSafetyMessage_67$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_PersonalSafetyMessage_67").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_PersonalSafetyMessage_67$layout() {
        return asn_MBR_Reg_PersonalSafetyMessage_67$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static long[] asn_MBR_Reg_PersonalSafetyMessage_67$dimensions() {
        return asn_MBR_Reg_PersonalSafetyMessage_67$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_PersonalSafetyMessage_67() {
        return asn_MBR_Reg_PersonalSafetyMessage_67$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static void asn_MBR_Reg_PersonalSafetyMessage_67(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_PersonalSafetyMessage_67$constants.SEGMENT, 0L, asn_MBR_Reg_PersonalSafetyMessage_67$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_PersonalSafetyMessage_67(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_PersonalSafetyMessage_67$constants.HANDLE.invokeExact(asn_MBR_Reg_PersonalSafetyMessage_67$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_PersonalSafetyMessage_67[2]
     * }
     */
    public static void asn_MBR_Reg_PersonalSafetyMessage_67(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_PersonalSafetyMessage_67(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_ProbeDataManagement$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_ProbeDataManagement").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeDataManagement
     * }
     */
    public static GroupLayout asn_DEF_Reg_ProbeDataManagement$layout() {
        return asn_DEF_Reg_ProbeDataManagement$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeDataManagement
     * }
     */
    public static MemorySegment asn_DEF_Reg_ProbeDataManagement() {
        return asn_DEF_Reg_ProbeDataManagement$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeDataManagement
     * }
     */
    public static void asn_DEF_Reg_ProbeDataManagement(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_ProbeDataManagement$constants.SEGMENT, 0L, asn_DEF_Reg_ProbeDataManagement$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_ProbeDataManagement_specs_70$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_ProbeDataManagement_specs_70").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeDataManagement_specs_70
     * }
     */
    public static GroupLayout asn_SPC_Reg_ProbeDataManagement_specs_70$layout() {
        return asn_SPC_Reg_ProbeDataManagement_specs_70$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeDataManagement_specs_70
     * }
     */
    public static MemorySegment asn_SPC_Reg_ProbeDataManagement_specs_70() {
        return asn_SPC_Reg_ProbeDataManagement_specs_70$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeDataManagement_specs_70
     * }
     */
    public static void asn_SPC_Reg_ProbeDataManagement_specs_70(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_ProbeDataManagement_specs_70$constants.SEGMENT, 0L, asn_SPC_Reg_ProbeDataManagement_specs_70$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_ProbeDataManagement_70$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_ProbeDataManagement_70").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_ProbeDataManagement_70$layout() {
        return asn_MBR_Reg_ProbeDataManagement_70$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static long[] asn_MBR_Reg_ProbeDataManagement_70$dimensions() {
        return asn_MBR_Reg_ProbeDataManagement_70$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ProbeDataManagement_70() {
        return asn_MBR_Reg_ProbeDataManagement_70$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static void asn_MBR_Reg_ProbeDataManagement_70(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ProbeDataManagement_70$constants.SEGMENT, 0L, asn_MBR_Reg_ProbeDataManagement_70$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ProbeDataManagement_70(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_ProbeDataManagement_70$constants.HANDLE.invokeExact(asn_MBR_Reg_ProbeDataManagement_70$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeDataManagement_70[2]
     * }
     */
    public static void asn_MBR_Reg_ProbeDataManagement_70(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ProbeDataManagement_70(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_ProbeVehicleData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_ProbeVehicleData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeVehicleData
     * }
     */
    public static GroupLayout asn_DEF_Reg_ProbeVehicleData$layout() {
        return asn_DEF_Reg_ProbeVehicleData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeVehicleData
     * }
     */
    public static MemorySegment asn_DEF_Reg_ProbeVehicleData() {
        return asn_DEF_Reg_ProbeVehicleData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ProbeVehicleData
     * }
     */
    public static void asn_DEF_Reg_ProbeVehicleData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_ProbeVehicleData$constants.SEGMENT, 0L, asn_DEF_Reg_ProbeVehicleData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_ProbeVehicleData_specs_73$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_ProbeVehicleData_specs_73").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeVehicleData_specs_73
     * }
     */
    public static GroupLayout asn_SPC_Reg_ProbeVehicleData_specs_73$layout() {
        return asn_SPC_Reg_ProbeVehicleData_specs_73$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeVehicleData_specs_73
     * }
     */
    public static MemorySegment asn_SPC_Reg_ProbeVehicleData_specs_73() {
        return asn_SPC_Reg_ProbeVehicleData_specs_73$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ProbeVehicleData_specs_73
     * }
     */
    public static void asn_SPC_Reg_ProbeVehicleData_specs_73(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_ProbeVehicleData_specs_73$constants.SEGMENT, 0L, asn_SPC_Reg_ProbeVehicleData_specs_73$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_ProbeVehicleData_73$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_ProbeVehicleData_73").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_ProbeVehicleData_73$layout() {
        return asn_MBR_Reg_ProbeVehicleData_73$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static long[] asn_MBR_Reg_ProbeVehicleData_73$dimensions() {
        return asn_MBR_Reg_ProbeVehicleData_73$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ProbeVehicleData_73() {
        return asn_MBR_Reg_ProbeVehicleData_73$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static void asn_MBR_Reg_ProbeVehicleData_73(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ProbeVehicleData_73$constants.SEGMENT, 0L, asn_MBR_Reg_ProbeVehicleData_73$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ProbeVehicleData_73(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_ProbeVehicleData_73$constants.HANDLE.invokeExact(asn_MBR_Reg_ProbeVehicleData_73$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ProbeVehicleData_73[2]
     * }
     */
    public static void asn_MBR_Reg_ProbeVehicleData_73(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ProbeVehicleData_73(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_RTCMcorrections$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_RTCMcorrections").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RTCMcorrections
     * }
     */
    public static GroupLayout asn_DEF_Reg_RTCMcorrections$layout() {
        return asn_DEF_Reg_RTCMcorrections$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RTCMcorrections
     * }
     */
    public static MemorySegment asn_DEF_Reg_RTCMcorrections() {
        return asn_DEF_Reg_RTCMcorrections$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RTCMcorrections
     * }
     */
    public static void asn_DEF_Reg_RTCMcorrections(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_RTCMcorrections$constants.SEGMENT, 0L, asn_DEF_Reg_RTCMcorrections$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_RTCMcorrections_specs_76$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_RTCMcorrections_specs_76").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RTCMcorrections_specs_76
     * }
     */
    public static GroupLayout asn_SPC_Reg_RTCMcorrections_specs_76$layout() {
        return asn_SPC_Reg_RTCMcorrections_specs_76$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RTCMcorrections_specs_76
     * }
     */
    public static MemorySegment asn_SPC_Reg_RTCMcorrections_specs_76() {
        return asn_SPC_Reg_RTCMcorrections_specs_76$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RTCMcorrections_specs_76
     * }
     */
    public static void asn_SPC_Reg_RTCMcorrections_specs_76(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_RTCMcorrections_specs_76$constants.SEGMENT, 0L, asn_SPC_Reg_RTCMcorrections_specs_76$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_RTCMcorrections_76$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_RTCMcorrections_76").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_RTCMcorrections_76$layout() {
        return asn_MBR_Reg_RTCMcorrections_76$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static long[] asn_MBR_Reg_RTCMcorrections_76$dimensions() {
        return asn_MBR_Reg_RTCMcorrections_76$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RTCMcorrections_76() {
        return asn_MBR_Reg_RTCMcorrections_76$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static void asn_MBR_Reg_RTCMcorrections_76(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RTCMcorrections_76$constants.SEGMENT, 0L, asn_MBR_Reg_RTCMcorrections_76$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RTCMcorrections_76(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_RTCMcorrections_76$constants.HANDLE.invokeExact(asn_MBR_Reg_RTCMcorrections_76$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RTCMcorrections_76[2]
     * }
     */
    public static void asn_MBR_Reg_RTCMcorrections_76(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RTCMcorrections_76(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_RoadSideAlert$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_RoadSideAlert").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSideAlert
     * }
     */
    public static GroupLayout asn_DEF_Reg_RoadSideAlert$layout() {
        return asn_DEF_Reg_RoadSideAlert$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSideAlert
     * }
     */
    public static MemorySegment asn_DEF_Reg_RoadSideAlert() {
        return asn_DEF_Reg_RoadSideAlert$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RoadSideAlert
     * }
     */
    public static void asn_DEF_Reg_RoadSideAlert(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_RoadSideAlert$constants.SEGMENT, 0L, asn_DEF_Reg_RoadSideAlert$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_RoadSideAlert_specs_79$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_RoadSideAlert_specs_79").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSideAlert_specs_79
     * }
     */
    public static GroupLayout asn_SPC_Reg_RoadSideAlert_specs_79$layout() {
        return asn_SPC_Reg_RoadSideAlert_specs_79$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSideAlert_specs_79
     * }
     */
    public static MemorySegment asn_SPC_Reg_RoadSideAlert_specs_79() {
        return asn_SPC_Reg_RoadSideAlert_specs_79$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RoadSideAlert_specs_79
     * }
     */
    public static void asn_SPC_Reg_RoadSideAlert_specs_79(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_RoadSideAlert_specs_79$constants.SEGMENT, 0L, asn_SPC_Reg_RoadSideAlert_specs_79$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_RoadSideAlert_79$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_RoadSideAlert_79").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_RoadSideAlert_79$layout() {
        return asn_MBR_Reg_RoadSideAlert_79$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static long[] asn_MBR_Reg_RoadSideAlert_79$dimensions() {
        return asn_MBR_Reg_RoadSideAlert_79$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RoadSideAlert_79() {
        return asn_MBR_Reg_RoadSideAlert_79$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static void asn_MBR_Reg_RoadSideAlert_79(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RoadSideAlert_79$constants.SEGMENT, 0L, asn_MBR_Reg_RoadSideAlert_79$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RoadSideAlert_79(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_RoadSideAlert_79$constants.HANDLE.invokeExact(asn_MBR_Reg_RoadSideAlert_79$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RoadSideAlert_79[2]
     * }
     */
    public static void asn_MBR_Reg_RoadSideAlert_79(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RoadSideAlert_79(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SPAT$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SPAT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SPAT
     * }
     */
    public static GroupLayout asn_DEF_Reg_SPAT$layout() {
        return asn_DEF_Reg_SPAT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SPAT
     * }
     */
    public static MemorySegment asn_DEF_Reg_SPAT() {
        return asn_DEF_Reg_SPAT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SPAT
     * }
     */
    public static void asn_DEF_Reg_SPAT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SPAT$constants.SEGMENT, 0L, asn_DEF_Reg_SPAT$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SPAT_specs_82$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SPAT_specs_82").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SPAT_specs_82
     * }
     */
    public static GroupLayout asn_SPC_Reg_SPAT_specs_82$layout() {
        return asn_SPC_Reg_SPAT_specs_82$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SPAT_specs_82
     * }
     */
    public static MemorySegment asn_SPC_Reg_SPAT_specs_82() {
        return asn_SPC_Reg_SPAT_specs_82$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SPAT_specs_82
     * }
     */
    public static void asn_SPC_Reg_SPAT_specs_82(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SPAT_specs_82$constants.SEGMENT, 0L, asn_SPC_Reg_SPAT_specs_82$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SPAT_82$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SPAT_82").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SPAT_82$layout() {
        return asn_MBR_Reg_SPAT_82$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static long[] asn_MBR_Reg_SPAT_82$dimensions() {
        return asn_MBR_Reg_SPAT_82$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SPAT_82() {
        return asn_MBR_Reg_SPAT_82$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static void asn_MBR_Reg_SPAT_82(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SPAT_82$constants.SEGMENT, 0L, asn_MBR_Reg_SPAT_82$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SPAT_82(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SPAT_82$constants.HANDLE.invokeExact(asn_MBR_Reg_SPAT_82$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SPAT_82[2]
     * }
     */
    public static void asn_MBR_Reg_SPAT_82(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SPAT_82(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_AdvisorySpeed$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_AdvisorySpeed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_AdvisorySpeed
     * }
     */
    public static GroupLayout asn_DEF_Reg_AdvisorySpeed$layout() {
        return asn_DEF_Reg_AdvisorySpeed$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_AdvisorySpeed
     * }
     */
    public static MemorySegment asn_DEF_Reg_AdvisorySpeed() {
        return asn_DEF_Reg_AdvisorySpeed$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_AdvisorySpeed
     * }
     */
    public static void asn_DEF_Reg_AdvisorySpeed(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_AdvisorySpeed$constants.SEGMENT, 0L, asn_DEF_Reg_AdvisorySpeed$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_AdvisorySpeed_specs_85$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_AdvisorySpeed_specs_85").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_AdvisorySpeed_specs_85
     * }
     */
    public static GroupLayout asn_SPC_Reg_AdvisorySpeed_specs_85$layout() {
        return asn_SPC_Reg_AdvisorySpeed_specs_85$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_AdvisorySpeed_specs_85
     * }
     */
    public static MemorySegment asn_SPC_Reg_AdvisorySpeed_specs_85() {
        return asn_SPC_Reg_AdvisorySpeed_specs_85$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_AdvisorySpeed_specs_85
     * }
     */
    public static void asn_SPC_Reg_AdvisorySpeed_specs_85(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_AdvisorySpeed_specs_85$constants.SEGMENT, 0L, asn_SPC_Reg_AdvisorySpeed_specs_85$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_AdvisorySpeed_85$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_AdvisorySpeed_85").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_AdvisorySpeed_85$layout() {
        return asn_MBR_Reg_AdvisorySpeed_85$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static long[] asn_MBR_Reg_AdvisorySpeed_85$dimensions() {
        return asn_MBR_Reg_AdvisorySpeed_85$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_AdvisorySpeed_85() {
        return asn_MBR_Reg_AdvisorySpeed_85$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static void asn_MBR_Reg_AdvisorySpeed_85(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_AdvisorySpeed_85$constants.SEGMENT, 0L, asn_MBR_Reg_AdvisorySpeed_85$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_AdvisorySpeed_85(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_AdvisorySpeed_85$constants.HANDLE.invokeExact(asn_MBR_Reg_AdvisorySpeed_85$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_AdvisorySpeed_85[2]
     * }
     */
    public static void asn_MBR_Reg_AdvisorySpeed_85(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_AdvisorySpeed_85(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_ConnectionManeuverAssist$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_ConnectionManeuverAssist").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ConnectionManeuverAssist
     * }
     */
    public static GroupLayout asn_DEF_Reg_ConnectionManeuverAssist$layout() {
        return asn_DEF_Reg_ConnectionManeuverAssist$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ConnectionManeuverAssist
     * }
     */
    public static MemorySegment asn_DEF_Reg_ConnectionManeuverAssist() {
        return asn_DEF_Reg_ConnectionManeuverAssist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_ConnectionManeuverAssist
     * }
     */
    public static void asn_DEF_Reg_ConnectionManeuverAssist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_ConnectionManeuverAssist$constants.SEGMENT, 0L, asn_DEF_Reg_ConnectionManeuverAssist$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_ConnectionManeuverAssist_specs_88$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_ConnectionManeuverAssist_specs_88").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ConnectionManeuverAssist_specs_88
     * }
     */
    public static GroupLayout asn_SPC_Reg_ConnectionManeuverAssist_specs_88$layout() {
        return asn_SPC_Reg_ConnectionManeuverAssist_specs_88$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ConnectionManeuverAssist_specs_88
     * }
     */
    public static MemorySegment asn_SPC_Reg_ConnectionManeuverAssist_specs_88() {
        return asn_SPC_Reg_ConnectionManeuverAssist_specs_88$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_ConnectionManeuverAssist_specs_88
     * }
     */
    public static void asn_SPC_Reg_ConnectionManeuverAssist_specs_88(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_ConnectionManeuverAssist_specs_88$constants.SEGMENT, 0L, asn_SPC_Reg_ConnectionManeuverAssist_specs_88$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_ConnectionManeuverAssist_88$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_ConnectionManeuverAssist_88").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_ConnectionManeuverAssist_88$layout() {
        return asn_MBR_Reg_ConnectionManeuverAssist_88$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static long[] asn_MBR_Reg_ConnectionManeuverAssist_88$dimensions() {
        return asn_MBR_Reg_ConnectionManeuverAssist_88$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ConnectionManeuverAssist_88() {
        return asn_MBR_Reg_ConnectionManeuverAssist_88$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static void asn_MBR_Reg_ConnectionManeuverAssist_88(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ConnectionManeuverAssist_88$constants.SEGMENT, 0L, asn_MBR_Reg_ConnectionManeuverAssist_88$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_ConnectionManeuverAssist_88(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_ConnectionManeuverAssist_88$constants.HANDLE.invokeExact(asn_MBR_Reg_ConnectionManeuverAssist_88$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_ConnectionManeuverAssist_88[2]
     * }
     */
    public static void asn_MBR_Reg_ConnectionManeuverAssist_88(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_ConnectionManeuverAssist_88(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_IntersectionState$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_IntersectionState").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionState
     * }
     */
    public static GroupLayout asn_DEF_Reg_IntersectionState$layout() {
        return asn_DEF_Reg_IntersectionState$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionState
     * }
     */
    public static MemorySegment asn_DEF_Reg_IntersectionState() {
        return asn_DEF_Reg_IntersectionState$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_IntersectionState
     * }
     */
    public static void asn_DEF_Reg_IntersectionState(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_IntersectionState$constants.SEGMENT, 0L, asn_DEF_Reg_IntersectionState$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_IntersectionState_specs_91$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_IntersectionState_specs_91").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionState_specs_91
     * }
     */
    public static GroupLayout asn_SPC_Reg_IntersectionState_specs_91$layout() {
        return asn_SPC_Reg_IntersectionState_specs_91$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionState_specs_91
     * }
     */
    public static MemorySegment asn_SPC_Reg_IntersectionState_specs_91() {
        return asn_SPC_Reg_IntersectionState_specs_91$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_IntersectionState_specs_91
     * }
     */
    public static void asn_SPC_Reg_IntersectionState_specs_91(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_IntersectionState_specs_91$constants.SEGMENT, 0L, asn_SPC_Reg_IntersectionState_specs_91$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_IntersectionState_91$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_IntersectionState_91").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_IntersectionState_91$layout() {
        return asn_MBR_Reg_IntersectionState_91$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static long[] asn_MBR_Reg_IntersectionState_91$dimensions() {
        return asn_MBR_Reg_IntersectionState_91$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionState_91() {
        return asn_MBR_Reg_IntersectionState_91$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionState_91(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionState_91$constants.SEGMENT, 0L, asn_MBR_Reg_IntersectionState_91$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_IntersectionState_91(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_IntersectionState_91$constants.HANDLE.invokeExact(asn_MBR_Reg_IntersectionState_91$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_IntersectionState_91[2]
     * }
     */
    public static void asn_MBR_Reg_IntersectionState_91(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_IntersectionState_91(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_MovementEvent$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_MovementEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementEvent
     * }
     */
    public static GroupLayout asn_DEF_Reg_MovementEvent$layout() {
        return asn_DEF_Reg_MovementEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementEvent
     * }
     */
    public static MemorySegment asn_DEF_Reg_MovementEvent() {
        return asn_DEF_Reg_MovementEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementEvent
     * }
     */
    public static void asn_DEF_Reg_MovementEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_MovementEvent$constants.SEGMENT, 0L, asn_DEF_Reg_MovementEvent$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_MovementEvent_specs_94$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_MovementEvent_specs_94").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementEvent_specs_94
     * }
     */
    public static GroupLayout asn_SPC_Reg_MovementEvent_specs_94$layout() {
        return asn_SPC_Reg_MovementEvent_specs_94$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementEvent_specs_94
     * }
     */
    public static MemorySegment asn_SPC_Reg_MovementEvent_specs_94() {
        return asn_SPC_Reg_MovementEvent_specs_94$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementEvent_specs_94
     * }
     */
    public static void asn_SPC_Reg_MovementEvent_specs_94(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_MovementEvent_specs_94$constants.SEGMENT, 0L, asn_SPC_Reg_MovementEvent_specs_94$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_MovementEvent_94$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_MovementEvent_94").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_MovementEvent_94$layout() {
        return asn_MBR_Reg_MovementEvent_94$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static long[] asn_MBR_Reg_MovementEvent_94$dimensions() {
        return asn_MBR_Reg_MovementEvent_94$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MovementEvent_94() {
        return asn_MBR_Reg_MovementEvent_94$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static void asn_MBR_Reg_MovementEvent_94(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MovementEvent_94$constants.SEGMENT, 0L, asn_MBR_Reg_MovementEvent_94$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MovementEvent_94(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_MovementEvent_94$constants.HANDLE.invokeExact(asn_MBR_Reg_MovementEvent_94$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementEvent_94[2]
     * }
     */
    public static void asn_MBR_Reg_MovementEvent_94(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MovementEvent_94(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_MovementState$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_MovementState").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementState
     * }
     */
    public static GroupLayout asn_DEF_Reg_MovementState$layout() {
        return asn_DEF_Reg_MovementState$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementState
     * }
     */
    public static MemorySegment asn_DEF_Reg_MovementState() {
        return asn_DEF_Reg_MovementState$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_MovementState
     * }
     */
    public static void asn_DEF_Reg_MovementState(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_MovementState$constants.SEGMENT, 0L, asn_DEF_Reg_MovementState$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_MovementState_specs_97$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_MovementState_specs_97").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementState_specs_97
     * }
     */
    public static GroupLayout asn_SPC_Reg_MovementState_specs_97$layout() {
        return asn_SPC_Reg_MovementState_specs_97$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementState_specs_97
     * }
     */
    public static MemorySegment asn_SPC_Reg_MovementState_specs_97() {
        return asn_SPC_Reg_MovementState_specs_97$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_MovementState_specs_97
     * }
     */
    public static void asn_SPC_Reg_MovementState_specs_97(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_MovementState_specs_97$constants.SEGMENT, 0L, asn_SPC_Reg_MovementState_specs_97$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_MovementState_97$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_MovementState_97").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_MovementState_97$layout() {
        return asn_MBR_Reg_MovementState_97$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static long[] asn_MBR_Reg_MovementState_97$dimensions() {
        return asn_MBR_Reg_MovementState_97$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MovementState_97() {
        return asn_MBR_Reg_MovementState_97$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static void asn_MBR_Reg_MovementState_97(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MovementState_97$constants.SEGMENT, 0L, asn_MBR_Reg_MovementState_97$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_MovementState_97(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_MovementState_97$constants.HANDLE.invokeExact(asn_MBR_Reg_MovementState_97$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_MovementState_97[2]
     * }
     */
    public static void asn_MBR_Reg_MovementState_97(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_MovementState_97(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalRequestMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalRequestMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestMessage
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalRequestMessage$layout() {
        return asn_DEF_Reg_SignalRequestMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestMessage
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalRequestMessage() {
        return asn_DEF_Reg_SignalRequestMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestMessage
     * }
     */
    public static void asn_DEF_Reg_SignalRequestMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalRequestMessage$constants.SEGMENT, 0L, asn_DEF_Reg_SignalRequestMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalRequestMessage_specs_100$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalRequestMessage_specs_100").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestMessage_specs_100
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalRequestMessage_specs_100$layout() {
        return asn_SPC_Reg_SignalRequestMessage_specs_100$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestMessage_specs_100
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalRequestMessage_specs_100() {
        return asn_SPC_Reg_SignalRequestMessage_specs_100$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestMessage_specs_100
     * }
     */
    public static void asn_SPC_Reg_SignalRequestMessage_specs_100(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalRequestMessage_specs_100$constants.SEGMENT, 0L, asn_SPC_Reg_SignalRequestMessage_specs_100$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalRequestMessage_100$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalRequestMessage_100").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalRequestMessage_100$layout() {
        return asn_MBR_Reg_SignalRequestMessage_100$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalRequestMessage_100$dimensions() {
        return asn_MBR_Reg_SignalRequestMessage_100$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequestMessage_100() {
        return asn_MBR_Reg_SignalRequestMessage_100$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequestMessage_100(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequestMessage_100$constants.SEGMENT, 0L, asn_MBR_Reg_SignalRequestMessage_100$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequestMessage_100(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalRequestMessage_100$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalRequestMessage_100$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestMessage_100[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequestMessage_100(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequestMessage_100(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_RequestorDescription$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_RequestorDescription").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RequestorDescription
     * }
     */
    public static GroupLayout asn_DEF_Reg_RequestorDescription$layout() {
        return asn_DEF_Reg_RequestorDescription$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RequestorDescription
     * }
     */
    public static MemorySegment asn_DEF_Reg_RequestorDescription() {
        return asn_DEF_Reg_RequestorDescription$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_RequestorDescription
     * }
     */
    public static void asn_DEF_Reg_RequestorDescription(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_RequestorDescription$constants.SEGMENT, 0L, asn_DEF_Reg_RequestorDescription$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_RequestorDescription_specs_103$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_RequestorDescription_specs_103").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RequestorDescription_specs_103
     * }
     */
    public static GroupLayout asn_SPC_Reg_RequestorDescription_specs_103$layout() {
        return asn_SPC_Reg_RequestorDescription_specs_103$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RequestorDescription_specs_103
     * }
     */
    public static MemorySegment asn_SPC_Reg_RequestorDescription_specs_103() {
        return asn_SPC_Reg_RequestorDescription_specs_103$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_RequestorDescription_specs_103
     * }
     */
    public static void asn_SPC_Reg_RequestorDescription_specs_103(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_RequestorDescription_specs_103$constants.SEGMENT, 0L, asn_SPC_Reg_RequestorDescription_specs_103$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_RequestorDescription_103$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_RequestorDescription_103").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_RequestorDescription_103$layout() {
        return asn_MBR_Reg_RequestorDescription_103$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static long[] asn_MBR_Reg_RequestorDescription_103$dimensions() {
        return asn_MBR_Reg_RequestorDescription_103$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RequestorDescription_103() {
        return asn_MBR_Reg_RequestorDescription_103$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static void asn_MBR_Reg_RequestorDescription_103(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RequestorDescription_103$constants.SEGMENT, 0L, asn_MBR_Reg_RequestorDescription_103$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_RequestorDescription_103(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_RequestorDescription_103$constants.HANDLE.invokeExact(asn_MBR_Reg_RequestorDescription_103$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_RequestorDescription_103[2]
     * }
     */
    public static void asn_MBR_Reg_RequestorDescription_103(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_RequestorDescription_103(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalRequestPackage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalRequestPackage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestPackage
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalRequestPackage$layout() {
        return asn_DEF_Reg_SignalRequestPackage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestPackage
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalRequestPackage() {
        return asn_DEF_Reg_SignalRequestPackage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequestPackage
     * }
     */
    public static void asn_DEF_Reg_SignalRequestPackage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalRequestPackage$constants.SEGMENT, 0L, asn_DEF_Reg_SignalRequestPackage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalRequestPackage_specs_106$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalRequestPackage_specs_106").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestPackage_specs_106
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalRequestPackage_specs_106$layout() {
        return asn_SPC_Reg_SignalRequestPackage_specs_106$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestPackage_specs_106
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalRequestPackage_specs_106() {
        return asn_SPC_Reg_SignalRequestPackage_specs_106$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequestPackage_specs_106
     * }
     */
    public static void asn_SPC_Reg_SignalRequestPackage_specs_106(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalRequestPackage_specs_106$constants.SEGMENT, 0L, asn_SPC_Reg_SignalRequestPackage_specs_106$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalRequestPackage_106$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalRequestPackage_106").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalRequestPackage_106$layout() {
        return asn_MBR_Reg_SignalRequestPackage_106$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalRequestPackage_106$dimensions() {
        return asn_MBR_Reg_SignalRequestPackage_106$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequestPackage_106() {
        return asn_MBR_Reg_SignalRequestPackage_106$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequestPackage_106(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequestPackage_106$constants.SEGMENT, 0L, asn_MBR_Reg_SignalRequestPackage_106$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequestPackage_106(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalRequestPackage_106$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalRequestPackage_106$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequestPackage_106[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequestPackage_106(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequestPackage_106(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalRequest$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalRequest").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequest
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalRequest$layout() {
        return asn_DEF_Reg_SignalRequest$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequest
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalRequest() {
        return asn_DEF_Reg_SignalRequest$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalRequest
     * }
     */
    public static void asn_DEF_Reg_SignalRequest(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalRequest$constants.SEGMENT, 0L, asn_DEF_Reg_SignalRequest$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalRequest_specs_109$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalRequest_specs_109").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequest_specs_109
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalRequest_specs_109$layout() {
        return asn_SPC_Reg_SignalRequest_specs_109$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequest_specs_109
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalRequest_specs_109() {
        return asn_SPC_Reg_SignalRequest_specs_109$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalRequest_specs_109
     * }
     */
    public static void asn_SPC_Reg_SignalRequest_specs_109(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalRequest_specs_109$constants.SEGMENT, 0L, asn_SPC_Reg_SignalRequest_specs_109$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalRequest_109$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalRequest_109").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalRequest_109$layout() {
        return asn_MBR_Reg_SignalRequest_109$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalRequest_109$dimensions() {
        return asn_MBR_Reg_SignalRequest_109$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequest_109() {
        return asn_MBR_Reg_SignalRequest_109$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequest_109(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequest_109$constants.SEGMENT, 0L, asn_MBR_Reg_SignalRequest_109$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalRequest_109(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalRequest_109$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalRequest_109$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalRequest_109[2]
     * }
     */
    public static void asn_MBR_Reg_SignalRequest_109(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalRequest_109(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalStatusMessage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalStatusMessage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusMessage
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalStatusMessage$layout() {
        return asn_DEF_Reg_SignalStatusMessage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusMessage
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalStatusMessage() {
        return asn_DEF_Reg_SignalStatusMessage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusMessage
     * }
     */
    public static void asn_DEF_Reg_SignalStatusMessage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalStatusMessage$constants.SEGMENT, 0L, asn_DEF_Reg_SignalStatusMessage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalStatusMessage_specs_112$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalStatusMessage_specs_112").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusMessage_specs_112
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalStatusMessage_specs_112$layout() {
        return asn_SPC_Reg_SignalStatusMessage_specs_112$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusMessage_specs_112
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalStatusMessage_specs_112() {
        return asn_SPC_Reg_SignalStatusMessage_specs_112$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusMessage_specs_112
     * }
     */
    public static void asn_SPC_Reg_SignalStatusMessage_specs_112(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalStatusMessage_specs_112$constants.SEGMENT, 0L, asn_SPC_Reg_SignalStatusMessage_specs_112$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalStatusMessage_112$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalStatusMessage_112").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalStatusMessage_112$layout() {
        return asn_MBR_Reg_SignalStatusMessage_112$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalStatusMessage_112$dimensions() {
        return asn_MBR_Reg_SignalStatusMessage_112$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatusMessage_112() {
        return asn_MBR_Reg_SignalStatusMessage_112$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatusMessage_112(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatusMessage_112$constants.SEGMENT, 0L, asn_MBR_Reg_SignalStatusMessage_112$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatusMessage_112(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalStatusMessage_112$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalStatusMessage_112$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusMessage_112[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatusMessage_112(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatusMessage_112(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalStatusPackage$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalStatusPackage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusPackage
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalStatusPackage$layout() {
        return asn_DEF_Reg_SignalStatusPackage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusPackage
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalStatusPackage() {
        return asn_DEF_Reg_SignalStatusPackage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatusPackage
     * }
     */
    public static void asn_DEF_Reg_SignalStatusPackage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalStatusPackage$constants.SEGMENT, 0L, asn_DEF_Reg_SignalStatusPackage$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalStatusPackage_specs_115$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalStatusPackage_specs_115").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusPackage_specs_115
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalStatusPackage_specs_115$layout() {
        return asn_SPC_Reg_SignalStatusPackage_specs_115$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusPackage_specs_115
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalStatusPackage_specs_115() {
        return asn_SPC_Reg_SignalStatusPackage_specs_115$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatusPackage_specs_115
     * }
     */
    public static void asn_SPC_Reg_SignalStatusPackage_specs_115(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalStatusPackage_specs_115$constants.SEGMENT, 0L, asn_SPC_Reg_SignalStatusPackage_specs_115$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalStatusPackage_115$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalStatusPackage_115").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalStatusPackage_115$layout() {
        return asn_MBR_Reg_SignalStatusPackage_115$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalStatusPackage_115$dimensions() {
        return asn_MBR_Reg_SignalStatusPackage_115$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatusPackage_115() {
        return asn_MBR_Reg_SignalStatusPackage_115$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatusPackage_115(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatusPackage_115$constants.SEGMENT, 0L, asn_MBR_Reg_SignalStatusPackage_115$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatusPackage_115(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalStatusPackage_115$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalStatusPackage_115$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatusPackage_115[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatusPackage_115(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatusPackage_115(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_SignalStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_SignalStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatus
     * }
     */
    public static GroupLayout asn_DEF_Reg_SignalStatus$layout() {
        return asn_DEF_Reg_SignalStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatus
     * }
     */
    public static MemorySegment asn_DEF_Reg_SignalStatus() {
        return asn_DEF_Reg_SignalStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_SignalStatus
     * }
     */
    public static void asn_DEF_Reg_SignalStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_SignalStatus$constants.SEGMENT, 0L, asn_DEF_Reg_SignalStatus$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_SignalStatus_specs_118$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_SignalStatus_specs_118").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatus_specs_118
     * }
     */
    public static GroupLayout asn_SPC_Reg_SignalStatus_specs_118$layout() {
        return asn_SPC_Reg_SignalStatus_specs_118$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatus_specs_118
     * }
     */
    public static MemorySegment asn_SPC_Reg_SignalStatus_specs_118() {
        return asn_SPC_Reg_SignalStatus_specs_118$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_SignalStatus_specs_118
     * }
     */
    public static void asn_SPC_Reg_SignalStatus_specs_118(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_SignalStatus_specs_118$constants.SEGMENT, 0L, asn_SPC_Reg_SignalStatus_specs_118$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_SignalStatus_118$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_SignalStatus_118").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_SignalStatus_118$layout() {
        return asn_MBR_Reg_SignalStatus_118$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static long[] asn_MBR_Reg_SignalStatus_118$dimensions() {
        return asn_MBR_Reg_SignalStatus_118$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatus_118() {
        return asn_MBR_Reg_SignalStatus_118$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatus_118(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatus_118$constants.SEGMENT, 0L, asn_MBR_Reg_SignalStatus_118$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_SignalStatus_118(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_SignalStatus_118$constants.HANDLE.invokeExact(asn_MBR_Reg_SignalStatus_118$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_SignalStatus_118[2]
     * }
     */
    public static void asn_MBR_Reg_SignalStatus_118(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_SignalStatus_118(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage00$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage00").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage00
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage00$layout() {
        return asn_DEF_Reg_TestMessage00$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage00
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage00() {
        return asn_DEF_Reg_TestMessage00$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage00
     * }
     */
    public static void asn_DEF_Reg_TestMessage00(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage00$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage00$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage00_specs_121$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage00_specs_121").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage00_specs_121
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage00_specs_121$layout() {
        return asn_SPC_Reg_TestMessage00_specs_121$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage00_specs_121
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage00_specs_121() {
        return asn_SPC_Reg_TestMessage00_specs_121$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage00_specs_121
     * }
     */
    public static void asn_SPC_Reg_TestMessage00_specs_121(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage00_specs_121$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage00_specs_121$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage00_121$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage00_121").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage00_121$layout() {
        return asn_MBR_Reg_TestMessage00_121$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage00_121$dimensions() {
        return asn_MBR_Reg_TestMessage00_121$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage00_121() {
        return asn_MBR_Reg_TestMessage00_121$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage00_121(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage00_121$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage00_121$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage00_121(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage00_121$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage00_121$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage00_121[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage00_121(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage00_121(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage01$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage01").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage01
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage01$layout() {
        return asn_DEF_Reg_TestMessage01$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage01
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage01() {
        return asn_DEF_Reg_TestMessage01$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage01
     * }
     */
    public static void asn_DEF_Reg_TestMessage01(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage01$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage01$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage01_specs_124$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage01_specs_124").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage01_specs_124
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage01_specs_124$layout() {
        return asn_SPC_Reg_TestMessage01_specs_124$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage01_specs_124
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage01_specs_124() {
        return asn_SPC_Reg_TestMessage01_specs_124$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage01_specs_124
     * }
     */
    public static void asn_SPC_Reg_TestMessage01_specs_124(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage01_specs_124$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage01_specs_124$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage01_124$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage01_124").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage01_124$layout() {
        return asn_MBR_Reg_TestMessage01_124$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage01_124$dimensions() {
        return asn_MBR_Reg_TestMessage01_124$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage01_124() {
        return asn_MBR_Reg_TestMessage01_124$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage01_124(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage01_124$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage01_124$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage01_124(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage01_124$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage01_124$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage01_124[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage01_124(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage01_124(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage02$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage02").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage02
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage02$layout() {
        return asn_DEF_Reg_TestMessage02$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage02
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage02() {
        return asn_DEF_Reg_TestMessage02$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage02
     * }
     */
    public static void asn_DEF_Reg_TestMessage02(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage02$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage02$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage02_specs_127$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage02_specs_127").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage02_specs_127
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage02_specs_127$layout() {
        return asn_SPC_Reg_TestMessage02_specs_127$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage02_specs_127
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage02_specs_127() {
        return asn_SPC_Reg_TestMessage02_specs_127$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage02_specs_127
     * }
     */
    public static void asn_SPC_Reg_TestMessage02_specs_127(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage02_specs_127$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage02_specs_127$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage02_127$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage02_127").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage02_127$layout() {
        return asn_MBR_Reg_TestMessage02_127$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage02_127$dimensions() {
        return asn_MBR_Reg_TestMessage02_127$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage02_127() {
        return asn_MBR_Reg_TestMessage02_127$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage02_127(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage02_127$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage02_127$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage02_127(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage02_127$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage02_127$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage02_127[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage02_127(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage02_127(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage03$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage03").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage03
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage03$layout() {
        return asn_DEF_Reg_TestMessage03$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage03
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage03() {
        return asn_DEF_Reg_TestMessage03$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage03
     * }
     */
    public static void asn_DEF_Reg_TestMessage03(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage03$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage03$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage03_specs_130$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage03_specs_130").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage03_specs_130
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage03_specs_130$layout() {
        return asn_SPC_Reg_TestMessage03_specs_130$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage03_specs_130
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage03_specs_130() {
        return asn_SPC_Reg_TestMessage03_specs_130$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage03_specs_130
     * }
     */
    public static void asn_SPC_Reg_TestMessage03_specs_130(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage03_specs_130$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage03_specs_130$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage03_130$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage03_130").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage03_130$layout() {
        return asn_MBR_Reg_TestMessage03_130$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage03_130$dimensions() {
        return asn_MBR_Reg_TestMessage03_130$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage03_130() {
        return asn_MBR_Reg_TestMessage03_130$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage03_130(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage03_130$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage03_130$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage03_130(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage03_130$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage03_130$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage03_130[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage03_130(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage03_130(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage04$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage04").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage04
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage04$layout() {
        return asn_DEF_Reg_TestMessage04$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage04
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage04() {
        return asn_DEF_Reg_TestMessage04$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage04
     * }
     */
    public static void asn_DEF_Reg_TestMessage04(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage04$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage04$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage04_specs_133$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage04_specs_133").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage04_specs_133
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage04_specs_133$layout() {
        return asn_SPC_Reg_TestMessage04_specs_133$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage04_specs_133
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage04_specs_133() {
        return asn_SPC_Reg_TestMessage04_specs_133$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage04_specs_133
     * }
     */
    public static void asn_SPC_Reg_TestMessage04_specs_133(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage04_specs_133$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage04_specs_133$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage04_133$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage04_133").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage04_133$layout() {
        return asn_MBR_Reg_TestMessage04_133$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage04_133$dimensions() {
        return asn_MBR_Reg_TestMessage04_133$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage04_133() {
        return asn_MBR_Reg_TestMessage04_133$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage04_133(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage04_133$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage04_133$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage04_133(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage04_133$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage04_133$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage04_133[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage04_133(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage04_133(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage05$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage05").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage05
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage05$layout() {
        return asn_DEF_Reg_TestMessage05$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage05
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage05() {
        return asn_DEF_Reg_TestMessage05$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage05
     * }
     */
    public static void asn_DEF_Reg_TestMessage05(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage05$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage05$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage05_specs_136$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage05_specs_136").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage05_specs_136
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage05_specs_136$layout() {
        return asn_SPC_Reg_TestMessage05_specs_136$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage05_specs_136
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage05_specs_136() {
        return asn_SPC_Reg_TestMessage05_specs_136$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage05_specs_136
     * }
     */
    public static void asn_SPC_Reg_TestMessage05_specs_136(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage05_specs_136$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage05_specs_136$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage05_136$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage05_136").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage05_136$layout() {
        return asn_MBR_Reg_TestMessage05_136$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage05_136$dimensions() {
        return asn_MBR_Reg_TestMessage05_136$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage05_136() {
        return asn_MBR_Reg_TestMessage05_136$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage05_136(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage05_136$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage05_136$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage05_136(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage05_136$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage05_136$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage05_136[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage05_136(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage05_136(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage06$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage06").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage06
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage06$layout() {
        return asn_DEF_Reg_TestMessage06$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage06
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage06() {
        return asn_DEF_Reg_TestMessage06$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage06
     * }
     */
    public static void asn_DEF_Reg_TestMessage06(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage06$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage06$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage06_specs_139$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage06_specs_139").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage06_specs_139
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage06_specs_139$layout() {
        return asn_SPC_Reg_TestMessage06_specs_139$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage06_specs_139
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage06_specs_139() {
        return asn_SPC_Reg_TestMessage06_specs_139$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage06_specs_139
     * }
     */
    public static void asn_SPC_Reg_TestMessage06_specs_139(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage06_specs_139$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage06_specs_139$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage06_139$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage06_139").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage06_139$layout() {
        return asn_MBR_Reg_TestMessage06_139$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage06_139$dimensions() {
        return asn_MBR_Reg_TestMessage06_139$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage06_139() {
        return asn_MBR_Reg_TestMessage06_139$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage06_139(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage06_139$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage06_139$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage06_139(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage06_139$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage06_139$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage06_139[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage06_139(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage06_139(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage07$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage07").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage07
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage07$layout() {
        return asn_DEF_Reg_TestMessage07$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage07
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage07() {
        return asn_DEF_Reg_TestMessage07$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage07
     * }
     */
    public static void asn_DEF_Reg_TestMessage07(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage07$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage07$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage07_specs_142$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage07_specs_142").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage07_specs_142
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage07_specs_142$layout() {
        return asn_SPC_Reg_TestMessage07_specs_142$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage07_specs_142
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage07_specs_142() {
        return asn_SPC_Reg_TestMessage07_specs_142$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage07_specs_142
     * }
     */
    public static void asn_SPC_Reg_TestMessage07_specs_142(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage07_specs_142$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage07_specs_142$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage07_142$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage07_142").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage07_142$layout() {
        return asn_MBR_Reg_TestMessage07_142$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage07_142$dimensions() {
        return asn_MBR_Reg_TestMessage07_142$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage07_142() {
        return asn_MBR_Reg_TestMessage07_142$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage07_142(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage07_142$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage07_142$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage07_142(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage07_142$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage07_142$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage07_142[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage07_142(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage07_142(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage08$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage08").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage08
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage08$layout() {
        return asn_DEF_Reg_TestMessage08$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage08
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage08() {
        return asn_DEF_Reg_TestMessage08$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage08
     * }
     */
    public static void asn_DEF_Reg_TestMessage08(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage08$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage08$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage08_specs_145$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage08_specs_145").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage08_specs_145
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage08_specs_145$layout() {
        return asn_SPC_Reg_TestMessage08_specs_145$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage08_specs_145
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage08_specs_145() {
        return asn_SPC_Reg_TestMessage08_specs_145$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage08_specs_145
     * }
     */
    public static void asn_SPC_Reg_TestMessage08_specs_145(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage08_specs_145$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage08_specs_145$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage08_145$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage08_145").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage08_145$layout() {
        return asn_MBR_Reg_TestMessage08_145$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage08_145$dimensions() {
        return asn_MBR_Reg_TestMessage08_145$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage08_145() {
        return asn_MBR_Reg_TestMessage08_145$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage08_145(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage08_145$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage08_145$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage08_145(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage08_145$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage08_145$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage08_145[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage08_145(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage08_145(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage09$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage09").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage09
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage09$layout() {
        return asn_DEF_Reg_TestMessage09$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage09
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage09() {
        return asn_DEF_Reg_TestMessage09$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage09
     * }
     */
    public static void asn_DEF_Reg_TestMessage09(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage09$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage09$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage09_specs_148$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage09_specs_148").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage09_specs_148
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage09_specs_148$layout() {
        return asn_SPC_Reg_TestMessage09_specs_148$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage09_specs_148
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage09_specs_148() {
        return asn_SPC_Reg_TestMessage09_specs_148$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage09_specs_148
     * }
     */
    public static void asn_SPC_Reg_TestMessage09_specs_148(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage09_specs_148$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage09_specs_148$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage09_148$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage09_148").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage09_148$layout() {
        return asn_MBR_Reg_TestMessage09_148$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage09_148$dimensions() {
        return asn_MBR_Reg_TestMessage09_148$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage09_148() {
        return asn_MBR_Reg_TestMessage09_148$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage09_148(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage09_148$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage09_148$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage09_148(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage09_148$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage09_148$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage09_148[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage09_148(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage09_148(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage10$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage10").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage10
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage10$layout() {
        return asn_DEF_Reg_TestMessage10$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage10
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage10() {
        return asn_DEF_Reg_TestMessage10$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage10
     * }
     */
    public static void asn_DEF_Reg_TestMessage10(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage10$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage10$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage10_specs_151$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage10_specs_151").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage10_specs_151
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage10_specs_151$layout() {
        return asn_SPC_Reg_TestMessage10_specs_151$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage10_specs_151
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage10_specs_151() {
        return asn_SPC_Reg_TestMessage10_specs_151$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage10_specs_151
     * }
     */
    public static void asn_SPC_Reg_TestMessage10_specs_151(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage10_specs_151$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage10_specs_151$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage10_151$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage10_151").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage10_151$layout() {
        return asn_MBR_Reg_TestMessage10_151$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage10_151$dimensions() {
        return asn_MBR_Reg_TestMessage10_151$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage10_151() {
        return asn_MBR_Reg_TestMessage10_151$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage10_151(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage10_151$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage10_151$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage10_151(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage10_151$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage10_151$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage10_151[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage10_151(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage10_151(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage11$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage11").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage11
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage11$layout() {
        return asn_DEF_Reg_TestMessage11$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage11
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage11() {
        return asn_DEF_Reg_TestMessage11$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage11
     * }
     */
    public static void asn_DEF_Reg_TestMessage11(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage11$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage11$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage11_specs_154$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage11_specs_154").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage11_specs_154
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage11_specs_154$layout() {
        return asn_SPC_Reg_TestMessage11_specs_154$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage11_specs_154
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage11_specs_154() {
        return asn_SPC_Reg_TestMessage11_specs_154$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage11_specs_154
     * }
     */
    public static void asn_SPC_Reg_TestMessage11_specs_154(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage11_specs_154$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage11_specs_154$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage11_154$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage11_154").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage11_154$layout() {
        return asn_MBR_Reg_TestMessage11_154$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage11_154$dimensions() {
        return asn_MBR_Reg_TestMessage11_154$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage11_154() {
        return asn_MBR_Reg_TestMessage11_154$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage11_154(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage11_154$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage11_154$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage11_154(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage11_154$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage11_154$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage11_154[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage11_154(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage11_154(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage12$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage12").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage12
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage12$layout() {
        return asn_DEF_Reg_TestMessage12$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage12
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage12() {
        return asn_DEF_Reg_TestMessage12$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage12
     * }
     */
    public static void asn_DEF_Reg_TestMessage12(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage12$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage12$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage12_specs_157$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage12_specs_157").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage12_specs_157
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage12_specs_157$layout() {
        return asn_SPC_Reg_TestMessage12_specs_157$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage12_specs_157
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage12_specs_157() {
        return asn_SPC_Reg_TestMessage12_specs_157$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage12_specs_157
     * }
     */
    public static void asn_SPC_Reg_TestMessage12_specs_157(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage12_specs_157$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage12_specs_157$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage12_157$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage12_157").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage12_157$layout() {
        return asn_MBR_Reg_TestMessage12_157$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage12_157$dimensions() {
        return asn_MBR_Reg_TestMessage12_157$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage12_157() {
        return asn_MBR_Reg_TestMessage12_157$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage12_157(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage12_157$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage12_157$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage12_157(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage12_157$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage12_157$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage12_157[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage12_157(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage12_157(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage13$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage13").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage13
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage13$layout() {
        return asn_DEF_Reg_TestMessage13$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage13
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage13() {
        return asn_DEF_Reg_TestMessage13$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage13
     * }
     */
    public static void asn_DEF_Reg_TestMessage13(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage13$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage13$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage13_specs_160$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage13_specs_160").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage13_specs_160
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage13_specs_160$layout() {
        return asn_SPC_Reg_TestMessage13_specs_160$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage13_specs_160
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage13_specs_160() {
        return asn_SPC_Reg_TestMessage13_specs_160$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage13_specs_160
     * }
     */
    public static void asn_SPC_Reg_TestMessage13_specs_160(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage13_specs_160$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage13_specs_160$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage13_160$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage13_160").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage13_160$layout() {
        return asn_MBR_Reg_TestMessage13_160$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage13_160$dimensions() {
        return asn_MBR_Reg_TestMessage13_160$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage13_160() {
        return asn_MBR_Reg_TestMessage13_160$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage13_160(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage13_160$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage13_160$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage13_160(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage13_160$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage13_160$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage13_160[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage13_160(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage13_160(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage14$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage14").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage14
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage14$layout() {
        return asn_DEF_Reg_TestMessage14$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage14
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage14() {
        return asn_DEF_Reg_TestMessage14$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage14
     * }
     */
    public static void asn_DEF_Reg_TestMessage14(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage14$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage14$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage14_specs_163$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage14_specs_163").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage14_specs_163
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage14_specs_163$layout() {
        return asn_SPC_Reg_TestMessage14_specs_163$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage14_specs_163
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage14_specs_163() {
        return asn_SPC_Reg_TestMessage14_specs_163$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage14_specs_163
     * }
     */
    public static void asn_SPC_Reg_TestMessage14_specs_163(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage14_specs_163$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage14_specs_163$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage14_163$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage14_163").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage14_163$layout() {
        return asn_MBR_Reg_TestMessage14_163$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage14_163$dimensions() {
        return asn_MBR_Reg_TestMessage14_163$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage14_163() {
        return asn_MBR_Reg_TestMessage14_163$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage14_163(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage14_163$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage14_163$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage14_163(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage14_163$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage14_163$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage14_163[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage14_163(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage14_163(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TestMessage15$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TestMessage15").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage15
     * }
     */
    public static GroupLayout asn_DEF_Reg_TestMessage15$layout() {
        return asn_DEF_Reg_TestMessage15$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage15
     * }
     */
    public static MemorySegment asn_DEF_Reg_TestMessage15() {
        return asn_DEF_Reg_TestMessage15$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TestMessage15
     * }
     */
    public static void asn_DEF_Reg_TestMessage15(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TestMessage15$constants.SEGMENT, 0L, asn_DEF_Reg_TestMessage15$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TestMessage15_specs_166$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TestMessage15_specs_166").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage15_specs_166
     * }
     */
    public static GroupLayout asn_SPC_Reg_TestMessage15_specs_166$layout() {
        return asn_SPC_Reg_TestMessage15_specs_166$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage15_specs_166
     * }
     */
    public static MemorySegment asn_SPC_Reg_TestMessage15_specs_166() {
        return asn_SPC_Reg_TestMessage15_specs_166$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TestMessage15_specs_166
     * }
     */
    public static void asn_SPC_Reg_TestMessage15_specs_166(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TestMessage15_specs_166$constants.SEGMENT, 0L, asn_SPC_Reg_TestMessage15_specs_166$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TestMessage15_166$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TestMessage15_166").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TestMessage15_166$layout() {
        return asn_MBR_Reg_TestMessage15_166$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static long[] asn_MBR_Reg_TestMessage15_166$dimensions() {
        return asn_MBR_Reg_TestMessage15_166$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage15_166() {
        return asn_MBR_Reg_TestMessage15_166$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage15_166(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage15_166$constants.SEGMENT, 0L, asn_MBR_Reg_TestMessage15_166$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TestMessage15_166(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TestMessage15_166$constants.HANDLE.invokeExact(asn_MBR_Reg_TestMessage15_166$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TestMessage15_166[2]
     * }
     */
    public static void asn_MBR_Reg_TestMessage15_166(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TestMessage15_166(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_TravelerInformation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_TravelerInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TravelerInformation
     * }
     */
    public static GroupLayout asn_DEF_Reg_TravelerInformation$layout() {
        return asn_DEF_Reg_TravelerInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TravelerInformation
     * }
     */
    public static MemorySegment asn_DEF_Reg_TravelerInformation() {
        return asn_DEF_Reg_TravelerInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_TravelerInformation
     * }
     */
    public static void asn_DEF_Reg_TravelerInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_TravelerInformation$constants.SEGMENT, 0L, asn_DEF_Reg_TravelerInformation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_TravelerInformation_specs_169$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_TravelerInformation_specs_169").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TravelerInformation_specs_169
     * }
     */
    public static GroupLayout asn_SPC_Reg_TravelerInformation_specs_169$layout() {
        return asn_SPC_Reg_TravelerInformation_specs_169$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TravelerInformation_specs_169
     * }
     */
    public static MemorySegment asn_SPC_Reg_TravelerInformation_specs_169() {
        return asn_SPC_Reg_TravelerInformation_specs_169$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_TravelerInformation_specs_169
     * }
     */
    public static void asn_SPC_Reg_TravelerInformation_specs_169(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_TravelerInformation_specs_169$constants.SEGMENT, 0L, asn_SPC_Reg_TravelerInformation_specs_169$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_TravelerInformation_169$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_TravelerInformation_169").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_TravelerInformation_169$layout() {
        return asn_MBR_Reg_TravelerInformation_169$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static long[] asn_MBR_Reg_TravelerInformation_169$dimensions() {
        return asn_MBR_Reg_TravelerInformation_169$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TravelerInformation_169() {
        return asn_MBR_Reg_TravelerInformation_169$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static void asn_MBR_Reg_TravelerInformation_169(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TravelerInformation_169$constants.SEGMENT, 0L, asn_MBR_Reg_TravelerInformation_169$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_TravelerInformation_169(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_TravelerInformation_169$constants.HANDLE.invokeExact(asn_MBR_Reg_TravelerInformation_169$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_TravelerInformation_169[2]
     * }
     */
    public static void asn_MBR_Reg_TravelerInformation_169(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_TravelerInformation_169(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_GeographicalPath$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_GeographicalPath").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeographicalPath
     * }
     */
    public static GroupLayout asn_DEF_Reg_GeographicalPath$layout() {
        return asn_DEF_Reg_GeographicalPath$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeographicalPath
     * }
     */
    public static MemorySegment asn_DEF_Reg_GeographicalPath() {
        return asn_DEF_Reg_GeographicalPath$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeographicalPath
     * }
     */
    public static void asn_DEF_Reg_GeographicalPath(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_GeographicalPath$constants.SEGMENT, 0L, asn_DEF_Reg_GeographicalPath$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_GeographicalPath_specs_172$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_GeographicalPath_specs_172").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeographicalPath_specs_172
     * }
     */
    public static GroupLayout asn_SPC_Reg_GeographicalPath_specs_172$layout() {
        return asn_SPC_Reg_GeographicalPath_specs_172$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeographicalPath_specs_172
     * }
     */
    public static MemorySegment asn_SPC_Reg_GeographicalPath_specs_172() {
        return asn_SPC_Reg_GeographicalPath_specs_172$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeographicalPath_specs_172
     * }
     */
    public static void asn_SPC_Reg_GeographicalPath_specs_172(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_GeographicalPath_specs_172$constants.SEGMENT, 0L, asn_SPC_Reg_GeographicalPath_specs_172$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_GeographicalPath_172$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_GeographicalPath_172").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_GeographicalPath_172$layout() {
        return asn_MBR_Reg_GeographicalPath_172$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static long[] asn_MBR_Reg_GeographicalPath_172$dimensions() {
        return asn_MBR_Reg_GeographicalPath_172$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GeographicalPath_172() {
        return asn_MBR_Reg_GeographicalPath_172$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static void asn_MBR_Reg_GeographicalPath_172(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GeographicalPath_172$constants.SEGMENT, 0L, asn_MBR_Reg_GeographicalPath_172$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GeographicalPath_172(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_GeographicalPath_172$constants.HANDLE.invokeExact(asn_MBR_Reg_GeographicalPath_172$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeographicalPath_172[2]
     * }
     */
    public static void asn_MBR_Reg_GeographicalPath_172(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GeographicalPath_172(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_GeometricProjection$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_GeometricProjection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeometricProjection
     * }
     */
    public static GroupLayout asn_DEF_Reg_GeometricProjection$layout() {
        return asn_DEF_Reg_GeometricProjection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeometricProjection
     * }
     */
    public static MemorySegment asn_DEF_Reg_GeometricProjection() {
        return asn_DEF_Reg_GeometricProjection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_GeometricProjection
     * }
     */
    public static void asn_DEF_Reg_GeometricProjection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_GeometricProjection$constants.SEGMENT, 0L, asn_DEF_Reg_GeometricProjection$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_GeometricProjection_specs_175$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_GeometricProjection_specs_175").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeometricProjection_specs_175
     * }
     */
    public static GroupLayout asn_SPC_Reg_GeometricProjection_specs_175$layout() {
        return asn_SPC_Reg_GeometricProjection_specs_175$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeometricProjection_specs_175
     * }
     */
    public static MemorySegment asn_SPC_Reg_GeometricProjection_specs_175() {
        return asn_SPC_Reg_GeometricProjection_specs_175$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_GeometricProjection_specs_175
     * }
     */
    public static void asn_SPC_Reg_GeometricProjection_specs_175(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_GeometricProjection_specs_175$constants.SEGMENT, 0L, asn_SPC_Reg_GeometricProjection_specs_175$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_GeometricProjection_175$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_GeometricProjection_175").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_GeometricProjection_175$layout() {
        return asn_MBR_Reg_GeometricProjection_175$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static long[] asn_MBR_Reg_GeometricProjection_175$dimensions() {
        return asn_MBR_Reg_GeometricProjection_175$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GeometricProjection_175() {
        return asn_MBR_Reg_GeometricProjection_175$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static void asn_MBR_Reg_GeometricProjection_175(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GeometricProjection_175$constants.SEGMENT, 0L, asn_MBR_Reg_GeometricProjection_175$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_GeometricProjection_175(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_GeometricProjection_175$constants.HANDLE.invokeExact(asn_MBR_Reg_GeometricProjection_175$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_GeometricProjection_175[2]
     * }
     */
    public static void asn_MBR_Reg_GeometricProjection_175(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_GeometricProjection_175(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_NodeAttributeSetLL$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_NodeAttributeSetLL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeAttributeSetLL
     * }
     */
    public static GroupLayout asn_DEF_Reg_NodeAttributeSetLL$layout() {
        return asn_DEF_Reg_NodeAttributeSetLL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeAttributeSetLL
     * }
     */
    public static MemorySegment asn_DEF_Reg_NodeAttributeSetLL() {
        return asn_DEF_Reg_NodeAttributeSetLL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeAttributeSetLL
     * }
     */
    public static void asn_DEF_Reg_NodeAttributeSetLL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_NodeAttributeSetLL$constants.SEGMENT, 0L, asn_DEF_Reg_NodeAttributeSetLL$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_NodeAttributeSetLL_specs_178$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_NodeAttributeSetLL_specs_178").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeAttributeSetLL_specs_178
     * }
     */
    public static GroupLayout asn_SPC_Reg_NodeAttributeSetLL_specs_178$layout() {
        return asn_SPC_Reg_NodeAttributeSetLL_specs_178$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeAttributeSetLL_specs_178
     * }
     */
    public static MemorySegment asn_SPC_Reg_NodeAttributeSetLL_specs_178() {
        return asn_SPC_Reg_NodeAttributeSetLL_specs_178$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeAttributeSetLL_specs_178
     * }
     */
    public static void asn_SPC_Reg_NodeAttributeSetLL_specs_178(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_NodeAttributeSetLL_specs_178$constants.SEGMENT, 0L, asn_SPC_Reg_NodeAttributeSetLL_specs_178$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_NodeAttributeSetLL_178$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_NodeAttributeSetLL_178").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_NodeAttributeSetLL_178$layout() {
        return asn_MBR_Reg_NodeAttributeSetLL_178$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static long[] asn_MBR_Reg_NodeAttributeSetLL_178$dimensions() {
        return asn_MBR_Reg_NodeAttributeSetLL_178$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NodeAttributeSetLL_178() {
        return asn_MBR_Reg_NodeAttributeSetLL_178$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static void asn_MBR_Reg_NodeAttributeSetLL_178(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NodeAttributeSetLL_178$constants.SEGMENT, 0L, asn_MBR_Reg_NodeAttributeSetLL_178$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NodeAttributeSetLL_178(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_NodeAttributeSetLL_178$constants.HANDLE.invokeExact(asn_MBR_Reg_NodeAttributeSetLL_178$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeAttributeSetLL_178[2]
     * }
     */
    public static void asn_MBR_Reg_NodeAttributeSetLL_178(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NodeAttributeSetLL_178(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Reg_NodeOffsetPointLL$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Reg_NodeOffsetPointLL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeOffsetPointLL
     * }
     */
    public static GroupLayout asn_DEF_Reg_NodeOffsetPointLL$layout() {
        return asn_DEF_Reg_NodeOffsetPointLL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeOffsetPointLL
     * }
     */
    public static MemorySegment asn_DEF_Reg_NodeOffsetPointLL() {
        return asn_DEF_Reg_NodeOffsetPointLL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Reg_NodeOffsetPointLL
     * }
     */
    public static void asn_DEF_Reg_NodeOffsetPointLL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Reg_NodeOffsetPointLL$constants.SEGMENT, 0L, asn_DEF_Reg_NodeOffsetPointLL$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Reg_NodeOffsetPointLL_specs_181$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Reg_NodeOffsetPointLL_specs_181").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeOffsetPointLL_specs_181
     * }
     */
    public static GroupLayout asn_SPC_Reg_NodeOffsetPointLL_specs_181$layout() {
        return asn_SPC_Reg_NodeOffsetPointLL_specs_181$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeOffsetPointLL_specs_181
     * }
     */
    public static MemorySegment asn_SPC_Reg_NodeOffsetPointLL_specs_181() {
        return asn_SPC_Reg_NodeOffsetPointLL_specs_181$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Reg_NodeOffsetPointLL_specs_181
     * }
     */
    public static void asn_SPC_Reg_NodeOffsetPointLL_specs_181(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Reg_NodeOffsetPointLL_specs_181$constants.SEGMENT, 0L, asn_SPC_Reg_NodeOffsetPointLL_specs_181$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Reg_NodeOffsetPointLL_181$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Reg_NodeOffsetPointLL_181").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static SequenceLayout asn_MBR_Reg_NodeOffsetPointLL_181$layout() {
        return asn_MBR_Reg_NodeOffsetPointLL_181$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static long[] asn_MBR_Reg_NodeOffsetPointLL_181$dimensions() {
        return asn_MBR_Reg_NodeOffsetPointLL_181$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NodeOffsetPointLL_181() {
        return asn_MBR_Reg_NodeOffsetPointLL_181$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static void asn_MBR_Reg_NodeOffsetPointLL_181(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NodeOffsetPointLL_181$constants.SEGMENT, 0L, asn_MBR_Reg_NodeOffsetPointLL_181$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static MemorySegment asn_MBR_Reg_NodeOffsetPointLL_181(long index0) {
        try {
            return (MemorySegment)asn_MBR_Reg_NodeOffsetPointLL_181$constants.HANDLE.invokeExact(asn_MBR_Reg_NodeOffsetPointLL_181$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Reg_NodeOffsetPointLL_181[2]
     * }
     */
    public static void asn_MBR_Reg_NodeOffsetPointLL_181(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Reg_NodeOffsetPointLL_181(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long Common_Angle_t
     * }
     */
    public static final OfLong Common_Angle_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Common_Angle_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Common_Angle_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Common_Angle_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Common_Angle_constr_1$layout() {
        return asn_PER_type_Common_Angle_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Common_Angle_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Common_Angle_constr_1() {
        return asn_PER_type_Common_Angle_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Common_Angle_constr_1
     * }
     */
    public static void asn_PER_type_Common_Angle_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Common_Angle_constr_1$constants.SEGMENT, 0L, asn_PER_type_Common_Angle_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Common_Angle$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Common_Angle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Common_Angle
     * }
     */
    public static GroupLayout asn_DEF_Common_Angle$layout() {
        return asn_DEF_Common_Angle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Common_Angle
     * }
     */
    public static MemorySegment asn_DEF_Common_Angle() {
        return asn_DEF_Common_Angle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Common_Angle
     * }
     */
    public static void asn_DEF_Common_Angle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Common_Angle$constants.SEGMENT, 0L, asn_DEF_Common_Angle$constants.LAYOUT.byteSize());
    }

    private static class Common_Angle_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Common_Angle_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Common_Angle_free$descriptor() {
        return Common_Angle_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Common_Angle_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Common_Angle_free$handle() {
        return Common_Angle_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Common_Angle_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Common_Angle_free$address() {
        return Common_Angle_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Common_Angle_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Common_Angle_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Common_Angle_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Common_Angle_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_print$descriptor() {
        return Common_Angle_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Common_Angle_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_print$handle() {
        return Common_Angle_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Common_Angle_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_print$address() {
        return Common_Angle_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Common_Angle_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Common_Angle_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Common_Angle_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Common_Angle_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_constraint$descriptor() {
        return Common_Angle_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Common_Angle_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_constraint$handle() {
        return Common_Angle_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Common_Angle_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_constraint$address() {
        return Common_Angle_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Common_Angle_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Common_Angle_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Common_Angle_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Common_Angle_decode_ber$descriptor() {
        return Common_Angle_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Common_Angle_decode_ber$handle() {
        return Common_Angle_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Common_Angle_decode_ber$address() {
        return Common_Angle_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Common_Angle_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Common_Angle_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_der$descriptor() {
        return Common_Angle_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_encode_der$handle() {
        return Common_Angle_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_der$address() {
        return Common_Angle_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Common_Angle_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Common_Angle_decode_xer$descriptor() {
        return Common_Angle_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Common_Angle_decode_xer$handle() {
        return Common_Angle_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Common_Angle_decode_xer$address() {
        return Common_Angle_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Common_Angle_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Common_Angle_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_xer$descriptor() {
        return Common_Angle_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_encode_xer$handle() {
        return Common_Angle_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_xer$address() {
        return Common_Angle_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Common_Angle_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_jer$descriptor() {
        return Common_Angle_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_encode_jer$handle() {
        return Common_Angle_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_jer$address() {
        return Common_Angle_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Common_Angle_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Common_Angle_decode_oer$descriptor() {
        return Common_Angle_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Common_Angle_decode_oer$handle() {
        return Common_Angle_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Common_Angle_decode_oer$address() {
        return Common_Angle_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Common_Angle_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Common_Angle_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_oer$descriptor() {
        return Common_Angle_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Common_Angle_encode_oer$handle() {
        return Common_Angle_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_oer$address() {
        return Common_Angle_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Common_Angle_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Common_Angle_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Common_Angle_decode_uper$descriptor() {
        return Common_Angle_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Common_Angle_decode_uper$handle() {
        return Common_Angle_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Common_Angle_decode_uper$address() {
        return Common_Angle_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Common_Angle_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Common_Angle_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_uper$descriptor() {
        return Common_Angle_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Common_Angle_encode_uper$handle() {
        return Common_Angle_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Common_Angle_encode_uper$address() {
        return Common_Angle_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Common_Angle_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Common_Angle_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Common_Angle_decode_aper$descriptor() {
        return Common_Angle_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Common_Angle_decode_aper$handle() {
        return Common_Angle_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Common_Angle_decode_aper$address() {
        return Common_Angle_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Common_Angle_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Common_Angle_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Common_Angle_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Common_Angle_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Common_Angle_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Common_Angle_encode_aper$descriptor() {
        return Common_Angle_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Common_Angle_encode_aper$handle() {
        return Common_Angle_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Common_Angle_encode_aper$address() {
        return Common_Angle_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Common_Angle_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Common_Angle_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Common_Angle_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Common_Angle_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int BOOLEAN_t
     * }
     */
    public static final OfInt BOOLEAN_t = MessageFrame_h.C_INT;

    private static class asn_DEF_BOOLEAN$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BOOLEAN").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BOOLEAN
     * }
     */
    public static GroupLayout asn_DEF_BOOLEAN$layout() {
        return asn_DEF_BOOLEAN$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BOOLEAN
     * }
     */
    public static MemorySegment asn_DEF_BOOLEAN() {
        return asn_DEF_BOOLEAN$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BOOLEAN
     * }
     */
    public static void asn_DEF_BOOLEAN(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BOOLEAN$constants.SEGMENT, 0L, asn_DEF_BOOLEAN$constants.LAYOUT.byteSize());
    }

    private static class asn_OP_BOOLEAN$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_operation_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_OP_BOOLEAN").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_BOOLEAN
     * }
     */
    public static GroupLayout asn_OP_BOOLEAN$layout() {
        return asn_OP_BOOLEAN$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_BOOLEAN
     * }
     */
    public static MemorySegment asn_OP_BOOLEAN() {
        return asn_OP_BOOLEAN$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_operation_t asn_OP_BOOLEAN
     * }
     */
    public static void asn_OP_BOOLEAN(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_OP_BOOLEAN$constants.SEGMENT, 0L, asn_OP_BOOLEAN$constants.LAYOUT.byteSize());
    }

    private static class BOOLEAN_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BOOLEAN_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor BOOLEAN_free$descriptor() {
        return BOOLEAN_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BOOLEAN_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle BOOLEAN_free$handle() {
        return BOOLEAN_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BOOLEAN_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment BOOLEAN_free$address() {
        return BOOLEAN_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BOOLEAN_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void BOOLEAN_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = BOOLEAN_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BOOLEAN_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_print$descriptor() {
        return BOOLEAN_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BOOLEAN_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BOOLEAN_print$handle() {
        return BOOLEAN_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BOOLEAN_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_print$address() {
        return BOOLEAN_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BOOLEAN_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int BOOLEAN_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BOOLEAN_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_compare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BOOLEAN_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_compare$descriptor() {
        return BOOLEAN_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BOOLEAN_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static MethodHandle BOOLEAN_compare$handle() {
        return BOOLEAN_compare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BOOLEAN_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static MemorySegment BOOLEAN_compare$address() {
        return BOOLEAN_compare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BOOLEAN_compare(const struct asn_TYPE_descriptor_s *, const void *, const void *)
     * }
     */
    public static int BOOLEAN_compare(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BOOLEAN_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_compare", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_copy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BOOLEAN_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_copy$descriptor() {
        return BOOLEAN_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BOOLEAN_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static MethodHandle BOOLEAN_copy$handle() {
        return BOOLEAN_copy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BOOLEAN_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static MemorySegment BOOLEAN_copy$address() {
        return BOOLEAN_copy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BOOLEAN_copy(const struct asn_TYPE_descriptor_s *, void **, const void *)
     * }
     */
    public static int BOOLEAN_copy(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = BOOLEAN_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_copy", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_ber$descriptor() {
        return BOOLEAN_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle BOOLEAN_decode_ber$handle() {
        return BOOLEAN_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BOOLEAN_decode_ber$address() {
        return BOOLEAN_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BOOLEAN_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = BOOLEAN_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_der$descriptor() {
        return BOOLEAN_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_der$handle() {
        return BOOLEAN_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_der$address() {
        return BOOLEAN_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BOOLEAN_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_xer$descriptor() {
        return BOOLEAN_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle BOOLEAN_decode_xer$handle() {
        return BOOLEAN_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_xer$address() {
        return BOOLEAN_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BOOLEAN_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_xer$descriptor() {
        return BOOLEAN_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_xer$handle() {
        return BOOLEAN_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_xer$address() {
        return BOOLEAN_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BOOLEAN_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_jer$descriptor() {
        return BOOLEAN_decode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BOOLEAN_decode_jer$handle() {
        return BOOLEAN_decode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_jer$address() {
        return BOOLEAN_decode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_jer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BOOLEAN_decode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_jer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_jer$descriptor() {
        return BOOLEAN_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_jer$handle() {
        return BOOLEAN_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_jer$address() {
        return BOOLEAN_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = BOOLEAN_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_oer$descriptor() {
        return BOOLEAN_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BOOLEAN_decode_oer$handle() {
        return BOOLEAN_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_oer$address() {
        return BOOLEAN_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BOOLEAN_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_oer$descriptor() {
        return BOOLEAN_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_oer$handle() {
        return BOOLEAN_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_oer$address() {
        return BOOLEAN_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BOOLEAN_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_uper$descriptor() {
        return BOOLEAN_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BOOLEAN_decode_uper$handle() {
        return BOOLEAN_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BOOLEAN_decode_uper$address() {
        return BOOLEAN_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BOOLEAN_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BOOLEAN_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_uper$descriptor() {
        return BOOLEAN_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_uper$handle() {
        return BOOLEAN_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_uper$address() {
        return BOOLEAN_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BOOLEAN_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_decode_aper$descriptor() {
        return BOOLEAN_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BOOLEAN_decode_aper$handle() {
        return BOOLEAN_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BOOLEAN_decode_aper$address() {
        return BOOLEAN_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BOOLEAN_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BOOLEAN_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BOOLEAN_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BOOLEAN_encode_aper$descriptor() {
        return BOOLEAN_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BOOLEAN_encode_aper$handle() {
        return BOOLEAN_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_aper$address() {
        return BOOLEAN_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BOOLEAN_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BOOLEAN_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BOOLEAN_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BOOLEAN_random_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_random_fill_result_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BOOLEAN_random_fill");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_random_fill_result_t BOOLEAN_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static FunctionDescriptor BOOLEAN_random_fill$descriptor() {
        return BOOLEAN_random_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_random_fill_result_t BOOLEAN_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MethodHandle BOOLEAN_random_fill$handle() {
        return BOOLEAN_random_fill.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_random_fill_result_t BOOLEAN_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_random_fill$address() {
        return BOOLEAN_random_fill.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_random_fill_result_t BOOLEAN_random_fill(const struct asn_TYPE_descriptor_s *, void **, const struct asn_encoding_constraints_s *, size_t)
     * }
     */
    public static MemorySegment BOOLEAN_random_fill(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = BOOLEAN_random_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BOOLEAN_random_fill", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t PivotingAllowed_t
     * }
     */
    public static final OfInt PivotingAllowed_t = MessageFrame_h.C_INT;

    private static class asn_DEF_PivotingAllowed$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PivotingAllowed").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotingAllowed
     * }
     */
    public static GroupLayout asn_DEF_PivotingAllowed$layout() {
        return asn_DEF_PivotingAllowed$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotingAllowed
     * }
     */
    public static MemorySegment asn_DEF_PivotingAllowed() {
        return asn_DEF_PivotingAllowed$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotingAllowed
     * }
     */
    public static void asn_DEF_PivotingAllowed(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PivotingAllowed$constants.SEGMENT, 0L, asn_DEF_PivotingAllowed$constants.LAYOUT.byteSize());
    }

    private static class PivotingAllowed_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void PivotingAllowed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_free$descriptor() {
        return PivotingAllowed_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void PivotingAllowed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle PivotingAllowed_free$handle() {
        return PivotingAllowed_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void PivotingAllowed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment PivotingAllowed_free$address() {
        return PivotingAllowed_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void PivotingAllowed_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void PivotingAllowed_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = PivotingAllowed_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PivotingAllowed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_print$descriptor() {
        return PivotingAllowed_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PivotingAllowed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_print$handle() {
        return PivotingAllowed_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PivotingAllowed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_print$address() {
        return PivotingAllowed_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PivotingAllowed_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int PivotingAllowed_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PivotingAllowed_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int PivotingAllowed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_constraint$descriptor() {
        return PivotingAllowed_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int PivotingAllowed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_constraint$handle() {
        return PivotingAllowed_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int PivotingAllowed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_constraint$address() {
        return PivotingAllowed_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int PivotingAllowed_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int PivotingAllowed_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PivotingAllowed_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_decode_ber$descriptor() {
        return PivotingAllowed_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle PivotingAllowed_decode_ber$handle() {
        return PivotingAllowed_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_ber$address() {
        return PivotingAllowed_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = PivotingAllowed_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_der$descriptor() {
        return PivotingAllowed_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_der$handle() {
        return PivotingAllowed_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_der$address() {
        return PivotingAllowed_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PivotingAllowed_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_decode_xer$descriptor() {
        return PivotingAllowed_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle PivotingAllowed_decode_xer$handle() {
        return PivotingAllowed_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_xer$address() {
        return PivotingAllowed_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PivotingAllowed_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_xer$descriptor() {
        return PivotingAllowed_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_xer$handle() {
        return PivotingAllowed_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_xer$address() {
        return PivotingAllowed_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = PivotingAllowed_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_jer$descriptor() {
        return PivotingAllowed_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_jer$handle() {
        return PivotingAllowed_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_jer$address() {
        return PivotingAllowed_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = PivotingAllowed_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_decode_oer$descriptor() {
        return PivotingAllowed_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle PivotingAllowed_decode_oer$handle() {
        return PivotingAllowed_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_oer$address() {
        return PivotingAllowed_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = PivotingAllowed_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_oer$descriptor() {
        return PivotingAllowed_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_oer$handle() {
        return PivotingAllowed_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_oer$address() {
        return PivotingAllowed_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PivotingAllowed_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_decode_uper$descriptor() {
        return PivotingAllowed_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PivotingAllowed_decode_uper$handle() {
        return PivotingAllowed_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_uper$address() {
        return PivotingAllowed_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PivotingAllowed_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_uper$descriptor() {
        return PivotingAllowed_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_uper$handle() {
        return PivotingAllowed_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_uper$address() {
        return PivotingAllowed_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PivotingAllowed_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_decode_aper$descriptor() {
        return PivotingAllowed_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle PivotingAllowed_decode_aper$handle() {
        return PivotingAllowed_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_aper$address() {
        return PivotingAllowed_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t PivotingAllowed_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = PivotingAllowed_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PivotingAllowed_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("PivotingAllowed_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor PivotingAllowed_encode_aper$descriptor() {
        return PivotingAllowed_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle PivotingAllowed_encode_aper$handle() {
        return PivotingAllowed_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_aper$address() {
        return PivotingAllowed_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t PivotingAllowed_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment PivotingAllowed_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = PivotingAllowed_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PivotingAllowed_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_PivotPointDescription$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_PivotPointDescription").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotPointDescription
     * }
     */
    public static GroupLayout asn_DEF_PivotPointDescription$layout() {
        return asn_DEF_PivotPointDescription$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotPointDescription
     * }
     */
    public static MemorySegment asn_DEF_PivotPointDescription() {
        return asn_DEF_PivotPointDescription$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_PivotPointDescription
     * }
     */
    public static void asn_DEF_PivotPointDescription(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_PivotPointDescription$constants.SEGMENT, 0L, asn_DEF_PivotPointDescription$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_PivotPointDescription_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_PivotPointDescription_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PivotPointDescription_specs_1
     * }
     */
    public static GroupLayout asn_SPC_PivotPointDescription_specs_1$layout() {
        return asn_SPC_PivotPointDescription_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PivotPointDescription_specs_1
     * }
     */
    public static MemorySegment asn_SPC_PivotPointDescription_specs_1() {
        return asn_SPC_PivotPointDescription_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_PivotPointDescription_specs_1
     * }
     */
    public static void asn_SPC_PivotPointDescription_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_PivotPointDescription_specs_1$constants.SEGMENT, 0L, asn_SPC_PivotPointDescription_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_PivotPointDescription_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_PivotPointDescription_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_PivotPointDescription_1$layout() {
        return asn_MBR_PivotPointDescription_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static long[] asn_MBR_PivotPointDescription_1$dimensions() {
        return asn_MBR_PivotPointDescription_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static MemorySegment asn_MBR_PivotPointDescription_1() {
        return asn_MBR_PivotPointDescription_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static void asn_MBR_PivotPointDescription_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PivotPointDescription_1$constants.SEGMENT, 0L, asn_MBR_PivotPointDescription_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static MemorySegment asn_MBR_PivotPointDescription_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_PivotPointDescription_1$constants.HANDLE.invokeExact(asn_MBR_PivotPointDescription_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_PivotPointDescription_1[3]
     * }
     */
    public static void asn_MBR_PivotPointDescription_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_PivotPointDescription_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TrailerUnitDescriptionList$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerUnitDescriptionList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescriptionList
     * }
     */
    public static GroupLayout asn_DEF_TrailerUnitDescriptionList$layout() {
        return asn_DEF_TrailerUnitDescriptionList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescriptionList
     * }
     */
    public static MemorySegment asn_DEF_TrailerUnitDescriptionList() {
        return asn_DEF_TrailerUnitDescriptionList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescriptionList
     * }
     */
    public static void asn_DEF_TrailerUnitDescriptionList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerUnitDescriptionList$constants.SEGMENT, 0L, asn_DEF_TrailerUnitDescriptionList$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrailerUnitDescriptionList_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrailerUnitDescriptionList_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerUnitDescriptionList_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrailerUnitDescriptionList_specs_1$layout() {
        return asn_SPC_TrailerUnitDescriptionList_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerUnitDescriptionList_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrailerUnitDescriptionList_specs_1() {
        return asn_SPC_TrailerUnitDescriptionList_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerUnitDescriptionList_specs_1
     * }
     */
    public static void asn_SPC_TrailerUnitDescriptionList_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrailerUnitDescriptionList_specs_1$constants.SEGMENT, 0L, asn_SPC_TrailerUnitDescriptionList_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrailerUnitDescriptionList_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrailerUnitDescriptionList_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_TrailerUnitDescriptionList_1$layout() {
        return asn_MBR_TrailerUnitDescriptionList_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static long[] asn_MBR_TrailerUnitDescriptionList_1$dimensions() {
        return asn_MBR_TrailerUnitDescriptionList_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrailerUnitDescriptionList_1() {
        return asn_MBR_TrailerUnitDescriptionList_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static void asn_MBR_TrailerUnitDescriptionList_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerUnitDescriptionList_1$constants.SEGMENT, 0L, asn_MBR_TrailerUnitDescriptionList_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrailerUnitDescriptionList_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrailerUnitDescriptionList_1$constants.HANDLE.invokeExact(asn_MBR_TrailerUnitDescriptionList_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescriptionList_1[1]
     * }
     */
    public static void asn_MBR_TrailerUnitDescriptionList_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerUnitDescriptionList_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TrailerUnitDescriptionList_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrailerUnitDescriptionList_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerUnitDescriptionList_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrailerUnitDescriptionList_constr_1$layout() {
        return asn_PER_type_TrailerUnitDescriptionList_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerUnitDescriptionList_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrailerUnitDescriptionList_constr_1() {
        return asn_PER_type_TrailerUnitDescriptionList_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerUnitDescriptionList_constr_1
     * }
     */
    public static void asn_PER_type_TrailerUnitDescriptionList_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrailerUnitDescriptionList_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrailerUnitDescriptionList_constr_1$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef BOOLEAN_t IsDolly_t
     * }
     */
    public static final OfInt IsDolly_t = MessageFrame_h.C_INT;

    private static class asn_DEF_IsDolly$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_IsDolly").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IsDolly
     * }
     */
    public static GroupLayout asn_DEF_IsDolly$layout() {
        return asn_DEF_IsDolly$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IsDolly
     * }
     */
    public static MemorySegment asn_DEF_IsDolly() {
        return asn_DEF_IsDolly$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_IsDolly
     * }
     */
    public static void asn_DEF_IsDolly(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_IsDolly$constants.SEGMENT, 0L, asn_DEF_IsDolly$constants.LAYOUT.byteSize());
    }

    private static class IsDolly_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IsDolly_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor IsDolly_free$descriptor() {
        return IsDolly_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IsDolly_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle IsDolly_free$handle() {
        return IsDolly_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IsDolly_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment IsDolly_free$address() {
        return IsDolly_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IsDolly_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void IsDolly_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = IsDolly_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int IsDolly_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_print$descriptor() {
        return IsDolly_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int IsDolly_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_print$handle() {
        return IsDolly_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int IsDolly_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_print$address() {
        return IsDolly_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int IsDolly_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int IsDolly_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = IsDolly_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int IsDolly_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_constraint$descriptor() {
        return IsDolly_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int IsDolly_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_constraint$handle() {
        return IsDolly_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int IsDolly_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_constraint$address() {
        return IsDolly_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int IsDolly_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int IsDolly_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = IsDolly_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor IsDolly_decode_ber$descriptor() {
        return IsDolly_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle IsDolly_decode_ber$handle() {
        return IsDolly_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment IsDolly_decode_ber$address() {
        return IsDolly_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment IsDolly_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = IsDolly_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_der$descriptor() {
        return IsDolly_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_encode_der$handle() {
        return IsDolly_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_der$address() {
        return IsDolly_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = IsDolly_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor IsDolly_decode_xer$descriptor() {
        return IsDolly_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle IsDolly_decode_xer$handle() {
        return IsDolly_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment IsDolly_decode_xer$address() {
        return IsDolly_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment IsDolly_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = IsDolly_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_xer$descriptor() {
        return IsDolly_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_encode_xer$handle() {
        return IsDolly_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_xer$address() {
        return IsDolly_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = IsDolly_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_jer$descriptor() {
        return IsDolly_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_encode_jer$handle() {
        return IsDolly_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_jer$address() {
        return IsDolly_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = IsDolly_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor IsDolly_decode_oer$descriptor() {
        return IsDolly_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle IsDolly_decode_oer$handle() {
        return IsDolly_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment IsDolly_decode_oer$address() {
        return IsDolly_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment IsDolly_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = IsDolly_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_oer$descriptor() {
        return IsDolly_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle IsDolly_encode_oer$handle() {
        return IsDolly_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_oer$address() {
        return IsDolly_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment IsDolly_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = IsDolly_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor IsDolly_decode_uper$descriptor() {
        return IsDolly_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle IsDolly_decode_uper$handle() {
        return IsDolly_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment IsDolly_decode_uper$address() {
        return IsDolly_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment IsDolly_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = IsDolly_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_uper$descriptor() {
        return IsDolly_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle IsDolly_encode_uper$handle() {
        return IsDolly_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment IsDolly_encode_uper$address() {
        return IsDolly_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment IsDolly_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = IsDolly_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor IsDolly_decode_aper$descriptor() {
        return IsDolly_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle IsDolly_decode_aper$handle() {
        return IsDolly_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment IsDolly_decode_aper$address() {
        return IsDolly_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t IsDolly_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment IsDolly_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = IsDolly_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsDolly_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("IsDolly_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor IsDolly_encode_aper$descriptor() {
        return IsDolly_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle IsDolly_encode_aper$handle() {
        return IsDolly_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment IsDolly_encode_aper$address() {
        return IsDolly_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t IsDolly_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment IsDolly_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = IsDolly_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsDolly_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long VehicleHeight_t
     * }
     */
    public static final OfLong VehicleHeight_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_VehicleHeight_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VehicleHeight_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleHeight_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VehicleHeight_constr_1$layout() {
        return asn_PER_type_VehicleHeight_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleHeight_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VehicleHeight_constr_1() {
        return asn_PER_type_VehicleHeight_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleHeight_constr_1
     * }
     */
    public static void asn_PER_type_VehicleHeight_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VehicleHeight_constr_1$constants.SEGMENT, 0L, asn_PER_type_VehicleHeight_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VehicleHeight$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleHeight").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleHeight
     * }
     */
    public static GroupLayout asn_DEF_VehicleHeight$layout() {
        return asn_DEF_VehicleHeight$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleHeight
     * }
     */
    public static MemorySegment asn_DEF_VehicleHeight() {
        return asn_DEF_VehicleHeight$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleHeight
     * }
     */
    public static void asn_DEF_VehicleHeight(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleHeight$constants.SEGMENT, 0L, asn_DEF_VehicleHeight$constants.LAYOUT.byteSize());
    }

    private static class VehicleHeight_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VehicleHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor VehicleHeight_free$descriptor() {
        return VehicleHeight_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VehicleHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle VehicleHeight_free$handle() {
        return VehicleHeight_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VehicleHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment VehicleHeight_free$address() {
        return VehicleHeight_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VehicleHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void VehicleHeight_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = VehicleHeight_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_print$descriptor() {
        return VehicleHeight_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_print$handle() {
        return VehicleHeight_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_print$address() {
        return VehicleHeight_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int VehicleHeight_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleHeight_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_constraint$descriptor() {
        return VehicleHeight_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_constraint$handle() {
        return VehicleHeight_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_constraint$address() {
        return VehicleHeight_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int VehicleHeight_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleHeight_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor VehicleHeight_decode_ber$descriptor() {
        return VehicleHeight_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle VehicleHeight_decode_ber$handle() {
        return VehicleHeight_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleHeight_decode_ber$address() {
        return VehicleHeight_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleHeight_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = VehicleHeight_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_der$descriptor() {
        return VehicleHeight_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_der$handle() {
        return VehicleHeight_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_der$address() {
        return VehicleHeight_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleHeight_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleHeight_decode_xer$descriptor() {
        return VehicleHeight_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleHeight_decode_xer$handle() {
        return VehicleHeight_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleHeight_decode_xer$address() {
        return VehicleHeight_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleHeight_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleHeight_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_xer$descriptor() {
        return VehicleHeight_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_xer$handle() {
        return VehicleHeight_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_xer$address() {
        return VehicleHeight_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleHeight_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_jer$descriptor() {
        return VehicleHeight_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_jer$handle() {
        return VehicleHeight_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_jer$address() {
        return VehicleHeight_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = VehicleHeight_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleHeight_decode_oer$descriptor() {
        return VehicleHeight_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleHeight_decode_oer$handle() {
        return VehicleHeight_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleHeight_decode_oer$address() {
        return VehicleHeight_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleHeight_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleHeight_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_oer$descriptor() {
        return VehicleHeight_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_oer$handle() {
        return VehicleHeight_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_oer$address() {
        return VehicleHeight_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleHeight_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_decode_uper$descriptor() {
        return VehicleHeight_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleHeight_decode_uper$handle() {
        return VehicleHeight_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleHeight_decode_uper$address() {
        return VehicleHeight_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleHeight_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleHeight_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_uper$descriptor() {
        return VehicleHeight_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_uper$handle() {
        return VehicleHeight_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_uper$address() {
        return VehicleHeight_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleHeight_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_decode_aper$descriptor() {
        return VehicleHeight_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleHeight_decode_aper$handle() {
        return VehicleHeight_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleHeight_decode_aper$address() {
        return VehicleHeight_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleHeight_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleHeight_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleHeight_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleHeight_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleHeight_encode_aper$descriptor() {
        return VehicleHeight_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleHeight_encode_aper$handle() {
        return VehicleHeight_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_aper$address() {
        return VehicleHeight_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleHeight_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleHeight_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleHeight_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TrailerMass_t
     * }
     */
    public static final OfLong TrailerMass_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrailerMass_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrailerMass_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerMass_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrailerMass_constr_1$layout() {
        return asn_PER_type_TrailerMass_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerMass_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrailerMass_constr_1() {
        return asn_PER_type_TrailerMass_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerMass_constr_1
     * }
     */
    public static void asn_PER_type_TrailerMass_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrailerMass_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrailerMass_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrailerMass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerMass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerMass
     * }
     */
    public static GroupLayout asn_DEF_TrailerMass$layout() {
        return asn_DEF_TrailerMass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerMass
     * }
     */
    public static MemorySegment asn_DEF_TrailerMass() {
        return asn_DEF_TrailerMass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerMass
     * }
     */
    public static void asn_DEF_TrailerMass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerMass$constants.SEGMENT, 0L, asn_DEF_TrailerMass$constants.LAYOUT.byteSize());
    }

    private static class TrailerMass_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrailerMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrailerMass_free$descriptor() {
        return TrailerMass_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrailerMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrailerMass_free$handle() {
        return TrailerMass_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrailerMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrailerMass_free$address() {
        return TrailerMass_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrailerMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrailerMass_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrailerMass_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrailerMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_print$descriptor() {
        return TrailerMass_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrailerMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_print$handle() {
        return TrailerMass_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrailerMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_print$address() {
        return TrailerMass_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrailerMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrailerMass_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerMass_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrailerMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_constraint$descriptor() {
        return TrailerMass_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrailerMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_constraint$handle() {
        return TrailerMass_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrailerMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_constraint$address() {
        return TrailerMass_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrailerMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrailerMass_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerMass_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrailerMass_decode_ber$descriptor() {
        return TrailerMass_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrailerMass_decode_ber$handle() {
        return TrailerMass_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrailerMass_decode_ber$address() {
        return TrailerMass_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrailerMass_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrailerMass_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_der$descriptor() {
        return TrailerMass_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_encode_der$handle() {
        return TrailerMass_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_der$address() {
        return TrailerMass_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrailerMass_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrailerMass_decode_xer$descriptor() {
        return TrailerMass_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrailerMass_decode_xer$handle() {
        return TrailerMass_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerMass_decode_xer$address() {
        return TrailerMass_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerMass_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrailerMass_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_xer$descriptor() {
        return TrailerMass_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_encode_xer$handle() {
        return TrailerMass_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_xer$address() {
        return TrailerMass_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrailerMass_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_jer$descriptor() {
        return TrailerMass_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_encode_jer$handle() {
        return TrailerMass_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_jer$address() {
        return TrailerMass_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrailerMass_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrailerMass_decode_oer$descriptor() {
        return TrailerMass_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrailerMass_decode_oer$handle() {
        return TrailerMass_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerMass_decode_oer$address() {
        return TrailerMass_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerMass_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrailerMass_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_oer$descriptor() {
        return TrailerMass_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerMass_encode_oer$handle() {
        return TrailerMass_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_oer$address() {
        return TrailerMass_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerMass_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerMass_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrailerMass_decode_uper$descriptor() {
        return TrailerMass_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrailerMass_decode_uper$handle() {
        return TrailerMass_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerMass_decode_uper$address() {
        return TrailerMass_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerMass_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerMass_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_uper$descriptor() {
        return TrailerMass_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrailerMass_encode_uper$handle() {
        return TrailerMass_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerMass_encode_uper$address() {
        return TrailerMass_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerMass_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerMass_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrailerMass_decode_aper$descriptor() {
        return TrailerMass_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrailerMass_decode_aper$handle() {
        return TrailerMass_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerMass_decode_aper$address() {
        return TrailerMass_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerMass_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerMass_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerMass_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerMass_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrailerMass_encode_aper$descriptor() {
        return TrailerMass_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrailerMass_encode_aper$handle() {
        return TrailerMass_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerMass_encode_aper$address() {
        return TrailerMass_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerMass_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerMass_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerMass_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long VertOffset_B07_t
     * }
     */
    public static final OfLong VertOffset_B07_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_VertOffset_B07_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VertOffset_B07_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VertOffset_B07_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VertOffset_B07_constr_1$layout() {
        return asn_PER_type_VertOffset_B07_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VertOffset_B07_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VertOffset_B07_constr_1() {
        return asn_PER_type_VertOffset_B07_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VertOffset_B07_constr_1
     * }
     */
    public static void asn_PER_type_VertOffset_B07_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VertOffset_B07_constr_1$constants.SEGMENT, 0L, asn_PER_type_VertOffset_B07_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VertOffset_B07$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VertOffset_B07").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VertOffset_B07
     * }
     */
    public static GroupLayout asn_DEF_VertOffset_B07$layout() {
        return asn_DEF_VertOffset_B07$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VertOffset_B07
     * }
     */
    public static MemorySegment asn_DEF_VertOffset_B07() {
        return asn_DEF_VertOffset_B07$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VertOffset_B07
     * }
     */
    public static void asn_DEF_VertOffset_B07(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VertOffset_B07$constants.SEGMENT, 0L, asn_DEF_VertOffset_B07$constants.LAYOUT.byteSize());
    }

    private static class VertOffset_B07_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VertOffset_B07_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_free$descriptor() {
        return VertOffset_B07_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VertOffset_B07_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle VertOffset_B07_free$handle() {
        return VertOffset_B07_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VertOffset_B07_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment VertOffset_B07_free$address() {
        return VertOffset_B07_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VertOffset_B07_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void VertOffset_B07_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = VertOffset_B07_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VertOffset_B07_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_print$descriptor() {
        return VertOffset_B07_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VertOffset_B07_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_print$handle() {
        return VertOffset_B07_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VertOffset_B07_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_print$address() {
        return VertOffset_B07_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VertOffset_B07_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int VertOffset_B07_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VertOffset_B07_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VertOffset_B07_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_constraint$descriptor() {
        return VertOffset_B07_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VertOffset_B07_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_constraint$handle() {
        return VertOffset_B07_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VertOffset_B07_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_constraint$address() {
        return VertOffset_B07_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VertOffset_B07_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int VertOffset_B07_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VertOffset_B07_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_decode_ber$descriptor() {
        return VertOffset_B07_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle VertOffset_B07_decode_ber$handle() {
        return VertOffset_B07_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_ber$address() {
        return VertOffset_B07_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = VertOffset_B07_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_der$descriptor() {
        return VertOffset_B07_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_der$handle() {
        return VertOffset_B07_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_der$address() {
        return VertOffset_B07_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VertOffset_B07_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_decode_xer$descriptor() {
        return VertOffset_B07_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle VertOffset_B07_decode_xer$handle() {
        return VertOffset_B07_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_xer$address() {
        return VertOffset_B07_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VertOffset_B07_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_xer$descriptor() {
        return VertOffset_B07_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_xer$handle() {
        return VertOffset_B07_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_xer$address() {
        return VertOffset_B07_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VertOffset_B07_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_jer$descriptor() {
        return VertOffset_B07_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_jer$handle() {
        return VertOffset_B07_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_jer$address() {
        return VertOffset_B07_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = VertOffset_B07_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_decode_oer$descriptor() {
        return VertOffset_B07_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle VertOffset_B07_decode_oer$handle() {
        return VertOffset_B07_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_oer$address() {
        return VertOffset_B07_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VertOffset_B07_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_oer$descriptor() {
        return VertOffset_B07_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_oer$handle() {
        return VertOffset_B07_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_oer$address() {
        return VertOffset_B07_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VertOffset_B07_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_decode_uper$descriptor() {
        return VertOffset_B07_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VertOffset_B07_decode_uper$handle() {
        return VertOffset_B07_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_uper$address() {
        return VertOffset_B07_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VertOffset_B07_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_uper$descriptor() {
        return VertOffset_B07_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_uper$handle() {
        return VertOffset_B07_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_uper$address() {
        return VertOffset_B07_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VertOffset_B07_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_decode_aper$descriptor() {
        return VertOffset_B07_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VertOffset_B07_decode_aper$handle() {
        return VertOffset_B07_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_aper$address() {
        return VertOffset_B07_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VertOffset_B07_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VertOffset_B07_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VertOffset_B07_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VertOffset_B07_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VertOffset_B07_encode_aper$descriptor() {
        return VertOffset_B07_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VertOffset_B07_encode_aper$handle() {
        return VertOffset_B07_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_aper$address() {
        return VertOffset_B07_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VertOffset_B07_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VertOffset_B07_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VertOffset_B07_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VertOffset_B07_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_TrailerUnitDescription$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerUnitDescription").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescription
     * }
     */
    public static GroupLayout asn_DEF_TrailerUnitDescription$layout() {
        return asn_DEF_TrailerUnitDescription$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescription
     * }
     */
    public static MemorySegment asn_DEF_TrailerUnitDescription() {
        return asn_DEF_TrailerUnitDescription$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerUnitDescription
     * }
     */
    public static void asn_DEF_TrailerUnitDescription(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerUnitDescription$constants.SEGMENT, 0L, asn_DEF_TrailerUnitDescription$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrailerUnitDescription_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrailerUnitDescription_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerUnitDescription_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrailerUnitDescription_specs_1$layout() {
        return asn_SPC_TrailerUnitDescription_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerUnitDescription_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrailerUnitDescription_specs_1() {
        return asn_SPC_TrailerUnitDescription_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerUnitDescription_specs_1
     * }
     */
    public static void asn_SPC_TrailerUnitDescription_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrailerUnitDescription_specs_1$constants.SEGMENT, 0L, asn_SPC_TrailerUnitDescription_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrailerUnitDescription_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(13, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrailerUnitDescription_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 13 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static SequenceLayout asn_MBR_TrailerUnitDescription_1$layout() {
        return asn_MBR_TrailerUnitDescription_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static long[] asn_MBR_TrailerUnitDescription_1$dimensions() {
        return asn_MBR_TrailerUnitDescription_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static MemorySegment asn_MBR_TrailerUnitDescription_1() {
        return asn_MBR_TrailerUnitDescription_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static void asn_MBR_TrailerUnitDescription_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerUnitDescription_1$constants.SEGMENT, 0L, asn_MBR_TrailerUnitDescription_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static MemorySegment asn_MBR_TrailerUnitDescription_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrailerUnitDescription_1$constants.HANDLE.invokeExact(asn_MBR_TrailerUnitDescription_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerUnitDescription_1[13]
     * }
     */
    public static void asn_MBR_TrailerUnitDescription_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerUnitDescription_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long BumperHeight_t
     * }
     */
    public static final OfLong BumperHeight_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_BumperHeight_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_BumperHeight_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BumperHeight_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_BumperHeight_constr_1$layout() {
        return asn_PER_type_BumperHeight_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BumperHeight_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_BumperHeight_constr_1() {
        return asn_PER_type_BumperHeight_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BumperHeight_constr_1
     * }
     */
    public static void asn_PER_type_BumperHeight_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_BumperHeight_constr_1$constants.SEGMENT, 0L, asn_PER_type_BumperHeight_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_BumperHeight$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BumperHeight").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeight
     * }
     */
    public static GroupLayout asn_DEF_BumperHeight$layout() {
        return asn_DEF_BumperHeight$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeight
     * }
     */
    public static MemorySegment asn_DEF_BumperHeight() {
        return asn_DEF_BumperHeight$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeight
     * }
     */
    public static void asn_DEF_BumperHeight(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BumperHeight$constants.SEGMENT, 0L, asn_DEF_BumperHeight$constants.LAYOUT.byteSize());
    }

    private static class BumperHeight_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BumperHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor BumperHeight_free$descriptor() {
        return BumperHeight_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BumperHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle BumperHeight_free$handle() {
        return BumperHeight_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BumperHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment BumperHeight_free$address() {
        return BumperHeight_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BumperHeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void BumperHeight_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = BumperHeight_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BumperHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_print$descriptor() {
        return BumperHeight_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BumperHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_print$handle() {
        return BumperHeight_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BumperHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_print$address() {
        return BumperHeight_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BumperHeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int BumperHeight_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BumperHeight_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BumperHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_constraint$descriptor() {
        return BumperHeight_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BumperHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_constraint$handle() {
        return BumperHeight_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BumperHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_constraint$address() {
        return BumperHeight_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BumperHeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int BumperHeight_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BumperHeight_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor BumperHeight_decode_ber$descriptor() {
        return BumperHeight_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle BumperHeight_decode_ber$handle() {
        return BumperHeight_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BumperHeight_decode_ber$address() {
        return BumperHeight_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BumperHeight_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = BumperHeight_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_der$descriptor() {
        return BumperHeight_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_encode_der$handle() {
        return BumperHeight_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_der$address() {
        return BumperHeight_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BumperHeight_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BumperHeight_decode_xer$descriptor() {
        return BumperHeight_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle BumperHeight_decode_xer$handle() {
        return BumperHeight_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BumperHeight_decode_xer$address() {
        return BumperHeight_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BumperHeight_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BumperHeight_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_xer$descriptor() {
        return BumperHeight_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_encode_xer$handle() {
        return BumperHeight_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_xer$address() {
        return BumperHeight_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BumperHeight_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_jer$descriptor() {
        return BumperHeight_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_encode_jer$handle() {
        return BumperHeight_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_jer$address() {
        return BumperHeight_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = BumperHeight_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BumperHeight_decode_oer$descriptor() {
        return BumperHeight_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BumperHeight_decode_oer$handle() {
        return BumperHeight_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BumperHeight_decode_oer$address() {
        return BumperHeight_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BumperHeight_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BumperHeight_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_oer$descriptor() {
        return BumperHeight_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BumperHeight_encode_oer$handle() {
        return BumperHeight_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_oer$address() {
        return BumperHeight_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BumperHeight_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BumperHeight_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BumperHeight_decode_uper$descriptor() {
        return BumperHeight_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BumperHeight_decode_uper$handle() {
        return BumperHeight_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BumperHeight_decode_uper$address() {
        return BumperHeight_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BumperHeight_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BumperHeight_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_uper$descriptor() {
        return BumperHeight_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BumperHeight_encode_uper$handle() {
        return BumperHeight_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BumperHeight_encode_uper$address() {
        return BumperHeight_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BumperHeight_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BumperHeight_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BumperHeight_decode_aper$descriptor() {
        return BumperHeight_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BumperHeight_decode_aper$handle() {
        return BumperHeight_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BumperHeight_decode_aper$address() {
        return BumperHeight_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BumperHeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BumperHeight_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BumperHeight_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BumperHeight_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BumperHeight_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BumperHeight_encode_aper$descriptor() {
        return BumperHeight_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BumperHeight_encode_aper$handle() {
        return BumperHeight_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BumperHeight_encode_aper$address() {
        return BumperHeight_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BumperHeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BumperHeight_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BumperHeight_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BumperHeight_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_BumperHeights$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BumperHeights").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeights
     * }
     */
    public static GroupLayout asn_DEF_BumperHeights$layout() {
        return asn_DEF_BumperHeights$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeights
     * }
     */
    public static MemorySegment asn_DEF_BumperHeights() {
        return asn_DEF_BumperHeights$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BumperHeights
     * }
     */
    public static void asn_DEF_BumperHeights(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BumperHeights$constants.SEGMENT, 0L, asn_DEF_BumperHeights$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_BumperHeights_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_BumperHeights_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_BumperHeights_specs_1
     * }
     */
    public static GroupLayout asn_SPC_BumperHeights_specs_1$layout() {
        return asn_SPC_BumperHeights_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_BumperHeights_specs_1
     * }
     */
    public static MemorySegment asn_SPC_BumperHeights_specs_1() {
        return asn_SPC_BumperHeights_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_BumperHeights_specs_1
     * }
     */
    public static void asn_SPC_BumperHeights_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_BumperHeights_specs_1$constants.SEGMENT, 0L, asn_SPC_BumperHeights_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_BumperHeights_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(2, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_BumperHeights_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 2 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static SequenceLayout asn_MBR_BumperHeights_1$layout() {
        return asn_MBR_BumperHeights_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static long[] asn_MBR_BumperHeights_1$dimensions() {
        return asn_MBR_BumperHeights_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static MemorySegment asn_MBR_BumperHeights_1() {
        return asn_MBR_BumperHeights_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static void asn_MBR_BumperHeights_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_BumperHeights_1$constants.SEGMENT, 0L, asn_MBR_BumperHeights_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static MemorySegment asn_MBR_BumperHeights_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_BumperHeights_1$constants.HANDLE.invokeExact(asn_MBR_BumperHeights_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_BumperHeights_1[2]
     * }
     */
    public static void asn_MBR_BumperHeights_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_BumperHeights_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TrailerHistoryPointList$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerHistoryPointList").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPointList
     * }
     */
    public static GroupLayout asn_DEF_TrailerHistoryPointList$layout() {
        return asn_DEF_TrailerHistoryPointList$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPointList
     * }
     */
    public static MemorySegment asn_DEF_TrailerHistoryPointList() {
        return asn_DEF_TrailerHistoryPointList$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPointList
     * }
     */
    public static void asn_DEF_TrailerHistoryPointList(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerHistoryPointList$constants.SEGMENT, 0L, asn_DEF_TrailerHistoryPointList$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrailerHistoryPointList_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SET_OF_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrailerHistoryPointList_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerHistoryPointList_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrailerHistoryPointList_specs_1$layout() {
        return asn_SPC_TrailerHistoryPointList_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerHistoryPointList_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrailerHistoryPointList_specs_1() {
        return asn_SPC_TrailerHistoryPointList_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SET_OF_specifics_t asn_SPC_TrailerHistoryPointList_specs_1
     * }
     */
    public static void asn_SPC_TrailerHistoryPointList_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrailerHistoryPointList_specs_1$constants.SEGMENT, 0L, asn_SPC_TrailerHistoryPointList_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrailerHistoryPointList_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(1, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrailerHistoryPointList_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 1 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static SequenceLayout asn_MBR_TrailerHistoryPointList_1$layout() {
        return asn_MBR_TrailerHistoryPointList_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static long[] asn_MBR_TrailerHistoryPointList_1$dimensions() {
        return asn_MBR_TrailerHistoryPointList_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrailerHistoryPointList_1() {
        return asn_MBR_TrailerHistoryPointList_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static void asn_MBR_TrailerHistoryPointList_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerHistoryPointList_1$constants.SEGMENT, 0L, asn_MBR_TrailerHistoryPointList_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static MemorySegment asn_MBR_TrailerHistoryPointList_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrailerHistoryPointList_1$constants.HANDLE.invokeExact(asn_MBR_TrailerHistoryPointList_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPointList_1[1]
     * }
     */
    public static void asn_MBR_TrailerHistoryPointList_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerHistoryPointList_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_PER_type_TrailerHistoryPointList_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrailerHistoryPointList_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerHistoryPointList_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrailerHistoryPointList_constr_1$layout() {
        return asn_PER_type_TrailerHistoryPointList_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerHistoryPointList_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrailerHistoryPointList_constr_1() {
        return asn_PER_type_TrailerHistoryPointList_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerHistoryPointList_constr_1
     * }
     */
    public static void asn_PER_type_TrailerHistoryPointList_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrailerHistoryPointList_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrailerHistoryPointList_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrailerHistoryPoint$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerHistoryPoint").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPoint
     * }
     */
    public static GroupLayout asn_DEF_TrailerHistoryPoint$layout() {
        return asn_DEF_TrailerHistoryPoint$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPoint
     * }
     */
    public static MemorySegment asn_DEF_TrailerHistoryPoint() {
        return asn_DEF_TrailerHistoryPoint$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerHistoryPoint
     * }
     */
    public static void asn_DEF_TrailerHistoryPoint(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerHistoryPoint$constants.SEGMENT, 0L, asn_DEF_TrailerHistoryPoint$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrailerHistoryPoint_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrailerHistoryPoint_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerHistoryPoint_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrailerHistoryPoint_specs_1$layout() {
        return asn_SPC_TrailerHistoryPoint_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerHistoryPoint_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrailerHistoryPoint_specs_1() {
        return asn_SPC_TrailerHistoryPoint_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerHistoryPoint_specs_1
     * }
     */
    public static void asn_SPC_TrailerHistoryPoint_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrailerHistoryPoint_specs_1$constants.SEGMENT, 0L, asn_SPC_TrailerHistoryPoint_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrailerHistoryPoint_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(5, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrailerHistoryPoint_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 5 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static SequenceLayout asn_MBR_TrailerHistoryPoint_1$layout() {
        return asn_MBR_TrailerHistoryPoint_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static long[] asn_MBR_TrailerHistoryPoint_1$dimensions() {
        return asn_MBR_TrailerHistoryPoint_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static MemorySegment asn_MBR_TrailerHistoryPoint_1() {
        return asn_MBR_TrailerHistoryPoint_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static void asn_MBR_TrailerHistoryPoint_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerHistoryPoint_1$constants.SEGMENT, 0L, asn_MBR_TrailerHistoryPoint_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static MemorySegment asn_MBR_TrailerHistoryPoint_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrailerHistoryPoint_1$constants.HANDLE.invokeExact(asn_MBR_TrailerHistoryPoint_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerHistoryPoint_1[5]
     * }
     */
    public static void asn_MBR_TrailerHistoryPoint_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerHistoryPoint_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_TrailerData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerData
     * }
     */
    public static GroupLayout asn_DEF_TrailerData$layout() {
        return asn_DEF_TrailerData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerData
     * }
     */
    public static MemorySegment asn_DEF_TrailerData() {
        return asn_DEF_TrailerData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerData
     * }
     */
    public static void asn_DEF_TrailerData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerData$constants.SEGMENT, 0L, asn_DEF_TrailerData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_TrailerData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_TrailerData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_TrailerData_specs_1$layout() {
        return asn_SPC_TrailerData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_TrailerData_specs_1() {
        return asn_SPC_TrailerData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_TrailerData_specs_1
     * }
     */
    public static void asn_SPC_TrailerData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_TrailerData_specs_1$constants.SEGMENT, 0L, asn_SPC_TrailerData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_TrailerData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_TrailerData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_TrailerData_1$layout() {
        return asn_MBR_TrailerData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static long[] asn_MBR_TrailerData_1$dimensions() {
        return asn_MBR_TrailerData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TrailerData_1() {
        return asn_MBR_TrailerData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static void asn_MBR_TrailerData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerData_1$constants.SEGMENT, 0L, asn_MBR_TrailerData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static MemorySegment asn_MBR_TrailerData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_TrailerData_1$constants.HANDLE.invokeExact(asn_MBR_TrailerData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_TrailerData_1[3]
     * }
     */
    public static void asn_MBR_TrailerData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_TrailerData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long BasicVehicleClass_t
     * }
     */
    public static final OfLong BasicVehicleClass_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_BasicVehicleClass_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_BasicVehicleClass_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleClass_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_BasicVehicleClass_constr_1$layout() {
        return asn_PER_type_BasicVehicleClass_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleClass_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_BasicVehicleClass_constr_1() {
        return asn_PER_type_BasicVehicleClass_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleClass_constr_1
     * }
     */
    public static void asn_PER_type_BasicVehicleClass_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_BasicVehicleClass_constr_1$constants.SEGMENT, 0L, asn_PER_type_BasicVehicleClass_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_BasicVehicleClass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BasicVehicleClass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleClass
     * }
     */
    public static GroupLayout asn_DEF_BasicVehicleClass$layout() {
        return asn_DEF_BasicVehicleClass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleClass
     * }
     */
    public static MemorySegment asn_DEF_BasicVehicleClass() {
        return asn_DEF_BasicVehicleClass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleClass
     * }
     */
    public static void asn_DEF_BasicVehicleClass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BasicVehicleClass$constants.SEGMENT, 0L, asn_DEF_BasicVehicleClass$constants.LAYOUT.byteSize());
    }

    private static class BasicVehicleClass_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BasicVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_free$descriptor() {
        return BasicVehicleClass_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BasicVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle BasicVehicleClass_free$handle() {
        return BasicVehicleClass_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BasicVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment BasicVehicleClass_free$address() {
        return BasicVehicleClass_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BasicVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void BasicVehicleClass_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = BasicVehicleClass_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BasicVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_print$descriptor() {
        return BasicVehicleClass_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BasicVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_print$handle() {
        return BasicVehicleClass_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BasicVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_print$address() {
        return BasicVehicleClass_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BasicVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int BasicVehicleClass_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleClass_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BasicVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_constraint$descriptor() {
        return BasicVehicleClass_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BasicVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_constraint$handle() {
        return BasicVehicleClass_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BasicVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_constraint$address() {
        return BasicVehicleClass_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BasicVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int BasicVehicleClass_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleClass_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_decode_ber$descriptor() {
        return BasicVehicleClass_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle BasicVehicleClass_decode_ber$handle() {
        return BasicVehicleClass_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_ber$address() {
        return BasicVehicleClass_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = BasicVehicleClass_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_der$descriptor() {
        return BasicVehicleClass_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_der$handle() {
        return BasicVehicleClass_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_der$address() {
        return BasicVehicleClass_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BasicVehicleClass_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_decode_xer$descriptor() {
        return BasicVehicleClass_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle BasicVehicleClass_decode_xer$handle() {
        return BasicVehicleClass_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_xer$address() {
        return BasicVehicleClass_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BasicVehicleClass_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_xer$descriptor() {
        return BasicVehicleClass_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_xer$handle() {
        return BasicVehicleClass_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_xer$address() {
        return BasicVehicleClass_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BasicVehicleClass_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_jer$descriptor() {
        return BasicVehicleClass_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_jer$handle() {
        return BasicVehicleClass_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_jer$address() {
        return BasicVehicleClass_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = BasicVehicleClass_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_decode_oer$descriptor() {
        return BasicVehicleClass_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BasicVehicleClass_decode_oer$handle() {
        return BasicVehicleClass_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_oer$address() {
        return BasicVehicleClass_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BasicVehicleClass_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_oer$descriptor() {
        return BasicVehicleClass_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_oer$handle() {
        return BasicVehicleClass_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_oer$address() {
        return BasicVehicleClass_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleClass_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_decode_uper$descriptor() {
        return BasicVehicleClass_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BasicVehicleClass_decode_uper$handle() {
        return BasicVehicleClass_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_uper$address() {
        return BasicVehicleClass_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleClass_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_uper$descriptor() {
        return BasicVehicleClass_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_uper$handle() {
        return BasicVehicleClass_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_uper$address() {
        return BasicVehicleClass_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleClass_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_decode_aper$descriptor() {
        return BasicVehicleClass_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BasicVehicleClass_decode_aper$handle() {
        return BasicVehicleClass_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_aper$address() {
        return BasicVehicleClass_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleClass_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleClass_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleClass_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleClass_encode_aper$descriptor() {
        return BasicVehicleClass_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BasicVehicleClass_encode_aper$handle() {
        return BasicVehicleClass_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_aper$address() {
        return BasicVehicleClass_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleClass_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleClass_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleClass_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RptVehicleClass_motorcycles = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_motorcycles = 1
     * }
     */
    public static int RptVehicleClass_motorcycles() {
        return RptVehicleClass_motorcycles;
    }
    private static final int RptVehicleClass_passengerCars = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_passengerCars = 2
     * }
     */
    public static int RptVehicleClass_passengerCars() {
        return RptVehicleClass_passengerCars;
    }
    private static final int RptVehicleClass_other2axle4tireSingleUnitVehs = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_other2axle4tireSingleUnitVehs = 3
     * }
     */
    public static int RptVehicleClass_other2axle4tireSingleUnitVehs() {
        return RptVehicleClass_other2axle4tireSingleUnitVehs;
    }
    private static final int RptVehicleClass_buses = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_buses = 4
     * }
     */
    public static int RptVehicleClass_buses() {
        return RptVehicleClass_buses;
    }
    private static final int RptVehicleClass_twoAxle6TireSingleUnitTrucks = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_twoAxle6TireSingleUnitTrucks = 5
     * }
     */
    public static int RptVehicleClass_twoAxle6TireSingleUnitTrucks() {
        return RptVehicleClass_twoAxle6TireSingleUnitTrucks;
    }
    private static final int RptVehicleClass_threeAxleSingleUnitTrucks = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_threeAxleSingleUnitTrucks = 6
     * }
     */
    public static int RptVehicleClass_threeAxleSingleUnitTrucks() {
        return RptVehicleClass_threeAxleSingleUnitTrucks;
    }
    private static final int RptVehicleClass_fourOrMoreAxleSingleUnitTrucks = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_fourOrMoreAxleSingleUnitTrucks = 7
     * }
     */
    public static int RptVehicleClass_fourOrMoreAxleSingleUnitTrucks() {
        return RptVehicleClass_fourOrMoreAxleSingleUnitTrucks;
    }
    private static final int RptVehicleClass_fourOrFewerAxleSingleTrailerTrucks = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_fourOrFewerAxleSingleTrailerTrucks = 8
     * }
     */
    public static int RptVehicleClass_fourOrFewerAxleSingleTrailerTrucks() {
        return RptVehicleClass_fourOrFewerAxleSingleTrailerTrucks;
    }
    private static final int RptVehicleClass_fiveAxleSingleTrailerTrucks = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_fiveAxleSingleTrailerTrucks = 9
     * }
     */
    public static int RptVehicleClass_fiveAxleSingleTrailerTrucks() {
        return RptVehicleClass_fiveAxleSingleTrailerTrucks;
    }
    private static final int RptVehicleClass_sixOrMoreAxleSingleTrailerTrucks = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_sixOrMoreAxleSingleTrailerTrucks = 10
     * }
     */
    public static int RptVehicleClass_sixOrMoreAxleSingleTrailerTrucks() {
        return RptVehicleClass_sixOrMoreAxleSingleTrailerTrucks;
    }
    private static final int RptVehicleClass_fiveOrFewerAxleMultiTrailerTrucks = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_fiveOrFewerAxleMultiTrailerTrucks = 11
     * }
     */
    public static int RptVehicleClass_fiveOrFewerAxleMultiTrailerTrucks() {
        return RptVehicleClass_fiveOrFewerAxleMultiTrailerTrucks;
    }
    private static final int RptVehicleClass_sixAxleMultiTrailerTrucks = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_sixAxleMultiTrailerTrucks = 12
     * }
     */
    public static int RptVehicleClass_sixAxleMultiTrailerTrucks() {
        return RptVehicleClass_sixAxleMultiTrailerTrucks;
    }
    private static final int RptVehicleClass_sevenOrMoreAxleMultiTrailerTrucks = (int)13L;
    /**
     * {@snippet lang=c :
     * enum RptVehicleClass.RptVehicleClass_sevenOrMoreAxleMultiTrailerTrucks = 13
     * }
     */
    public static int RptVehicleClass_sevenOrMoreAxleMultiTrailerTrucks() {
        return RptVehicleClass_sevenOrMoreAxleMultiTrailerTrucks;
    }
    /**
     * {@snippet lang=c :
     * typedef long RptVehicleClass_t
     * }
     */
    public static final OfLong RptVehicleClass_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_RptVehicleClass_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_RptVehicleClass_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleClass_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_RptVehicleClass_constr_1$layout() {
        return asn_PER_type_RptVehicleClass_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleClass_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_RptVehicleClass_constr_1() {
        return asn_PER_type_RptVehicleClass_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_RptVehicleClass_constr_1
     * }
     */
    public static void asn_PER_type_RptVehicleClass_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_RptVehicleClass_constr_1$constants.SEGMENT, 0L, asn_PER_type_RptVehicleClass_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_RptVehicleClass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_RptVehicleClass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleClass
     * }
     */
    public static GroupLayout asn_DEF_RptVehicleClass$layout() {
        return asn_DEF_RptVehicleClass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleClass
     * }
     */
    public static MemorySegment asn_DEF_RptVehicleClass() {
        return asn_DEF_RptVehicleClass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_RptVehicleClass
     * }
     */
    public static void asn_DEF_RptVehicleClass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_RptVehicleClass$constants.SEGMENT, 0L, asn_DEF_RptVehicleClass$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_RptVehicleClass_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_RptVehicleClass_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptVehicleClass_specs_1
     * }
     */
    public static GroupLayout asn_SPC_RptVehicleClass_specs_1$layout() {
        return asn_SPC_RptVehicleClass_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptVehicleClass_specs_1
     * }
     */
    public static MemorySegment asn_SPC_RptVehicleClass_specs_1() {
        return asn_SPC_RptVehicleClass_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_RptVehicleClass_specs_1
     * }
     */
    public static void asn_SPC_RptVehicleClass_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_RptVehicleClass_specs_1$constants.SEGMENT, 0L, asn_SPC_RptVehicleClass_specs_1$constants.LAYOUT.byteSize());
    }

    private static class RptVehicleClass_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RptVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_free$descriptor() {
        return RptVehicleClass_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RptVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle RptVehicleClass_free$handle() {
        return RptVehicleClass_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RptVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment RptVehicleClass_free$address() {
        return RptVehicleClass_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RptVehicleClass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void RptVehicleClass_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = RptVehicleClass_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RptVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_print$descriptor() {
        return RptVehicleClass_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RptVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_print$handle() {
        return RptVehicleClass_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RptVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_print$address() {
        return RptVehicleClass_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RptVehicleClass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int RptVehicleClass_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptVehicleClass_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RptVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_constraint$descriptor() {
        return RptVehicleClass_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RptVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_constraint$handle() {
        return RptVehicleClass_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RptVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_constraint$address() {
        return RptVehicleClass_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RptVehicleClass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int RptVehicleClass_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptVehicleClass_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_decode_ber$descriptor() {
        return RptVehicleClass_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle RptVehicleClass_decode_ber$handle() {
        return RptVehicleClass_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_ber$address() {
        return RptVehicleClass_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = RptVehicleClass_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_der$descriptor() {
        return RptVehicleClass_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_der$handle() {
        return RptVehicleClass_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_der$address() {
        return RptVehicleClass_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RptVehicleClass_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_decode_xer$descriptor() {
        return RptVehicleClass_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle RptVehicleClass_decode_xer$handle() {
        return RptVehicleClass_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_xer$address() {
        return RptVehicleClass_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RptVehicleClass_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_xer$descriptor() {
        return RptVehicleClass_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_xer$handle() {
        return RptVehicleClass_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_xer$address() {
        return RptVehicleClass_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = RptVehicleClass_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_jer$descriptor() {
        return RptVehicleClass_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_jer$handle() {
        return RptVehicleClass_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_jer$address() {
        return RptVehicleClass_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = RptVehicleClass_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_decode_oer$descriptor() {
        return RptVehicleClass_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle RptVehicleClass_decode_oer$handle() {
        return RptVehicleClass_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_oer$address() {
        return RptVehicleClass_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = RptVehicleClass_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_oer$descriptor() {
        return RptVehicleClass_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_oer$handle() {
        return RptVehicleClass_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_oer$address() {
        return RptVehicleClass_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptVehicleClass_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_decode_uper$descriptor() {
        return RptVehicleClass_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RptVehicleClass_decode_uper$handle() {
        return RptVehicleClass_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_uper$address() {
        return RptVehicleClass_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptVehicleClass_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_uper$descriptor() {
        return RptVehicleClass_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_uper$handle() {
        return RptVehicleClass_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_uper$address() {
        return RptVehicleClass_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptVehicleClass_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_decode_aper$descriptor() {
        return RptVehicleClass_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle RptVehicleClass_decode_aper$handle() {
        return RptVehicleClass_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_aper$address() {
        return RptVehicleClass_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t RptVehicleClass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = RptVehicleClass_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RptVehicleClass_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("RptVehicleClass_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor RptVehicleClass_encode_aper$descriptor() {
        return RptVehicleClass_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle RptVehicleClass_encode_aper$handle() {
        return RptVehicleClass_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_aper$address() {
        return RptVehicleClass_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t RptVehicleClass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment RptVehicleClass_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = RptVehicleClass_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RptVehicleClass_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_SupplementalVehicleExtensions$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_SupplementalVehicleExtensions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SupplementalVehicleExtensions
     * }
     */
    public static GroupLayout asn_DEF_SupplementalVehicleExtensions$layout() {
        return asn_DEF_SupplementalVehicleExtensions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SupplementalVehicleExtensions
     * }
     */
    public static MemorySegment asn_DEF_SupplementalVehicleExtensions() {
        return asn_DEF_SupplementalVehicleExtensions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_SupplementalVehicleExtensions
     * }
     */
    public static void asn_DEF_SupplementalVehicleExtensions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_SupplementalVehicleExtensions$constants.SEGMENT, 0L, asn_DEF_SupplementalVehicleExtensions$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_SupplementalVehicleExtensions_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_SupplementalVehicleExtensions_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SupplementalVehicleExtensions_specs_1
     * }
     */
    public static GroupLayout asn_SPC_SupplementalVehicleExtensions_specs_1$layout() {
        return asn_SPC_SupplementalVehicleExtensions_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SupplementalVehicleExtensions_specs_1
     * }
     */
    public static MemorySegment asn_SPC_SupplementalVehicleExtensions_specs_1() {
        return asn_SPC_SupplementalVehicleExtensions_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_SupplementalVehicleExtensions_specs_1
     * }
     */
    public static void asn_SPC_SupplementalVehicleExtensions_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_SupplementalVehicleExtensions_specs_1$constants.SEGMENT, 0L, asn_SPC_SupplementalVehicleExtensions_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_SupplementalVehicleExtensions_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(13, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_SupplementalVehicleExtensions_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 13 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static SequenceLayout asn_MBR_SupplementalVehicleExtensions_1$layout() {
        return asn_MBR_SupplementalVehicleExtensions_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static long[] asn_MBR_SupplementalVehicleExtensions_1$dimensions() {
        return asn_MBR_SupplementalVehicleExtensions_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static MemorySegment asn_MBR_SupplementalVehicleExtensions_1() {
        return asn_MBR_SupplementalVehicleExtensions_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static void asn_MBR_SupplementalVehicleExtensions_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SupplementalVehicleExtensions_1$constants.SEGMENT, 0L, asn_MBR_SupplementalVehicleExtensions_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static MemorySegment asn_MBR_SupplementalVehicleExtensions_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_SupplementalVehicleExtensions_1$constants.HANDLE.invokeExact(asn_MBR_SupplementalVehicleExtensions_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_SupplementalVehicleExtensions_1[13]
     * }
     */
    public static void asn_MBR_SupplementalVehicleExtensions_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_SupplementalVehicleExtensions_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int BasicVehicleRole_basicVehicle = (int)0L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_basicVehicle = 0
     * }
     */
    public static int BasicVehicleRole_basicVehicle() {
        return BasicVehicleRole_basicVehicle;
    }
    private static final int BasicVehicleRole_publicTransport = (int)1L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_publicTransport = 1
     * }
     */
    public static int BasicVehicleRole_publicTransport() {
        return BasicVehicleRole_publicTransport;
    }
    private static final int BasicVehicleRole_specialTransport = (int)2L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_specialTransport = 2
     * }
     */
    public static int BasicVehicleRole_specialTransport() {
        return BasicVehicleRole_specialTransport;
    }
    private static final int BasicVehicleRole_dangerousGoods = (int)3L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_dangerousGoods = 3
     * }
     */
    public static int BasicVehicleRole_dangerousGoods() {
        return BasicVehicleRole_dangerousGoods;
    }
    private static final int BasicVehicleRole_roadWork = (int)4L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_roadWork = 4
     * }
     */
    public static int BasicVehicleRole_roadWork() {
        return BasicVehicleRole_roadWork;
    }
    private static final int BasicVehicleRole_roadRescue = (int)5L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_roadRescue = 5
     * }
     */
    public static int BasicVehicleRole_roadRescue() {
        return BasicVehicleRole_roadRescue;
    }
    private static final int BasicVehicleRole_emergency = (int)6L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_emergency = 6
     * }
     */
    public static int BasicVehicleRole_emergency() {
        return BasicVehicleRole_emergency;
    }
    private static final int BasicVehicleRole_safetyCar = (int)7L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_safetyCar = 7
     * }
     */
    public static int BasicVehicleRole_safetyCar() {
        return BasicVehicleRole_safetyCar;
    }
    private static final int BasicVehicleRole_none_unknown = (int)8L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_none_unknown = 8
     * }
     */
    public static int BasicVehicleRole_none_unknown() {
        return BasicVehicleRole_none_unknown;
    }
    private static final int BasicVehicleRole_truck = (int)9L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_truck = 9
     * }
     */
    public static int BasicVehicleRole_truck() {
        return BasicVehicleRole_truck;
    }
    private static final int BasicVehicleRole_motorcycle = (int)10L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_motorcycle = 10
     * }
     */
    public static int BasicVehicleRole_motorcycle() {
        return BasicVehicleRole_motorcycle;
    }
    private static final int BasicVehicleRole_roadSideSource = (int)11L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_roadSideSource = 11
     * }
     */
    public static int BasicVehicleRole_roadSideSource() {
        return BasicVehicleRole_roadSideSource;
    }
    private static final int BasicVehicleRole_police = (int)12L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_police = 12
     * }
     */
    public static int BasicVehicleRole_police() {
        return BasicVehicleRole_police;
    }
    private static final int BasicVehicleRole_fire = (int)13L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_fire = 13
     * }
     */
    public static int BasicVehicleRole_fire() {
        return BasicVehicleRole_fire;
    }
    private static final int BasicVehicleRole_ambulance = (int)14L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_ambulance = 14
     * }
     */
    public static int BasicVehicleRole_ambulance() {
        return BasicVehicleRole_ambulance;
    }
    private static final int BasicVehicleRole_dot = (int)15L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_dot = 15
     * }
     */
    public static int BasicVehicleRole_dot() {
        return BasicVehicleRole_dot;
    }
    private static final int BasicVehicleRole_transit = (int)16L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_transit = 16
     * }
     */
    public static int BasicVehicleRole_transit() {
        return BasicVehicleRole_transit;
    }
    private static final int BasicVehicleRole_slowMoving = (int)17L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_slowMoving = 17
     * }
     */
    public static int BasicVehicleRole_slowMoving() {
        return BasicVehicleRole_slowMoving;
    }
    private static final int BasicVehicleRole_stopNgo = (int)18L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_stopNgo = 18
     * }
     */
    public static int BasicVehicleRole_stopNgo() {
        return BasicVehicleRole_stopNgo;
    }
    private static final int BasicVehicleRole_cyclist = (int)19L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_cyclist = 19
     * }
     */
    public static int BasicVehicleRole_cyclist() {
        return BasicVehicleRole_cyclist;
    }
    private static final int BasicVehicleRole_pedestrian = (int)20L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_pedestrian = 20
     * }
     */
    public static int BasicVehicleRole_pedestrian() {
        return BasicVehicleRole_pedestrian;
    }
    private static final int BasicVehicleRole_nonMotorized = (int)21L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_nonMotorized = 21
     * }
     */
    public static int BasicVehicleRole_nonMotorized() {
        return BasicVehicleRole_nonMotorized;
    }
    private static final int BasicVehicleRole_military = (int)22L;
    /**
     * {@snippet lang=c :
     * enum BasicVehicleRole.BasicVehicleRole_military = 22
     * }
     */
    public static int BasicVehicleRole_military() {
        return BasicVehicleRole_military;
    }
    /**
     * {@snippet lang=c :
     * typedef long BasicVehicleRole_t
     * }
     */
    public static final OfLong BasicVehicleRole_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_BasicVehicleRole_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_BasicVehicleRole_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleRole_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_BasicVehicleRole_constr_1$layout() {
        return asn_PER_type_BasicVehicleRole_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleRole_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_BasicVehicleRole_constr_1() {
        return asn_PER_type_BasicVehicleRole_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_BasicVehicleRole_constr_1
     * }
     */
    public static void asn_PER_type_BasicVehicleRole_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_BasicVehicleRole_constr_1$constants.SEGMENT, 0L, asn_PER_type_BasicVehicleRole_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_BasicVehicleRole$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_BasicVehicleRole").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleRole
     * }
     */
    public static GroupLayout asn_DEF_BasicVehicleRole$layout() {
        return asn_DEF_BasicVehicleRole$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleRole
     * }
     */
    public static MemorySegment asn_DEF_BasicVehicleRole() {
        return asn_DEF_BasicVehicleRole$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_BasicVehicleRole
     * }
     */
    public static void asn_DEF_BasicVehicleRole(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_BasicVehicleRole$constants.SEGMENT, 0L, asn_DEF_BasicVehicleRole$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_BasicVehicleRole_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_BasicVehicleRole_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_BasicVehicleRole_specs_1
     * }
     */
    public static GroupLayout asn_SPC_BasicVehicleRole_specs_1$layout() {
        return asn_SPC_BasicVehicleRole_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_BasicVehicleRole_specs_1
     * }
     */
    public static MemorySegment asn_SPC_BasicVehicleRole_specs_1() {
        return asn_SPC_BasicVehicleRole_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_BasicVehicleRole_specs_1
     * }
     */
    public static void asn_SPC_BasicVehicleRole_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_BasicVehicleRole_specs_1$constants.SEGMENT, 0L, asn_SPC_BasicVehicleRole_specs_1$constants.LAYOUT.byteSize());
    }

    private static class BasicVehicleRole_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BasicVehicleRole_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_free$descriptor() {
        return BasicVehicleRole_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BasicVehicleRole_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle BasicVehicleRole_free$handle() {
        return BasicVehicleRole_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BasicVehicleRole_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment BasicVehicleRole_free$address() {
        return BasicVehicleRole_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BasicVehicleRole_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void BasicVehicleRole_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = BasicVehicleRole_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BasicVehicleRole_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_print$descriptor() {
        return BasicVehicleRole_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BasicVehicleRole_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_print$handle() {
        return BasicVehicleRole_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BasicVehicleRole_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_print$address() {
        return BasicVehicleRole_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BasicVehicleRole_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int BasicVehicleRole_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleRole_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int BasicVehicleRole_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_constraint$descriptor() {
        return BasicVehicleRole_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int BasicVehicleRole_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_constraint$handle() {
        return BasicVehicleRole_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int BasicVehicleRole_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_constraint$address() {
        return BasicVehicleRole_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int BasicVehicleRole_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int BasicVehicleRole_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleRole_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_decode_ber$descriptor() {
        return BasicVehicleRole_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle BasicVehicleRole_decode_ber$handle() {
        return BasicVehicleRole_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_ber$address() {
        return BasicVehicleRole_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = BasicVehicleRole_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_der$descriptor() {
        return BasicVehicleRole_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_der$handle() {
        return BasicVehicleRole_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_der$address() {
        return BasicVehicleRole_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BasicVehicleRole_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_decode_xer$descriptor() {
        return BasicVehicleRole_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle BasicVehicleRole_decode_xer$handle() {
        return BasicVehicleRole_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_xer$address() {
        return BasicVehicleRole_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BasicVehicleRole_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_xer$descriptor() {
        return BasicVehicleRole_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_xer$handle() {
        return BasicVehicleRole_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_xer$address() {
        return BasicVehicleRole_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = BasicVehicleRole_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_jer$descriptor() {
        return BasicVehicleRole_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_jer$handle() {
        return BasicVehicleRole_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_jer$address() {
        return BasicVehicleRole_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = BasicVehicleRole_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_decode_oer$descriptor() {
        return BasicVehicleRole_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle BasicVehicleRole_decode_oer$handle() {
        return BasicVehicleRole_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_oer$address() {
        return BasicVehicleRole_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = BasicVehicleRole_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_oer$descriptor() {
        return BasicVehicleRole_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_oer$handle() {
        return BasicVehicleRole_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_oer$address() {
        return BasicVehicleRole_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleRole_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_decode_uper$descriptor() {
        return BasicVehicleRole_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BasicVehicleRole_decode_uper$handle() {
        return BasicVehicleRole_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_uper$address() {
        return BasicVehicleRole_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleRole_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_uper$descriptor() {
        return BasicVehicleRole_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_uper$handle() {
        return BasicVehicleRole_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_uper$address() {
        return BasicVehicleRole_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleRole_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_decode_aper$descriptor() {
        return BasicVehicleRole_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle BasicVehicleRole_decode_aper$handle() {
        return BasicVehicleRole_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_aper$address() {
        return BasicVehicleRole_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t BasicVehicleRole_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = BasicVehicleRole_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BasicVehicleRole_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("BasicVehicleRole_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor BasicVehicleRole_encode_aper$descriptor() {
        return BasicVehicleRole_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle BasicVehicleRole_encode_aper$handle() {
        return BasicVehicleRole_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_aper$address() {
        return BasicVehicleRole_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t BasicVehicleRole_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment BasicVehicleRole_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = BasicVehicleRole_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BasicVehicleRole_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long Iso3833VehicleType_t
     * }
     */
    public static final OfLong Iso3833VehicleType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_Iso3833VehicleType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_Iso3833VehicleType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Iso3833VehicleType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_Iso3833VehicleType_constr_1$layout() {
        return asn_PER_type_Iso3833VehicleType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Iso3833VehicleType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_Iso3833VehicleType_constr_1() {
        return asn_PER_type_Iso3833VehicleType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_Iso3833VehicleType_constr_1
     * }
     */
    public static void asn_PER_type_Iso3833VehicleType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_Iso3833VehicleType_constr_1$constants.SEGMENT, 0L, asn_PER_type_Iso3833VehicleType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_Iso3833VehicleType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Iso3833VehicleType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Iso3833VehicleType
     * }
     */
    public static GroupLayout asn_DEF_Iso3833VehicleType$layout() {
        return asn_DEF_Iso3833VehicleType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Iso3833VehicleType
     * }
     */
    public static MemorySegment asn_DEF_Iso3833VehicleType() {
        return asn_DEF_Iso3833VehicleType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Iso3833VehicleType
     * }
     */
    public static void asn_DEF_Iso3833VehicleType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Iso3833VehicleType$constants.SEGMENT, 0L, asn_DEF_Iso3833VehicleType$constants.LAYOUT.byteSize());
    }

    private static class Iso3833VehicleType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void Iso3833VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_free$descriptor() {
        return Iso3833VehicleType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void Iso3833VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle Iso3833VehicleType_free$handle() {
        return Iso3833VehicleType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void Iso3833VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment Iso3833VehicleType_free$address() {
        return Iso3833VehicleType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void Iso3833VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void Iso3833VehicleType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Iso3833VehicleType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_print$descriptor() {
        return Iso3833VehicleType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_print$handle() {
        return Iso3833VehicleType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_print$address() {
        return Iso3833VehicleType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Iso3833VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int Iso3833VehicleType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Iso3833VehicleType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_constraint$descriptor() {
        return Iso3833VehicleType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_constraint$handle() {
        return Iso3833VehicleType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int Iso3833VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_constraint$address() {
        return Iso3833VehicleType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int Iso3833VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int Iso3833VehicleType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Iso3833VehicleType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_decode_ber$descriptor() {
        return Iso3833VehicleType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle Iso3833VehicleType_decode_ber$handle() {
        return Iso3833VehicleType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_ber$address() {
        return Iso3833VehicleType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = Iso3833VehicleType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_der$descriptor() {
        return Iso3833VehicleType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_der$handle() {
        return Iso3833VehicleType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_der$address() {
        return Iso3833VehicleType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Iso3833VehicleType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_decode_xer$descriptor() {
        return Iso3833VehicleType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle Iso3833VehicleType_decode_xer$handle() {
        return Iso3833VehicleType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_xer$address() {
        return Iso3833VehicleType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Iso3833VehicleType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_xer$descriptor() {
        return Iso3833VehicleType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_xer$handle() {
        return Iso3833VehicleType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_xer$address() {
        return Iso3833VehicleType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Iso3833VehicleType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_jer$descriptor() {
        return Iso3833VehicleType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_jer$handle() {
        return Iso3833VehicleType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_jer$address() {
        return Iso3833VehicleType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = Iso3833VehicleType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_decode_oer$descriptor() {
        return Iso3833VehicleType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle Iso3833VehicleType_decode_oer$handle() {
        return Iso3833VehicleType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_oer$address() {
        return Iso3833VehicleType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = Iso3833VehicleType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_oer$descriptor() {
        return Iso3833VehicleType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_oer$handle() {
        return Iso3833VehicleType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_oer$address() {
        return Iso3833VehicleType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Iso3833VehicleType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_decode_uper$descriptor() {
        return Iso3833VehicleType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_decode_uper$handle() {
        return Iso3833VehicleType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_uper$address() {
        return Iso3833VehicleType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Iso3833VehicleType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_uper$descriptor() {
        return Iso3833VehicleType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_uper$handle() {
        return Iso3833VehicleType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_uper$address() {
        return Iso3833VehicleType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Iso3833VehicleType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_decode_aper$descriptor() {
        return Iso3833VehicleType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_decode_aper$handle() {
        return Iso3833VehicleType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_aper$address() {
        return Iso3833VehicleType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t Iso3833VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Iso3833VehicleType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Iso3833VehicleType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("Iso3833VehicleType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor Iso3833VehicleType_encode_aper$descriptor() {
        return Iso3833VehicleType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle Iso3833VehicleType_encode_aper$handle() {
        return Iso3833VehicleType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_aper$address() {
        return Iso3833VehicleType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t Iso3833VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment Iso3833VehicleType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = Iso3833VehicleType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Iso3833VehicleType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VehicleType_none = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_none = 0
     * }
     */
    public static int VehicleType_none() {
        return VehicleType_none;
    }
    private static final int VehicleType_unknown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_unknown = 1
     * }
     */
    public static int VehicleType_unknown() {
        return VehicleType_unknown;
    }
    private static final int VehicleType_special = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_special = 2
     * }
     */
    public static int VehicleType_special() {
        return VehicleType_special;
    }
    private static final int VehicleType_moto = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_moto = 3
     * }
     */
    public static int VehicleType_moto() {
        return VehicleType_moto;
    }
    private static final int VehicleType_car = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_car = 4
     * }
     */
    public static int VehicleType_car() {
        return VehicleType_car;
    }
    private static final int VehicleType_carOther = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_carOther = 5
     * }
     */
    public static int VehicleType_carOther() {
        return VehicleType_carOther;
    }
    private static final int VehicleType_bus = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_bus = 6
     * }
     */
    public static int VehicleType_bus() {
        return VehicleType_bus;
    }
    private static final int VehicleType_axleCnt2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt2 = 7
     * }
     */
    public static int VehicleType_axleCnt2() {
        return VehicleType_axleCnt2;
    }
    private static final int VehicleType_axleCnt3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt3 = 8
     * }
     */
    public static int VehicleType_axleCnt3() {
        return VehicleType_axleCnt3;
    }
    private static final int VehicleType_axleCnt4 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt4 = 9
     * }
     */
    public static int VehicleType_axleCnt4() {
        return VehicleType_axleCnt4;
    }
    private static final int VehicleType_axleCnt4Trailer = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt4Trailer = 10
     * }
     */
    public static int VehicleType_axleCnt4Trailer() {
        return VehicleType_axleCnt4Trailer;
    }
    private static final int VehicleType_axleCnt5Trailer = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt5Trailer = 11
     * }
     */
    public static int VehicleType_axleCnt5Trailer() {
        return VehicleType_axleCnt5Trailer;
    }
    private static final int VehicleType_axleCnt6Trailer = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt6Trailer = 12
     * }
     */
    public static int VehicleType_axleCnt6Trailer() {
        return VehicleType_axleCnt6Trailer;
    }
    private static final int VehicleType_axleCnt5MultiTrailer = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt5MultiTrailer = 13
     * }
     */
    public static int VehicleType_axleCnt5MultiTrailer() {
        return VehicleType_axleCnt5MultiTrailer;
    }
    private static final int VehicleType_axleCnt6MultiTrailer = (int)14L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt6MultiTrailer = 14
     * }
     */
    public static int VehicleType_axleCnt6MultiTrailer() {
        return VehicleType_axleCnt6MultiTrailer;
    }
    private static final int VehicleType_axleCnt7MultiTrailer = (int)15L;
    /**
     * {@snippet lang=c :
     * enum VehicleType.VehicleType_axleCnt7MultiTrailer = 15
     * }
     */
    public static int VehicleType_axleCnt7MultiTrailer() {
        return VehicleType_axleCnt7MultiTrailer;
    }
    /**
     * {@snippet lang=c :
     * typedef long VehicleType_t
     * }
     */
    public static final OfLong VehicleType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_VehicleType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VehicleType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VehicleType_constr_1$layout() {
        return asn_PER_type_VehicleType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VehicleType_constr_1() {
        return asn_PER_type_VehicleType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleType_constr_1
     * }
     */
    public static void asn_PER_type_VehicleType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VehicleType_constr_1$constants.SEGMENT, 0L, asn_PER_type_VehicleType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VehicleType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleType
     * }
     */
    public static GroupLayout asn_DEF_VehicleType$layout() {
        return asn_DEF_VehicleType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleType
     * }
     */
    public static MemorySegment asn_DEF_VehicleType() {
        return asn_DEF_VehicleType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleType
     * }
     */
    public static void asn_DEF_VehicleType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleType$constants.SEGMENT, 0L, asn_DEF_VehicleType$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehicleType_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehicleType_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleType_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehicleType_specs_1$layout() {
        return asn_SPC_VehicleType_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleType_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehicleType_specs_1() {
        return asn_SPC_VehicleType_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_VehicleType_specs_1
     * }
     */
    public static void asn_SPC_VehicleType_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehicleType_specs_1$constants.SEGMENT, 0L, asn_SPC_VehicleType_specs_1$constants.LAYOUT.byteSize());
    }

    private static class VehicleType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor VehicleType_free$descriptor() {
        return VehicleType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle VehicleType_free$handle() {
        return VehicleType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment VehicleType_free$address() {
        return VehicleType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VehicleType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void VehicleType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = VehicleType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_print$descriptor() {
        return VehicleType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_print$handle() {
        return VehicleType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_print$address() {
        return VehicleType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int VehicleType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_constraint$descriptor() {
        return VehicleType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_constraint$handle() {
        return VehicleType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_constraint$address() {
        return VehicleType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int VehicleType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor VehicleType_decode_ber$descriptor() {
        return VehicleType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle VehicleType_decode_ber$handle() {
        return VehicleType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleType_decode_ber$address() {
        return VehicleType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = VehicleType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_der$descriptor() {
        return VehicleType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_encode_der$handle() {
        return VehicleType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_der$address() {
        return VehicleType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleType_decode_xer$descriptor() {
        return VehicleType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleType_decode_xer$handle() {
        return VehicleType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleType_decode_xer$address() {
        return VehicleType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_xer$descriptor() {
        return VehicleType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_encode_xer$handle() {
        return VehicleType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_xer$address() {
        return VehicleType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_jer$descriptor() {
        return VehicleType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_encode_jer$handle() {
        return VehicleType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_jer$address() {
        return VehicleType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = VehicleType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleType_decode_oer$descriptor() {
        return VehicleType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleType_decode_oer$handle() {
        return VehicleType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleType_decode_oer$address() {
        return VehicleType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_oer$descriptor() {
        return VehicleType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleType_encode_oer$handle() {
        return VehicleType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_oer$address() {
        return VehicleType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleType_decode_uper$descriptor() {
        return VehicleType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleType_decode_uper$handle() {
        return VehicleType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleType_decode_uper$address() {
        return VehicleType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_uper$descriptor() {
        return VehicleType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleType_encode_uper$handle() {
        return VehicleType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleType_encode_uper$address() {
        return VehicleType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleType_decode_aper$descriptor() {
        return VehicleType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleType_decode_aper$handle() {
        return VehicleType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleType_decode_aper$address() {
        return VehicleType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleType_encode_aper$descriptor() {
        return VehicleType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleType_encode_aper$handle() {
        return VehicleType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleType_encode_aper$address() {
        return VehicleType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIS_VehicleGroupAffected_all_vehicles = (int)9217L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_all_vehicles = 9217
     * }
     */
    public static int ITIS_VehicleGroupAffected_all_vehicles() {
        return ITIS_VehicleGroupAffected_all_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_bicycles = (int)9218L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_bicycles = 9218
     * }
     */
    public static int ITIS_VehicleGroupAffected_bicycles() {
        return ITIS_VehicleGroupAffected_bicycles;
    }
    private static final int ITIS_VehicleGroupAffected_motorcycles = (int)9219L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_motorcycles = 9219
     * }
     */
    public static int ITIS_VehicleGroupAffected_motorcycles() {
        return ITIS_VehicleGroupAffected_motorcycles;
    }
    private static final int ITIS_VehicleGroupAffected_cars = (int)9220L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_cars = 9220
     * }
     */
    public static int ITIS_VehicleGroupAffected_cars() {
        return ITIS_VehicleGroupAffected_cars;
    }
    private static final int ITIS_VehicleGroupAffected_light_vehicles = (int)9221L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_light_vehicles = 9221
     * }
     */
    public static int ITIS_VehicleGroupAffected_light_vehicles() {
        return ITIS_VehicleGroupAffected_light_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_cars_and_light_vehicles = (int)9222L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_cars_and_light_vehicles = 9222
     * }
     */
    public static int ITIS_VehicleGroupAffected_cars_and_light_vehicles() {
        return ITIS_VehicleGroupAffected_cars_and_light_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_cars_with_trailers = (int)9223L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_cars_with_trailers = 9223
     * }
     */
    public static int ITIS_VehicleGroupAffected_cars_with_trailers() {
        return ITIS_VehicleGroupAffected_cars_with_trailers;
    }
    private static final int ITIS_VehicleGroupAffected_cars_with_recreational_trailers = (int)9224L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_cars_with_recreational_trailers = 9224
     * }
     */
    public static int ITIS_VehicleGroupAffected_cars_with_recreational_trailers() {
        return ITIS_VehicleGroupAffected_cars_with_recreational_trailers;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_trailers = (int)9225L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_trailers = 9225
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_trailers() {
        return ITIS_VehicleGroupAffected_vehicles_with_trailers;
    }
    private static final int ITIS_VehicleGroupAffected_heavy_vehicles = (int)9226L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_heavy_vehicles = 9226
     * }
     */
    public static int ITIS_VehicleGroupAffected_heavy_vehicles() {
        return ITIS_VehicleGroupAffected_heavy_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_trucks = (int)9227L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_trucks = 9227
     * }
     */
    public static int ITIS_VehicleGroupAffected_trucks() {
        return ITIS_VehicleGroupAffected_trucks;
    }
    private static final int ITIS_VehicleGroupAffected_buses = (int)9228L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_buses = 9228
     * }
     */
    public static int ITIS_VehicleGroupAffected_buses() {
        return ITIS_VehicleGroupAffected_buses;
    }
    private static final int ITIS_VehicleGroupAffected_articulated_buses = (int)9229L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_articulated_buses = 9229
     * }
     */
    public static int ITIS_VehicleGroupAffected_articulated_buses() {
        return ITIS_VehicleGroupAffected_articulated_buses;
    }
    private static final int ITIS_VehicleGroupAffected_school_buses = (int)9230L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_school_buses = 9230
     * }
     */
    public static int ITIS_VehicleGroupAffected_school_buses() {
        return ITIS_VehicleGroupAffected_school_buses;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_semi_trailers = (int)9231L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_semi_trailers = 9231
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_semi_trailers() {
        return ITIS_VehicleGroupAffected_vehicles_with_semi_trailers;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_double_trailers = (int)9232L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_double_trailers = 9232
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_double_trailers() {
        return ITIS_VehicleGroupAffected_vehicles_with_double_trailers;
    }
    private static final int ITIS_VehicleGroupAffected_high_profile_vehicles = (int)9233L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_high_profile_vehicles = 9233
     * }
     */
    public static int ITIS_VehicleGroupAffected_high_profile_vehicles() {
        return ITIS_VehicleGroupAffected_high_profile_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_wide_vehicles = (int)9234L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_wide_vehicles = 9234
     * }
     */
    public static int ITIS_VehicleGroupAffected_wide_vehicles() {
        return ITIS_VehicleGroupAffected_wide_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_long_vehicles = (int)9235L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_long_vehicles = 9235
     * }
     */
    public static int ITIS_VehicleGroupAffected_long_vehicles() {
        return ITIS_VehicleGroupAffected_long_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_hazardous_loads = (int)9236L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_hazardous_loads = 9236
     * }
     */
    public static int ITIS_VehicleGroupAffected_hazardous_loads() {
        return ITIS_VehicleGroupAffected_hazardous_loads;
    }
    private static final int ITIS_VehicleGroupAffected_exceptional_loads = (int)9237L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_exceptional_loads = 9237
     * }
     */
    public static int ITIS_VehicleGroupAffected_exceptional_loads() {
        return ITIS_VehicleGroupAffected_exceptional_loads;
    }
    private static final int ITIS_VehicleGroupAffected_abnormal_loads = (int)9238L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_abnormal_loads = 9238
     * }
     */
    public static int ITIS_VehicleGroupAffected_abnormal_loads() {
        return ITIS_VehicleGroupAffected_abnormal_loads;
    }
    private static final int ITIS_VehicleGroupAffected_convoys = (int)9239L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_convoys = 9239
     * }
     */
    public static int ITIS_VehicleGroupAffected_convoys() {
        return ITIS_VehicleGroupAffected_convoys;
    }
    private static final int ITIS_VehicleGroupAffected_maintenance_vehicles = (int)9240L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_maintenance_vehicles = 9240
     * }
     */
    public static int ITIS_VehicleGroupAffected_maintenance_vehicles() {
        return ITIS_VehicleGroupAffected_maintenance_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_delivery_vehicles = (int)9241L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_delivery_vehicles = 9241
     * }
     */
    public static int ITIS_VehicleGroupAffected_delivery_vehicles() {
        return ITIS_VehicleGroupAffected_delivery_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_even_numbered_license_plates = (int)9242L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_even_numbered_license_plates = 9242
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_even_numbered_license_plates() {
        return ITIS_VehicleGroupAffected_vehicles_with_even_numbered_license_plates;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_odd_numbered_license_plates = (int)9243L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_odd_numbered_license_plates = 9243
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_odd_numbered_license_plates() {
        return ITIS_VehicleGroupAffected_vehicles_with_odd_numbered_license_plates;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_parking_permits = (int)9244L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_parking_permits = 9244
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_parking_permits() {
        return ITIS_VehicleGroupAffected_vehicles_with_parking_permits;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_with_catalytic_converters = (int)9245L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_with_catalytic_converters = 9245
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_with_catalytic_converters() {
        return ITIS_VehicleGroupAffected_vehicles_with_catalytic_converters;
    }
    private static final int ITIS_VehicleGroupAffected_vehicles_without_catalytic_converters = (int)9246L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_vehicles_without_catalytic_converters = 9246
     * }
     */
    public static int ITIS_VehicleGroupAffected_vehicles_without_catalytic_converters() {
        return ITIS_VehicleGroupAffected_vehicles_without_catalytic_converters;
    }
    private static final int ITIS_VehicleGroupAffected_gas_powered_vehicles = (int)9247L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_gas_powered_vehicles = 9247
     * }
     */
    public static int ITIS_VehicleGroupAffected_gas_powered_vehicles() {
        return ITIS_VehicleGroupAffected_gas_powered_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_diesel_powered_vehicles = (int)9248L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_diesel_powered_vehicles = 9248
     * }
     */
    public static int ITIS_VehicleGroupAffected_diesel_powered_vehicles() {
        return ITIS_VehicleGroupAffected_diesel_powered_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_lPG_vehicles = (int)9249L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_lPG_vehicles = 9249
     * }
     */
    public static int ITIS_VehicleGroupAffected_lPG_vehicles() {
        return ITIS_VehicleGroupAffected_lPG_vehicles;
    }
    private static final int ITIS_VehicleGroupAffected_military_convoys = (int)9250L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_military_convoys = 9250
     * }
     */
    public static int ITIS_VehicleGroupAffected_military_convoys() {
        return ITIS_VehicleGroupAffected_military_convoys;
    }
    private static final int ITIS_VehicleGroupAffected_military_vehicles = (int)9251L;
    /**
     * {@snippet lang=c :
     * enum ITIS_VehicleGroupAffected.ITIS_VehicleGroupAffected_military_vehicles = 9251
     * }
     */
    public static int ITIS_VehicleGroupAffected_military_vehicles() {
        return ITIS_VehicleGroupAffected_military_vehicles;
    }
    /**
     * {@snippet lang=c :
     * typedef long ITIS_VehicleGroupAffected_t
     * }
     */
    public static final OfLong ITIS_VehicleGroupAffected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ITIS_VehicleGroupAffected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ITIS_VehicleGroupAffected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_VehicleGroupAffected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ITIS_VehicleGroupAffected_constr_1$layout() {
        return asn_PER_type_ITIS_VehicleGroupAffected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_VehicleGroupAffected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ITIS_VehicleGroupAffected_constr_1() {
        return asn_PER_type_ITIS_VehicleGroupAffected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_VehicleGroupAffected_constr_1
     * }
     */
    public static void asn_PER_type_ITIS_VehicleGroupAffected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ITIS_VehicleGroupAffected_constr_1$constants.SEGMENT, 0L, asn_PER_type_ITIS_VehicleGroupAffected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ITIS_VehicleGroupAffected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ITIS_VehicleGroupAffected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_VehicleGroupAffected
     * }
     */
    public static GroupLayout asn_DEF_ITIS_VehicleGroupAffected$layout() {
        return asn_DEF_ITIS_VehicleGroupAffected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_VehicleGroupAffected
     * }
     */
    public static MemorySegment asn_DEF_ITIS_VehicleGroupAffected() {
        return asn_DEF_ITIS_VehicleGroupAffected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_VehicleGroupAffected
     * }
     */
    public static void asn_DEF_ITIS_VehicleGroupAffected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ITIS_VehicleGroupAffected$constants.SEGMENT, 0L, asn_DEF_ITIS_VehicleGroupAffected$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ITIS_VehicleGroupAffected_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ITIS_VehicleGroupAffected_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_VehicleGroupAffected_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ITIS_VehicleGroupAffected_specs_1$layout() {
        return asn_SPC_ITIS_VehicleGroupAffected_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_VehicleGroupAffected_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ITIS_VehicleGroupAffected_specs_1() {
        return asn_SPC_ITIS_VehicleGroupAffected_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_VehicleGroupAffected_specs_1
     * }
     */
    public static void asn_SPC_ITIS_VehicleGroupAffected_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ITIS_VehicleGroupAffected_specs_1$constants.SEGMENT, 0L, asn_SPC_ITIS_VehicleGroupAffected_specs_1$constants.LAYOUT.byteSize());
    }

    private static class ITIS_VehicleGroupAffected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITIS_VehicleGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_free$descriptor() {
        return ITIS_VehicleGroupAffected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITIS_VehicleGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_free$handle() {
        return ITIS_VehicleGroupAffected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITIS_VehicleGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_free$address() {
        return ITIS_VehicleGroupAffected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITIS_VehicleGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ITIS_VehicleGroupAffected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ITIS_VehicleGroupAffected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_print$descriptor() {
        return ITIS_VehicleGroupAffected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_print$handle() {
        return ITIS_VehicleGroupAffected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_print$address() {
        return ITIS_VehicleGroupAffected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ITIS_VehicleGroupAffected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_VehicleGroupAffected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_constraint$descriptor() {
        return ITIS_VehicleGroupAffected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_constraint$handle() {
        return ITIS_VehicleGroupAffected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_constraint$address() {
        return ITIS_VehicleGroupAffected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_VehicleGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ITIS_VehicleGroupAffected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_VehicleGroupAffected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_decode_ber$descriptor() {
        return ITIS_VehicleGroupAffected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_decode_ber$handle() {
        return ITIS_VehicleGroupAffected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_ber$address() {
        return ITIS_VehicleGroupAffected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ITIS_VehicleGroupAffected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_der$descriptor() {
        return ITIS_VehicleGroupAffected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_der$handle() {
        return ITIS_VehicleGroupAffected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_der$address() {
        return ITIS_VehicleGroupAffected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_VehicleGroupAffected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_decode_xer$descriptor() {
        return ITIS_VehicleGroupAffected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_decode_xer$handle() {
        return ITIS_VehicleGroupAffected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_xer$address() {
        return ITIS_VehicleGroupAffected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_VehicleGroupAffected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_xer$descriptor() {
        return ITIS_VehicleGroupAffected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_xer$handle() {
        return ITIS_VehicleGroupAffected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_xer$address() {
        return ITIS_VehicleGroupAffected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_VehicleGroupAffected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_jer$descriptor() {
        return ITIS_VehicleGroupAffected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_jer$handle() {
        return ITIS_VehicleGroupAffected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_jer$address() {
        return ITIS_VehicleGroupAffected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ITIS_VehicleGroupAffected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_decode_oer$descriptor() {
        return ITIS_VehicleGroupAffected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_decode_oer$handle() {
        return ITIS_VehicleGroupAffected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_oer$address() {
        return ITIS_VehicleGroupAffected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_VehicleGroupAffected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_oer$descriptor() {
        return ITIS_VehicleGroupAffected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_oer$handle() {
        return ITIS_VehicleGroupAffected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_oer$address() {
        return ITIS_VehicleGroupAffected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_VehicleGroupAffected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_decode_uper$descriptor() {
        return ITIS_VehicleGroupAffected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_decode_uper$handle() {
        return ITIS_VehicleGroupAffected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_uper$address() {
        return ITIS_VehicleGroupAffected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_VehicleGroupAffected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_uper$descriptor() {
        return ITIS_VehicleGroupAffected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_uper$handle() {
        return ITIS_VehicleGroupAffected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_uper$address() {
        return ITIS_VehicleGroupAffected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_VehicleGroupAffected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_decode_aper$descriptor() {
        return ITIS_VehicleGroupAffected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_decode_aper$handle() {
        return ITIS_VehicleGroupAffected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_aper$address() {
        return ITIS_VehicleGroupAffected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_VehicleGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_VehicleGroupAffected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_VehicleGroupAffected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_VehicleGroupAffected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_VehicleGroupAffected_encode_aper$descriptor() {
        return ITIS_VehicleGroupAffected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_VehicleGroupAffected_encode_aper$handle() {
        return ITIS_VehicleGroupAffected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_aper$address() {
        return ITIS_VehicleGroupAffected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_VehicleGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_VehicleGroupAffected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_VehicleGroupAffected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_VehicleGroupAffected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIS_IncidentResponseEquipment_ground_fire_suppression = (int)9985L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_ground_fire_suppression = 9985
     * }
     */
    public static int ITIS_IncidentResponseEquipment_ground_fire_suppression() {
        return ITIS_IncidentResponseEquipment_ground_fire_suppression;
    }
    private static final int ITIS_IncidentResponseEquipment_heavy_ground_equipment = (int)9986L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_heavy_ground_equipment = 9986
     * }
     */
    public static int ITIS_IncidentResponseEquipment_heavy_ground_equipment() {
        return ITIS_IncidentResponseEquipment_heavy_ground_equipment;
    }
    private static final int ITIS_IncidentResponseEquipment_aircraft = (int)9988L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_aircraft = 9988
     * }
     */
    public static int ITIS_IncidentResponseEquipment_aircraft() {
        return ITIS_IncidentResponseEquipment_aircraft;
    }
    private static final int ITIS_IncidentResponseEquipment_marine_equipment = (int)9989L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_marine_equipment = 9989
     * }
     */
    public static int ITIS_IncidentResponseEquipment_marine_equipment() {
        return ITIS_IncidentResponseEquipment_marine_equipment;
    }
    private static final int ITIS_IncidentResponseEquipment_support_equipment = (int)9990L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_support_equipment = 9990
     * }
     */
    public static int ITIS_IncidentResponseEquipment_support_equipment() {
        return ITIS_IncidentResponseEquipment_support_equipment;
    }
    private static final int ITIS_IncidentResponseEquipment_medical_rescue_unit = (int)9991L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_medical_rescue_unit = 9991
     * }
     */
    public static int ITIS_IncidentResponseEquipment_medical_rescue_unit() {
        return ITIS_IncidentResponseEquipment_medical_rescue_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_other = (int)9993L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_other = 9993
     * }
     */
    public static int ITIS_IncidentResponseEquipment_other() {
        return ITIS_IncidentResponseEquipment_other;
    }
    private static final int ITIS_IncidentResponseEquipment_ground_fire_suppression_other = (int)9994L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_ground_fire_suppression_other = 9994
     * }
     */
    public static int ITIS_IncidentResponseEquipment_ground_fire_suppression_other() {
        return ITIS_IncidentResponseEquipment_ground_fire_suppression_other;
    }
    private static final int ITIS_IncidentResponseEquipment_engine = (int)9995L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_engine = 9995
     * }
     */
    public static int ITIS_IncidentResponseEquipment_engine() {
        return ITIS_IncidentResponseEquipment_engine;
    }
    private static final int ITIS_IncidentResponseEquipment_truck_or_aerial = (int)9996L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_truck_or_aerial = 9996
     * }
     */
    public static int ITIS_IncidentResponseEquipment_truck_or_aerial() {
        return ITIS_IncidentResponseEquipment_truck_or_aerial;
    }
    private static final int ITIS_IncidentResponseEquipment_quint = (int)9997L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_quint = 9997
     * }
     */
    public static int ITIS_IncidentResponseEquipment_quint() {
        return ITIS_IncidentResponseEquipment_quint;
    }
    private static final int ITIS_IncidentResponseEquipment_tanker_pumper_combination = (int)9998L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_tanker_pumper_combination = 9998
     * }
     */
    public static int ITIS_IncidentResponseEquipment_tanker_pumper_combination() {
        return ITIS_IncidentResponseEquipment_tanker_pumper_combination;
    }
    private static final int ITIS_IncidentResponseEquipment_brush_truck = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_brush_truck = 10000
     * }
     */
    public static int ITIS_IncidentResponseEquipment_brush_truck() {
        return ITIS_IncidentResponseEquipment_brush_truck;
    }
    private static final int ITIS_IncidentResponseEquipment_aircraft_rescue_firefighting = (int)10001L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_aircraft_rescue_firefighting = 10001
     * }
     */
    public static int ITIS_IncidentResponseEquipment_aircraft_rescue_firefighting() {
        return ITIS_IncidentResponseEquipment_aircraft_rescue_firefighting;
    }
    private static final int ITIS_IncidentResponseEquipment_heavy_ground_equipment_other = (int)10004L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_heavy_ground_equipment_other = 10004
     * }
     */
    public static int ITIS_IncidentResponseEquipment_heavy_ground_equipment_other() {
        return ITIS_IncidentResponseEquipment_heavy_ground_equipment_other;
    }
    private static final int ITIS_IncidentResponseEquipment_dozer_or_plow = (int)10005L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_dozer_or_plow = 10005
     * }
     */
    public static int ITIS_IncidentResponseEquipment_dozer_or_plow() {
        return ITIS_IncidentResponseEquipment_dozer_or_plow;
    }
    private static final int ITIS_IncidentResponseEquipment_tractor = (int)10006L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_tractor = 10006
     * }
     */
    public static int ITIS_IncidentResponseEquipment_tractor() {
        return ITIS_IncidentResponseEquipment_tractor;
    }
    private static final int ITIS_IncidentResponseEquipment_tanker_or_tender = (int)10008L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_tanker_or_tender = 10008
     * }
     */
    public static int ITIS_IncidentResponseEquipment_tanker_or_tender() {
        return ITIS_IncidentResponseEquipment_tanker_or_tender;
    }
    private static final int ITIS_IncidentResponseEquipment_aircraft_other = (int)10024L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_aircraft_other = 10024
     * }
     */
    public static int ITIS_IncidentResponseEquipment_aircraft_other() {
        return ITIS_IncidentResponseEquipment_aircraft_other;
    }
    private static final int ITIS_IncidentResponseEquipment_aircraft_fixed_wing_tanker = (int)10025L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_aircraft_fixed_wing_tanker = 10025
     * }
     */
    public static int ITIS_IncidentResponseEquipment_aircraft_fixed_wing_tanker() {
        return ITIS_IncidentResponseEquipment_aircraft_fixed_wing_tanker;
    }
    private static final int ITIS_IncidentResponseEquipment_helitanker = (int)10026L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_helitanker = 10026
     * }
     */
    public static int ITIS_IncidentResponseEquipment_helitanker() {
        return ITIS_IncidentResponseEquipment_helitanker;
    }
    private static final int ITIS_IncidentResponseEquipment_helicopter = (int)10027L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_helicopter = 10027
     * }
     */
    public static int ITIS_IncidentResponseEquipment_helicopter() {
        return ITIS_IncidentResponseEquipment_helicopter;
    }
    private static final int ITIS_IncidentResponseEquipment_marine_equipment_other = (int)10034L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_marine_equipment_other = 10034
     * }
     */
    public static int ITIS_IncidentResponseEquipment_marine_equipment_other() {
        return ITIS_IncidentResponseEquipment_marine_equipment_other;
    }
    private static final int ITIS_IncidentResponseEquipment_fire_boat_with_pump = (int)10035L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_fire_boat_with_pump = 10035
     * }
     */
    public static int ITIS_IncidentResponseEquipment_fire_boat_with_pump() {
        return ITIS_IncidentResponseEquipment_fire_boat_with_pump;
    }
    private static final int ITIS_IncidentResponseEquipment_boat_no_pump = (int)10036L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_boat_no_pump = 10036
     * }
     */
    public static int ITIS_IncidentResponseEquipment_boat_no_pump() {
        return ITIS_IncidentResponseEquipment_boat_no_pump;
    }
    private static final int ITIS_IncidentResponseEquipment_support_apparatus_other = (int)10044L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_support_apparatus_other = 10044
     * }
     */
    public static int ITIS_IncidentResponseEquipment_support_apparatus_other() {
        return ITIS_IncidentResponseEquipment_support_apparatus_other;
    }
    private static final int ITIS_IncidentResponseEquipment_breathing_apparatus_support = (int)10045L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_breathing_apparatus_support = 10045
     * }
     */
    public static int ITIS_IncidentResponseEquipment_breathing_apparatus_support() {
        return ITIS_IncidentResponseEquipment_breathing_apparatus_support;
    }
    private static final int ITIS_IncidentResponseEquipment_light_and_air_unit = (int)10046L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_light_and_air_unit = 10046
     * }
     */
    public static int ITIS_IncidentResponseEquipment_light_and_air_unit() {
        return ITIS_IncidentResponseEquipment_light_and_air_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_medical_rescue_unit_other = (int)10054L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_medical_rescue_unit_other = 10054
     * }
     */
    public static int ITIS_IncidentResponseEquipment_medical_rescue_unit_other() {
        return ITIS_IncidentResponseEquipment_medical_rescue_unit_other;
    }
    private static final int ITIS_IncidentResponseEquipment_rescue_unit = (int)10055L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_rescue_unit = 10055
     * }
     */
    public static int ITIS_IncidentResponseEquipment_rescue_unit() {
        return ITIS_IncidentResponseEquipment_rescue_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_urban_search_rescue_unit = (int)10056L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_urban_search_rescue_unit = 10056
     * }
     */
    public static int ITIS_IncidentResponseEquipment_urban_search_rescue_unit() {
        return ITIS_IncidentResponseEquipment_urban_search_rescue_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_high_angle_rescue = (int)10057L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_high_angle_rescue = 10057
     * }
     */
    public static int ITIS_IncidentResponseEquipment_high_angle_rescue() {
        return ITIS_IncidentResponseEquipment_high_angle_rescue;
    }
    private static final int ITIS_IncidentResponseEquipment_crash_fire_rescue = (int)10058L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_crash_fire_rescue = 10058
     * }
     */
    public static int ITIS_IncidentResponseEquipment_crash_fire_rescue() {
        return ITIS_IncidentResponseEquipment_crash_fire_rescue;
    }
    private static final int ITIS_IncidentResponseEquipment_bLS_unit = (int)10059L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_bLS_unit = 10059
     * }
     */
    public static int ITIS_IncidentResponseEquipment_bLS_unit() {
        return ITIS_IncidentResponseEquipment_bLS_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_aLS_unit = (int)10060L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_aLS_unit = 10060
     * }
     */
    public static int ITIS_IncidentResponseEquipment_aLS_unit() {
        return ITIS_IncidentResponseEquipment_aLS_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_mobile_command_post = (int)10075L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_mobile_command_post = 10075
     * }
     */
    public static int ITIS_IncidentResponseEquipment_mobile_command_post() {
        return ITIS_IncidentResponseEquipment_mobile_command_post;
    }
    private static final int ITIS_IncidentResponseEquipment_chief_officer_car = (int)10076L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_chief_officer_car = 10076
     * }
     */
    public static int ITIS_IncidentResponseEquipment_chief_officer_car() {
        return ITIS_IncidentResponseEquipment_chief_officer_car;
    }
    private static final int ITIS_IncidentResponseEquipment_hAZMAT_unit = (int)10077L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_hAZMAT_unit = 10077
     * }
     */
    public static int ITIS_IncidentResponseEquipment_hAZMAT_unit() {
        return ITIS_IncidentResponseEquipment_hAZMAT_unit;
    }
    private static final int ITIS_IncidentResponseEquipment_type_i_hand_crew = (int)10078L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_type_i_hand_crew = 10078
     * }
     */
    public static int ITIS_IncidentResponseEquipment_type_i_hand_crew() {
        return ITIS_IncidentResponseEquipment_type_i_hand_crew;
    }
    private static final int ITIS_IncidentResponseEquipment_type_ii_hand_crew = (int)10079L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_type_ii_hand_crew = 10079
     * }
     */
    public static int ITIS_IncidentResponseEquipment_type_ii_hand_crew() {
        return ITIS_IncidentResponseEquipment_type_ii_hand_crew;
    }
    private static final int ITIS_IncidentResponseEquipment_privately_owned_vehicle = (int)10083L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_privately_owned_vehicle = 10083
     * }
     */
    public static int ITIS_IncidentResponseEquipment_privately_owned_vehicle() {
        return ITIS_IncidentResponseEquipment_privately_owned_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_other_apparatus_resource = (int)10084L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_other_apparatus_resource = 10084
     * }
     */
    public static int ITIS_IncidentResponseEquipment_other_apparatus_resource() {
        return ITIS_IncidentResponseEquipment_other_apparatus_resource;
    }
    private static final int ITIS_IncidentResponseEquipment_ambulance = (int)10085L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_ambulance = 10085
     * }
     */
    public static int ITIS_IncidentResponseEquipment_ambulance() {
        return ITIS_IncidentResponseEquipment_ambulance;
    }
    private static final int ITIS_IncidentResponseEquipment_bomb_squad_van = (int)10086L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_bomb_squad_van = 10086
     * }
     */
    public static int ITIS_IncidentResponseEquipment_bomb_squad_van() {
        return ITIS_IncidentResponseEquipment_bomb_squad_van;
    }
    private static final int ITIS_IncidentResponseEquipment_combine_harvester = (int)10087L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_combine_harvester = 10087
     * }
     */
    public static int ITIS_IncidentResponseEquipment_combine_harvester() {
        return ITIS_IncidentResponseEquipment_combine_harvester;
    }
    private static final int ITIS_IncidentResponseEquipment_construction_vehicle = (int)10088L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_construction_vehicle = 10088
     * }
     */
    public static int ITIS_IncidentResponseEquipment_construction_vehicle() {
        return ITIS_IncidentResponseEquipment_construction_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_farm_tractor = (int)10089L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_farm_tractor = 10089
     * }
     */
    public static int ITIS_IncidentResponseEquipment_farm_tractor() {
        return ITIS_IncidentResponseEquipment_farm_tractor;
    }
    private static final int ITIS_IncidentResponseEquipment_grass_cutting_machines = (int)10090L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_grass_cutting_machines = 10090
     * }
     */
    public static int ITIS_IncidentResponseEquipment_grass_cutting_machines() {
        return ITIS_IncidentResponseEquipment_grass_cutting_machines;
    }
    private static final int ITIS_IncidentResponseEquipment_hAZMAT_containment_tow = (int)10091L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_hAZMAT_containment_tow = 10091
     * }
     */
    public static int ITIS_IncidentResponseEquipment_hAZMAT_containment_tow() {
        return ITIS_IncidentResponseEquipment_hAZMAT_containment_tow;
    }
    private static final int ITIS_IncidentResponseEquipment_heavy_tow = (int)10092L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_heavy_tow = 10092
     * }
     */
    public static int ITIS_IncidentResponseEquipment_heavy_tow() {
        return ITIS_IncidentResponseEquipment_heavy_tow;
    }
    private static final int ITIS_IncidentResponseEquipment_light_tow = (int)10094L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_light_tow = 10094
     * }
     */
    public static int ITIS_IncidentResponseEquipment_light_tow() {
        return ITIS_IncidentResponseEquipment_light_tow;
    }
    private static final int ITIS_IncidentResponseEquipment_flatbed_tow = (int)10114L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_flatbed_tow = 10114
     * }
     */
    public static int ITIS_IncidentResponseEquipment_flatbed_tow() {
        return ITIS_IncidentResponseEquipment_flatbed_tow;
    }
    private static final int ITIS_IncidentResponseEquipment_hedge_cutting_machines = (int)10093L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_hedge_cutting_machines = 10093
     * }
     */
    public static int ITIS_IncidentResponseEquipment_hedge_cutting_machines() {
        return ITIS_IncidentResponseEquipment_hedge_cutting_machines;
    }
    private static final int ITIS_IncidentResponseEquipment_mobile_crane = (int)10095L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_mobile_crane = 10095
     * }
     */
    public static int ITIS_IncidentResponseEquipment_mobile_crane() {
        return ITIS_IncidentResponseEquipment_mobile_crane;
    }
    private static final int ITIS_IncidentResponseEquipment_refuse_collection_vehicle = (int)10096L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_refuse_collection_vehicle = 10096
     * }
     */
    public static int ITIS_IncidentResponseEquipment_refuse_collection_vehicle() {
        return ITIS_IncidentResponseEquipment_refuse_collection_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_resurfacing_vehicle = (int)10097L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_resurfacing_vehicle = 10097
     * }
     */
    public static int ITIS_IncidentResponseEquipment_resurfacing_vehicle() {
        return ITIS_IncidentResponseEquipment_resurfacing_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_road_sweeper = (int)10098L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_road_sweeper = 10098
     * }
     */
    public static int ITIS_IncidentResponseEquipment_road_sweeper() {
        return ITIS_IncidentResponseEquipment_road_sweeper;
    }
    private static final int ITIS_IncidentResponseEquipment_roadside_litter_collection_crews = (int)10099L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_roadside_litter_collection_crews = 10099
     * }
     */
    public static int ITIS_IncidentResponseEquipment_roadside_litter_collection_crews() {
        return ITIS_IncidentResponseEquipment_roadside_litter_collection_crews;
    }
    private static final int ITIS_IncidentResponseEquipment_salvage_vehicle = (int)10100L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_salvage_vehicle = 10100
     * }
     */
    public static int ITIS_IncidentResponseEquipment_salvage_vehicle() {
        return ITIS_IncidentResponseEquipment_salvage_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_sand_truck = (int)10101L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_sand_truck = 10101
     * }
     */
    public static int ITIS_IncidentResponseEquipment_sand_truck() {
        return ITIS_IncidentResponseEquipment_sand_truck;
    }
    private static final int ITIS_IncidentResponseEquipment_snowplow = (int)10102L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_snowplow = 10102
     * }
     */
    public static int ITIS_IncidentResponseEquipment_snowplow() {
        return ITIS_IncidentResponseEquipment_snowplow;
    }
    private static final int ITIS_IncidentResponseEquipment_steam_roller = (int)10103L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_steam_roller = 10103
     * }
     */
    public static int ITIS_IncidentResponseEquipment_steam_roller() {
        return ITIS_IncidentResponseEquipment_steam_roller;
    }
    private static final int ITIS_IncidentResponseEquipment_swat_team_van = (int)10104L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_swat_team_van = 10104
     * }
     */
    public static int ITIS_IncidentResponseEquipment_swat_team_van() {
        return ITIS_IncidentResponseEquipment_swat_team_van;
    }
    private static final int ITIS_IncidentResponseEquipment_track_laying_vehicle = (int)10105L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_track_laying_vehicle = 10105
     * }
     */
    public static int ITIS_IncidentResponseEquipment_track_laying_vehicle() {
        return ITIS_IncidentResponseEquipment_track_laying_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_unknown_vehicle = (int)10106L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_unknown_vehicle = 10106
     * }
     */
    public static int ITIS_IncidentResponseEquipment_unknown_vehicle() {
        return ITIS_IncidentResponseEquipment_unknown_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_white_lining_vehicle = (int)10107L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_white_lining_vehicle = 10107
     * }
     */
    public static int ITIS_IncidentResponseEquipment_white_lining_vehicle() {
        return ITIS_IncidentResponseEquipment_white_lining_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_dump_truck = (int)10108L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_dump_truck = 10108
     * }
     */
    public static int ITIS_IncidentResponseEquipment_dump_truck() {
        return ITIS_IncidentResponseEquipment_dump_truck;
    }
    private static final int ITIS_IncidentResponseEquipment_supervisor_vehicle = (int)10109L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_supervisor_vehicle = 10109
     * }
     */
    public static int ITIS_IncidentResponseEquipment_supervisor_vehicle() {
        return ITIS_IncidentResponseEquipment_supervisor_vehicle;
    }
    private static final int ITIS_IncidentResponseEquipment_snow_blower = (int)10110L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_snow_blower = 10110
     * }
     */
    public static int ITIS_IncidentResponseEquipment_snow_blower() {
        return ITIS_IncidentResponseEquipment_snow_blower;
    }
    private static final int ITIS_IncidentResponseEquipment_rotary_snow_blower = (int)10111L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_rotary_snow_blower = 10111
     * }
     */
    public static int ITIS_IncidentResponseEquipment_rotary_snow_blower() {
        return ITIS_IncidentResponseEquipment_rotary_snow_blower;
    }
    private static final int ITIS_IncidentResponseEquipment_road_grader = (int)10112L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_road_grader = 10112
     * }
     */
    public static int ITIS_IncidentResponseEquipment_road_grader() {
        return ITIS_IncidentResponseEquipment_road_grader;
    }
    private static final int ITIS_IncidentResponseEquipment_steam_truck = (int)10113L;
    /**
     * {@snippet lang=c :
     * enum ITIS_IncidentResponseEquipment.ITIS_IncidentResponseEquipment_steam_truck = 10113
     * }
     */
    public static int ITIS_IncidentResponseEquipment_steam_truck() {
        return ITIS_IncidentResponseEquipment_steam_truck;
    }
    /**
     * {@snippet lang=c :
     * typedef long ITIS_IncidentResponseEquipment_t
     * }
     */
    public static final OfLong ITIS_IncidentResponseEquipment_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ITIS_IncidentResponseEquipment_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_IncidentResponseEquipment_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$layout() {
        return asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_IncidentResponseEquipment_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ITIS_IncidentResponseEquipment_constr_1() {
        return asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_IncidentResponseEquipment_constr_1
     * }
     */
    public static void asn_PER_type_ITIS_IncidentResponseEquipment_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$constants.SEGMENT, 0L, asn_PER_type_ITIS_IncidentResponseEquipment_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ITIS_IncidentResponseEquipment$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ITIS_IncidentResponseEquipment").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_IncidentResponseEquipment
     * }
     */
    public static GroupLayout asn_DEF_ITIS_IncidentResponseEquipment$layout() {
        return asn_DEF_ITIS_IncidentResponseEquipment$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_IncidentResponseEquipment
     * }
     */
    public static MemorySegment asn_DEF_ITIS_IncidentResponseEquipment() {
        return asn_DEF_ITIS_IncidentResponseEquipment$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_IncidentResponseEquipment
     * }
     */
    public static void asn_DEF_ITIS_IncidentResponseEquipment(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ITIS_IncidentResponseEquipment$constants.SEGMENT, 0L, asn_DEF_ITIS_IncidentResponseEquipment$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ITIS_IncidentResponseEquipment_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ITIS_IncidentResponseEquipment_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_IncidentResponseEquipment_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ITIS_IncidentResponseEquipment_specs_1$layout() {
        return asn_SPC_ITIS_IncidentResponseEquipment_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_IncidentResponseEquipment_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ITIS_IncidentResponseEquipment_specs_1() {
        return asn_SPC_ITIS_IncidentResponseEquipment_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_IncidentResponseEquipment_specs_1
     * }
     */
    public static void asn_SPC_ITIS_IncidentResponseEquipment_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ITIS_IncidentResponseEquipment_specs_1$constants.SEGMENT, 0L, asn_SPC_ITIS_IncidentResponseEquipment_specs_1$constants.LAYOUT.byteSize());
    }

    private static class ITIS_IncidentResponseEquipment_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITIS_IncidentResponseEquipment_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_free$descriptor() {
        return ITIS_IncidentResponseEquipment_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITIS_IncidentResponseEquipment_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_free$handle() {
        return ITIS_IncidentResponseEquipment_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITIS_IncidentResponseEquipment_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_free$address() {
        return ITIS_IncidentResponseEquipment_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITIS_IncidentResponseEquipment_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ITIS_IncidentResponseEquipment_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ITIS_IncidentResponseEquipment_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_print$descriptor() {
        return ITIS_IncidentResponseEquipment_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_print$handle() {
        return ITIS_IncidentResponseEquipment_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_print$address() {
        return ITIS_IncidentResponseEquipment_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ITIS_IncidentResponseEquipment_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_IncidentResponseEquipment_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_constraint$descriptor() {
        return ITIS_IncidentResponseEquipment_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_constraint$handle() {
        return ITIS_IncidentResponseEquipment_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_constraint$address() {
        return ITIS_IncidentResponseEquipment_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_IncidentResponseEquipment_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ITIS_IncidentResponseEquipment_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_IncidentResponseEquipment_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_decode_ber$descriptor() {
        return ITIS_IncidentResponseEquipment_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_decode_ber$handle() {
        return ITIS_IncidentResponseEquipment_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_ber$address() {
        return ITIS_IncidentResponseEquipment_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ITIS_IncidentResponseEquipment_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_der$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_der$handle() {
        return ITIS_IncidentResponseEquipment_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_der$address() {
        return ITIS_IncidentResponseEquipment_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_decode_xer$descriptor() {
        return ITIS_IncidentResponseEquipment_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_decode_xer$handle() {
        return ITIS_IncidentResponseEquipment_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_xer$address() {
        return ITIS_IncidentResponseEquipment_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_IncidentResponseEquipment_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_xer$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_xer$handle() {
        return ITIS_IncidentResponseEquipment_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_xer$address() {
        return ITIS_IncidentResponseEquipment_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_jer$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_jer$handle() {
        return ITIS_IncidentResponseEquipment_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_jer$address() {
        return ITIS_IncidentResponseEquipment_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_decode_oer$descriptor() {
        return ITIS_IncidentResponseEquipment_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_decode_oer$handle() {
        return ITIS_IncidentResponseEquipment_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_oer$address() {
        return ITIS_IncidentResponseEquipment_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_IncidentResponseEquipment_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_oer$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_oer$handle() {
        return ITIS_IncidentResponseEquipment_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_oer$address() {
        return ITIS_IncidentResponseEquipment_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_decode_uper$descriptor() {
        return ITIS_IncidentResponseEquipment_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_decode_uper$handle() {
        return ITIS_IncidentResponseEquipment_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_uper$address() {
        return ITIS_IncidentResponseEquipment_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_IncidentResponseEquipment_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_uper$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_uper$handle() {
        return ITIS_IncidentResponseEquipment_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_uper$address() {
        return ITIS_IncidentResponseEquipment_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_decode_aper$descriptor() {
        return ITIS_IncidentResponseEquipment_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_decode_aper$handle() {
        return ITIS_IncidentResponseEquipment_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_aper$address() {
        return ITIS_IncidentResponseEquipment_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_IncidentResponseEquipment_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_IncidentResponseEquipment_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_IncidentResponseEquipment_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_IncidentResponseEquipment_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_IncidentResponseEquipment_encode_aper$descriptor() {
        return ITIS_IncidentResponseEquipment_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_IncidentResponseEquipment_encode_aper$handle() {
        return ITIS_IncidentResponseEquipment_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_aper$address() {
        return ITIS_IncidentResponseEquipment_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_IncidentResponseEquipment_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_IncidentResponseEquipment_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_IncidentResponseEquipment_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_IncidentResponseEquipment_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIS_ResponderGroupAffected_emergency_vehicle_units = (int)9729L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_emergency_vehicle_units = 9729
     * }
     */
    public static int ITIS_ResponderGroupAffected_emergency_vehicle_units() {
        return ITIS_ResponderGroupAffected_emergency_vehicle_units;
    }
    private static final int ITIS_ResponderGroupAffected_federal_law_enforcement_units = (int)9730L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_federal_law_enforcement_units = 9730
     * }
     */
    public static int ITIS_ResponderGroupAffected_federal_law_enforcement_units() {
        return ITIS_ResponderGroupAffected_federal_law_enforcement_units;
    }
    private static final int ITIS_ResponderGroupAffected_state_police_units = (int)9731L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_state_police_units = 9731
     * }
     */
    public static int ITIS_ResponderGroupAffected_state_police_units() {
        return ITIS_ResponderGroupAffected_state_police_units;
    }
    private static final int ITIS_ResponderGroupAffected_county_police_units = (int)9732L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_county_police_units = 9732
     * }
     */
    public static int ITIS_ResponderGroupAffected_county_police_units() {
        return ITIS_ResponderGroupAffected_county_police_units;
    }
    private static final int ITIS_ResponderGroupAffected_local_police_units = (int)9733L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_local_police_units = 9733
     * }
     */
    public static int ITIS_ResponderGroupAffected_local_police_units() {
        return ITIS_ResponderGroupAffected_local_police_units;
    }
    private static final int ITIS_ResponderGroupAffected_ambulance_units = (int)9734L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_ambulance_units = 9734
     * }
     */
    public static int ITIS_ResponderGroupAffected_ambulance_units() {
        return ITIS_ResponderGroupAffected_ambulance_units;
    }
    private static final int ITIS_ResponderGroupAffected_rescue_units = (int)9735L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_rescue_units = 9735
     * }
     */
    public static int ITIS_ResponderGroupAffected_rescue_units() {
        return ITIS_ResponderGroupAffected_rescue_units;
    }
    private static final int ITIS_ResponderGroupAffected_fire_units = (int)9736L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_fire_units = 9736
     * }
     */
    public static int ITIS_ResponderGroupAffected_fire_units() {
        return ITIS_ResponderGroupAffected_fire_units;
    }
    private static final int ITIS_ResponderGroupAffected_hAZMAT_units = (int)9737L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_hAZMAT_units = 9737
     * }
     */
    public static int ITIS_ResponderGroupAffected_hAZMAT_units() {
        return ITIS_ResponderGroupAffected_hAZMAT_units;
    }
    private static final int ITIS_ResponderGroupAffected_light_tow_unit = (int)9738L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_light_tow_unit = 9738
     * }
     */
    public static int ITIS_ResponderGroupAffected_light_tow_unit() {
        return ITIS_ResponderGroupAffected_light_tow_unit;
    }
    private static final int ITIS_ResponderGroupAffected_heavy_tow_unit = (int)9739L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_heavy_tow_unit = 9739
     * }
     */
    public static int ITIS_ResponderGroupAffected_heavy_tow_unit() {
        return ITIS_ResponderGroupAffected_heavy_tow_unit;
    }
    private static final int ITIS_ResponderGroupAffected_freeway_service_patrols = (int)9740L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_freeway_service_patrols = 9740
     * }
     */
    public static int ITIS_ResponderGroupAffected_freeway_service_patrols() {
        return ITIS_ResponderGroupAffected_freeway_service_patrols;
    }
    private static final int ITIS_ResponderGroupAffected_transportation_response_units = (int)9741L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_transportation_response_units = 9741
     * }
     */
    public static int ITIS_ResponderGroupAffected_transportation_response_units() {
        return ITIS_ResponderGroupAffected_transportation_response_units;
    }
    private static final int ITIS_ResponderGroupAffected_private_contractor_response_units = (int)9742L;
    /**
     * {@snippet lang=c :
     * enum ITIS_ResponderGroupAffected.ITIS_ResponderGroupAffected_private_contractor_response_units = 9742
     * }
     */
    public static int ITIS_ResponderGroupAffected_private_contractor_response_units() {
        return ITIS_ResponderGroupAffected_private_contractor_response_units;
    }
    /**
     * {@snippet lang=c :
     * typedef long ITIS_ResponderGroupAffected_t
     * }
     */
    public static final OfLong ITIS_ResponderGroupAffected_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ITIS_ResponderGroupAffected_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ITIS_ResponderGroupAffected_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_ResponderGroupAffected_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ITIS_ResponderGroupAffected_constr_1$layout() {
        return asn_PER_type_ITIS_ResponderGroupAffected_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_ResponderGroupAffected_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ITIS_ResponderGroupAffected_constr_1() {
        return asn_PER_type_ITIS_ResponderGroupAffected_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ITIS_ResponderGroupAffected_constr_1
     * }
     */
    public static void asn_PER_type_ITIS_ResponderGroupAffected_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ITIS_ResponderGroupAffected_constr_1$constants.SEGMENT, 0L, asn_PER_type_ITIS_ResponderGroupAffected_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ITIS_ResponderGroupAffected$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ITIS_ResponderGroupAffected").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_ResponderGroupAffected
     * }
     */
    public static GroupLayout asn_DEF_ITIS_ResponderGroupAffected$layout() {
        return asn_DEF_ITIS_ResponderGroupAffected$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_ResponderGroupAffected
     * }
     */
    public static MemorySegment asn_DEF_ITIS_ResponderGroupAffected() {
        return asn_DEF_ITIS_ResponderGroupAffected$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ITIS_ResponderGroupAffected
     * }
     */
    public static void asn_DEF_ITIS_ResponderGroupAffected(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ITIS_ResponderGroupAffected$constants.SEGMENT, 0L, asn_DEF_ITIS_ResponderGroupAffected$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_ITIS_ResponderGroupAffected_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_ITIS_ResponderGroupAffected_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_ResponderGroupAffected_specs_1
     * }
     */
    public static GroupLayout asn_SPC_ITIS_ResponderGroupAffected_specs_1$layout() {
        return asn_SPC_ITIS_ResponderGroupAffected_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_ResponderGroupAffected_specs_1
     * }
     */
    public static MemorySegment asn_SPC_ITIS_ResponderGroupAffected_specs_1() {
        return asn_SPC_ITIS_ResponderGroupAffected_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_ITIS_ResponderGroupAffected_specs_1
     * }
     */
    public static void asn_SPC_ITIS_ResponderGroupAffected_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_ITIS_ResponderGroupAffected_specs_1$constants.SEGMENT, 0L, asn_SPC_ITIS_ResponderGroupAffected_specs_1$constants.LAYOUT.byteSize());
    }

    private static class ITIS_ResponderGroupAffected_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITIS_ResponderGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_free$descriptor() {
        return ITIS_ResponderGroupAffected_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITIS_ResponderGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_free$handle() {
        return ITIS_ResponderGroupAffected_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITIS_ResponderGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_free$address() {
        return ITIS_ResponderGroupAffected_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITIS_ResponderGroupAffected_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ITIS_ResponderGroupAffected_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ITIS_ResponderGroupAffected_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_print$descriptor() {
        return ITIS_ResponderGroupAffected_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_print$handle() {
        return ITIS_ResponderGroupAffected_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_print$address() {
        return ITIS_ResponderGroupAffected_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ITIS_ResponderGroupAffected_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_ResponderGroupAffected_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_constraint$descriptor() {
        return ITIS_ResponderGroupAffected_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_constraint$handle() {
        return ITIS_ResponderGroupAffected_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_constraint$address() {
        return ITIS_ResponderGroupAffected_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ITIS_ResponderGroupAffected_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ITIS_ResponderGroupAffected_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_ResponderGroupAffected_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_decode_ber$descriptor() {
        return ITIS_ResponderGroupAffected_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_decode_ber$handle() {
        return ITIS_ResponderGroupAffected_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_ber$address() {
        return ITIS_ResponderGroupAffected_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ITIS_ResponderGroupAffected_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_der$descriptor() {
        return ITIS_ResponderGroupAffected_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_der$handle() {
        return ITIS_ResponderGroupAffected_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_der$address() {
        return ITIS_ResponderGroupAffected_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_ResponderGroupAffected_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_decode_xer$descriptor() {
        return ITIS_ResponderGroupAffected_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_decode_xer$handle() {
        return ITIS_ResponderGroupAffected_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_xer$address() {
        return ITIS_ResponderGroupAffected_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_ResponderGroupAffected_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_xer$descriptor() {
        return ITIS_ResponderGroupAffected_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_xer$handle() {
        return ITIS_ResponderGroupAffected_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_xer$address() {
        return ITIS_ResponderGroupAffected_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ITIS_ResponderGroupAffected_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_jer$descriptor() {
        return ITIS_ResponderGroupAffected_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_jer$handle() {
        return ITIS_ResponderGroupAffected_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_jer$address() {
        return ITIS_ResponderGroupAffected_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ITIS_ResponderGroupAffected_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_decode_oer$descriptor() {
        return ITIS_ResponderGroupAffected_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_decode_oer$handle() {
        return ITIS_ResponderGroupAffected_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_oer$address() {
        return ITIS_ResponderGroupAffected_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ITIS_ResponderGroupAffected_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_oer$descriptor() {
        return ITIS_ResponderGroupAffected_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_oer$handle() {
        return ITIS_ResponderGroupAffected_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_oer$address() {
        return ITIS_ResponderGroupAffected_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_ResponderGroupAffected_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_decode_uper$descriptor() {
        return ITIS_ResponderGroupAffected_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_decode_uper$handle() {
        return ITIS_ResponderGroupAffected_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_uper$address() {
        return ITIS_ResponderGroupAffected_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_ResponderGroupAffected_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_uper$descriptor() {
        return ITIS_ResponderGroupAffected_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_uper$handle() {
        return ITIS_ResponderGroupAffected_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_uper$address() {
        return ITIS_ResponderGroupAffected_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_ResponderGroupAffected_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_decode_aper$descriptor() {
        return ITIS_ResponderGroupAffected_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_decode_aper$handle() {
        return ITIS_ResponderGroupAffected_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_aper$address() {
        return ITIS_ResponderGroupAffected_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ITIS_ResponderGroupAffected_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ITIS_ResponderGroupAffected_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITIS_ResponderGroupAffected_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ITIS_ResponderGroupAffected_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ITIS_ResponderGroupAffected_encode_aper$descriptor() {
        return ITIS_ResponderGroupAffected_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ITIS_ResponderGroupAffected_encode_aper$handle() {
        return ITIS_ResponderGroupAffected_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_aper$address() {
        return ITIS_ResponderGroupAffected_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ITIS_ResponderGroupAffected_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ITIS_ResponderGroupAffected_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ITIS_ResponderGroupAffected_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITIS_ResponderGroupAffected_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long FuelType_t
     * }
     */
    public static final OfLong FuelType_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_FuelType_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_FuelType_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_FuelType_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_FuelType_constr_1$layout() {
        return asn_PER_type_FuelType_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_FuelType_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_FuelType_constr_1() {
        return asn_PER_type_FuelType_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_FuelType_constr_1
     * }
     */
    public static void asn_PER_type_FuelType_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_FuelType_constr_1$constants.SEGMENT, 0L, asn_PER_type_FuelType_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_FuelType$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_FuelType").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FuelType
     * }
     */
    public static GroupLayout asn_DEF_FuelType$layout() {
        return asn_DEF_FuelType$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FuelType
     * }
     */
    public static MemorySegment asn_DEF_FuelType() {
        return asn_DEF_FuelType$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_FuelType
     * }
     */
    public static void asn_DEF_FuelType(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_FuelType$constants.SEGMENT, 0L, asn_DEF_FuelType$constants.LAYOUT.byteSize());
    }

    private static class FuelType_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FuelType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor FuelType_free$descriptor() {
        return FuelType_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FuelType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle FuelType_free$handle() {
        return FuelType_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FuelType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment FuelType_free$address() {
        return FuelType_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FuelType_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void FuelType_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = FuelType_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int FuelType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_print$descriptor() {
        return FuelType_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int FuelType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FuelType_print$handle() {
        return FuelType_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int FuelType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_print$address() {
        return FuelType_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int FuelType_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int FuelType_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FuelType_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int FuelType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_constraint$descriptor() {
        return FuelType_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int FuelType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle FuelType_constraint$handle() {
        return FuelType_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int FuelType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment FuelType_constraint$address() {
        return FuelType_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int FuelType_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int FuelType_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FuelType_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor FuelType_decode_ber$descriptor() {
        return FuelType_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle FuelType_decode_ber$handle() {
        return FuelType_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment FuelType_decode_ber$address() {
        return FuelType_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment FuelType_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = FuelType_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_der$descriptor() {
        return FuelType_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FuelType_encode_der$handle() {
        return FuelType_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_der$address() {
        return FuelType_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = FuelType_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor FuelType_decode_xer$descriptor() {
        return FuelType_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle FuelType_decode_xer$handle() {
        return FuelType_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment FuelType_decode_xer$address() {
        return FuelType_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment FuelType_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = FuelType_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_xer$descriptor() {
        return FuelType_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FuelType_encode_xer$handle() {
        return FuelType_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_xer$address() {
        return FuelType_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = FuelType_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_jer$descriptor() {
        return FuelType_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FuelType_encode_jer$handle() {
        return FuelType_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_jer$address() {
        return FuelType_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = FuelType_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor FuelType_decode_oer$descriptor() {
        return FuelType_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle FuelType_decode_oer$handle() {
        return FuelType_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment FuelType_decode_oer$address() {
        return FuelType_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment FuelType_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = FuelType_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_oer$descriptor() {
        return FuelType_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle FuelType_encode_oer$handle() {
        return FuelType_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_oer$address() {
        return FuelType_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment FuelType_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FuelType_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor FuelType_decode_uper$descriptor() {
        return FuelType_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle FuelType_decode_uper$handle() {
        return FuelType_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FuelType_decode_uper$address() {
        return FuelType_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FuelType_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FuelType_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_uper$descriptor() {
        return FuelType_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle FuelType_encode_uper$handle() {
        return FuelType_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FuelType_encode_uper$address() {
        return FuelType_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FuelType_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FuelType_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor FuelType_decode_aper$descriptor() {
        return FuelType_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle FuelType_decode_aper$handle() {
        return FuelType_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FuelType_decode_aper$address() {
        return FuelType_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t FuelType_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment FuelType_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = FuelType_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FuelType_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("FuelType_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor FuelType_encode_aper$descriptor() {
        return FuelType_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle FuelType_encode_aper$handle() {
        return FuelType_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FuelType_encode_aper$address() {
        return FuelType_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t FuelType_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment FuelType_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = FuelType_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FuelType_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_VehicleClassification$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleClassification").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleClassification
     * }
     */
    public static GroupLayout asn_DEF_VehicleClassification$layout() {
        return asn_DEF_VehicleClassification$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleClassification
     * }
     */
    public static MemorySegment asn_DEF_VehicleClassification() {
        return asn_DEF_VehicleClassification$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleClassification
     * }
     */
    public static void asn_DEF_VehicleClassification(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleClassification$constants.SEGMENT, 0L, asn_DEF_VehicleClassification$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehicleClassification_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehicleClassification_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleClassification_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehicleClassification_specs_1$layout() {
        return asn_SPC_VehicleClassification_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleClassification_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehicleClassification_specs_1() {
        return asn_SPC_VehicleClassification_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleClassification_specs_1
     * }
     */
    public static void asn_SPC_VehicleClassification_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehicleClassification_specs_1$constants.SEGMENT, 0L, asn_SPC_VehicleClassification_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_VehicleClassification_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(9, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_VehicleClassification_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 9 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static SequenceLayout asn_MBR_VehicleClassification_1$layout() {
        return asn_MBR_VehicleClassification_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static long[] asn_MBR_VehicleClassification_1$dimensions() {
        return asn_MBR_VehicleClassification_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static MemorySegment asn_MBR_VehicleClassification_1() {
        return asn_MBR_VehicleClassification_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static void asn_MBR_VehicleClassification_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleClassification_1$constants.SEGMENT, 0L, asn_MBR_VehicleClassification_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static MemorySegment asn_MBR_VehicleClassification_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_VehicleClassification_1$constants.HANDLE.invokeExact(asn_MBR_VehicleClassification_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleClassification_1[9]
     * }
     */
    public static void asn_MBR_VehicleClassification_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleClassification_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long VehicleMass_t
     * }
     */
    public static final OfLong VehicleMass_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_VehicleMass_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_VehicleMass_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleMass_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_VehicleMass_constr_1$layout() {
        return asn_PER_type_VehicleMass_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleMass_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_VehicleMass_constr_1() {
        return asn_PER_type_VehicleMass_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_VehicleMass_constr_1
     * }
     */
    public static void asn_PER_type_VehicleMass_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_VehicleMass_constr_1$constants.SEGMENT, 0L, asn_PER_type_VehicleMass_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_VehicleMass$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleMass").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleMass
     * }
     */
    public static GroupLayout asn_DEF_VehicleMass$layout() {
        return asn_DEF_VehicleMass$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleMass
     * }
     */
    public static MemorySegment asn_DEF_VehicleMass() {
        return asn_DEF_VehicleMass$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleMass
     * }
     */
    public static void asn_DEF_VehicleMass(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleMass$constants.SEGMENT, 0L, asn_DEF_VehicleMass$constants.LAYOUT.byteSize());
    }

    private static class VehicleMass_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void VehicleMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor VehicleMass_free$descriptor() {
        return VehicleMass_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void VehicleMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle VehicleMass_free$handle() {
        return VehicleMass_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void VehicleMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment VehicleMass_free$address() {
        return VehicleMass_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void VehicleMass_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void VehicleMass_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = VehicleMass_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_print$descriptor() {
        return VehicleMass_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_print$handle() {
        return VehicleMass_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_print$address() {
        return VehicleMass_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleMass_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int VehicleMass_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleMass_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int VehicleMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_constraint$descriptor() {
        return VehicleMass_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int VehicleMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_constraint$handle() {
        return VehicleMass_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int VehicleMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_constraint$address() {
        return VehicleMass_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int VehicleMass_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int VehicleMass_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleMass_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor VehicleMass_decode_ber$descriptor() {
        return VehicleMass_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle VehicleMass_decode_ber$handle() {
        return VehicleMass_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleMass_decode_ber$address() {
        return VehicleMass_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment VehicleMass_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = VehicleMass_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_der$descriptor() {
        return VehicleMass_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_encode_der$handle() {
        return VehicleMass_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_der$address() {
        return VehicleMass_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleMass_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleMass_decode_xer$descriptor() {
        return VehicleMass_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleMass_decode_xer$handle() {
        return VehicleMass_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleMass_decode_xer$address() {
        return VehicleMass_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleMass_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleMass_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_xer$descriptor() {
        return VehicleMass_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_encode_xer$handle() {
        return VehicleMass_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_xer$address() {
        return VehicleMass_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = VehicleMass_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_jer$descriptor() {
        return VehicleMass_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_encode_jer$handle() {
        return VehicleMass_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_jer$address() {
        return VehicleMass_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = VehicleMass_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor VehicleMass_decode_oer$descriptor() {
        return VehicleMass_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle VehicleMass_decode_oer$handle() {
        return VehicleMass_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleMass_decode_oer$address() {
        return VehicleMass_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment VehicleMass_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = VehicleMass_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_oer$descriptor() {
        return VehicleMass_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle VehicleMass_encode_oer$handle() {
        return VehicleMass_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_oer$address() {
        return VehicleMass_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment VehicleMass_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleMass_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleMass_decode_uper$descriptor() {
        return VehicleMass_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleMass_decode_uper$handle() {
        return VehicleMass_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleMass_decode_uper$address() {
        return VehicleMass_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleMass_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleMass_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_uper$descriptor() {
        return VehicleMass_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleMass_encode_uper$handle() {
        return VehicleMass_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleMass_encode_uper$address() {
        return VehicleMass_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleMass_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleMass_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor VehicleMass_decode_aper$descriptor() {
        return VehicleMass_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle VehicleMass_decode_aper$handle() {
        return VehicleMass_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleMass_decode_aper$address() {
        return VehicleMass_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t VehicleMass_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment VehicleMass_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = VehicleMass_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VehicleMass_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("VehicleMass_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor VehicleMass_encode_aper$descriptor() {
        return VehicleMass_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle VehicleMass_encode_aper$handle() {
        return VehicleMass_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleMass_encode_aper$address() {
        return VehicleMass_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t VehicleMass_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment VehicleMass_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = VehicleMass_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VehicleMass_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long TrailerWeight_t
     * }
     */
    public static final OfLong TrailerWeight_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_TrailerWeight_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_TrailerWeight_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerWeight_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_TrailerWeight_constr_1$layout() {
        return asn_PER_type_TrailerWeight_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerWeight_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_TrailerWeight_constr_1() {
        return asn_PER_type_TrailerWeight_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_TrailerWeight_constr_1
     * }
     */
    public static void asn_PER_type_TrailerWeight_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_TrailerWeight_constr_1$constants.SEGMENT, 0L, asn_PER_type_TrailerWeight_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_TrailerWeight$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_TrailerWeight").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerWeight
     * }
     */
    public static GroupLayout asn_DEF_TrailerWeight$layout() {
        return asn_DEF_TrailerWeight$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerWeight
     * }
     */
    public static MemorySegment asn_DEF_TrailerWeight() {
        return asn_DEF_TrailerWeight$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_TrailerWeight
     * }
     */
    public static void asn_DEF_TrailerWeight(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_TrailerWeight$constants.SEGMENT, 0L, asn_DEF_TrailerWeight$constants.LAYOUT.byteSize());
    }

    private static class TrailerWeight_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void TrailerWeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor TrailerWeight_free$descriptor() {
        return TrailerWeight_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void TrailerWeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle TrailerWeight_free$handle() {
        return TrailerWeight_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void TrailerWeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment TrailerWeight_free$address() {
        return TrailerWeight_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void TrailerWeight_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void TrailerWeight_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = TrailerWeight_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrailerWeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_print$descriptor() {
        return TrailerWeight_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrailerWeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_print$handle() {
        return TrailerWeight_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrailerWeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_print$address() {
        return TrailerWeight_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrailerWeight_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int TrailerWeight_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerWeight_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int TrailerWeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_constraint$descriptor() {
        return TrailerWeight_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int TrailerWeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_constraint$handle() {
        return TrailerWeight_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int TrailerWeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_constraint$address() {
        return TrailerWeight_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int TrailerWeight_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int TrailerWeight_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerWeight_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor TrailerWeight_decode_ber$descriptor() {
        return TrailerWeight_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle TrailerWeight_decode_ber$handle() {
        return TrailerWeight_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrailerWeight_decode_ber$address() {
        return TrailerWeight_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment TrailerWeight_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = TrailerWeight_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_der$descriptor() {
        return TrailerWeight_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_der$handle() {
        return TrailerWeight_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_der$address() {
        return TrailerWeight_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrailerWeight_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrailerWeight_decode_xer$descriptor() {
        return TrailerWeight_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle TrailerWeight_decode_xer$handle() {
        return TrailerWeight_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerWeight_decode_xer$address() {
        return TrailerWeight_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerWeight_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrailerWeight_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_xer$descriptor() {
        return TrailerWeight_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_xer$handle() {
        return TrailerWeight_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_xer$address() {
        return TrailerWeight_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = TrailerWeight_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_jer$descriptor() {
        return TrailerWeight_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_jer$handle() {
        return TrailerWeight_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_jer$address() {
        return TrailerWeight_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = TrailerWeight_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor TrailerWeight_decode_oer$descriptor() {
        return TrailerWeight_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle TrailerWeight_decode_oer$handle() {
        return TrailerWeight_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerWeight_decode_oer$address() {
        return TrailerWeight_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment TrailerWeight_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = TrailerWeight_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_oer$descriptor() {
        return TrailerWeight_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_oer$handle() {
        return TrailerWeight_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_oer$address() {
        return TrailerWeight_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerWeight_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_decode_uper$descriptor() {
        return TrailerWeight_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrailerWeight_decode_uper$handle() {
        return TrailerWeight_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerWeight_decode_uper$address() {
        return TrailerWeight_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerWeight_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerWeight_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_uper$descriptor() {
        return TrailerWeight_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_uper$handle() {
        return TrailerWeight_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_uper$address() {
        return TrailerWeight_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerWeight_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_decode_aper$descriptor() {
        return TrailerWeight_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle TrailerWeight_decode_aper$handle() {
        return TrailerWeight_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerWeight_decode_aper$address() {
        return TrailerWeight_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t TrailerWeight_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment TrailerWeight_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = TrailerWeight_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class TrailerWeight_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("TrailerWeight_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor TrailerWeight_encode_aper$descriptor() {
        return TrailerWeight_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle TrailerWeight_encode_aper$handle() {
        return TrailerWeight_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_aper$address() {
        return TrailerWeight_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t TrailerWeight_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment TrailerWeight_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = TrailerWeight_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TrailerWeight_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_VehicleData$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_VehicleData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleData
     * }
     */
    public static GroupLayout asn_DEF_VehicleData$layout() {
        return asn_DEF_VehicleData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleData
     * }
     */
    public static MemorySegment asn_DEF_VehicleData() {
        return asn_DEF_VehicleData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_VehicleData
     * }
     */
    public static void asn_DEF_VehicleData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_VehicleData$constants.SEGMENT, 0L, asn_DEF_VehicleData$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_VehicleData_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_VehicleData_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleData_specs_1
     * }
     */
    public static GroupLayout asn_SPC_VehicleData_specs_1$layout() {
        return asn_SPC_VehicleData_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleData_specs_1
     * }
     */
    public static MemorySegment asn_SPC_VehicleData_specs_1() {
        return asn_SPC_VehicleData_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_VehicleData_specs_1
     * }
     */
    public static void asn_SPC_VehicleData_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_VehicleData_specs_1$constants.SEGMENT, 0L, asn_SPC_VehicleData_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_VehicleData_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(8, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_VehicleData_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 8 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static SequenceLayout asn_MBR_VehicleData_1$layout() {
        return asn_MBR_VehicleData_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static long[] asn_MBR_VehicleData_1$dimensions() {
        return asn_MBR_VehicleData_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static MemorySegment asn_MBR_VehicleData_1() {
        return asn_MBR_VehicleData_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static void asn_MBR_VehicleData_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleData_1$constants.SEGMENT, 0L, asn_MBR_VehicleData_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static MemorySegment asn_MBR_VehicleData_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_VehicleData_1$constants.HANDLE.invokeExact(asn_MBR_VehicleData_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_VehicleData_1[8]
     * }
     */
    public static void asn_MBR_VehicleData_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_VehicleData_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }

    private static class asn_DEF_Axles$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_Axles").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Axles
     * }
     */
    public static GroupLayout asn_DEF_Axles$layout() {
        return asn_DEF_Axles$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Axles
     * }
     */
    public static MemorySegment asn_DEF_Axles() {
        return asn_DEF_Axles$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_Axles
     * }
     */
    public static void asn_DEF_Axles(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_Axles$constants.SEGMENT, 0L, asn_DEF_Axles$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_Axles_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_Axles_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Axles_specs_1
     * }
     */
    public static GroupLayout asn_SPC_Axles_specs_1$layout() {
        return asn_SPC_Axles_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Axles_specs_1
     * }
     */
    public static MemorySegment asn_SPC_Axles_specs_1() {
        return asn_SPC_Axles_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_Axles_specs_1
     * }
     */
    public static void asn_SPC_Axles_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_Axles_specs_1$constants.SEGMENT, 0L, asn_SPC_Axles_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_Axles_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_Axles_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_Axles_1$layout() {
        return asn_MBR_Axles_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static long[] asn_MBR_Axles_1$dimensions() {
        return asn_MBR_Axles_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static MemorySegment asn_MBR_Axles_1() {
        return asn_MBR_Axles_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static void asn_MBR_Axles_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Axles_1$constants.SEGMENT, 0L, asn_MBR_Axles_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static MemorySegment asn_MBR_Axles_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_Axles_1$constants.HANDLE.invokeExact(asn_MBR_Axles_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_Axles_1[3]
     * }
     */
    public static void asn_MBR_Axles_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_Axles_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int EssPrecipYesNo_precip = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipYesNo.EssPrecipYesNo_precip = 1
     * }
     */
    public static int EssPrecipYesNo_precip() {
        return EssPrecipYesNo_precip;
    }
    private static final int EssPrecipYesNo_noPrecip = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipYesNo.EssPrecipYesNo_noPrecip = 2
     * }
     */
    public static int EssPrecipYesNo_noPrecip() {
        return EssPrecipYesNo_noPrecip;
    }
    private static final int EssPrecipYesNo_error = (int)3L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipYesNo.EssPrecipYesNo_error = 3
     * }
     */
    public static int EssPrecipYesNo_error() {
        return EssPrecipYesNo_error;
    }
    /**
     * {@snippet lang=c :
     * typedef long EssPrecipYesNo_t
     * }
     */
    public static final OfLong EssPrecipYesNo_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EssPrecipYesNo_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EssPrecipYesNo_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipYesNo_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EssPrecipYesNo_constr_1$layout() {
        return asn_PER_type_EssPrecipYesNo_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipYesNo_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EssPrecipYesNo_constr_1() {
        return asn_PER_type_EssPrecipYesNo_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipYesNo_constr_1
     * }
     */
    public static void asn_PER_type_EssPrecipYesNo_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EssPrecipYesNo_constr_1$constants.SEGMENT, 0L, asn_PER_type_EssPrecipYesNo_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EssPrecipYesNo$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EssPrecipYesNo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipYesNo
     * }
     */
    public static GroupLayout asn_DEF_EssPrecipYesNo$layout() {
        return asn_DEF_EssPrecipYesNo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipYesNo
     * }
     */
    public static MemorySegment asn_DEF_EssPrecipYesNo() {
        return asn_DEF_EssPrecipYesNo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipYesNo
     * }
     */
    public static void asn_DEF_EssPrecipYesNo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EssPrecipYesNo$constants.SEGMENT, 0L, asn_DEF_EssPrecipYesNo$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_EssPrecipYesNo_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_EssPrecipYesNo_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipYesNo_specs_1
     * }
     */
    public static GroupLayout asn_SPC_EssPrecipYesNo_specs_1$layout() {
        return asn_SPC_EssPrecipYesNo_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipYesNo_specs_1
     * }
     */
    public static MemorySegment asn_SPC_EssPrecipYesNo_specs_1() {
        return asn_SPC_EssPrecipYesNo_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipYesNo_specs_1
     * }
     */
    public static void asn_SPC_EssPrecipYesNo_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_EssPrecipYesNo_specs_1$constants.SEGMENT, 0L, asn_SPC_EssPrecipYesNo_specs_1$constants.LAYOUT.byteSize());
    }

    private static class EssPrecipYesNo_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EssPrecipYesNo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_free$descriptor() {
        return EssPrecipYesNo_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EssPrecipYesNo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EssPrecipYesNo_free$handle() {
        return EssPrecipYesNo_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EssPrecipYesNo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EssPrecipYesNo_free$address() {
        return EssPrecipYesNo_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EssPrecipYesNo_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EssPrecipYesNo_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EssPrecipYesNo_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_print$descriptor() {
        return EssPrecipYesNo_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_print$handle() {
        return EssPrecipYesNo_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_print$address() {
        return EssPrecipYesNo_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipYesNo_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EssPrecipYesNo_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipYesNo_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_constraint$descriptor() {
        return EssPrecipYesNo_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_constraint$handle() {
        return EssPrecipYesNo_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipYesNo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_constraint$address() {
        return EssPrecipYesNo_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipYesNo_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EssPrecipYesNo_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipYesNo_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_decode_ber$descriptor() {
        return EssPrecipYesNo_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EssPrecipYesNo_decode_ber$handle() {
        return EssPrecipYesNo_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_ber$address() {
        return EssPrecipYesNo_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EssPrecipYesNo_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_der$descriptor() {
        return EssPrecipYesNo_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_der$handle() {
        return EssPrecipYesNo_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_der$address() {
        return EssPrecipYesNo_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipYesNo_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_decode_xer$descriptor() {
        return EssPrecipYesNo_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipYesNo_decode_xer$handle() {
        return EssPrecipYesNo_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_xer$address() {
        return EssPrecipYesNo_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipYesNo_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_xer$descriptor() {
        return EssPrecipYesNo_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_xer$handle() {
        return EssPrecipYesNo_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_xer$address() {
        return EssPrecipYesNo_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipYesNo_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_jer$descriptor() {
        return EssPrecipYesNo_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_jer$handle() {
        return EssPrecipYesNo_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_jer$address() {
        return EssPrecipYesNo_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EssPrecipYesNo_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_decode_oer$descriptor() {
        return EssPrecipYesNo_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipYesNo_decode_oer$handle() {
        return EssPrecipYesNo_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_oer$address() {
        return EssPrecipYesNo_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipYesNo_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_oer$descriptor() {
        return EssPrecipYesNo_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_oer$handle() {
        return EssPrecipYesNo_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_oer$address() {
        return EssPrecipYesNo_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipYesNo_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_decode_uper$descriptor() {
        return EssPrecipYesNo_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_decode_uper$handle() {
        return EssPrecipYesNo_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_uper$address() {
        return EssPrecipYesNo_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipYesNo_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_uper$descriptor() {
        return EssPrecipYesNo_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_uper$handle() {
        return EssPrecipYesNo_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_uper$address() {
        return EssPrecipYesNo_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipYesNo_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_decode_aper$descriptor() {
        return EssPrecipYesNo_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_decode_aper$handle() {
        return EssPrecipYesNo_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_aper$address() {
        return EssPrecipYesNo_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipYesNo_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipYesNo_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipYesNo_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipYesNo_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipYesNo_encode_aper$descriptor() {
        return EssPrecipYesNo_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipYesNo_encode_aper$handle() {
        return EssPrecipYesNo_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_aper$address() {
        return EssPrecipYesNo_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipYesNo_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipYesNo_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipYesNo_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipYesNo_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long EssPrecipRate_t
     * }
     */
    public static final OfLong EssPrecipRate_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EssPrecipRate_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EssPrecipRate_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipRate_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EssPrecipRate_constr_1$layout() {
        return asn_PER_type_EssPrecipRate_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipRate_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EssPrecipRate_constr_1() {
        return asn_PER_type_EssPrecipRate_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipRate_constr_1
     * }
     */
    public static void asn_PER_type_EssPrecipRate_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EssPrecipRate_constr_1$constants.SEGMENT, 0L, asn_PER_type_EssPrecipRate_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EssPrecipRate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EssPrecipRate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipRate
     * }
     */
    public static GroupLayout asn_DEF_EssPrecipRate$layout() {
        return asn_DEF_EssPrecipRate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipRate
     * }
     */
    public static MemorySegment asn_DEF_EssPrecipRate() {
        return asn_DEF_EssPrecipRate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipRate
     * }
     */
    public static void asn_DEF_EssPrecipRate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EssPrecipRate$constants.SEGMENT, 0L, asn_DEF_EssPrecipRate$constants.LAYOUT.byteSize());
    }

    private static class EssPrecipRate_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EssPrecipRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_free$descriptor() {
        return EssPrecipRate_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EssPrecipRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EssPrecipRate_free$handle() {
        return EssPrecipRate_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EssPrecipRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EssPrecipRate_free$address() {
        return EssPrecipRate_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EssPrecipRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EssPrecipRate_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EssPrecipRate_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_print$descriptor() {
        return EssPrecipRate_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_print$handle() {
        return EssPrecipRate_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_print$address() {
        return EssPrecipRate_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EssPrecipRate_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipRate_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_constraint$descriptor() {
        return EssPrecipRate_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_constraint$handle() {
        return EssPrecipRate_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_constraint$address() {
        return EssPrecipRate_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EssPrecipRate_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipRate_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_decode_ber$descriptor() {
        return EssPrecipRate_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EssPrecipRate_decode_ber$handle() {
        return EssPrecipRate_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_ber$address() {
        return EssPrecipRate_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EssPrecipRate_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_der$descriptor() {
        return EssPrecipRate_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_der$handle() {
        return EssPrecipRate_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_der$address() {
        return EssPrecipRate_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipRate_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_decode_xer$descriptor() {
        return EssPrecipRate_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipRate_decode_xer$handle() {
        return EssPrecipRate_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_xer$address() {
        return EssPrecipRate_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipRate_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_xer$descriptor() {
        return EssPrecipRate_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_xer$handle() {
        return EssPrecipRate_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_xer$address() {
        return EssPrecipRate_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipRate_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_jer$descriptor() {
        return EssPrecipRate_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_jer$handle() {
        return EssPrecipRate_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_jer$address() {
        return EssPrecipRate_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EssPrecipRate_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_decode_oer$descriptor() {
        return EssPrecipRate_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipRate_decode_oer$handle() {
        return EssPrecipRate_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_oer$address() {
        return EssPrecipRate_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipRate_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_oer$descriptor() {
        return EssPrecipRate_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_oer$handle() {
        return EssPrecipRate_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_oer$address() {
        return EssPrecipRate_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipRate_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_decode_uper$descriptor() {
        return EssPrecipRate_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipRate_decode_uper$handle() {
        return EssPrecipRate_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_uper$address() {
        return EssPrecipRate_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipRate_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_uper$descriptor() {
        return EssPrecipRate_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_uper$handle() {
        return EssPrecipRate_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_uper$address() {
        return EssPrecipRate_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipRate_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_decode_aper$descriptor() {
        return EssPrecipRate_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipRate_decode_aper$handle() {
        return EssPrecipRate_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_aper$address() {
        return EssPrecipRate_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipRate_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipRate_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipRate_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipRate_encode_aper$descriptor() {
        return EssPrecipRate_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipRate_encode_aper$handle() {
        return EssPrecipRate_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_aper$address() {
        return EssPrecipRate_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipRate_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipRate_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipRate_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int EssPrecipSituation_other = (int)1L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_other = 1
     * }
     */
    public static int EssPrecipSituation_other() {
        return EssPrecipSituation_other;
    }
    private static final int EssPrecipSituation_unknown = (int)2L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_unknown = 2
     * }
     */
    public static int EssPrecipSituation_unknown() {
        return EssPrecipSituation_unknown;
    }
    private static final int EssPrecipSituation_noPrecipitation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_noPrecipitation = 3
     * }
     */
    public static int EssPrecipSituation_noPrecipitation() {
        return EssPrecipSituation_noPrecipitation;
    }
    private static final int EssPrecipSituation_unidentifiedSlight = (int)4L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_unidentifiedSlight = 4
     * }
     */
    public static int EssPrecipSituation_unidentifiedSlight() {
        return EssPrecipSituation_unidentifiedSlight;
    }
    private static final int EssPrecipSituation_unidentifiedModerate = (int)5L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_unidentifiedModerate = 5
     * }
     */
    public static int EssPrecipSituation_unidentifiedModerate() {
        return EssPrecipSituation_unidentifiedModerate;
    }
    private static final int EssPrecipSituation_unidentifiedHeavy = (int)6L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_unidentifiedHeavy = 6
     * }
     */
    public static int EssPrecipSituation_unidentifiedHeavy() {
        return EssPrecipSituation_unidentifiedHeavy;
    }
    private static final int EssPrecipSituation_snowSlight = (int)7L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_snowSlight = 7
     * }
     */
    public static int EssPrecipSituation_snowSlight() {
        return EssPrecipSituation_snowSlight;
    }
    private static final int EssPrecipSituation_snowModerate = (int)8L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_snowModerate = 8
     * }
     */
    public static int EssPrecipSituation_snowModerate() {
        return EssPrecipSituation_snowModerate;
    }
    private static final int EssPrecipSituation_snowHeavy = (int)9L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_snowHeavy = 9
     * }
     */
    public static int EssPrecipSituation_snowHeavy() {
        return EssPrecipSituation_snowHeavy;
    }
    private static final int EssPrecipSituation_rainSlight = (int)10L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_rainSlight = 10
     * }
     */
    public static int EssPrecipSituation_rainSlight() {
        return EssPrecipSituation_rainSlight;
    }
    private static final int EssPrecipSituation_rainModerate = (int)11L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_rainModerate = 11
     * }
     */
    public static int EssPrecipSituation_rainModerate() {
        return EssPrecipSituation_rainModerate;
    }
    private static final int EssPrecipSituation_rainHeavy = (int)12L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_rainHeavy = 12
     * }
     */
    public static int EssPrecipSituation_rainHeavy() {
        return EssPrecipSituation_rainHeavy;
    }
    private static final int EssPrecipSituation_frozenPrecipitationSlight = (int)13L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_frozenPrecipitationSlight = 13
     * }
     */
    public static int EssPrecipSituation_frozenPrecipitationSlight() {
        return EssPrecipSituation_frozenPrecipitationSlight;
    }
    private static final int EssPrecipSituation_frozenPrecipitationModerate = (int)14L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_frozenPrecipitationModerate = 14
     * }
     */
    public static int EssPrecipSituation_frozenPrecipitationModerate() {
        return EssPrecipSituation_frozenPrecipitationModerate;
    }
    private static final int EssPrecipSituation_frozenPrecipitationHeavy = (int)15L;
    /**
     * {@snippet lang=c :
     * enum EssPrecipSituation.EssPrecipSituation_frozenPrecipitationHeavy = 15
     * }
     */
    public static int EssPrecipSituation_frozenPrecipitationHeavy() {
        return EssPrecipSituation_frozenPrecipitationHeavy;
    }
    /**
     * {@snippet lang=c :
     * typedef long EssPrecipSituation_t
     * }
     */
    public static final OfLong EssPrecipSituation_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EssPrecipSituation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EssPrecipSituation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipSituation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EssPrecipSituation_constr_1$layout() {
        return asn_PER_type_EssPrecipSituation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipSituation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EssPrecipSituation_constr_1() {
        return asn_PER_type_EssPrecipSituation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssPrecipSituation_constr_1
     * }
     */
    public static void asn_PER_type_EssPrecipSituation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EssPrecipSituation_constr_1$constants.SEGMENT, 0L, asn_PER_type_EssPrecipSituation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EssPrecipSituation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EssPrecipSituation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipSituation
     * }
     */
    public static GroupLayout asn_DEF_EssPrecipSituation$layout() {
        return asn_DEF_EssPrecipSituation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipSituation
     * }
     */
    public static MemorySegment asn_DEF_EssPrecipSituation() {
        return asn_DEF_EssPrecipSituation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssPrecipSituation
     * }
     */
    public static void asn_DEF_EssPrecipSituation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EssPrecipSituation$constants.SEGMENT, 0L, asn_DEF_EssPrecipSituation$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_EssPrecipSituation_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_EssPrecipSituation_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipSituation_specs_1
     * }
     */
    public static GroupLayout asn_SPC_EssPrecipSituation_specs_1$layout() {
        return asn_SPC_EssPrecipSituation_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipSituation_specs_1
     * }
     */
    public static MemorySegment asn_SPC_EssPrecipSituation_specs_1() {
        return asn_SPC_EssPrecipSituation_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_EssPrecipSituation_specs_1
     * }
     */
    public static void asn_SPC_EssPrecipSituation_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_EssPrecipSituation_specs_1$constants.SEGMENT, 0L, asn_SPC_EssPrecipSituation_specs_1$constants.LAYOUT.byteSize());
    }

    private static class EssPrecipSituation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EssPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_free$descriptor() {
        return EssPrecipSituation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EssPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EssPrecipSituation_free$handle() {
        return EssPrecipSituation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EssPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EssPrecipSituation_free$address() {
        return EssPrecipSituation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EssPrecipSituation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EssPrecipSituation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EssPrecipSituation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_print$descriptor() {
        return EssPrecipSituation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_print$handle() {
        return EssPrecipSituation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_print$address() {
        return EssPrecipSituation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipSituation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EssPrecipSituation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipSituation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_constraint$descriptor() {
        return EssPrecipSituation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_constraint$handle() {
        return EssPrecipSituation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_constraint$address() {
        return EssPrecipSituation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssPrecipSituation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EssPrecipSituation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipSituation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_decode_ber$descriptor() {
        return EssPrecipSituation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EssPrecipSituation_decode_ber$handle() {
        return EssPrecipSituation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_ber$address() {
        return EssPrecipSituation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EssPrecipSituation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_der$descriptor() {
        return EssPrecipSituation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_der$handle() {
        return EssPrecipSituation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_der$address() {
        return EssPrecipSituation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipSituation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_decode_xer$descriptor() {
        return EssPrecipSituation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipSituation_decode_xer$handle() {
        return EssPrecipSituation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_xer$address() {
        return EssPrecipSituation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipSituation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_xer$descriptor() {
        return EssPrecipSituation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_xer$handle() {
        return EssPrecipSituation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_xer$address() {
        return EssPrecipSituation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssPrecipSituation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_jer$descriptor() {
        return EssPrecipSituation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_jer$handle() {
        return EssPrecipSituation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_jer$address() {
        return EssPrecipSituation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EssPrecipSituation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_decode_oer$descriptor() {
        return EssPrecipSituation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EssPrecipSituation_decode_oer$handle() {
        return EssPrecipSituation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_oer$address() {
        return EssPrecipSituation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssPrecipSituation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_oer$descriptor() {
        return EssPrecipSituation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_oer$handle() {
        return EssPrecipSituation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_oer$address() {
        return EssPrecipSituation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipSituation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_decode_uper$descriptor() {
        return EssPrecipSituation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipSituation_decode_uper$handle() {
        return EssPrecipSituation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_uper$address() {
        return EssPrecipSituation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipSituation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_uper$descriptor() {
        return EssPrecipSituation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_uper$handle() {
        return EssPrecipSituation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_uper$address() {
        return EssPrecipSituation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipSituation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_decode_aper$descriptor() {
        return EssPrecipSituation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssPrecipSituation_decode_aper$handle() {
        return EssPrecipSituation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_aper$address() {
        return EssPrecipSituation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssPrecipSituation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssPrecipSituation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssPrecipSituation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssPrecipSituation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssPrecipSituation_encode_aper$descriptor() {
        return EssPrecipSituation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssPrecipSituation_encode_aper$handle() {
        return EssPrecipSituation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_aper$address() {
        return EssPrecipSituation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssPrecipSituation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssPrecipSituation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssPrecipSituation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssPrecipSituation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long EssSolarRadiation_t
     * }
     */
    public static final OfLong EssSolarRadiation_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EssSolarRadiation_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EssSolarRadiation_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssSolarRadiation_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EssSolarRadiation_constr_1$layout() {
        return asn_PER_type_EssSolarRadiation_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssSolarRadiation_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EssSolarRadiation_constr_1() {
        return asn_PER_type_EssSolarRadiation_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssSolarRadiation_constr_1
     * }
     */
    public static void asn_PER_type_EssSolarRadiation_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EssSolarRadiation_constr_1$constants.SEGMENT, 0L, asn_PER_type_EssSolarRadiation_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EssSolarRadiation$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EssSolarRadiation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssSolarRadiation
     * }
     */
    public static GroupLayout asn_DEF_EssSolarRadiation$layout() {
        return asn_DEF_EssSolarRadiation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssSolarRadiation
     * }
     */
    public static MemorySegment asn_DEF_EssSolarRadiation() {
        return asn_DEF_EssSolarRadiation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssSolarRadiation
     * }
     */
    public static void asn_DEF_EssSolarRadiation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EssSolarRadiation$constants.SEGMENT, 0L, asn_DEF_EssSolarRadiation$constants.LAYOUT.byteSize());
    }

    private static class EssSolarRadiation_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EssSolarRadiation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_free$descriptor() {
        return EssSolarRadiation_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EssSolarRadiation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EssSolarRadiation_free$handle() {
        return EssSolarRadiation_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EssSolarRadiation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EssSolarRadiation_free$address() {
        return EssSolarRadiation_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EssSolarRadiation_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EssSolarRadiation_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EssSolarRadiation_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssSolarRadiation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_print$descriptor() {
        return EssSolarRadiation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssSolarRadiation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_print$handle() {
        return EssSolarRadiation_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssSolarRadiation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_print$address() {
        return EssSolarRadiation_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssSolarRadiation_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EssSolarRadiation_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssSolarRadiation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssSolarRadiation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_constraint$descriptor() {
        return EssSolarRadiation_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssSolarRadiation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_constraint$handle() {
        return EssSolarRadiation_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssSolarRadiation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_constraint$address() {
        return EssSolarRadiation_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssSolarRadiation_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EssSolarRadiation_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssSolarRadiation_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_decode_ber$descriptor() {
        return EssSolarRadiation_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EssSolarRadiation_decode_ber$handle() {
        return EssSolarRadiation_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_ber$address() {
        return EssSolarRadiation_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EssSolarRadiation_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_der$descriptor() {
        return EssSolarRadiation_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_der$handle() {
        return EssSolarRadiation_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_der$address() {
        return EssSolarRadiation_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssSolarRadiation_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_decode_xer$descriptor() {
        return EssSolarRadiation_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EssSolarRadiation_decode_xer$handle() {
        return EssSolarRadiation_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_xer$address() {
        return EssSolarRadiation_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssSolarRadiation_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_xer$descriptor() {
        return EssSolarRadiation_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_xer$handle() {
        return EssSolarRadiation_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_xer$address() {
        return EssSolarRadiation_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssSolarRadiation_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_jer$descriptor() {
        return EssSolarRadiation_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_jer$handle() {
        return EssSolarRadiation_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_jer$address() {
        return EssSolarRadiation_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EssSolarRadiation_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_decode_oer$descriptor() {
        return EssSolarRadiation_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EssSolarRadiation_decode_oer$handle() {
        return EssSolarRadiation_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_oer$address() {
        return EssSolarRadiation_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssSolarRadiation_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_oer$descriptor() {
        return EssSolarRadiation_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_oer$handle() {
        return EssSolarRadiation_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_oer$address() {
        return EssSolarRadiation_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssSolarRadiation_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_decode_uper$descriptor() {
        return EssSolarRadiation_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssSolarRadiation_decode_uper$handle() {
        return EssSolarRadiation_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_uper$address() {
        return EssSolarRadiation_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssSolarRadiation_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_uper$descriptor() {
        return EssSolarRadiation_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_uper$handle() {
        return EssSolarRadiation_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_uper$address() {
        return EssSolarRadiation_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssSolarRadiation_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_decode_aper$descriptor() {
        return EssSolarRadiation_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssSolarRadiation_decode_aper$handle() {
        return EssSolarRadiation_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_aper$address() {
        return EssSolarRadiation_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssSolarRadiation_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssSolarRadiation_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssSolarRadiation_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssSolarRadiation_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssSolarRadiation_encode_aper$descriptor() {
        return EssSolarRadiation_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssSolarRadiation_encode_aper$handle() {
        return EssSolarRadiation_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_aper$address() {
        return EssSolarRadiation_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssSolarRadiation_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssSolarRadiation_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssSolarRadiation_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssSolarRadiation_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long EssMobileFriction_t
     * }
     */
    public static final OfLong EssMobileFriction_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_EssMobileFriction_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_EssMobileFriction_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssMobileFriction_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_EssMobileFriction_constr_1$layout() {
        return asn_PER_type_EssMobileFriction_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssMobileFriction_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_EssMobileFriction_constr_1() {
        return asn_PER_type_EssMobileFriction_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_EssMobileFriction_constr_1
     * }
     */
    public static void asn_PER_type_EssMobileFriction_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_EssMobileFriction_constr_1$constants.SEGMENT, 0L, asn_PER_type_EssMobileFriction_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_EssMobileFriction$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_EssMobileFriction").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssMobileFriction
     * }
     */
    public static GroupLayout asn_DEF_EssMobileFriction$layout() {
        return asn_DEF_EssMobileFriction$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssMobileFriction
     * }
     */
    public static MemorySegment asn_DEF_EssMobileFriction() {
        return asn_DEF_EssMobileFriction$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_EssMobileFriction
     * }
     */
    public static void asn_DEF_EssMobileFriction(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_EssMobileFriction$constants.SEGMENT, 0L, asn_DEF_EssMobileFriction$constants.LAYOUT.byteSize());
    }

    private static class EssMobileFriction_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void EssMobileFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_free$descriptor() {
        return EssMobileFriction_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void EssMobileFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle EssMobileFriction_free$handle() {
        return EssMobileFriction_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void EssMobileFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment EssMobileFriction_free$address() {
        return EssMobileFriction_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void EssMobileFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void EssMobileFriction_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = EssMobileFriction_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssMobileFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_print$descriptor() {
        return EssMobileFriction_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssMobileFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_print$handle() {
        return EssMobileFriction_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssMobileFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_print$address() {
        return EssMobileFriction_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssMobileFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int EssMobileFriction_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssMobileFriction_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int EssMobileFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_constraint$descriptor() {
        return EssMobileFriction_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int EssMobileFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_constraint$handle() {
        return EssMobileFriction_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int EssMobileFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_constraint$address() {
        return EssMobileFriction_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int EssMobileFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int EssMobileFriction_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssMobileFriction_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_decode_ber$descriptor() {
        return EssMobileFriction_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle EssMobileFriction_decode_ber$handle() {
        return EssMobileFriction_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_ber$address() {
        return EssMobileFriction_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = EssMobileFriction_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_der$descriptor() {
        return EssMobileFriction_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_der$handle() {
        return EssMobileFriction_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_der$address() {
        return EssMobileFriction_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssMobileFriction_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_decode_xer$descriptor() {
        return EssMobileFriction_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle EssMobileFriction_decode_xer$handle() {
        return EssMobileFriction_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_xer$address() {
        return EssMobileFriction_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssMobileFriction_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_xer$descriptor() {
        return EssMobileFriction_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_xer$handle() {
        return EssMobileFriction_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_xer$address() {
        return EssMobileFriction_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = EssMobileFriction_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_jer$descriptor() {
        return EssMobileFriction_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_jer$handle() {
        return EssMobileFriction_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_jer$address() {
        return EssMobileFriction_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = EssMobileFriction_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_decode_oer$descriptor() {
        return EssMobileFriction_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle EssMobileFriction_decode_oer$handle() {
        return EssMobileFriction_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_oer$address() {
        return EssMobileFriction_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = EssMobileFriction_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_oer$descriptor() {
        return EssMobileFriction_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_oer$handle() {
        return EssMobileFriction_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_oer$address() {
        return EssMobileFriction_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssMobileFriction_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_decode_uper$descriptor() {
        return EssMobileFriction_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssMobileFriction_decode_uper$handle() {
        return EssMobileFriction_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_uper$address() {
        return EssMobileFriction_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssMobileFriction_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_uper$descriptor() {
        return EssMobileFriction_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_uper$handle() {
        return EssMobileFriction_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_uper$address() {
        return EssMobileFriction_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssMobileFriction_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_decode_aper$descriptor() {
        return EssMobileFriction_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle EssMobileFriction_decode_aper$handle() {
        return EssMobileFriction_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_aper$address() {
        return EssMobileFriction_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t EssMobileFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = EssMobileFriction_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EssMobileFriction_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("EssMobileFriction_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor EssMobileFriction_encode_aper$descriptor() {
        return EssMobileFriction_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle EssMobileFriction_encode_aper$handle() {
        return EssMobileFriction_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_aper$address() {
        return EssMobileFriction_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t EssMobileFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment EssMobileFriction_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = EssMobileFriction_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EssMobileFriction_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long CoefficientOfFriction_t
     * }
     */
    public static final OfLong CoefficientOfFriction_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_CoefficientOfFriction_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_CoefficientOfFriction_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CoefficientOfFriction_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_CoefficientOfFriction_constr_1$layout() {
        return asn_PER_type_CoefficientOfFriction_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CoefficientOfFriction_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_CoefficientOfFriction_constr_1() {
        return asn_PER_type_CoefficientOfFriction_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_CoefficientOfFriction_constr_1
     * }
     */
    public static void asn_PER_type_CoefficientOfFriction_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_CoefficientOfFriction_constr_1$constants.SEGMENT, 0L, asn_PER_type_CoefficientOfFriction_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_CoefficientOfFriction$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_CoefficientOfFriction").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CoefficientOfFriction
     * }
     */
    public static GroupLayout asn_DEF_CoefficientOfFriction$layout() {
        return asn_DEF_CoefficientOfFriction$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CoefficientOfFriction
     * }
     */
    public static MemorySegment asn_DEF_CoefficientOfFriction() {
        return asn_DEF_CoefficientOfFriction$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_CoefficientOfFriction
     * }
     */
    public static void asn_DEF_CoefficientOfFriction(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_CoefficientOfFriction$constants.SEGMENT, 0L, asn_DEF_CoefficientOfFriction$constants.LAYOUT.byteSize());
    }

    private static class CoefficientOfFriction_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CoefficientOfFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_free$descriptor() {
        return CoefficientOfFriction_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CoefficientOfFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle CoefficientOfFriction_free$handle() {
        return CoefficientOfFriction_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CoefficientOfFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment CoefficientOfFriction_free$address() {
        return CoefficientOfFriction_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CoefficientOfFriction_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void CoefficientOfFriction_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = CoefficientOfFriction_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_print$descriptor() {
        return CoefficientOfFriction_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_print$handle() {
        return CoefficientOfFriction_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_print$address() {
        return CoefficientOfFriction_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CoefficientOfFriction_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int CoefficientOfFriction_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CoefficientOfFriction_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_constraint$descriptor() {
        return CoefficientOfFriction_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_constraint$handle() {
        return CoefficientOfFriction_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int CoefficientOfFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_constraint$address() {
        return CoefficientOfFriction_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int CoefficientOfFriction_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int CoefficientOfFriction_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CoefficientOfFriction_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_decode_ber$descriptor() {
        return CoefficientOfFriction_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle CoefficientOfFriction_decode_ber$handle() {
        return CoefficientOfFriction_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_ber$address() {
        return CoefficientOfFriction_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = CoefficientOfFriction_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_der$descriptor() {
        return CoefficientOfFriction_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_der$handle() {
        return CoefficientOfFriction_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_der$address() {
        return CoefficientOfFriction_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CoefficientOfFriction_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_decode_xer$descriptor() {
        return CoefficientOfFriction_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle CoefficientOfFriction_decode_xer$handle() {
        return CoefficientOfFriction_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_xer$address() {
        return CoefficientOfFriction_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CoefficientOfFriction_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_xer$descriptor() {
        return CoefficientOfFriction_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_xer$handle() {
        return CoefficientOfFriction_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_xer$address() {
        return CoefficientOfFriction_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = CoefficientOfFriction_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_jer$descriptor() {
        return CoefficientOfFriction_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_jer$handle() {
        return CoefficientOfFriction_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_jer$address() {
        return CoefficientOfFriction_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = CoefficientOfFriction_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_decode_oer$descriptor() {
        return CoefficientOfFriction_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle CoefficientOfFriction_decode_oer$handle() {
        return CoefficientOfFriction_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_oer$address() {
        return CoefficientOfFriction_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = CoefficientOfFriction_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_oer$descriptor() {
        return CoefficientOfFriction_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_oer$handle() {
        return CoefficientOfFriction_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_oer$address() {
        return CoefficientOfFriction_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CoefficientOfFriction_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_decode_uper$descriptor() {
        return CoefficientOfFriction_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_decode_uper$handle() {
        return CoefficientOfFriction_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_uper$address() {
        return CoefficientOfFriction_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CoefficientOfFriction_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_uper$descriptor() {
        return CoefficientOfFriction_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_uper$handle() {
        return CoefficientOfFriction_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_uper$address() {
        return CoefficientOfFriction_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CoefficientOfFriction_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_decode_aper$descriptor() {
        return CoefficientOfFriction_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_decode_aper$handle() {
        return CoefficientOfFriction_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_aper$address() {
        return CoefficientOfFriction_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t CoefficientOfFriction_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = CoefficientOfFriction_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoefficientOfFriction_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("CoefficientOfFriction_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor CoefficientOfFriction_encode_aper$descriptor() {
        return CoefficientOfFriction_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle CoefficientOfFriction_encode_aper$handle() {
        return CoefficientOfFriction_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_aper$address() {
        return CoefficientOfFriction_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t CoefficientOfFriction_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment CoefficientOfFriction_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = CoefficientOfFriction_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoefficientOfFriction_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_WeatherReport$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WeatherReport").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherReport
     * }
     */
    public static GroupLayout asn_DEF_WeatherReport$layout() {
        return asn_DEF_WeatherReport$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherReport
     * }
     */
    public static MemorySegment asn_DEF_WeatherReport() {
        return asn_DEF_WeatherReport$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherReport
     * }
     */
    public static void asn_DEF_WeatherReport(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WeatherReport$constants.SEGMENT, 0L, asn_DEF_WeatherReport$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WeatherReport_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WeatherReport_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherReport_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WeatherReport_specs_1$layout() {
        return asn_SPC_WeatherReport_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherReport_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WeatherReport_specs_1() {
        return asn_SPC_WeatherReport_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherReport_specs_1
     * }
     */
    public static void asn_SPC_WeatherReport_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WeatherReport_specs_1$constants.SEGMENT, 0L, asn_SPC_WeatherReport_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WeatherReport_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(6, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WeatherReport_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 6 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static SequenceLayout asn_MBR_WeatherReport_1$layout() {
        return asn_MBR_WeatherReport_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static long[] asn_MBR_WeatherReport_1$dimensions() {
        return asn_MBR_WeatherReport_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static MemorySegment asn_MBR_WeatherReport_1() {
        return asn_MBR_WeatherReport_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static void asn_MBR_WeatherReport_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeatherReport_1$constants.SEGMENT, 0L, asn_MBR_WeatherReport_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static MemorySegment asn_MBR_WeatherReport_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WeatherReport_1$constants.HANDLE.invokeExact(asn_MBR_WeatherReport_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherReport_1[6]
     * }
     */
    public static void asn_MBR_WeatherReport_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeatherReport_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long AmbientAirTemperature_t
     * }
     */
    public static final OfLong AmbientAirTemperature_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_AmbientAirTemperature_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_AmbientAirTemperature_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirTemperature_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_AmbientAirTemperature_constr_1$layout() {
        return asn_PER_type_AmbientAirTemperature_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirTemperature_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_AmbientAirTemperature_constr_1() {
        return asn_PER_type_AmbientAirTemperature_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirTemperature_constr_1
     * }
     */
    public static void asn_PER_type_AmbientAirTemperature_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_AmbientAirTemperature_constr_1$constants.SEGMENT, 0L, asn_PER_type_AmbientAirTemperature_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_AmbientAirTemperature$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AmbientAirTemperature").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirTemperature
     * }
     */
    public static GroupLayout asn_DEF_AmbientAirTemperature$layout() {
        return asn_DEF_AmbientAirTemperature$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirTemperature
     * }
     */
    public static MemorySegment asn_DEF_AmbientAirTemperature() {
        return asn_DEF_AmbientAirTemperature$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirTemperature
     * }
     */
    public static void asn_DEF_AmbientAirTemperature(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AmbientAirTemperature$constants.SEGMENT, 0L, asn_DEF_AmbientAirTemperature$constants.LAYOUT.byteSize());
    }

    private static class AmbientAirTemperature_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AmbientAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_free$descriptor() {
        return AmbientAirTemperature_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AmbientAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle AmbientAirTemperature_free$handle() {
        return AmbientAirTemperature_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AmbientAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment AmbientAirTemperature_free$address() {
        return AmbientAirTemperature_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AmbientAirTemperature_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void AmbientAirTemperature_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = AmbientAirTemperature_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_print$descriptor() {
        return AmbientAirTemperature_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_print$handle() {
        return AmbientAirTemperature_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_print$address() {
        return AmbientAirTemperature_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AmbientAirTemperature_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int AmbientAirTemperature_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirTemperature_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_constraint$descriptor() {
        return AmbientAirTemperature_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_constraint$handle() {
        return AmbientAirTemperature_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AmbientAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_constraint$address() {
        return AmbientAirTemperature_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AmbientAirTemperature_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int AmbientAirTemperature_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirTemperature_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_decode_ber$descriptor() {
        return AmbientAirTemperature_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle AmbientAirTemperature_decode_ber$handle() {
        return AmbientAirTemperature_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_ber$address() {
        return AmbientAirTemperature_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = AmbientAirTemperature_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_der$descriptor() {
        return AmbientAirTemperature_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_der$handle() {
        return AmbientAirTemperature_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_der$address() {
        return AmbientAirTemperature_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AmbientAirTemperature_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_decode_xer$descriptor() {
        return AmbientAirTemperature_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle AmbientAirTemperature_decode_xer$handle() {
        return AmbientAirTemperature_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_xer$address() {
        return AmbientAirTemperature_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AmbientAirTemperature_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_xer$descriptor() {
        return AmbientAirTemperature_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_xer$handle() {
        return AmbientAirTemperature_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_xer$address() {
        return AmbientAirTemperature_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AmbientAirTemperature_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_jer$descriptor() {
        return AmbientAirTemperature_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_jer$handle() {
        return AmbientAirTemperature_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_jer$address() {
        return AmbientAirTemperature_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = AmbientAirTemperature_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_decode_oer$descriptor() {
        return AmbientAirTemperature_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle AmbientAirTemperature_decode_oer$handle() {
        return AmbientAirTemperature_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_oer$address() {
        return AmbientAirTemperature_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AmbientAirTemperature_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_oer$descriptor() {
        return AmbientAirTemperature_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_oer$handle() {
        return AmbientAirTemperature_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_oer$address() {
        return AmbientAirTemperature_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirTemperature_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_decode_uper$descriptor() {
        return AmbientAirTemperature_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_decode_uper$handle() {
        return AmbientAirTemperature_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_uper$address() {
        return AmbientAirTemperature_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirTemperature_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_uper$descriptor() {
        return AmbientAirTemperature_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_uper$handle() {
        return AmbientAirTemperature_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_uper$address() {
        return AmbientAirTemperature_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirTemperature_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_decode_aper$descriptor() {
        return AmbientAirTemperature_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_decode_aper$handle() {
        return AmbientAirTemperature_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_aper$address() {
        return AmbientAirTemperature_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirTemperature_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirTemperature_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirTemperature_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirTemperature_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirTemperature_encode_aper$descriptor() {
        return AmbientAirTemperature_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AmbientAirTemperature_encode_aper$handle() {
        return AmbientAirTemperature_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_aper$address() {
        return AmbientAirTemperature_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirTemperature_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirTemperature_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirTemperature_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirTemperature_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long AmbientAirPressure_t
     * }
     */
    public static final OfLong AmbientAirPressure_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_AmbientAirPressure_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_AmbientAirPressure_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirPressure_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_AmbientAirPressure_constr_1$layout() {
        return asn_PER_type_AmbientAirPressure_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirPressure_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_AmbientAirPressure_constr_1() {
        return asn_PER_type_AmbientAirPressure_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_AmbientAirPressure_constr_1
     * }
     */
    public static void asn_PER_type_AmbientAirPressure_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_AmbientAirPressure_constr_1$constants.SEGMENT, 0L, asn_PER_type_AmbientAirPressure_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_AmbientAirPressure$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_AmbientAirPressure").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirPressure
     * }
     */
    public static GroupLayout asn_DEF_AmbientAirPressure$layout() {
        return asn_DEF_AmbientAirPressure$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirPressure
     * }
     */
    public static MemorySegment asn_DEF_AmbientAirPressure() {
        return asn_DEF_AmbientAirPressure$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_AmbientAirPressure
     * }
     */
    public static void asn_DEF_AmbientAirPressure(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_AmbientAirPressure$constants.SEGMENT, 0L, asn_DEF_AmbientAirPressure$constants.LAYOUT.byteSize());
    }

    private static class AmbientAirPressure_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AmbientAirPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_free$descriptor() {
        return AmbientAirPressure_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AmbientAirPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle AmbientAirPressure_free$handle() {
        return AmbientAirPressure_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AmbientAirPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment AmbientAirPressure_free$address() {
        return AmbientAirPressure_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AmbientAirPressure_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void AmbientAirPressure_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = AmbientAirPressure_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AmbientAirPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_print$descriptor() {
        return AmbientAirPressure_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AmbientAirPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_print$handle() {
        return AmbientAirPressure_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AmbientAirPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_print$address() {
        return AmbientAirPressure_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AmbientAirPressure_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int AmbientAirPressure_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirPressure_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int AmbientAirPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_constraint$descriptor() {
        return AmbientAirPressure_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int AmbientAirPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_constraint$handle() {
        return AmbientAirPressure_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int AmbientAirPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_constraint$address() {
        return AmbientAirPressure_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int AmbientAirPressure_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int AmbientAirPressure_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirPressure_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_decode_ber$descriptor() {
        return AmbientAirPressure_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle AmbientAirPressure_decode_ber$handle() {
        return AmbientAirPressure_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_ber$address() {
        return AmbientAirPressure_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = AmbientAirPressure_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_der$descriptor() {
        return AmbientAirPressure_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_der$handle() {
        return AmbientAirPressure_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_der$address() {
        return AmbientAirPressure_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AmbientAirPressure_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_decode_xer$descriptor() {
        return AmbientAirPressure_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle AmbientAirPressure_decode_xer$handle() {
        return AmbientAirPressure_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_xer$address() {
        return AmbientAirPressure_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AmbientAirPressure_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_xer$descriptor() {
        return AmbientAirPressure_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_xer$handle() {
        return AmbientAirPressure_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_xer$address() {
        return AmbientAirPressure_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = AmbientAirPressure_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_jer$descriptor() {
        return AmbientAirPressure_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_jer$handle() {
        return AmbientAirPressure_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_jer$address() {
        return AmbientAirPressure_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = AmbientAirPressure_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_decode_oer$descriptor() {
        return AmbientAirPressure_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle AmbientAirPressure_decode_oer$handle() {
        return AmbientAirPressure_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_oer$address() {
        return AmbientAirPressure_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = AmbientAirPressure_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_oer$descriptor() {
        return AmbientAirPressure_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_oer$handle() {
        return AmbientAirPressure_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_oer$address() {
        return AmbientAirPressure_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirPressure_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_decode_uper$descriptor() {
        return AmbientAirPressure_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AmbientAirPressure_decode_uper$handle() {
        return AmbientAirPressure_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_uper$address() {
        return AmbientAirPressure_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirPressure_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_uper$descriptor() {
        return AmbientAirPressure_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_uper$handle() {
        return AmbientAirPressure_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_uper$address() {
        return AmbientAirPressure_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirPressure_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_decode_aper$descriptor() {
        return AmbientAirPressure_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle AmbientAirPressure_decode_aper$handle() {
        return AmbientAirPressure_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_aper$address() {
        return AmbientAirPressure_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t AmbientAirPressure_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = AmbientAirPressure_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AmbientAirPressure_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("AmbientAirPressure_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor AmbientAirPressure_encode_aper$descriptor() {
        return AmbientAirPressure_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle AmbientAirPressure_encode_aper$handle() {
        return AmbientAirPressure_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_aper$address() {
        return AmbientAirPressure_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t AmbientAirPressure_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment AmbientAirPressure_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = AmbientAirPressure_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AmbientAirPressure_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_WeatherProbe$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WeatherProbe").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherProbe
     * }
     */
    public static GroupLayout asn_DEF_WeatherProbe$layout() {
        return asn_DEF_WeatherProbe$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherProbe
     * }
     */
    public static MemorySegment asn_DEF_WeatherProbe() {
        return asn_DEF_WeatherProbe$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WeatherProbe
     * }
     */
    public static void asn_DEF_WeatherProbe(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WeatherProbe$constants.SEGMENT, 0L, asn_DEF_WeatherProbe$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WeatherProbe_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WeatherProbe_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherProbe_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WeatherProbe_specs_1$layout() {
        return asn_SPC_WeatherProbe_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherProbe_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WeatherProbe_specs_1() {
        return asn_SPC_WeatherProbe_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WeatherProbe_specs_1
     * }
     */
    public static void asn_SPC_WeatherProbe_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WeatherProbe_specs_1$constants.SEGMENT, 0L, asn_SPC_WeatherProbe_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WeatherProbe_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(3, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WeatherProbe_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 3 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static SequenceLayout asn_MBR_WeatherProbe_1$layout() {
        return asn_MBR_WeatherProbe_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static long[] asn_MBR_WeatherProbe_1$dimensions() {
        return asn_MBR_WeatherProbe_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static MemorySegment asn_MBR_WeatherProbe_1() {
        return asn_MBR_WeatherProbe_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static void asn_MBR_WeatherProbe_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeatherProbe_1$constants.SEGMENT, 0L, asn_MBR_WeatherProbe_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static MemorySegment asn_MBR_WeatherProbe_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WeatherProbe_1$constants.HANDLE.invokeExact(asn_MBR_WeatherProbe_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WeatherProbe_1[3]
     * }
     */
    public static void asn_MBR_WeatherProbe_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WeatherProbe_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    private static final int WiperStatus_unavailable = (int)0L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_unavailable = 0
     * }
     */
    public static int WiperStatus_unavailable() {
        return WiperStatus_unavailable;
    }
    private static final int WiperStatus_off = (int)1L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_off = 1
     * }
     */
    public static int WiperStatus_off() {
        return WiperStatus_off;
    }
    private static final int WiperStatus_intermittent = (int)2L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_intermittent = 2
     * }
     */
    public static int WiperStatus_intermittent() {
        return WiperStatus_intermittent;
    }
    private static final int WiperStatus_low = (int)3L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_low = 3
     * }
     */
    public static int WiperStatus_low() {
        return WiperStatus_low;
    }
    private static final int WiperStatus_high = (int)4L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_high = 4
     * }
     */
    public static int WiperStatus_high() {
        return WiperStatus_high;
    }
    private static final int WiperStatus_washerInUse = (int)5L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_washerInUse = 5
     * }
     */
    public static int WiperStatus_washerInUse() {
        return WiperStatus_washerInUse;
    }
    private static final int WiperStatus_automaticPresent = (int)6L;
    /**
     * {@snippet lang=c :
     * enum WiperStatus.WiperStatus_automaticPresent = 6
     * }
     */
    public static int WiperStatus_automaticPresent() {
        return WiperStatus_automaticPresent;
    }
    /**
     * {@snippet lang=c :
     * typedef long WiperStatus_t
     * }
     */
    public static final OfLong WiperStatus_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_WiperStatus_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_WiperStatus_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperStatus_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_WiperStatus_constr_1$layout() {
        return asn_PER_type_WiperStatus_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperStatus_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_WiperStatus_constr_1() {
        return asn_PER_type_WiperStatus_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperStatus_constr_1
     * }
     */
    public static void asn_PER_type_WiperStatus_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_WiperStatus_constr_1$constants.SEGMENT, 0L, asn_PER_type_WiperStatus_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_WiperStatus$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WiperStatus").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperStatus
     * }
     */
    public static GroupLayout asn_DEF_WiperStatus$layout() {
        return asn_DEF_WiperStatus$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperStatus
     * }
     */
    public static MemorySegment asn_DEF_WiperStatus() {
        return asn_DEF_WiperStatus$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperStatus
     * }
     */
    public static void asn_DEF_WiperStatus(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WiperStatus$constants.SEGMENT, 0L, asn_DEF_WiperStatus$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WiperStatus_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_INTEGER_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WiperStatus_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_WiperStatus_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WiperStatus_specs_1$layout() {
        return asn_SPC_WiperStatus_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_WiperStatus_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WiperStatus_specs_1() {
        return asn_SPC_WiperStatus_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const asn_INTEGER_specifics_t asn_SPC_WiperStatus_specs_1
     * }
     */
    public static void asn_SPC_WiperStatus_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WiperStatus_specs_1$constants.SEGMENT, 0L, asn_SPC_WiperStatus_specs_1$constants.LAYOUT.byteSize());
    }

    private static class WiperStatus_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void WiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor WiperStatus_free$descriptor() {
        return WiperStatus_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void WiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle WiperStatus_free$handle() {
        return WiperStatus_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void WiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment WiperStatus_free$address() {
        return WiperStatus_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void WiperStatus_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void WiperStatus_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = WiperStatus_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_print$descriptor() {
        return WiperStatus_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_print$handle() {
        return WiperStatus_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_print$address() {
        return WiperStatus_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WiperStatus_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int WiperStatus_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperStatus_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_constraint$descriptor() {
        return WiperStatus_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_constraint$handle() {
        return WiperStatus_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_constraint$address() {
        return WiperStatus_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WiperStatus_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int WiperStatus_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperStatus_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor WiperStatus_decode_ber$descriptor() {
        return WiperStatus_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle WiperStatus_decode_ber$handle() {
        return WiperStatus_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment WiperStatus_decode_ber$address() {
        return WiperStatus_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment WiperStatus_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = WiperStatus_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_der$descriptor() {
        return WiperStatus_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_encode_der$handle() {
        return WiperStatus_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_der$address() {
        return WiperStatus_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = WiperStatus_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor WiperStatus_decode_xer$descriptor() {
        return WiperStatus_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle WiperStatus_decode_xer$handle() {
        return WiperStatus_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment WiperStatus_decode_xer$address() {
        return WiperStatus_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment WiperStatus_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = WiperStatus_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_xer$descriptor() {
        return WiperStatus_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_encode_xer$handle() {
        return WiperStatus_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_xer$address() {
        return WiperStatus_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = WiperStatus_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_jer$descriptor() {
        return WiperStatus_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_encode_jer$handle() {
        return WiperStatus_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_jer$address() {
        return WiperStatus_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = WiperStatus_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor WiperStatus_decode_oer$descriptor() {
        return WiperStatus_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle WiperStatus_decode_oer$handle() {
        return WiperStatus_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment WiperStatus_decode_oer$address() {
        return WiperStatus_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment WiperStatus_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = WiperStatus_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_oer$descriptor() {
        return WiperStatus_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperStatus_encode_oer$handle() {
        return WiperStatus_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_oer$address() {
        return WiperStatus_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperStatus_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperStatus_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor WiperStatus_decode_uper$descriptor() {
        return WiperStatus_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle WiperStatus_decode_uper$handle() {
        return WiperStatus_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperStatus_decode_uper$address() {
        return WiperStatus_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperStatus_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperStatus_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_uper$descriptor() {
        return WiperStatus_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle WiperStatus_encode_uper$handle() {
        return WiperStatus_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperStatus_encode_uper$address() {
        return WiperStatus_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperStatus_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperStatus_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor WiperStatus_decode_aper$descriptor() {
        return WiperStatus_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle WiperStatus_decode_aper$handle() {
        return WiperStatus_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperStatus_decode_aper$address() {
        return WiperStatus_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperStatus_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperStatus_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperStatus_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperStatus_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperStatus_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor WiperStatus_encode_aper$descriptor() {
        return WiperStatus_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle WiperStatus_encode_aper$handle() {
        return WiperStatus_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperStatus_encode_aper$address() {
        return WiperStatus_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperStatus_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperStatus_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperStatus_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperStatus_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long WiperRate_t
     * }
     */
    public static final OfLong WiperRate_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_WiperRate_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_WiperRate_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperRate_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_WiperRate_constr_1$layout() {
        return asn_PER_type_WiperRate_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperRate_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_WiperRate_constr_1() {
        return asn_PER_type_WiperRate_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_WiperRate_constr_1
     * }
     */
    public static void asn_PER_type_WiperRate_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_WiperRate_constr_1$constants.SEGMENT, 0L, asn_PER_type_WiperRate_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_WiperRate$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WiperRate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperRate
     * }
     */
    public static GroupLayout asn_DEF_WiperRate$layout() {
        return asn_DEF_WiperRate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperRate
     * }
     */
    public static MemorySegment asn_DEF_WiperRate() {
        return asn_DEF_WiperRate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperRate
     * }
     */
    public static void asn_DEF_WiperRate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WiperRate$constants.SEGMENT, 0L, asn_DEF_WiperRate$constants.LAYOUT.byteSize());
    }

    private static class WiperRate_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void WiperRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor WiperRate_free$descriptor() {
        return WiperRate_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void WiperRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle WiperRate_free$handle() {
        return WiperRate_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void WiperRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment WiperRate_free$address() {
        return WiperRate_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void WiperRate_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void WiperRate_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = WiperRate_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WiperRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_print$descriptor() {
        return WiperRate_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WiperRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_print$handle() {
        return WiperRate_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WiperRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_print$address() {
        return WiperRate_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WiperRate_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int WiperRate_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperRate_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WiperRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_constraint$descriptor() {
        return WiperRate_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WiperRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_constraint$handle() {
        return WiperRate_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WiperRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_constraint$address() {
        return WiperRate_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WiperRate_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int WiperRate_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperRate_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor WiperRate_decode_ber$descriptor() {
        return WiperRate_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle WiperRate_decode_ber$handle() {
        return WiperRate_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment WiperRate_decode_ber$address() {
        return WiperRate_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment WiperRate_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = WiperRate_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_der$descriptor() {
        return WiperRate_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_encode_der$handle() {
        return WiperRate_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_der$address() {
        return WiperRate_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = WiperRate_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor WiperRate_decode_xer$descriptor() {
        return WiperRate_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle WiperRate_decode_xer$handle() {
        return WiperRate_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment WiperRate_decode_xer$address() {
        return WiperRate_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment WiperRate_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = WiperRate_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_xer$descriptor() {
        return WiperRate_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_encode_xer$handle() {
        return WiperRate_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_xer$address() {
        return WiperRate_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = WiperRate_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_jer$descriptor() {
        return WiperRate_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_encode_jer$handle() {
        return WiperRate_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_jer$address() {
        return WiperRate_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = WiperRate_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor WiperRate_decode_oer$descriptor() {
        return WiperRate_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle WiperRate_decode_oer$handle() {
        return WiperRate_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment WiperRate_decode_oer$address() {
        return WiperRate_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment WiperRate_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = WiperRate_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_oer$descriptor() {
        return WiperRate_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle WiperRate_encode_oer$handle() {
        return WiperRate_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_oer$address() {
        return WiperRate_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment WiperRate_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperRate_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor WiperRate_decode_uper$descriptor() {
        return WiperRate_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle WiperRate_decode_uper$handle() {
        return WiperRate_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperRate_decode_uper$address() {
        return WiperRate_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperRate_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperRate_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_uper$descriptor() {
        return WiperRate_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle WiperRate_encode_uper$handle() {
        return WiperRate_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperRate_encode_uper$address() {
        return WiperRate_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperRate_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperRate_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor WiperRate_decode_aper$descriptor() {
        return WiperRate_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle WiperRate_decode_aper$handle() {
        return WiperRate_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperRate_decode_aper$address() {
        return WiperRate_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t WiperRate_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment WiperRate_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = WiperRate_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WiperRate_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("WiperRate_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor WiperRate_encode_aper$descriptor() {
        return WiperRate_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle WiperRate_encode_aper$handle() {
        return WiperRate_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperRate_encode_aper$address() {
        return WiperRate_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t WiperRate_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment WiperRate_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = WiperRate_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WiperRate_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class asn_DEF_WiperSet$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_WiperSet").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperSet
     * }
     */
    public static GroupLayout asn_DEF_WiperSet$layout() {
        return asn_DEF_WiperSet$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperSet
     * }
     */
    public static MemorySegment asn_DEF_WiperSet() {
        return asn_DEF_WiperSet$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_WiperSet
     * }
     */
    public static void asn_DEF_WiperSet(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_WiperSet$constants.SEGMENT, 0L, asn_DEF_WiperSet$constants.LAYOUT.byteSize());
    }

    private static class asn_SPC_WiperSet_specs_1$constants {
        public static final GroupLayout LAYOUT = asn_SEQUENCE_specifics_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_SPC_WiperSet_specs_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WiperSet_specs_1
     * }
     */
    public static GroupLayout asn_SPC_WiperSet_specs_1$layout() {
        return asn_SPC_WiperSet_specs_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WiperSet_specs_1
     * }
     */
    public static MemorySegment asn_SPC_WiperSet_specs_1() {
        return asn_SPC_WiperSet_specs_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_SEQUENCE_specifics_t asn_SPC_WiperSet_specs_1
     * }
     */
    public static void asn_SPC_WiperSet_specs_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_SPC_WiperSet_specs_1$constants.SEGMENT, 0L, asn_SPC_WiperSet_specs_1$constants.LAYOUT.byteSize());
    }

    private static class asn_MBR_WiperSet_1$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(4, asn_TYPE_member_s.layout());
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_MBR_WiperSet_1").reinterpret(LAYOUT.byteSize());
    public static final MethodHandle HANDLE = LAYOUT.sliceHandle(sequenceElement());
        public static final long[] DIMS = { 4 };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static SequenceLayout asn_MBR_WiperSet_1$layout() {
        return asn_MBR_WiperSet_1$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static long[] asn_MBR_WiperSet_1$dimensions() {
        return asn_MBR_WiperSet_1$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static MemorySegment asn_MBR_WiperSet_1() {
        return asn_MBR_WiperSet_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static void asn_MBR_WiperSet_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WiperSet_1$constants.SEGMENT, 0L, asn_MBR_WiperSet_1$constants.LAYOUT.byteSize());
    }

    /**
     * Indexed getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static MemorySegment asn_MBR_WiperSet_1(long index0) {
        try {
            return (MemorySegment)asn_MBR_WiperSet_1$constants.HANDLE.invokeExact(asn_MBR_WiperSet_1$constants.SEGMENT, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_member_t asn_MBR_WiperSet_1[4]
     * }
     */
    public static void asn_MBR_WiperSet_1(long index0, MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_MBR_WiperSet_1(index0), 0L, asn_TYPE_member_s.layout().byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef long ObstacleDistance_t
     * }
     */
    public static final OfLong ObstacleDistance_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ObstacleDistance_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ObstacleDistance_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDistance_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ObstacleDistance_constr_1$layout() {
        return asn_PER_type_ObstacleDistance_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDistance_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ObstacleDistance_constr_1() {
        return asn_PER_type_ObstacleDistance_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDistance_constr_1
     * }
     */
    public static void asn_PER_type_ObstacleDistance_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ObstacleDistance_constr_1$constants.SEGMENT, 0L, asn_PER_type_ObstacleDistance_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ObstacleDistance$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ObstacleDistance").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDistance
     * }
     */
    public static GroupLayout asn_DEF_ObstacleDistance$layout() {
        return asn_DEF_ObstacleDistance$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDistance
     * }
     */
    public static MemorySegment asn_DEF_ObstacleDistance() {
        return asn_DEF_ObstacleDistance$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDistance
     * }
     */
    public static void asn_DEF_ObstacleDistance(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ObstacleDistance$constants.SEGMENT, 0L, asn_DEF_ObstacleDistance$constants.LAYOUT.byteSize());
    }

    private static class ObstacleDistance_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ObstacleDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_free$descriptor() {
        return ObstacleDistance_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ObstacleDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ObstacleDistance_free$handle() {
        return ObstacleDistance_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ObstacleDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ObstacleDistance_free$address() {
        return ObstacleDistance_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ObstacleDistance_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ObstacleDistance_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ObstacleDistance_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObstacleDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_print$descriptor() {
        return ObstacleDistance_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObstacleDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_print$handle() {
        return ObstacleDistance_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObstacleDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_print$address() {
        return ObstacleDistance_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObstacleDistance_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ObstacleDistance_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDistance_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObstacleDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_constraint$descriptor() {
        return ObstacleDistance_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObstacleDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_constraint$handle() {
        return ObstacleDistance_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObstacleDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_constraint$address() {
        return ObstacleDistance_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObstacleDistance_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ObstacleDistance_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDistance_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_decode_ber$descriptor() {
        return ObstacleDistance_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ObstacleDistance_decode_ber$handle() {
        return ObstacleDistance_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_ber$address() {
        return ObstacleDistance_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ObstacleDistance_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_der$descriptor() {
        return ObstacleDistance_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_der$handle() {
        return ObstacleDistance_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_der$address() {
        return ObstacleDistance_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObstacleDistance_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_decode_xer$descriptor() {
        return ObstacleDistance_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ObstacleDistance_decode_xer$handle() {
        return ObstacleDistance_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_xer$address() {
        return ObstacleDistance_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObstacleDistance_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_xer$descriptor() {
        return ObstacleDistance_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_xer$handle() {
        return ObstacleDistance_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_xer$address() {
        return ObstacleDistance_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObstacleDistance_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_jer$descriptor() {
        return ObstacleDistance_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_jer$handle() {
        return ObstacleDistance_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_jer$address() {
        return ObstacleDistance_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ObstacleDistance_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_decode_oer$descriptor() {
        return ObstacleDistance_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ObstacleDistance_decode_oer$handle() {
        return ObstacleDistance_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_oer$address() {
        return ObstacleDistance_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObstacleDistance_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_oer$descriptor() {
        return ObstacleDistance_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_oer$handle() {
        return ObstacleDistance_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_oer$address() {
        return ObstacleDistance_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDistance_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_decode_uper$descriptor() {
        return ObstacleDistance_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObstacleDistance_decode_uper$handle() {
        return ObstacleDistance_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_uper$address() {
        return ObstacleDistance_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDistance_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_uper$descriptor() {
        return ObstacleDistance_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_uper$handle() {
        return ObstacleDistance_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_uper$address() {
        return ObstacleDistance_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDistance_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_decode_aper$descriptor() {
        return ObstacleDistance_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObstacleDistance_decode_aper$handle() {
        return ObstacleDistance_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_aper$address() {
        return ObstacleDistance_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDistance_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDistance_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDistance_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDistance_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDistance_encode_aper$descriptor() {
        return ObstacleDistance_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObstacleDistance_encode_aper$handle() {
        return ObstacleDistance_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_aper$address() {
        return ObstacleDistance_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDistance_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDistance_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDistance_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDistance_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef Common_Angle_t ObstacleDirection_t
     * }
     */
    public static final OfLong ObstacleDirection_t = MessageFrame_h.C_LONG;

    private static class asn_PER_type_ObstacleDirection_constr_1$constants {
        public static final GroupLayout LAYOUT = asn_per_constraints_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_PER_type_ObstacleDirection_constr_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDirection_constr_1
     * }
     */
    public static GroupLayout asn_PER_type_ObstacleDirection_constr_1$layout() {
        return asn_PER_type_ObstacleDirection_constr_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDirection_constr_1
     * }
     */
    public static MemorySegment asn_PER_type_ObstacleDirection_constr_1() {
        return asn_PER_type_ObstacleDirection_constr_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_per_constraints_t asn_PER_type_ObstacleDirection_constr_1
     * }
     */
    public static void asn_PER_type_ObstacleDirection_constr_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_PER_type_ObstacleDirection_constr_1$constants.SEGMENT, 0L, asn_PER_type_ObstacleDirection_constr_1$constants.LAYOUT.byteSize());
    }

    private static class asn_DEF_ObstacleDirection$constants {
        public static final GroupLayout LAYOUT = asn_TYPE_descriptor_s.layout();
        public static final MemorySegment SEGMENT = MessageFrame_h.findOrThrow("asn_DEF_ObstacleDirection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDirection
     * }
     */
    public static GroupLayout asn_DEF_ObstacleDirection$layout() {
        return asn_DEF_ObstacleDirection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDirection
     * }
     */
    public static MemorySegment asn_DEF_ObstacleDirection() {
        return asn_DEF_ObstacleDirection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern asn_TYPE_descriptor_t asn_DEF_ObstacleDirection
     * }
     */
    public static void asn_DEF_ObstacleDirection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, asn_DEF_ObstacleDirection$constants.SEGMENT, 0L, asn_DEF_ObstacleDirection$constants.LAYOUT.byteSize());
    }

    private static class ObstacleDirection_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ObstacleDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_free$descriptor() {
        return ObstacleDirection_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ObstacleDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MethodHandle ObstacleDirection_free$handle() {
        return ObstacleDirection_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ObstacleDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static MemorySegment ObstacleDirection_free$address() {
        return ObstacleDirection_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ObstacleDirection_free(const struct asn_TYPE_descriptor_s *, void *, enum asn_struct_free_method)
     * }
     */
    public static void ObstacleDirection_free(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ObstacleDirection_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_free", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_print");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObstacleDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_print$descriptor() {
        return ObstacleDirection_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObstacleDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_print$handle() {
        return ObstacleDirection_print.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObstacleDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_print$address() {
        return ObstacleDirection_print.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObstacleDirection_print(const struct asn_TYPE_descriptor_s *, const void *, int, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static int ObstacleDirection_print(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDirection_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_print", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_constraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_constraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ObstacleDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_constraint$descriptor() {
        return ObstacleDirection_constraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ObstacleDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_constraint$handle() {
        return ObstacleDirection_constraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ObstacleDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_constraint$address() {
        return ObstacleDirection_constraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ObstacleDirection_constraint(const struct asn_TYPE_descriptor_s *, const void *, asn_app_constraint_failed_f *, void *)
     * }
     */
    public static int ObstacleDirection_constraint(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDirection_constraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_constraint", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_decode_ber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG,
            MessageFrame_h.C_INT
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_decode_ber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_decode_ber$descriptor() {
        return ObstacleDirection_decode_ber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MethodHandle ObstacleDirection_decode_ber$handle() {
        return ObstacleDirection_decode_ber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_ber$address() {
        return ObstacleDirection_decode_ber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_ber(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, void **, const void *, size_t, int)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_ber(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = ObstacleDirection_decode_ber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_decode_ber", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_der {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_der");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_der$descriptor() {
        return ObstacleDirection_encode_der.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_der$handle() {
        return ObstacleDirection_encode_der.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_der$address() {
        return ObstacleDirection_encode_der.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_der(const struct asn_TYPE_descriptor_s *, const void *, int, ber_tlv_tag_t, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_der(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObstacleDirection_encode_der.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_der", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_decode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_decode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_decode_xer$descriptor() {
        return ObstacleDirection_decode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MethodHandle ObstacleDirection_decode_xer$handle() {
        return ObstacleDirection_decode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_xer$address() {
        return ObstacleDirection_decode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_xer(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, void **, const char *, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObstacleDirection_decode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_decode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_xer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_xer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_xer$descriptor() {
        return ObstacleDirection_encode_xer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_xer$handle() {
        return ObstacleDirection_encode_xer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_xer$address() {
        return ObstacleDirection_encode_xer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_xer(const struct asn_TYPE_descriptor_s *, const void *, int, enum xer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_xer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = ObstacleDirection_encode_xer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_xer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_jer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_INT,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_jer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_jer$descriptor() {
        return ObstacleDirection_encode_jer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_jer$handle() {
        return ObstacleDirection_encode_jer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_jer$address() {
        return ObstacleDirection_encode_jer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_jer(const struct asn_TYPE_descriptor_s *, const asn_jer_constraints_t *, const void *, int, enum jer_encoder_flags_e, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_jer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = ObstacleDirection_encode_jer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_jer", allocator, x0, x1, x2, x3, x4, x5, x6);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_decode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_LONG
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_decode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_decode_oer$descriptor() {
        return ObstacleDirection_decode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MethodHandle ObstacleDirection_decode_oer$handle() {
        return ObstacleDirection_decode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_oer$address() {
        return ObstacleDirection_decode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_oer(const struct asn_codec_ctx_s *, const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, void **, const void *, size_t)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, long x5) {
        var mh$ = ObstacleDirection_decode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_decode_oer", allocator, x0, x1, x2, x3, x4, x5);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_oer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_oer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_oer$descriptor() {
        return ObstacleDirection_encode_oer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_oer$handle() {
        return ObstacleDirection_encode_oer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_oer$address() {
        return ObstacleDirection_encode_oer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_oer(const struct asn_TYPE_descriptor_s *, const asn_oer_constraints_t *, const void *, asn_app_consume_bytes_f *, void *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_oer(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDirection_encode_oer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_oer", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_decode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_decode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_decode_uper$descriptor() {
        return ObstacleDirection_decode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObstacleDirection_decode_uper$handle() {
        return ObstacleDirection_decode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_uper$address() {
        return ObstacleDirection_decode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_uper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDirection_decode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_decode_uper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_uper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_uper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_uper$descriptor() {
        return ObstacleDirection_encode_uper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_uper$handle() {
        return ObstacleDirection_encode_uper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_uper$address() {
        return ObstacleDirection_encode_uper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_uper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_uper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDirection_encode_uper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_uper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_decode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_dec_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_decode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_decode_aper$descriptor() {
        return ObstacleDirection_decode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MethodHandle ObstacleDirection_decode_aper$handle() {
        return ObstacleDirection_decode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_aper$address() {
        return ObstacleDirection_decode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_dec_rval_t ObstacleDirection_decode_aper(const asn_codec_ctx_t *, const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, void **, asn_per_data_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_decode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = ObstacleDirection_decode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_decode_aper", allocator, x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ObstacleDirection_encode_aper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            asn_enc_rval_s.layout(),
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER,
            MessageFrame_h.C_POINTER
        );

        public static final MemorySegment ADDR = MessageFrame_h.findOrThrow("ObstacleDirection_encode_aper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static FunctionDescriptor ObstacleDirection_encode_aper$descriptor() {
        return ObstacleDirection_encode_aper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MethodHandle ObstacleDirection_encode_aper$handle() {
        return ObstacleDirection_encode_aper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_aper$address() {
        return ObstacleDirection_encode_aper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * asn_enc_rval_t ObstacleDirection_encode_aper(const struct asn_TYPE_descriptor_s *, const asn_per_constraints_t *, const void *, asn_per_outp_t *)
     * }
     */
    public static MemorySegment ObstacleDirection_encode_aper(SegmentAllocator allocator, MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ObstacleDirection_encode_aper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ObstacleDirection_encode_aper", allocator, x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIS_GenericLocations_on_bridges = (int)7937L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_bridges = 7937
     * }
     */
    public static int ITIS_GenericLocations_on_bridges() {
        return ITIS_GenericLocations_on_bridges;
    }
    private static final int ITIS_GenericLocations_in_tunnels = (int)7938L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_tunnels = 7938
     * }
     */
    public static int ITIS_GenericLocations_in_tunnels() {
        return ITIS_GenericLocations_in_tunnels;
    }
    private static final int ITIS_GenericLocations_entering_or_leaving_tunnels = (int)7939L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_entering_or_leaving_tunnels = 7939
     * }
     */
    public static int ITIS_GenericLocations_entering_or_leaving_tunnels() {
        return ITIS_GenericLocations_entering_or_leaving_tunnels;
    }
    private static final int ITIS_GenericLocations_on_ramps = (int)7940L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_ramps = 7940
     * }
     */
    public static int ITIS_GenericLocations_on_ramps() {
        return ITIS_GenericLocations_on_ramps;
    }
    private static final int ITIS_GenericLocations_in_road_construction_area = (int)7941L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_road_construction_area = 7941
     * }
     */
    public static int ITIS_GenericLocations_in_road_construction_area() {
        return ITIS_GenericLocations_in_road_construction_area;
    }
    private static final int ITIS_GenericLocations_around_a_curve = (int)7942L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_around_a_curve = 7942
     * }
     */
    public static int ITIS_GenericLocations_around_a_curve() {
        return ITIS_GenericLocations_around_a_curve;
    }
    private static final int ITIS_GenericLocations_on_curve = (int)8026L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_curve = 8026
     * }
     */
    public static int ITIS_GenericLocations_on_curve() {
        return ITIS_GenericLocations_on_curve;
    }
    private static final int ITIS_GenericLocations_on_tracks = (int)8009L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_tracks = 8009
     * }
     */
    public static int ITIS_GenericLocations_on_tracks() {
        return ITIS_GenericLocations_on_tracks;
    }
    private static final int ITIS_GenericLocations_in_street = (int)8025L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_street = 8025
     * }
     */
    public static int ITIS_GenericLocations_in_street() {
        return ITIS_GenericLocations_in_street;
    }
    private static final int ITIS_GenericLocations_shoulder = (int)8027L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_shoulder = 8027
     * }
     */
    public static int ITIS_GenericLocations_shoulder() {
        return ITIS_GenericLocations_shoulder;
    }
    private static final int ITIS_GenericLocations_on_minor_roads = (int)7943L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_minor_roads = 7943
     * }
     */
    public static int ITIS_GenericLocations_on_minor_roads() {
        return ITIS_GenericLocations_on_minor_roads;
    }
    private static final int ITIS_GenericLocations_in_the_opposing_lanes = (int)7944L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_opposing_lanes = 7944
     * }
     */
    public static int ITIS_GenericLocations_in_the_opposing_lanes() {
        return ITIS_GenericLocations_in_the_opposing_lanes;
    }
    private static final int ITIS_GenericLocations_adjacent_to_roadway = (int)7945L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_adjacent_to_roadway = 7945
     * }
     */
    public static int ITIS_GenericLocations_adjacent_to_roadway() {
        return ITIS_GenericLocations_adjacent_to_roadway;
    }
    private static final int ITIS_GenericLocations_across_tracks = (int)8024L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_across_tracks = 8024
     * }
     */
    public static int ITIS_GenericLocations_across_tracks() {
        return ITIS_GenericLocations_across_tracks;
    }
    private static final int ITIS_GenericLocations_on_bend = (int)7946L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_bend = 7946
     * }
     */
    public static int ITIS_GenericLocations_on_bend() {
        return ITIS_GenericLocations_on_bend;
    }
    private static final int ITIS_GenericLocations_intersection = (int)8032L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_intersection = 8032
     * }
     */
    public static int ITIS_GenericLocations_intersection() {
        return ITIS_GenericLocations_intersection;
    }
    private static final int ITIS_GenericLocations_entire_intersection = (int)7947L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_entire_intersection = 7947
     * }
     */
    public static int ITIS_GenericLocations_entire_intersection() {
        return ITIS_GenericLocations_entire_intersection;
    }
    private static final int ITIS_GenericLocations_in_the_median = (int)7948L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_median = 7948
     * }
     */
    public static int ITIS_GenericLocations_in_the_median() {
        return ITIS_GenericLocations_in_the_median;
    }
    private static final int ITIS_GenericLocations_moved_to_side_of_road = (int)7949L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_moved_to_side_of_road = 7949
     * }
     */
    public static int ITIS_GenericLocations_moved_to_side_of_road() {
        return ITIS_GenericLocations_moved_to_side_of_road;
    }
    private static final int ITIS_GenericLocations_moved_to_shoulder = (int)7950L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_moved_to_shoulder = 7950
     * }
     */
    public static int ITIS_GenericLocations_moved_to_shoulder() {
        return ITIS_GenericLocations_moved_to_shoulder;
    }
    private static final int ITIS_GenericLocations_on_the_roadway = (int)7951L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_the_roadway = 7951
     * }
     */
    public static int ITIS_GenericLocations_on_the_roadway() {
        return ITIS_GenericLocations_on_the_roadway;
    }
    private static final int ITIS_GenericLocations_dip = (int)8010L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_dip = 8010
     * }
     */
    public static int ITIS_GenericLocations_dip() {
        return ITIS_GenericLocations_dip;
    }
    private static final int ITIS_GenericLocations_traffic_circle = (int)8011L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_traffic_circle = 8011
     * }
     */
    public static int ITIS_GenericLocations_traffic_circle() {
        return ITIS_GenericLocations_traffic_circle;
    }
    private static final int ITIS_GenericLocations_crossover = (int)8028L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_crossover = 8028
     * }
     */
    public static int ITIS_GenericLocations_crossover() {
        return ITIS_GenericLocations_crossover;
    }
    private static final int ITIS_GenericLocations_cross_road = (int)8029L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_cross_road = 8029
     * }
     */
    public static int ITIS_GenericLocations_cross_road() {
        return ITIS_GenericLocations_cross_road;
    }
    private static final int ITIS_GenericLocations_side_road = (int)8030L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_side_road = 8030
     * }
     */
    public static int ITIS_GenericLocations_side_road() {
        return ITIS_GenericLocations_side_road;
    }
    private static final int ITIS_GenericLocations_to = (int)8014L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_to = 8014
     * }
     */
    public static int ITIS_GenericLocations_to() {
        return ITIS_GenericLocations_to;
    }
    private static final int ITIS_GenericLocations_by = (int)8015L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_by = 8015
     * }
     */
    public static int ITIS_GenericLocations_by() {
        return ITIS_GenericLocations_by;
    }
    private static final int ITIS_GenericLocations_through = (int)8016L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_through = 8016
     * }
     */
    public static int ITIS_GenericLocations_through() {
        return ITIS_GenericLocations_through;
    }
    private static final int ITIS_GenericLocations_area_of = (int)8017L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_area_of = 8017
     * }
     */
    public static int ITIS_GenericLocations_area_of() {
        return ITIS_GenericLocations_area_of;
    }
    private static final int ITIS_GenericLocations_under = (int)8018L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_under = 8018
     * }
     */
    public static int ITIS_GenericLocations_under() {
        return ITIS_GenericLocations_under;
    }
    private static final int ITIS_GenericLocations_over = (int)8019L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_over = 8019
     * }
     */
    public static int ITIS_GenericLocations_over() {
        return ITIS_GenericLocations_over;
    }
    private static final int ITIS_GenericLocations_from = (int)8020L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_from = 8020
     * }
     */
    public static int ITIS_GenericLocations_from() {
        return ITIS_GenericLocations_from;
    }
    private static final int ITIS_GenericLocations_approaching = (int)8021L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_approaching = 8021
     * }
     */
    public static int ITIS_GenericLocations_approaching() {
        return ITIS_GenericLocations_approaching;
    }
    private static final int ITIS_GenericLocations_entering_at = (int)8022L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_entering_at = 8022
     * }
     */
    public static int ITIS_GenericLocations_entering_at() {
        return ITIS_GenericLocations_entering_at;
    }
    private static final int ITIS_GenericLocations_exiting_at = (int)8023L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_exiting_at = 8023
     * }
     */
    public static int ITIS_GenericLocations_exiting_at() {
        return ITIS_GenericLocations_exiting_at;
    }
    private static final int ITIS_GenericLocations_in_shaded_areas = (int)7952L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_shaded_areas = 7952
     * }
     */
    public static int ITIS_GenericLocations_in_shaded_areas() {
        return ITIS_GenericLocations_in_shaded_areas;
    }
    private static final int ITIS_GenericLocations_in_low_lying_areas = (int)7953L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_low_lying_areas = 7953
     * }
     */
    public static int ITIS_GenericLocations_in_low_lying_areas() {
        return ITIS_GenericLocations_in_low_lying_areas;
    }
    private static final int ITIS_GenericLocations_in_the_downtown_area = (int)7954L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_downtown_area = 7954
     * }
     */
    public static int ITIS_GenericLocations_in_the_downtown_area() {
        return ITIS_GenericLocations_in_the_downtown_area;
    }
    private static final int ITIS_GenericLocations_in_the_inner_city_area = (int)7955L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_inner_city_area = 7955
     * }
     */
    public static int ITIS_GenericLocations_in_the_inner_city_area() {
        return ITIS_GenericLocations_in_the_inner_city_area;
    }
    private static final int ITIS_GenericLocations_in_parts = (int)7956L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_parts = 7956
     * }
     */
    public static int ITIS_GenericLocations_in_parts() {
        return ITIS_GenericLocations_in_parts;
    }
    private static final int ITIS_GenericLocations_in_some_places = (int)7957L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_some_places = 7957
     * }
     */
    public static int ITIS_GenericLocations_in_some_places() {
        return ITIS_GenericLocations_in_some_places;
    }
    private static final int ITIS_GenericLocations_in_the_ditch = (int)7958L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_ditch = 7958
     * }
     */
    public static int ITIS_GenericLocations_in_the_ditch() {
        return ITIS_GenericLocations_in_the_ditch;
    }
    private static final int ITIS_GenericLocations_in_the_valley = (int)7959L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_in_the_valley = 7959
     * }
     */
    public static int ITIS_GenericLocations_in_the_valley() {
        return ITIS_GenericLocations_in_the_valley;
    }
    private static final int ITIS_GenericLocations_on_hill_top = (int)7960L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_on_hill_top = 7960
     * }
     */
    public static int ITIS_GenericLocations_on_hill_top() {
        return ITIS_GenericLocations_on_hill_top;
    }
    private static final int ITIS_GenericLocations_near_the_foothills = (int)7961L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_near_the_foothills = 7961
     * }
     */
    public static int ITIS_GenericLocations_near_the_foothills() {
        return ITIS_GenericLocations_near_the_foothills;
    }
    private static final int ITIS_GenericLocations_at_high_altitudes = (int)7962L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_at_high_altitudes = 7962
     * }
     */
    public static int ITIS_GenericLocations_at_high_altitudes() {
        return ITIS_GenericLocations_at_high_altitudes;
    }
    private static final int ITIS_GenericLocations_near_the_lake = (int)7963L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_near_the_lake = 7963
     * }
     */
    public static int ITIS_GenericLocations_near_the_lake() {
        return ITIS_GenericLocations_near_the_lake;
    }
    private static final int ITIS_GenericLocations_near_the_shore = (int)7964L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_near_the_shore = 7964
     * }
     */
    public static int ITIS_GenericLocations_near_the_shore() {
        return ITIS_GenericLocations_near_the_shore;
    }
    private static final int ITIS_GenericLocations_nearby_basin = (int)8008L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_nearby_basin = 8008
     * }
     */
    public static int ITIS_GenericLocations_nearby_basin() {
        return ITIS_GenericLocations_nearby_basin;
    }
    private static final int ITIS_GenericLocations_over_the_crest_of_a_hill = (int)7965L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_over_the_crest_of_a_hill = 7965
     * }
     */
    public static int ITIS_GenericLocations_over_the_crest_of_a_hill() {
        return ITIS_GenericLocations_over_the_crest_of_a_hill;
    }
    private static final int ITIS_GenericLocations_other_than_on_the_roadway = (int)7966L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_other_than_on_the_roadway = 7966
     * }
     */
    public static int ITIS_GenericLocations_other_than_on_the_roadway() {
        return ITIS_GenericLocations_other_than_on_the_roadway;
    }
    private static final int ITIS_GenericLocations_near_the_beach = (int)7967L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_near_the_beach = 7967
     * }
     */
    public static int ITIS_GenericLocations_near_the_beach() {
        return ITIS_GenericLocations_near_the_beach;
    }
    private static final int ITIS_GenericLocations_near_beach_access_point = (int)7968L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_near_beach_access_point = 7968
     * }
     */
    public static int ITIS_GenericLocations_near_beach_access_point() {
        return ITIS_GenericLocations_near_beach_access_point;
    }
    private static final int ITIS_GenericLocations_mountain_pass = (int)8006L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_mountain_pass = 8006
     * }
     */
    public static int ITIS_GenericLocations_mountain_pass() {
        return ITIS_GenericLocations_mountain_pass;
    }
    private static final int ITIS_GenericLocations_lower_level = (int)7969L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_lower_level = 7969
     * }
     */
    public static int ITIS_GenericLocations_lower_level() {
        return ITIS_GenericLocations_lower_level;
    }
    private static final int ITIS_GenericLocations_upper_level = (int)7970L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_upper_level = 7970
     * }
     */
    public static int ITIS_GenericLocations_upper_level() {
        return ITIS_GenericLocations_upper_level;
    }
    private static final int ITIS_GenericLocations_airport = (int)7971L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_airport = 7971
     * }
     */
    public static int ITIS_GenericLocations_airport() {
        return ITIS_GenericLocations_airport;
    }
    private static final int ITIS_GenericLocations_concourse = (int)7972L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_concourse = 7972
     * }
     */
    public static int ITIS_GenericLocations_concourse() {
        return ITIS_GenericLocations_concourse;
    }
    private static final int ITIS_GenericLocations_gate = (int)7973L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_gate = 7973
     * }
     */
    public static int ITIS_GenericLocations_gate() {
        return ITIS_GenericLocations_gate;
    }
    private static final int ITIS_GenericLocations_baggage_claim = (int)7974L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_baggage_claim = 7974
     * }
     */
    public static int ITIS_GenericLocations_baggage_claim() {
        return ITIS_GenericLocations_baggage_claim;
    }
    private static final int ITIS_GenericLocations_customs_point = (int)7975L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_customs_point = 7975
     * }
     */
    public static int ITIS_GenericLocations_customs_point() {
        return ITIS_GenericLocations_customs_point;
    }
    private static final int ITIS_GenericLocations_reservation_center = (int)8007L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_reservation_center = 8007
     * }
     */
    public static int ITIS_GenericLocations_reservation_center() {
        return ITIS_GenericLocations_reservation_center;
    }
    private static final int ITIS_GenericLocations_station = (int)7976L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_station = 7976
     * }
     */
    public static int ITIS_GenericLocations_station() {
        return ITIS_GenericLocations_station;
    }
    private static final int ITIS_GenericLocations_platform = (int)7977L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_platform = 7977
     * }
     */
    public static int ITIS_GenericLocations_platform() {
        return ITIS_GenericLocations_platform;
    }
    private static final int ITIS_GenericLocations_dock = (int)7978L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_dock = 7978
     * }
     */
    public static int ITIS_GenericLocations_dock() {
        return ITIS_GenericLocations_dock;
    }
    private static final int ITIS_GenericLocations_depot = (int)7979L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_depot = 7979
     * }
     */
    public static int ITIS_GenericLocations_depot() {
        return ITIS_GenericLocations_depot;
    }
    private static final int ITIS_GenericLocations_ev_charging_point = (int)7980L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_ev_charging_point = 7980
     * }
     */
    public static int ITIS_GenericLocations_ev_charging_point() {
        return ITIS_GenericLocations_ev_charging_point;
    }
    private static final int ITIS_GenericLocations_information_welcome_point = (int)7981L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_information_welcome_point = 7981
     * }
     */
    public static int ITIS_GenericLocations_information_welcome_point() {
        return ITIS_GenericLocations_information_welcome_point;
    }
    private static final int ITIS_GenericLocations_at_rest_area = (int)7982L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_at_rest_area = 7982
     * }
     */
    public static int ITIS_GenericLocations_at_rest_area() {
        return ITIS_GenericLocations_at_rest_area;
    }
    private static final int ITIS_GenericLocations_at_service_area = (int)7983L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_at_service_area = 7983
     * }
     */
    public static int ITIS_GenericLocations_at_service_area() {
        return ITIS_GenericLocations_at_service_area;
    }
    private static final int ITIS_GenericLocations_at_weigh_station = (int)7984L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_at_weigh_station = 7984
     * }
     */
    public static int ITIS_GenericLocations_at_weigh_station() {
        return ITIS_GenericLocations_at_weigh_station;
    }
    private static final int ITIS_GenericLocations_roadside_park = (int)8033L;
    /**
     * {@snippet lang=c :
     * enum ITIS_GenericLocations.ITIS_GenericLocations_roadside_park = 8033
     * }
     */
    public static int ITIS_GenericLocations_roadside_park() {
        return ITIS_GenericLocations_roadside_park;
    }
}

