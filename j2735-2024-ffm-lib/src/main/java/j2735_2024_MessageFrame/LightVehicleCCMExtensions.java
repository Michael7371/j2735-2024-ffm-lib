// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct LightVehicleCCMExtensions {
 *     LongitudinalControlState_t longCntrlState;
 *     TemporaryID_t *targetId;
 *     Acceleration_t *accelForecast;
 *     struct AccelTimeConstant *accelTimeConst;
 *     SeparationDistance_t *seperationDist;
 *     FrontCutIn_t *frontCutIn;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class LightVehicleCCMExtensions {

    LightVehicleCCMExtensions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("longCntrlState"),
        MessageFrame_h.C_POINTER.withName("targetId"),
        MessageFrame_h.C_POINTER.withName("accelForecast"),
        MessageFrame_h.C_POINTER.withName("accelTimeConst"),
        MessageFrame_h.C_POINTER.withName("seperationDist"),
        MessageFrame_h.C_POINTER.withName("frontCutIn"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("LightVehicleCCMExtensions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong longCntrlState$LAYOUT = (OfLong)$LAYOUT.select(groupElement("longCntrlState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static final OfLong longCntrlState$layout() {
        return longCntrlState$LAYOUT;
    }

    private static final long longCntrlState$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static final long longCntrlState$offset() {
        return longCntrlState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static long longCntrlState(MemorySegment struct) {
        return struct.get(longCntrlState$LAYOUT, longCntrlState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LongitudinalControlState_t longCntrlState
     * }
     */
    public static void longCntrlState(MemorySegment struct, long fieldValue) {
        struct.set(longCntrlState$LAYOUT, longCntrlState$OFFSET, fieldValue);
    }

    private static final AddressLayout targetId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("targetId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static final AddressLayout targetId$layout() {
        return targetId$LAYOUT;
    }

    private static final long targetId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static final long targetId$offset() {
        return targetId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static MemorySegment targetId(MemorySegment struct) {
        return struct.get(targetId$LAYOUT, targetId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TemporaryID_t *targetId
     * }
     */
    public static void targetId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(targetId$LAYOUT, targetId$OFFSET, fieldValue);
    }

    private static final AddressLayout accelForecast$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelForecast"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Acceleration_t *accelForecast
     * }
     */
    public static final AddressLayout accelForecast$layout() {
        return accelForecast$LAYOUT;
    }

    private static final long accelForecast$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Acceleration_t *accelForecast
     * }
     */
    public static final long accelForecast$offset() {
        return accelForecast$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Acceleration_t *accelForecast
     * }
     */
    public static MemorySegment accelForecast(MemorySegment struct) {
        return struct.get(accelForecast$LAYOUT, accelForecast$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Acceleration_t *accelForecast
     * }
     */
    public static void accelForecast(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelForecast$LAYOUT, accelForecast$OFFSET, fieldValue);
    }

    private static final AddressLayout accelTimeConst$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelTimeConst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AccelTimeConstant *accelTimeConst
     * }
     */
    public static final AddressLayout accelTimeConst$layout() {
        return accelTimeConst$LAYOUT;
    }

    private static final long accelTimeConst$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AccelTimeConstant *accelTimeConst
     * }
     */
    public static final long accelTimeConst$offset() {
        return accelTimeConst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AccelTimeConstant *accelTimeConst
     * }
     */
    public static MemorySegment accelTimeConst(MemorySegment struct) {
        return struct.get(accelTimeConst$LAYOUT, accelTimeConst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AccelTimeConstant *accelTimeConst
     * }
     */
    public static void accelTimeConst(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelTimeConst$LAYOUT, accelTimeConst$OFFSET, fieldValue);
    }

    private static final AddressLayout seperationDist$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seperationDist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SeparationDistance_t *seperationDist
     * }
     */
    public static final AddressLayout seperationDist$layout() {
        return seperationDist$LAYOUT;
    }

    private static final long seperationDist$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SeparationDistance_t *seperationDist
     * }
     */
    public static final long seperationDist$offset() {
        return seperationDist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SeparationDistance_t *seperationDist
     * }
     */
    public static MemorySegment seperationDist(MemorySegment struct) {
        return struct.get(seperationDist$LAYOUT, seperationDist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SeparationDistance_t *seperationDist
     * }
     */
    public static void seperationDist(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seperationDist$LAYOUT, seperationDist$OFFSET, fieldValue);
    }

    private static final AddressLayout frontCutIn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("frontCutIn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static final AddressLayout frontCutIn$layout() {
        return frontCutIn$LAYOUT;
    }

    private static final long frontCutIn$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static final long frontCutIn$offset() {
        return frontCutIn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static MemorySegment frontCutIn(MemorySegment struct) {
        return struct.get(frontCutIn$LAYOUT, frontCutIn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FrontCutIn_t *frontCutIn
     * }
     */
    public static void frontCutIn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(frontCutIn$LAYOUT, frontCutIn$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

