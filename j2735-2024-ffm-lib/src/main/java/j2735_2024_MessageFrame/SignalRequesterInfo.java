// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SignalRequesterInfo {
 *     VehicleID_t id;
 *     RequestID_t request;
 *     Common_MsgCount_t sequenceNumber;
 *     BasicVehicleRole_t *role;
 *     struct RequestorType *typeData;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class SignalRequesterInfo {

    SignalRequesterInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        VehicleID.layout().withName("id"),
        MessageFrame_h.C_LONG.withName("request"),
        MessageFrame_h.C_LONG.withName("sequenceNumber"),
        MessageFrame_h.C_POINTER.withName("role"),
        MessageFrame_h.C_POINTER.withName("typeData"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("SignalRequesterInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout id$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleID_t id
     * }
     */
    public static final GroupLayout id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleID_t id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleID_t id
     * }
     */
    public static MemorySegment id(MemorySegment struct) {
        return struct.asSlice(id$OFFSET, id$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleID_t id
     * }
     */
    public static void id(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, id$OFFSET, id$LAYOUT.byteSize());
    }

    private static final OfLong request$LAYOUT = (OfLong)$LAYOUT.select(groupElement("request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RequestID_t request
     * }
     */
    public static final OfLong request$layout() {
        return request$LAYOUT;
    }

    private static final long request$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RequestID_t request
     * }
     */
    public static final long request$offset() {
        return request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RequestID_t request
     * }
     */
    public static long request(MemorySegment struct) {
        return struct.get(request$LAYOUT, request$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RequestID_t request
     * }
     */
    public static void request(MemorySegment struct, long fieldValue) {
        struct.set(request$LAYOUT, request$OFFSET, fieldValue);
    }

    private static final OfLong sequenceNumber$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sequenceNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_MsgCount_t sequenceNumber
     * }
     */
    public static final OfLong sequenceNumber$layout() {
        return sequenceNumber$LAYOUT;
    }

    private static final long sequenceNumber$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_MsgCount_t sequenceNumber
     * }
     */
    public static final long sequenceNumber$offset() {
        return sequenceNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t sequenceNumber
     * }
     */
    public static long sequenceNumber(MemorySegment struct) {
        return struct.get(sequenceNumber$LAYOUT, sequenceNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t sequenceNumber
     * }
     */
    public static void sequenceNumber(MemorySegment struct, long fieldValue) {
        struct.set(sequenceNumber$LAYOUT, sequenceNumber$OFFSET, fieldValue);
    }

    private static final AddressLayout role$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("role"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t *role
     * }
     */
    public static final AddressLayout role$layout() {
        return role$LAYOUT;
    }

    private static final long role$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t *role
     * }
     */
    public static final long role$offset() {
        return role$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t *role
     * }
     */
    public static MemorySegment role(MemorySegment struct) {
        return struct.get(role$LAYOUT, role$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BasicVehicleRole_t *role
     * }
     */
    public static void role(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(role$LAYOUT, role$OFFSET, fieldValue);
    }

    private static final AddressLayout typeData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("typeData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct RequestorType *typeData
     * }
     */
    public static final AddressLayout typeData$layout() {
        return typeData$LAYOUT;
    }

    private static final long typeData$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct RequestorType *typeData
     * }
     */
    public static final long typeData$offset() {
        return typeData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct RequestorType *typeData
     * }
     */
    public static MemorySegment typeData(MemorySegment struct) {
        return struct.get(typeData$LAYOUT, typeData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct RequestorType *typeData
     * }
     */
    public static void typeData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(typeData$LAYOUT, typeData$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

