// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RptAveragedAndSummaryRecord {
 *     DDateTime_t startTime;
 *     Position3D_t startLoc;
 *     PositionalAccuracy_t startAccOfPos;
 *     DDateTime_t endTime;
 *     Position3D_t endLoc;
 *     PositionalAccuracy_t endAccOfPos;
 *     RptAvgAndSummaryRecordData_t record;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RptAveragedAndSummaryRecord {

    RptAveragedAndSummaryRecord() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        DDateTime.layout().withName("startTime"),
        Position3D.layout().withName("startLoc"),
        PositionalAccuracy.layout().withName("startAccOfPos"),
        DDateTime.layout().withName("endTime"),
        Position3D.layout().withName("endLoc"),
        PositionalAccuracy.layout().withName("endAccOfPos"),
        RptAvgAndSummaryRecordData.layout().withName("record"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RptAveragedAndSummaryRecord");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout startTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("startTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static final GroupLayout startTime$layout() {
        return startTime$LAYOUT;
    }

    private static final long startTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static final long startTime$offset() {
        return startTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static MemorySegment startTime(MemorySegment struct) {
        return struct.asSlice(startTime$OFFSET, startTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t startTime
     * }
     */
    public static void startTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, startTime$OFFSET, startTime$LAYOUT.byteSize());
    }

    private static final GroupLayout startLoc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("startLoc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Position3D_t startLoc
     * }
     */
    public static final GroupLayout startLoc$layout() {
        return startLoc$LAYOUT;
    }

    private static final long startLoc$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Position3D_t startLoc
     * }
     */
    public static final long startLoc$offset() {
        return startLoc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Position3D_t startLoc
     * }
     */
    public static MemorySegment startLoc(MemorySegment struct) {
        return struct.asSlice(startLoc$OFFSET, startLoc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Position3D_t startLoc
     * }
     */
    public static void startLoc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, startLoc$OFFSET, startLoc$LAYOUT.byteSize());
    }

    private static final GroupLayout startAccOfPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("startAccOfPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t startAccOfPos
     * }
     */
    public static final GroupLayout startAccOfPos$layout() {
        return startAccOfPos$LAYOUT;
    }

    private static final long startAccOfPos$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t startAccOfPos
     * }
     */
    public static final long startAccOfPos$offset() {
        return startAccOfPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t startAccOfPos
     * }
     */
    public static MemorySegment startAccOfPos(MemorySegment struct) {
        return struct.asSlice(startAccOfPos$OFFSET, startAccOfPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t startAccOfPos
     * }
     */
    public static void startAccOfPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, startAccOfPos$OFFSET, startAccOfPos$LAYOUT.byteSize());
    }

    private static final GroupLayout endTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static final GroupLayout endTime$layout() {
        return endTime$LAYOUT;
    }

    private static final long endTime$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static final long endTime$offset() {
        return endTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static MemorySegment endTime(MemorySegment struct) {
        return struct.asSlice(endTime$OFFSET, endTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t endTime
     * }
     */
    public static void endTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endTime$OFFSET, endTime$LAYOUT.byteSize());
    }

    private static final GroupLayout endLoc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endLoc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Position3D_t endLoc
     * }
     */
    public static final GroupLayout endLoc$layout() {
        return endLoc$LAYOUT;
    }

    private static final long endLoc$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Position3D_t endLoc
     * }
     */
    public static final long endLoc$offset() {
        return endLoc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Position3D_t endLoc
     * }
     */
    public static MemorySegment endLoc(MemorySegment struct) {
        return struct.asSlice(endLoc$OFFSET, endLoc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Position3D_t endLoc
     * }
     */
    public static void endLoc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endLoc$OFFSET, endLoc$LAYOUT.byteSize());
    }

    private static final GroupLayout endAccOfPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endAccOfPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t endAccOfPos
     * }
     */
    public static final GroupLayout endAccOfPos$layout() {
        return endAccOfPos$LAYOUT;
    }

    private static final long endAccOfPos$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t endAccOfPos
     * }
     */
    public static final long endAccOfPos$offset() {
        return endAccOfPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t endAccOfPos
     * }
     */
    public static MemorySegment endAccOfPos(MemorySegment struct) {
        return struct.asSlice(endAccOfPos$OFFSET, endAccOfPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t endAccOfPos
     * }
     */
    public static void endAccOfPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endAccOfPos$OFFSET, endAccOfPos$LAYOUT.byteSize());
    }

    private static final GroupLayout record_$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("record"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RptAvgAndSummaryRecordData_t record
     * }
     */
    public static final GroupLayout record_$layout() {
        return record_$LAYOUT;
    }

    private static final long record_$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RptAvgAndSummaryRecordData_t record
     * }
     */
    public static final long record_$offset() {
        return record_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RptAvgAndSummaryRecordData_t record
     * }
     */
    public static MemorySegment record_(MemorySegment struct) {
        return struct.asSlice(record_$OFFSET, record_$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RptAvgAndSummaryRecordData_t record
     * }
     */
    public static void record_(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, record_$OFFSET, record_$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

