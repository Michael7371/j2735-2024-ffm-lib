// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TumVehicleId {
 *     OCTET_STRING_t *vehicleIdentity;
 *     IA5String_t *licPlateState;
 *     IA5String_t *licPlateNumVeh;
 *     IA5String_t *licPlateNumTrailer;
 *     struct UserId *userId;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TumVehicleId {

    TumVehicleId() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("vehicleIdentity"),
        MessageFrame_h.C_POINTER.withName("licPlateState"),
        MessageFrame_h.C_POINTER.withName("licPlateNumVeh"),
        MessageFrame_h.C_POINTER.withName("licPlateNumTrailer"),
        MessageFrame_h.C_POINTER.withName("userId"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TumVehicleId");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout vehicleIdentity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleIdentity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCTET_STRING_t *vehicleIdentity
     * }
     */
    public static final AddressLayout vehicleIdentity$layout() {
        return vehicleIdentity$LAYOUT;
    }

    private static final long vehicleIdentity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCTET_STRING_t *vehicleIdentity
     * }
     */
    public static final long vehicleIdentity$offset() {
        return vehicleIdentity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t *vehicleIdentity
     * }
     */
    public static MemorySegment vehicleIdentity(MemorySegment struct) {
        return struct.get(vehicleIdentity$LAYOUT, vehicleIdentity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t *vehicleIdentity
     * }
     */
    public static void vehicleIdentity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleIdentity$LAYOUT, vehicleIdentity$OFFSET, fieldValue);
    }

    private static final AddressLayout licPlateState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("licPlateState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateState
     * }
     */
    public static final AddressLayout licPlateState$layout() {
        return licPlateState$LAYOUT;
    }

    private static final long licPlateState$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateState
     * }
     */
    public static final long licPlateState$offset() {
        return licPlateState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateState
     * }
     */
    public static MemorySegment licPlateState(MemorySegment struct) {
        return struct.get(licPlateState$LAYOUT, licPlateState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateState
     * }
     */
    public static void licPlateState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(licPlateState$LAYOUT, licPlateState$OFFSET, fieldValue);
    }

    private static final AddressLayout licPlateNumVeh$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("licPlateNumVeh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumVeh
     * }
     */
    public static final AddressLayout licPlateNumVeh$layout() {
        return licPlateNumVeh$LAYOUT;
    }

    private static final long licPlateNumVeh$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumVeh
     * }
     */
    public static final long licPlateNumVeh$offset() {
        return licPlateNumVeh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumVeh
     * }
     */
    public static MemorySegment licPlateNumVeh(MemorySegment struct) {
        return struct.get(licPlateNumVeh$LAYOUT, licPlateNumVeh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumVeh
     * }
     */
    public static void licPlateNumVeh(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(licPlateNumVeh$LAYOUT, licPlateNumVeh$OFFSET, fieldValue);
    }

    private static final AddressLayout licPlateNumTrailer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("licPlateNumTrailer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumTrailer
     * }
     */
    public static final AddressLayout licPlateNumTrailer$layout() {
        return licPlateNumTrailer$LAYOUT;
    }

    private static final long licPlateNumTrailer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumTrailer
     * }
     */
    public static final long licPlateNumTrailer$offset() {
        return licPlateNumTrailer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumTrailer
     * }
     */
    public static MemorySegment licPlateNumTrailer(MemorySegment struct) {
        return struct.get(licPlateNumTrailer$LAYOUT, licPlateNumTrailer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *licPlateNumTrailer
     * }
     */
    public static void licPlateNumTrailer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(licPlateNumTrailer$LAYOUT, licPlateNumTrailer$OFFSET, fieldValue);
    }

    private static final AddressLayout userId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct UserId *userId
     * }
     */
    public static final AddressLayout userId$layout() {
        return userId$LAYOUT;
    }

    private static final long userId$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct UserId *userId
     * }
     */
    public static final long userId$offset() {
        return userId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct UserId *userId
     * }
     */
    public static MemorySegment userId(MemorySegment struct) {
        return struct.get(userId$LAYOUT, userId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct UserId *userId
     * }
     */
    public static void userId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userId$LAYOUT, userId$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

