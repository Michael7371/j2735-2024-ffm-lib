// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct UserData {
 *     DDateTime_t timeStamp;
 *     OBJECT_IDENTIFIER_t svcProvID;
 *     TumVehicleId_t vehicleID;
 *     VehicleTypes_t vehicleType;
 *     struct VehicleDescription *vehicleDescription;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class UserData {

    UserData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        DDateTime.layout().withName("timeStamp"),
        ASN__PRIMITIVE_TYPE_s.layout().withName("svcProvID"),
        TumVehicleId.layout().withName("vehicleID"),
        MessageFrame_h.C_LONG.withName("vehicleType"),
        MessageFrame_h.C_POINTER.withName("vehicleDescription"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("UserData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout timeStamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timeStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t timeStamp
     * }
     */
    public static final GroupLayout timeStamp$layout() {
        return timeStamp$LAYOUT;
    }

    private static final long timeStamp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t timeStamp
     * }
     */
    public static final long timeStamp$offset() {
        return timeStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t timeStamp
     * }
     */
    public static MemorySegment timeStamp(MemorySegment struct) {
        return struct.asSlice(timeStamp$OFFSET, timeStamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t timeStamp
     * }
     */
    public static void timeStamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timeStamp$OFFSET, timeStamp$LAYOUT.byteSize());
    }

    private static final GroupLayout svcProvID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("svcProvID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t svcProvID
     * }
     */
    public static final GroupLayout svcProvID$layout() {
        return svcProvID$LAYOUT;
    }

    private static final long svcProvID$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t svcProvID
     * }
     */
    public static final long svcProvID$offset() {
        return svcProvID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t svcProvID
     * }
     */
    public static MemorySegment svcProvID(MemorySegment struct) {
        return struct.asSlice(svcProvID$OFFSET, svcProvID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OBJECT_IDENTIFIER_t svcProvID
     * }
     */
    public static void svcProvID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, svcProvID$OFFSET, svcProvID$LAYOUT.byteSize());
    }

    private static final GroupLayout vehicleID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("vehicleID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TumVehicleId_t vehicleID
     * }
     */
    public static final GroupLayout vehicleID$layout() {
        return vehicleID$LAYOUT;
    }

    private static final long vehicleID$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TumVehicleId_t vehicleID
     * }
     */
    public static final long vehicleID$offset() {
        return vehicleID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TumVehicleId_t vehicleID
     * }
     */
    public static MemorySegment vehicleID(MemorySegment struct) {
        return struct.asSlice(vehicleID$OFFSET, vehicleID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TumVehicleId_t vehicleID
     * }
     */
    public static void vehicleID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vehicleID$OFFSET, vehicleID$LAYOUT.byteSize());
    }

    private static final OfLong vehicleType$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vehicleType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleTypes_t vehicleType
     * }
     */
    public static final OfLong vehicleType$layout() {
        return vehicleType$LAYOUT;
    }

    private static final long vehicleType$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleTypes_t vehicleType
     * }
     */
    public static final long vehicleType$offset() {
        return vehicleType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleTypes_t vehicleType
     * }
     */
    public static long vehicleType(MemorySegment struct) {
        return struct.get(vehicleType$LAYOUT, vehicleType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleTypes_t vehicleType
     * }
     */
    public static void vehicleType(MemorySegment struct, long fieldValue) {
        struct.set(vehicleType$LAYOUT, vehicleType$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleDescription$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleDescription *vehicleDescription
     * }
     */
    public static final AddressLayout vehicleDescription$layout() {
        return vehicleDescription$LAYOUT;
    }

    private static final long vehicleDescription$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleDescription *vehicleDescription
     * }
     */
    public static final long vehicleDescription$offset() {
        return vehicleDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleDescription *vehicleDescription
     * }
     */
    public static MemorySegment vehicleDescription(MemorySegment struct) {
        return struct.get(vehicleDescription$LAYOUT, vehicleDescription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleDescription *vehicleDescription
     * }
     */
    public static void vehicleDescription(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleDescription$LAYOUT, vehicleDescription$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

