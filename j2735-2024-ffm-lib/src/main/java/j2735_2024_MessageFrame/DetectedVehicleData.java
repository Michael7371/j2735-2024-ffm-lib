// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DetectedVehicleData {
 *     ExteriorLights_t *lights;
 *     struct Attitude *vehAttitude;
 *     struct AttitudeConfidence *vehAttitudeConfidence;
 *     struct AngularVelocity *vehAngVel;
 *     struct AngularVelocityConfidence *vehAngVelConfidence;
 *     struct VehicleSize *size;
 *     VehicleHeight_t *height;
 *     struct VehicleSizeConfidence *vehicleSizeConfidence;
 *     BasicVehicleClass_t *vehicleClass;
 *     ClassificationConfidence_t *classConf;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class DetectedVehicleData {

    DetectedVehicleData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("lights"),
        MessageFrame_h.C_POINTER.withName("vehAttitude"),
        MessageFrame_h.C_POINTER.withName("vehAttitudeConfidence"),
        MessageFrame_h.C_POINTER.withName("vehAngVel"),
        MessageFrame_h.C_POINTER.withName("vehAngVelConfidence"),
        MessageFrame_h.C_POINTER.withName("size"),
        MessageFrame_h.C_POINTER.withName("height"),
        MessageFrame_h.C_POINTER.withName("vehicleSizeConfidence"),
        MessageFrame_h.C_POINTER.withName("vehicleClass"),
        MessageFrame_h.C_POINTER.withName("classConf"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("DetectedVehicleData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout lights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static final AddressLayout lights$layout() {
        return lights$LAYOUT;
    }

    private static final long lights$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static final long lights$offset() {
        return lights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static MemorySegment lights(MemorySegment struct) {
        return struct.get(lights$LAYOUT, lights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static void lights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lights$LAYOUT, lights$OFFSET, fieldValue);
    }

    private static final AddressLayout vehAttitude$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehAttitude"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct Attitude *vehAttitude
     * }
     */
    public static final AddressLayout vehAttitude$layout() {
        return vehAttitude$LAYOUT;
    }

    private static final long vehAttitude$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct Attitude *vehAttitude
     * }
     */
    public static final long vehAttitude$offset() {
        return vehAttitude$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct Attitude *vehAttitude
     * }
     */
    public static MemorySegment vehAttitude(MemorySegment struct) {
        return struct.get(vehAttitude$LAYOUT, vehAttitude$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct Attitude *vehAttitude
     * }
     */
    public static void vehAttitude(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehAttitude$LAYOUT, vehAttitude$OFFSET, fieldValue);
    }

    private static final AddressLayout vehAttitudeConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehAttitudeConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AttitudeConfidence *vehAttitudeConfidence
     * }
     */
    public static final AddressLayout vehAttitudeConfidence$layout() {
        return vehAttitudeConfidence$LAYOUT;
    }

    private static final long vehAttitudeConfidence$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AttitudeConfidence *vehAttitudeConfidence
     * }
     */
    public static final long vehAttitudeConfidence$offset() {
        return vehAttitudeConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AttitudeConfidence *vehAttitudeConfidence
     * }
     */
    public static MemorySegment vehAttitudeConfidence(MemorySegment struct) {
        return struct.get(vehAttitudeConfidence$LAYOUT, vehAttitudeConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AttitudeConfidence *vehAttitudeConfidence
     * }
     */
    public static void vehAttitudeConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehAttitudeConfidence$LAYOUT, vehAttitudeConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout vehAngVel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehAngVel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AngularVelocity *vehAngVel
     * }
     */
    public static final AddressLayout vehAngVel$layout() {
        return vehAngVel$LAYOUT;
    }

    private static final long vehAngVel$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AngularVelocity *vehAngVel
     * }
     */
    public static final long vehAngVel$offset() {
        return vehAngVel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AngularVelocity *vehAngVel
     * }
     */
    public static MemorySegment vehAngVel(MemorySegment struct) {
        return struct.get(vehAngVel$LAYOUT, vehAngVel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AngularVelocity *vehAngVel
     * }
     */
    public static void vehAngVel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehAngVel$LAYOUT, vehAngVel$OFFSET, fieldValue);
    }

    private static final AddressLayout vehAngVelConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehAngVelConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AngularVelocityConfidence *vehAngVelConfidence
     * }
     */
    public static final AddressLayout vehAngVelConfidence$layout() {
        return vehAngVelConfidence$LAYOUT;
    }

    private static final long vehAngVelConfidence$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AngularVelocityConfidence *vehAngVelConfidence
     * }
     */
    public static final long vehAngVelConfidence$offset() {
        return vehAngVelConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AngularVelocityConfidence *vehAngVelConfidence
     * }
     */
    public static MemorySegment vehAngVelConfidence(MemorySegment struct) {
        return struct.get(vehAngVelConfidence$LAYOUT, vehAngVelConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AngularVelocityConfidence *vehAngVelConfidence
     * }
     */
    public static void vehAngVelConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehAngVelConfidence$LAYOUT, vehAngVelConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleSize *size
     * }
     */
    public static final AddressLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleSize *size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleSize *size
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleSize *size
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final AddressLayout height$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final AddressLayout height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static MemorySegment height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VehicleHeight_t *height
     * }
     */
    public static void height(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleSizeConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleSizeConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleSizeConfidence *vehicleSizeConfidence
     * }
     */
    public static final AddressLayout vehicleSizeConfidence$layout() {
        return vehicleSizeConfidence$LAYOUT;
    }

    private static final long vehicleSizeConfidence$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleSizeConfidence *vehicleSizeConfidence
     * }
     */
    public static final long vehicleSizeConfidence$offset() {
        return vehicleSizeConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleSizeConfidence *vehicleSizeConfidence
     * }
     */
    public static MemorySegment vehicleSizeConfidence(MemorySegment struct) {
        return struct.get(vehicleSizeConfidence$LAYOUT, vehicleSizeConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleSizeConfidence *vehicleSizeConfidence
     * }
     */
    public static void vehicleSizeConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleSizeConfidence$LAYOUT, vehicleSizeConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BasicVehicleClass_t *vehicleClass
     * }
     */
    public static final AddressLayout vehicleClass$layout() {
        return vehicleClass$LAYOUT;
    }

    private static final long vehicleClass$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BasicVehicleClass_t *vehicleClass
     * }
     */
    public static final long vehicleClass$offset() {
        return vehicleClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BasicVehicleClass_t *vehicleClass
     * }
     */
    public static MemorySegment vehicleClass(MemorySegment struct) {
        return struct.get(vehicleClass$LAYOUT, vehicleClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BasicVehicleClass_t *vehicleClass
     * }
     */
    public static void vehicleClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleClass$LAYOUT, vehicleClass$OFFSET, fieldValue);
    }

    private static final AddressLayout classConf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("classConf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ClassificationConfidence_t *classConf
     * }
     */
    public static final AddressLayout classConf$layout() {
        return classConf$LAYOUT;
    }

    private static final long classConf$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ClassificationConfidence_t *classConf
     * }
     */
    public static final long classConf$offset() {
        return classConf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ClassificationConfidence_t *classConf
     * }
     */
    public static MemorySegment classConf(MemorySegment struct) {
        return struct.get(classConf$LAYOUT, classConf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ClassificationConfidence_t *classConf
     * }
     */
    public static void classConf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(classConf$LAYOUT, classConf$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

