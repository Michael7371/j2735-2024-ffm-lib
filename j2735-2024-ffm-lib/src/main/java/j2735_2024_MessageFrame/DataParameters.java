// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DataParameters {
 *     IA5String_t *processMethod;
 *     IA5String_t *processAgency;
 *     IA5String_t *lastCheckedDate;
 *     IA5String_t *geoidUsed;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class DataParameters {

    DataParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("processMethod"),
        MessageFrame_h.C_POINTER.withName("processAgency"),
        MessageFrame_h.C_POINTER.withName("lastCheckedDate"),
        MessageFrame_h.C_POINTER.withName("geoidUsed"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("DataParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout processMethod$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("processMethod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *processMethod
     * }
     */
    public static final AddressLayout processMethod$layout() {
        return processMethod$LAYOUT;
    }

    private static final long processMethod$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *processMethod
     * }
     */
    public static final long processMethod$offset() {
        return processMethod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *processMethod
     * }
     */
    public static MemorySegment processMethod(MemorySegment struct) {
        return struct.get(processMethod$LAYOUT, processMethod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *processMethod
     * }
     */
    public static void processMethod(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(processMethod$LAYOUT, processMethod$OFFSET, fieldValue);
    }

    private static final AddressLayout processAgency$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("processAgency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *processAgency
     * }
     */
    public static final AddressLayout processAgency$layout() {
        return processAgency$LAYOUT;
    }

    private static final long processAgency$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *processAgency
     * }
     */
    public static final long processAgency$offset() {
        return processAgency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *processAgency
     * }
     */
    public static MemorySegment processAgency(MemorySegment struct) {
        return struct.get(processAgency$LAYOUT, processAgency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *processAgency
     * }
     */
    public static void processAgency(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(processAgency$LAYOUT, processAgency$OFFSET, fieldValue);
    }

    private static final AddressLayout lastCheckedDate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lastCheckedDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *lastCheckedDate
     * }
     */
    public static final AddressLayout lastCheckedDate$layout() {
        return lastCheckedDate$LAYOUT;
    }

    private static final long lastCheckedDate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *lastCheckedDate
     * }
     */
    public static final long lastCheckedDate$offset() {
        return lastCheckedDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *lastCheckedDate
     * }
     */
    public static MemorySegment lastCheckedDate(MemorySegment struct) {
        return struct.get(lastCheckedDate$LAYOUT, lastCheckedDate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *lastCheckedDate
     * }
     */
    public static void lastCheckedDate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lastCheckedDate$LAYOUT, lastCheckedDate$OFFSET, fieldValue);
    }

    private static final AddressLayout geoidUsed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("geoidUsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IA5String_t *geoidUsed
     * }
     */
    public static final AddressLayout geoidUsed$layout() {
        return geoidUsed$LAYOUT;
    }

    private static final long geoidUsed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IA5String_t *geoidUsed
     * }
     */
    public static final long geoidUsed$offset() {
        return geoidUsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IA5String_t *geoidUsed
     * }
     */
    public static MemorySegment geoidUsed(MemorySegment struct) {
        return struct.get(geoidUsed$LAYOUT, geoidUsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IA5String_t *geoidUsed
     * }
     */
    public static void geoidUsed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(geoidUsed$LAYOUT, geoidUsed$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

