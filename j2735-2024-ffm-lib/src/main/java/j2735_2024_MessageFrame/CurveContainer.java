// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct CurveContainer {
 *     SpeedAdvice_t advisorySpeed;
 *     struct FrictionInformation *surfaceCondition;
 *     Radius_t *minRadius;
 *     BankAngle_t *bankAngle;
 *     struct RegionInfo *curveRegion;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class CurveContainer {

    CurveContainer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("advisorySpeed"),
        MessageFrame_h.C_POINTER.withName("surfaceCondition"),
        MessageFrame_h.C_POINTER.withName("minRadius"),
        MessageFrame_h.C_POINTER.withName("bankAngle"),
        MessageFrame_h.C_POINTER.withName("curveRegion"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("CurveContainer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong advisorySpeed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("advisorySpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SpeedAdvice_t advisorySpeed
     * }
     */
    public static final OfLong advisorySpeed$layout() {
        return advisorySpeed$LAYOUT;
    }

    private static final long advisorySpeed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SpeedAdvice_t advisorySpeed
     * }
     */
    public static final long advisorySpeed$offset() {
        return advisorySpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SpeedAdvice_t advisorySpeed
     * }
     */
    public static long advisorySpeed(MemorySegment struct) {
        return struct.get(advisorySpeed$LAYOUT, advisorySpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SpeedAdvice_t advisorySpeed
     * }
     */
    public static void advisorySpeed(MemorySegment struct, long fieldValue) {
        struct.set(advisorySpeed$LAYOUT, advisorySpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout surfaceCondition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("surfaceCondition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct FrictionInformation *surfaceCondition
     * }
     */
    public static final AddressLayout surfaceCondition$layout() {
        return surfaceCondition$LAYOUT;
    }

    private static final long surfaceCondition$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct FrictionInformation *surfaceCondition
     * }
     */
    public static final long surfaceCondition$offset() {
        return surfaceCondition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct FrictionInformation *surfaceCondition
     * }
     */
    public static MemorySegment surfaceCondition(MemorySegment struct) {
        return struct.get(surfaceCondition$LAYOUT, surfaceCondition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct FrictionInformation *surfaceCondition
     * }
     */
    public static void surfaceCondition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(surfaceCondition$LAYOUT, surfaceCondition$OFFSET, fieldValue);
    }

    private static final AddressLayout minRadius$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("minRadius"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Radius_t *minRadius
     * }
     */
    public static final AddressLayout minRadius$layout() {
        return minRadius$LAYOUT;
    }

    private static final long minRadius$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Radius_t *minRadius
     * }
     */
    public static final long minRadius$offset() {
        return minRadius$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Radius_t *minRadius
     * }
     */
    public static MemorySegment minRadius(MemorySegment struct) {
        return struct.get(minRadius$LAYOUT, minRadius$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Radius_t *minRadius
     * }
     */
    public static void minRadius(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(minRadius$LAYOUT, minRadius$OFFSET, fieldValue);
    }

    private static final AddressLayout bankAngle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("bankAngle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BankAngle_t *bankAngle
     * }
     */
    public static final AddressLayout bankAngle$layout() {
        return bankAngle$LAYOUT;
    }

    private static final long bankAngle$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BankAngle_t *bankAngle
     * }
     */
    public static final long bankAngle$offset() {
        return bankAngle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BankAngle_t *bankAngle
     * }
     */
    public static MemorySegment bankAngle(MemorySegment struct) {
        return struct.get(bankAngle$LAYOUT, bankAngle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BankAngle_t *bankAngle
     * }
     */
    public static void bankAngle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(bankAngle$LAYOUT, bankAngle$OFFSET, fieldValue);
    }

    private static final AddressLayout curveRegion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("curveRegion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct RegionInfo *curveRegion
     * }
     */
    public static final AddressLayout curveRegion$layout() {
        return curveRegion$LAYOUT;
    }

    private static final long curveRegion$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct RegionInfo *curveRegion
     * }
     */
    public static final long curveRegion$offset() {
        return curveRegion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct RegionInfo *curveRegion
     * }
     */
    public static MemorySegment curveRegion(MemorySegment struct) {
        return struct.get(curveRegion$LAYOUT, curveRegion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct RegionInfo *curveRegion
     * }
     */
    public static void curveRegion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(curveRegion$LAYOUT, curveRegion$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

