// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VehicleStatus {
 *     ExteriorLights_t *lights;
 *     LightbarInUse_t *lightBar;
 *     struct WiperSet *wipers;
 *     struct BrakeSystemStatus *brakeStatus;
 *     BrakeAppliedPressure_t *brakePressure;
 *     CoefficientOfFriction_t *roadFriction;
 *     SunSensor_t *sunData;
 *     RainSensor_t *rainData;
 *     AmbientAirTemperature_t *airTemp;
 *     AmbientAirPressure_t *airPres;
 *     struct VehicleStatus__steering {
 *         SteeringWheelAngle_t angle;
 *         SteeringWheelAngleConfidence_t *confidence;
 *         SteeringWheelAngleRateOfChange_t *rate;
 *         DrivingWheelAngle_t *wheels;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *steering;
 *     struct VehicleStatus__accelSets {
 *         struct AccelerationSet4Way *accel4way;
 *         VerticalAccelerationThreshold_t *vertAccelThres;
 *         YawRateConfidence_t *yawRateCon;
 *         AccelerationConfidence_t *hozAccelCon;
 *         struct ConfidenceSet *confidenceSet;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *accelSets;
 *     struct VehicleStatus__object {
 *         ObstacleDistance_t obDist;
 *         Common_Angle_t obDirect;
 *         DDateTime_t dateTime;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *object;
 *     struct FullPositionVector *fullPos;
 *     ThrottlePosition_t *throttlePos;
 *     struct SpeedandHeadingandThrottleConfidence *speedHeadC;
 *     SpeedConfidence_t *speedC;
 *     struct VehicleStatus__vehicleData {
 *         VehicleHeight_t height;
 *         BumperHeights_t bumpers;
 *         VehicleMass_t mass;
 *         TrailerWeight_t trailerWeight;
 *         VehicleType_t type;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *vehicleData;
 *     struct VehicleIdent *vehicleIdent;
 *     struct J1939data *j1939data;
 *     struct VehicleStatus__weatherReport {
 *         EssPrecipYesNo_t isRaining;
 *         EssPrecipRate_t *rainRate;
 *         EssPrecipSituation_t *precipSituation;
 *         EssSolarRadiation_t *solarRadiation;
 *         EssMobileFriction_t *friction;
 *         asn_struct_ctx_t _asn_ctx;
 *     } *weatherReport;
 *     GNSSstatus_t *gnssStatus;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class VehicleStatus {

    VehicleStatus() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("lights"),
        MessageFrame_h.C_POINTER.withName("lightBar"),
        MessageFrame_h.C_POINTER.withName("wipers"),
        MessageFrame_h.C_POINTER.withName("brakeStatus"),
        MessageFrame_h.C_POINTER.withName("brakePressure"),
        MessageFrame_h.C_POINTER.withName("roadFriction"),
        MessageFrame_h.C_POINTER.withName("sunData"),
        MessageFrame_h.C_POINTER.withName("rainData"),
        MessageFrame_h.C_POINTER.withName("airTemp"),
        MessageFrame_h.C_POINTER.withName("airPres"),
        MessageFrame_h.C_POINTER.withName("steering"),
        MessageFrame_h.C_POINTER.withName("accelSets"),
        MessageFrame_h.C_POINTER.withName("object"),
        MessageFrame_h.C_POINTER.withName("fullPos"),
        MessageFrame_h.C_POINTER.withName("throttlePos"),
        MessageFrame_h.C_POINTER.withName("speedHeadC"),
        MessageFrame_h.C_POINTER.withName("speedC"),
        MessageFrame_h.C_POINTER.withName("vehicleData"),
        MessageFrame_h.C_POINTER.withName("vehicleIdent"),
        MessageFrame_h.C_POINTER.withName("j1939data"),
        MessageFrame_h.C_POINTER.withName("weatherReport"),
        MessageFrame_h.C_POINTER.withName("gnssStatus"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("VehicleStatus");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout lights$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static final AddressLayout lights$layout() {
        return lights$LAYOUT;
    }

    private static final long lights$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static final long lights$offset() {
        return lights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static MemorySegment lights(MemorySegment struct) {
        return struct.get(lights$LAYOUT, lights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ExteriorLights_t *lights
     * }
     */
    public static void lights(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lights$LAYOUT, lights$OFFSET, fieldValue);
    }

    private static final AddressLayout lightBar$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lightBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LightbarInUse_t *lightBar
     * }
     */
    public static final AddressLayout lightBar$layout() {
        return lightBar$LAYOUT;
    }

    private static final long lightBar$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LightbarInUse_t *lightBar
     * }
     */
    public static final long lightBar$offset() {
        return lightBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LightbarInUse_t *lightBar
     * }
     */
    public static MemorySegment lightBar(MemorySegment struct) {
        return struct.get(lightBar$LAYOUT, lightBar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LightbarInUse_t *lightBar
     * }
     */
    public static void lightBar(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lightBar$LAYOUT, lightBar$OFFSET, fieldValue);
    }

    private static final AddressLayout wipers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wipers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct WiperSet *wipers
     * }
     */
    public static final AddressLayout wipers$layout() {
        return wipers$LAYOUT;
    }

    private static final long wipers$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct WiperSet *wipers
     * }
     */
    public static final long wipers$offset() {
        return wipers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct WiperSet *wipers
     * }
     */
    public static MemorySegment wipers(MemorySegment struct) {
        return struct.get(wipers$LAYOUT, wipers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct WiperSet *wipers
     * }
     */
    public static void wipers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wipers$LAYOUT, wipers$OFFSET, fieldValue);
    }

    private static final AddressLayout brakeStatus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brakeStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct BrakeSystemStatus *brakeStatus
     * }
     */
    public static final AddressLayout brakeStatus$layout() {
        return brakeStatus$LAYOUT;
    }

    private static final long brakeStatus$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct BrakeSystemStatus *brakeStatus
     * }
     */
    public static final long brakeStatus$offset() {
        return brakeStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct BrakeSystemStatus *brakeStatus
     * }
     */
    public static MemorySegment brakeStatus(MemorySegment struct) {
        return struct.get(brakeStatus$LAYOUT, brakeStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct BrakeSystemStatus *brakeStatus
     * }
     */
    public static void brakeStatus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brakeStatus$LAYOUT, brakeStatus$OFFSET, fieldValue);
    }

    private static final AddressLayout brakePressure$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("brakePressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BrakeAppliedPressure_t *brakePressure
     * }
     */
    public static final AddressLayout brakePressure$layout() {
        return brakePressure$LAYOUT;
    }

    private static final long brakePressure$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BrakeAppliedPressure_t *brakePressure
     * }
     */
    public static final long brakePressure$offset() {
        return brakePressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BrakeAppliedPressure_t *brakePressure
     * }
     */
    public static MemorySegment brakePressure(MemorySegment struct) {
        return struct.get(brakePressure$LAYOUT, brakePressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BrakeAppliedPressure_t *brakePressure
     * }
     */
    public static void brakePressure(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(brakePressure$LAYOUT, brakePressure$OFFSET, fieldValue);
    }

    private static final AddressLayout roadFriction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("roadFriction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CoefficientOfFriction_t *roadFriction
     * }
     */
    public static final AddressLayout roadFriction$layout() {
        return roadFriction$LAYOUT;
    }

    private static final long roadFriction$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CoefficientOfFriction_t *roadFriction
     * }
     */
    public static final long roadFriction$offset() {
        return roadFriction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CoefficientOfFriction_t *roadFriction
     * }
     */
    public static MemorySegment roadFriction(MemorySegment struct) {
        return struct.get(roadFriction$LAYOUT, roadFriction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CoefficientOfFriction_t *roadFriction
     * }
     */
    public static void roadFriction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(roadFriction$LAYOUT, roadFriction$OFFSET, fieldValue);
    }

    private static final AddressLayout sunData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sunData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SunSensor_t *sunData
     * }
     */
    public static final AddressLayout sunData$layout() {
        return sunData$LAYOUT;
    }

    private static final long sunData$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SunSensor_t *sunData
     * }
     */
    public static final long sunData$offset() {
        return sunData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SunSensor_t *sunData
     * }
     */
    public static MemorySegment sunData(MemorySegment struct) {
        return struct.get(sunData$LAYOUT, sunData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SunSensor_t *sunData
     * }
     */
    public static void sunData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sunData$LAYOUT, sunData$OFFSET, fieldValue);
    }

    private static final AddressLayout rainData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rainData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RainSensor_t *rainData
     * }
     */
    public static final AddressLayout rainData$layout() {
        return rainData$LAYOUT;
    }

    private static final long rainData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RainSensor_t *rainData
     * }
     */
    public static final long rainData$offset() {
        return rainData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RainSensor_t *rainData
     * }
     */
    public static MemorySegment rainData(MemorySegment struct) {
        return struct.get(rainData$LAYOUT, rainData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RainSensor_t *rainData
     * }
     */
    public static void rainData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rainData$LAYOUT, rainData$OFFSET, fieldValue);
    }

    private static final AddressLayout airTemp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("airTemp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AmbientAirTemperature_t *airTemp
     * }
     */
    public static final AddressLayout airTemp$layout() {
        return airTemp$LAYOUT;
    }

    private static final long airTemp$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AmbientAirTemperature_t *airTemp
     * }
     */
    public static final long airTemp$offset() {
        return airTemp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AmbientAirTemperature_t *airTemp
     * }
     */
    public static MemorySegment airTemp(MemorySegment struct) {
        return struct.get(airTemp$LAYOUT, airTemp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AmbientAirTemperature_t *airTemp
     * }
     */
    public static void airTemp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(airTemp$LAYOUT, airTemp$OFFSET, fieldValue);
    }

    private static final AddressLayout airPres$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("airPres"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AmbientAirPressure_t *airPres
     * }
     */
    public static final AddressLayout airPres$layout() {
        return airPres$LAYOUT;
    }

    private static final long airPres$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AmbientAirPressure_t *airPres
     * }
     */
    public static final long airPres$offset() {
        return airPres$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AmbientAirPressure_t *airPres
     * }
     */
    public static MemorySegment airPres(MemorySegment struct) {
        return struct.get(airPres$LAYOUT, airPres$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AmbientAirPressure_t *airPres
     * }
     */
    public static void airPres(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(airPres$LAYOUT, airPres$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleStatus__steering {
     *     SteeringWheelAngle_t angle;
     *     SteeringWheelAngleConfidence_t *confidence;
     *     SteeringWheelAngleRateOfChange_t *rate;
     *     DrivingWheelAngle_t *wheels;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleStatus__steering {

        VehicleStatus__steering() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_LONG.withName("angle"),
            MessageFrame_h.C_POINTER.withName("confidence"),
            MessageFrame_h.C_POINTER.withName("rate"),
            MessageFrame_h.C_POINTER.withName("wheels"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleStatus__steering");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong angle$LAYOUT = (OfLong)$LAYOUT.select(groupElement("angle"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * SteeringWheelAngle_t angle
         * }
         */
        public static final OfLong angle$layout() {
            return angle$LAYOUT;
        }

        private static final long angle$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * SteeringWheelAngle_t angle
         * }
         */
        public static final long angle$offset() {
            return angle$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * SteeringWheelAngle_t angle
         * }
         */
        public static long angle(MemorySegment struct) {
            return struct.get(angle$LAYOUT, angle$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * SteeringWheelAngle_t angle
         * }
         */
        public static void angle(MemorySegment struct, long fieldValue) {
            struct.set(angle$LAYOUT, angle$OFFSET, fieldValue);
        }

        private static final AddressLayout confidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("confidence"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * SteeringWheelAngleConfidence_t *confidence
         * }
         */
        public static final AddressLayout confidence$layout() {
            return confidence$LAYOUT;
        }

        private static final long confidence$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * SteeringWheelAngleConfidence_t *confidence
         * }
         */
        public static final long confidence$offset() {
            return confidence$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * SteeringWheelAngleConfidence_t *confidence
         * }
         */
        public static MemorySegment confidence(MemorySegment struct) {
            return struct.get(confidence$LAYOUT, confidence$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * SteeringWheelAngleConfidence_t *confidence
         * }
         */
        public static void confidence(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(confidence$LAYOUT, confidence$OFFSET, fieldValue);
        }

        private static final AddressLayout rate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rate"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * SteeringWheelAngleRateOfChange_t *rate
         * }
         */
        public static final AddressLayout rate$layout() {
            return rate$LAYOUT;
        }

        private static final long rate$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * SteeringWheelAngleRateOfChange_t *rate
         * }
         */
        public static final long rate$offset() {
            return rate$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * SteeringWheelAngleRateOfChange_t *rate
         * }
         */
        public static MemorySegment rate(MemorySegment struct) {
            return struct.get(rate$LAYOUT, rate$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * SteeringWheelAngleRateOfChange_t *rate
         * }
         */
        public static void rate(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(rate$LAYOUT, rate$OFFSET, fieldValue);
        }

        private static final AddressLayout wheels$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wheels"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DrivingWheelAngle_t *wheels
         * }
         */
        public static final AddressLayout wheels$layout() {
            return wheels$LAYOUT;
        }

        private static final long wheels$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DrivingWheelAngle_t *wheels
         * }
         */
        public static final long wheels$offset() {
            return wheels$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DrivingWheelAngle_t *wheels
         * }
         */
        public static MemorySegment wheels(MemorySegment struct) {
            return struct.get(wheels$LAYOUT, wheels$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DrivingWheelAngle_t *wheels
         * }
         */
        public static void wheels(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(wheels$LAYOUT, wheels$OFFSET, fieldValue);
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout steering$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("steering"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus__steering *steering
     * }
     */
    public static final AddressLayout steering$layout() {
        return steering$LAYOUT;
    }

    private static final long steering$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus__steering *steering
     * }
     */
    public static final long steering$offset() {
        return steering$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__steering *steering
     * }
     */
    public static MemorySegment steering(MemorySegment struct) {
        return struct.get(steering$LAYOUT, steering$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__steering *steering
     * }
     */
    public static void steering(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(steering$LAYOUT, steering$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleStatus__accelSets {
     *     struct AccelerationSet4Way *accel4way;
     *     VerticalAccelerationThreshold_t *vertAccelThres;
     *     YawRateConfidence_t *yawRateCon;
     *     AccelerationConfidence_t *hozAccelCon;
     *     struct ConfidenceSet *confidenceSet;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleStatus__accelSets {

        VehicleStatus__accelSets() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_POINTER.withName("accel4way"),
            MessageFrame_h.C_POINTER.withName("vertAccelThres"),
            MessageFrame_h.C_POINTER.withName("yawRateCon"),
            MessageFrame_h.C_POINTER.withName("hozAccelCon"),
            MessageFrame_h.C_POINTER.withName("confidenceSet"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleStatus__accelSets");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final AddressLayout accel4way$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accel4way"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct AccelerationSet4Way *accel4way
         * }
         */
        public static final AddressLayout accel4way$layout() {
            return accel4way$LAYOUT;
        }

        private static final long accel4way$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct AccelerationSet4Way *accel4way
         * }
         */
        public static final long accel4way$offset() {
            return accel4way$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct AccelerationSet4Way *accel4way
         * }
         */
        public static MemorySegment accel4way(MemorySegment struct) {
            return struct.get(accel4way$LAYOUT, accel4way$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct AccelerationSet4Way *accel4way
         * }
         */
        public static void accel4way(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(accel4way$LAYOUT, accel4way$OFFSET, fieldValue);
        }

        private static final AddressLayout vertAccelThres$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertAccelThres"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * VerticalAccelerationThreshold_t *vertAccelThres
         * }
         */
        public static final AddressLayout vertAccelThres$layout() {
            return vertAccelThres$LAYOUT;
        }

        private static final long vertAccelThres$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * VerticalAccelerationThreshold_t *vertAccelThres
         * }
         */
        public static final long vertAccelThres$offset() {
            return vertAccelThres$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * VerticalAccelerationThreshold_t *vertAccelThres
         * }
         */
        public static MemorySegment vertAccelThres(MemorySegment struct) {
            return struct.get(vertAccelThres$LAYOUT, vertAccelThres$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * VerticalAccelerationThreshold_t *vertAccelThres
         * }
         */
        public static void vertAccelThres(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(vertAccelThres$LAYOUT, vertAccelThres$OFFSET, fieldValue);
        }

        private static final AddressLayout yawRateCon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("yawRateCon"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * YawRateConfidence_t *yawRateCon
         * }
         */
        public static final AddressLayout yawRateCon$layout() {
            return yawRateCon$LAYOUT;
        }

        private static final long yawRateCon$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * YawRateConfidence_t *yawRateCon
         * }
         */
        public static final long yawRateCon$offset() {
            return yawRateCon$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * YawRateConfidence_t *yawRateCon
         * }
         */
        public static MemorySegment yawRateCon(MemorySegment struct) {
            return struct.get(yawRateCon$LAYOUT, yawRateCon$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * YawRateConfidence_t *yawRateCon
         * }
         */
        public static void yawRateCon(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(yawRateCon$LAYOUT, yawRateCon$OFFSET, fieldValue);
        }

        private static final AddressLayout hozAccelCon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hozAccelCon"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * AccelerationConfidence_t *hozAccelCon
         * }
         */
        public static final AddressLayout hozAccelCon$layout() {
            return hozAccelCon$LAYOUT;
        }

        private static final long hozAccelCon$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * AccelerationConfidence_t *hozAccelCon
         * }
         */
        public static final long hozAccelCon$offset() {
            return hozAccelCon$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * AccelerationConfidence_t *hozAccelCon
         * }
         */
        public static MemorySegment hozAccelCon(MemorySegment struct) {
            return struct.get(hozAccelCon$LAYOUT, hozAccelCon$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * AccelerationConfidence_t *hozAccelCon
         * }
         */
        public static void hozAccelCon(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(hozAccelCon$LAYOUT, hozAccelCon$OFFSET, fieldValue);
        }

        private static final AddressLayout confidenceSet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("confidenceSet"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct ConfidenceSet *confidenceSet
         * }
         */
        public static final AddressLayout confidenceSet$layout() {
            return confidenceSet$LAYOUT;
        }

        private static final long confidenceSet$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct ConfidenceSet *confidenceSet
         * }
         */
        public static final long confidenceSet$offset() {
            return confidenceSet$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct ConfidenceSet *confidenceSet
         * }
         */
        public static MemorySegment confidenceSet(MemorySegment struct) {
            return struct.get(confidenceSet$LAYOUT, confidenceSet$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct ConfidenceSet *confidenceSet
         * }
         */
        public static void confidenceSet(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(confidenceSet$LAYOUT, confidenceSet$OFFSET, fieldValue);
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout accelSets$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelSets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus__accelSets *accelSets
     * }
     */
    public static final AddressLayout accelSets$layout() {
        return accelSets$LAYOUT;
    }

    private static final long accelSets$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus__accelSets *accelSets
     * }
     */
    public static final long accelSets$offset() {
        return accelSets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__accelSets *accelSets
     * }
     */
    public static MemorySegment accelSets(MemorySegment struct) {
        return struct.get(accelSets$LAYOUT, accelSets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__accelSets *accelSets
     * }
     */
    public static void accelSets(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelSets$LAYOUT, accelSets$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleStatus__object {
     *     ObstacleDistance_t obDist;
     *     Common_Angle_t obDirect;
     *     DDateTime_t dateTime;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleStatus__object {

        VehicleStatus__object() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_LONG.withName("obDist"),
            MessageFrame_h.C_LONG.withName("obDirect"),
            DDateTime.layout().withName("dateTime"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleStatus__object");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong obDist$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obDist"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * ObstacleDistance_t obDist
         * }
         */
        public static final OfLong obDist$layout() {
            return obDist$LAYOUT;
        }

        private static final long obDist$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * ObstacleDistance_t obDist
         * }
         */
        public static final long obDist$offset() {
            return obDist$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * ObstacleDistance_t obDist
         * }
         */
        public static long obDist(MemorySegment struct) {
            return struct.get(obDist$LAYOUT, obDist$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * ObstacleDistance_t obDist
         * }
         */
        public static void obDist(MemorySegment struct, long fieldValue) {
            struct.set(obDist$LAYOUT, obDist$OFFSET, fieldValue);
        }

        private static final OfLong obDirect$LAYOUT = (OfLong)$LAYOUT.select(groupElement("obDirect"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * Common_Angle_t obDirect
         * }
         */
        public static final OfLong obDirect$layout() {
            return obDirect$LAYOUT;
        }

        private static final long obDirect$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * Common_Angle_t obDirect
         * }
         */
        public static final long obDirect$offset() {
            return obDirect$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * Common_Angle_t obDirect
         * }
         */
        public static long obDirect(MemorySegment struct) {
            return struct.get(obDirect$LAYOUT, obDirect$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * Common_Angle_t obDirect
         * }
         */
        public static void obDirect(MemorySegment struct, long fieldValue) {
            struct.set(obDirect$LAYOUT, obDirect$OFFSET, fieldValue);
        }

        private static final GroupLayout dateTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dateTime"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DDateTime_t dateTime
         * }
         */
        public static final GroupLayout dateTime$layout() {
            return dateTime$LAYOUT;
        }

        private static final long dateTime$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DDateTime_t dateTime
         * }
         */
        public static final long dateTime$offset() {
            return dateTime$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DDateTime_t dateTime
         * }
         */
        public static MemorySegment dateTime(MemorySegment struct) {
            return struct.asSlice(dateTime$OFFSET, dateTime$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DDateTime_t dateTime
         * }
         */
        public static void dateTime(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, dateTime$OFFSET, dateTime$LAYOUT.byteSize());
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 96;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout object$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus__object *object
     * }
     */
    public static final AddressLayout object$layout() {
        return object$LAYOUT;
    }

    private static final long object$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus__object *object
     * }
     */
    public static final long object$offset() {
        return object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__object *object
     * }
     */
    public static MemorySegment object(MemorySegment struct) {
        return struct.get(object$LAYOUT, object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__object *object
     * }
     */
    public static void object(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(object$LAYOUT, object$OFFSET, fieldValue);
    }

    private static final AddressLayout fullPos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fullPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct FullPositionVector *fullPos
     * }
     */
    public static final AddressLayout fullPos$layout() {
        return fullPos$LAYOUT;
    }

    private static final long fullPos$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct FullPositionVector *fullPos
     * }
     */
    public static final long fullPos$offset() {
        return fullPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct FullPositionVector *fullPos
     * }
     */
    public static MemorySegment fullPos(MemorySegment struct) {
        return struct.get(fullPos$LAYOUT, fullPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct FullPositionVector *fullPos
     * }
     */
    public static void fullPos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fullPos$LAYOUT, fullPos$OFFSET, fieldValue);
    }

    private static final AddressLayout throttlePos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("throttlePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ThrottlePosition_t *throttlePos
     * }
     */
    public static final AddressLayout throttlePos$layout() {
        return throttlePos$LAYOUT;
    }

    private static final long throttlePos$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ThrottlePosition_t *throttlePos
     * }
     */
    public static final long throttlePos$offset() {
        return throttlePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ThrottlePosition_t *throttlePos
     * }
     */
    public static MemorySegment throttlePos(MemorySegment struct) {
        return struct.get(throttlePos$LAYOUT, throttlePos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ThrottlePosition_t *throttlePos
     * }
     */
    public static void throttlePos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(throttlePos$LAYOUT, throttlePos$OFFSET, fieldValue);
    }

    private static final AddressLayout speedHeadC$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speedHeadC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedHeadC
     * }
     */
    public static final AddressLayout speedHeadC$layout() {
        return speedHeadC$LAYOUT;
    }

    private static final long speedHeadC$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedHeadC
     * }
     */
    public static final long speedHeadC$offset() {
        return speedHeadC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedHeadC
     * }
     */
    public static MemorySegment speedHeadC(MemorySegment struct) {
        return struct.get(speedHeadC$LAYOUT, speedHeadC$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedHeadC
     * }
     */
    public static void speedHeadC(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speedHeadC$LAYOUT, speedHeadC$OFFSET, fieldValue);
    }

    private static final AddressLayout speedC$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speedC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SpeedConfidence_t *speedC
     * }
     */
    public static final AddressLayout speedC$layout() {
        return speedC$LAYOUT;
    }

    private static final long speedC$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SpeedConfidence_t *speedC
     * }
     */
    public static final long speedC$offset() {
        return speedC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SpeedConfidence_t *speedC
     * }
     */
    public static MemorySegment speedC(MemorySegment struct) {
        return struct.get(speedC$LAYOUT, speedC$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SpeedConfidence_t *speedC
     * }
     */
    public static void speedC(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speedC$LAYOUT, speedC$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleStatus__vehicleData {
     *     VehicleHeight_t height;
     *     BumperHeights_t bumpers;
     *     VehicleMass_t mass;
     *     TrailerWeight_t trailerWeight;
     *     VehicleType_t type;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleStatus__vehicleData {

        VehicleStatus__vehicleData() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_LONG.withName("height"),
            BumperHeights.layout().withName("bumpers"),
            MessageFrame_h.C_LONG.withName("mass"),
            MessageFrame_h.C_LONG.withName("trailerWeight"),
            MessageFrame_h.C_LONG.withName("type"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleStatus__vehicleData");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong height$LAYOUT = (OfLong)$LAYOUT.select(groupElement("height"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * VehicleHeight_t height
         * }
         */
        public static final OfLong height$layout() {
            return height$LAYOUT;
        }

        private static final long height$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * VehicleHeight_t height
         * }
         */
        public static final long height$offset() {
            return height$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * VehicleHeight_t height
         * }
         */
        public static long height(MemorySegment struct) {
            return struct.get(height$LAYOUT, height$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * VehicleHeight_t height
         * }
         */
        public static void height(MemorySegment struct, long fieldValue) {
            struct.set(height$LAYOUT, height$OFFSET, fieldValue);
        }

        private static final GroupLayout bumpers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bumpers"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * BumperHeights_t bumpers
         * }
         */
        public static final GroupLayout bumpers$layout() {
            return bumpers$LAYOUT;
        }

        private static final long bumpers$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * BumperHeights_t bumpers
         * }
         */
        public static final long bumpers$offset() {
            return bumpers$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * BumperHeights_t bumpers
         * }
         */
        public static MemorySegment bumpers(MemorySegment struct) {
            return struct.asSlice(bumpers$OFFSET, bumpers$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * BumperHeights_t bumpers
         * }
         */
        public static void bumpers(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, bumpers$OFFSET, bumpers$LAYOUT.byteSize());
        }

        private static final OfLong mass$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mass"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * VehicleMass_t mass
         * }
         */
        public static final OfLong mass$layout() {
            return mass$LAYOUT;
        }

        private static final long mass$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * VehicleMass_t mass
         * }
         */
        public static final long mass$offset() {
            return mass$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * VehicleMass_t mass
         * }
         */
        public static long mass(MemorySegment struct) {
            return struct.get(mass$LAYOUT, mass$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * VehicleMass_t mass
         * }
         */
        public static void mass(MemorySegment struct, long fieldValue) {
            struct.set(mass$LAYOUT, mass$OFFSET, fieldValue);
        }

        private static final OfLong trailerWeight$LAYOUT = (OfLong)$LAYOUT.select(groupElement("trailerWeight"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TrailerWeight_t trailerWeight
         * }
         */
        public static final OfLong trailerWeight$layout() {
            return trailerWeight$LAYOUT;
        }

        private static final long trailerWeight$OFFSET = 56;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TrailerWeight_t trailerWeight
         * }
         */
        public static final long trailerWeight$offset() {
            return trailerWeight$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TrailerWeight_t trailerWeight
         * }
         */
        public static long trailerWeight(MemorySegment struct) {
            return struct.get(trailerWeight$LAYOUT, trailerWeight$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TrailerWeight_t trailerWeight
         * }
         */
        public static void trailerWeight(MemorySegment struct, long fieldValue) {
            struct.set(trailerWeight$LAYOUT, trailerWeight$OFFSET, fieldValue);
        }

        private static final OfLong type$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * VehicleType_t type
         * }
         */
        public static final OfLong type$layout() {
            return type$LAYOUT;
        }

        private static final long type$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * VehicleType_t type
         * }
         */
        public static final long type$offset() {
            return type$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * VehicleType_t type
         * }
         */
        public static long type(MemorySegment struct) {
            return struct.get(type$LAYOUT, type$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * VehicleType_t type
         * }
         */
        public static void type(MemorySegment struct, long fieldValue) {
            struct.set(type$LAYOUT, type$OFFSET, fieldValue);
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 72;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout vehicleData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus__vehicleData *vehicleData
     * }
     */
    public static final AddressLayout vehicleData$layout() {
        return vehicleData$LAYOUT;
    }

    private static final long vehicleData$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus__vehicleData *vehicleData
     * }
     */
    public static final long vehicleData$offset() {
        return vehicleData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__vehicleData *vehicleData
     * }
     */
    public static MemorySegment vehicleData(MemorySegment struct) {
        return struct.get(vehicleData$LAYOUT, vehicleData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__vehicleData *vehicleData
     * }
     */
    public static void vehicleData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleData$LAYOUT, vehicleData$OFFSET, fieldValue);
    }

    private static final AddressLayout vehicleIdent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vehicleIdent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleIdent *vehicleIdent
     * }
     */
    public static final AddressLayout vehicleIdent$layout() {
        return vehicleIdent$LAYOUT;
    }

    private static final long vehicleIdent$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleIdent *vehicleIdent
     * }
     */
    public static final long vehicleIdent$offset() {
        return vehicleIdent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleIdent *vehicleIdent
     * }
     */
    public static MemorySegment vehicleIdent(MemorySegment struct) {
        return struct.get(vehicleIdent$LAYOUT, vehicleIdent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleIdent *vehicleIdent
     * }
     */
    public static void vehicleIdent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vehicleIdent$LAYOUT, vehicleIdent$OFFSET, fieldValue);
    }

    private static final AddressLayout j1939data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("j1939data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct J1939data *j1939data
     * }
     */
    public static final AddressLayout j1939data$layout() {
        return j1939data$LAYOUT;
    }

    private static final long j1939data$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct J1939data *j1939data
     * }
     */
    public static final long j1939data$offset() {
        return j1939data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct J1939data *j1939data
     * }
     */
    public static MemorySegment j1939data(MemorySegment struct) {
        return struct.get(j1939data$LAYOUT, j1939data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct J1939data *j1939data
     * }
     */
    public static void j1939data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(j1939data$LAYOUT, j1939data$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct VehicleStatus__weatherReport {
     *     EssPrecipYesNo_t isRaining;
     *     EssPrecipRate_t *rainRate;
     *     EssPrecipSituation_t *precipSituation;
     *     EssSolarRadiation_t *solarRadiation;
     *     EssMobileFriction_t *friction;
     *     asn_struct_ctx_t _asn_ctx;
     * }
     * }
     */
    public static class VehicleStatus__weatherReport {

        VehicleStatus__weatherReport() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MessageFrame_h.C_LONG.withName("isRaining"),
            MessageFrame_h.C_POINTER.withName("rainRate"),
            MessageFrame_h.C_POINTER.withName("precipSituation"),
            MessageFrame_h.C_POINTER.withName("solarRadiation"),
            MessageFrame_h.C_POINTER.withName("friction"),
            asn_struct_ctx_s.layout().withName("_asn_ctx")
        ).withName("VehicleStatus__weatherReport");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong isRaining$LAYOUT = (OfLong)$LAYOUT.select(groupElement("isRaining"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * EssPrecipYesNo_t isRaining
         * }
         */
        public static final OfLong isRaining$layout() {
            return isRaining$LAYOUT;
        }

        private static final long isRaining$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * EssPrecipYesNo_t isRaining
         * }
         */
        public static final long isRaining$offset() {
            return isRaining$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * EssPrecipYesNo_t isRaining
         * }
         */
        public static long isRaining(MemorySegment struct) {
            return struct.get(isRaining$LAYOUT, isRaining$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * EssPrecipYesNo_t isRaining
         * }
         */
        public static void isRaining(MemorySegment struct, long fieldValue) {
            struct.set(isRaining$LAYOUT, isRaining$OFFSET, fieldValue);
        }

        private static final AddressLayout rainRate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rainRate"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * EssPrecipRate_t *rainRate
         * }
         */
        public static final AddressLayout rainRate$layout() {
            return rainRate$LAYOUT;
        }

        private static final long rainRate$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * EssPrecipRate_t *rainRate
         * }
         */
        public static final long rainRate$offset() {
            return rainRate$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * EssPrecipRate_t *rainRate
         * }
         */
        public static MemorySegment rainRate(MemorySegment struct) {
            return struct.get(rainRate$LAYOUT, rainRate$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * EssPrecipRate_t *rainRate
         * }
         */
        public static void rainRate(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(rainRate$LAYOUT, rainRate$OFFSET, fieldValue);
        }

        private static final AddressLayout precipSituation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("precipSituation"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * EssPrecipSituation_t *precipSituation
         * }
         */
        public static final AddressLayout precipSituation$layout() {
            return precipSituation$LAYOUT;
        }

        private static final long precipSituation$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * EssPrecipSituation_t *precipSituation
         * }
         */
        public static final long precipSituation$offset() {
            return precipSituation$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * EssPrecipSituation_t *precipSituation
         * }
         */
        public static MemorySegment precipSituation(MemorySegment struct) {
            return struct.get(precipSituation$LAYOUT, precipSituation$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * EssPrecipSituation_t *precipSituation
         * }
         */
        public static void precipSituation(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(precipSituation$LAYOUT, precipSituation$OFFSET, fieldValue);
        }

        private static final AddressLayout solarRadiation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("solarRadiation"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * EssSolarRadiation_t *solarRadiation
         * }
         */
        public static final AddressLayout solarRadiation$layout() {
            return solarRadiation$LAYOUT;
        }

        private static final long solarRadiation$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * EssSolarRadiation_t *solarRadiation
         * }
         */
        public static final long solarRadiation$offset() {
            return solarRadiation$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * EssSolarRadiation_t *solarRadiation
         * }
         */
        public static MemorySegment solarRadiation(MemorySegment struct) {
            return struct.get(solarRadiation$LAYOUT, solarRadiation$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * EssSolarRadiation_t *solarRadiation
         * }
         */
        public static void solarRadiation(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(solarRadiation$LAYOUT, solarRadiation$OFFSET, fieldValue);
        }

        private static final AddressLayout friction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("friction"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * EssMobileFriction_t *friction
         * }
         */
        public static final AddressLayout friction$layout() {
            return friction$LAYOUT;
        }

        private static final long friction$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * EssMobileFriction_t *friction
         * }
         */
        public static final long friction$offset() {
            return friction$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * EssMobileFriction_t *friction
         * }
         */
        public static MemorySegment friction(MemorySegment struct) {
            return struct.get(friction$LAYOUT, friction$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * EssMobileFriction_t *friction
         * }
         */
        public static void friction(MemorySegment struct, MemorySegment fieldValue) {
            struct.set(friction$LAYOUT, friction$OFFSET, fieldValue);
        }

        private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final GroupLayout _asn_ctx$layout() {
            return _asn_ctx$LAYOUT;
        }

        private static final long _asn_ctx$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static final long _asn_ctx$offset() {
            return _asn_ctx$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static MemorySegment _asn_ctx(MemorySegment struct) {
            return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * asn_struct_ctx_t _asn_ctx
         * }
         */
        public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final AddressLayout weatherReport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("weatherReport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct VehicleStatus__weatherReport *weatherReport
     * }
     */
    public static final AddressLayout weatherReport$layout() {
        return weatherReport$LAYOUT;
    }

    private static final long weatherReport$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct VehicleStatus__weatherReport *weatherReport
     * }
     */
    public static final long weatherReport$offset() {
        return weatherReport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__weatherReport *weatherReport
     * }
     */
    public static MemorySegment weatherReport(MemorySegment struct) {
        return struct.get(weatherReport$LAYOUT, weatherReport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct VehicleStatus__weatherReport *weatherReport
     * }
     */
    public static void weatherReport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(weatherReport$LAYOUT, weatherReport$OFFSET, fieldValue);
    }

    private static final AddressLayout gnssStatus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("gnssStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GNSSstatus_t *gnssStatus
     * }
     */
    public static final AddressLayout gnssStatus$layout() {
        return gnssStatus$LAYOUT;
    }

    private static final long gnssStatus$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GNSSstatus_t *gnssStatus
     * }
     */
    public static final long gnssStatus$offset() {
        return gnssStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GNSSstatus_t *gnssStatus
     * }
     */
    public static MemorySegment gnssStatus(MemorySegment struct) {
        return struct.get(gnssStatus$LAYOUT, gnssStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GNSSstatus_t *gnssStatus
     * }
     */
    public static void gnssStatus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(gnssStatus$LAYOUT, gnssStatus$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

