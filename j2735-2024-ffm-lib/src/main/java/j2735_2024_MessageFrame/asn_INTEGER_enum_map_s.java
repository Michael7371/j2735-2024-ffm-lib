// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct asn_INTEGER_enum_map_s {
 *     long nat_value;
 *     size_t enum_len;
 *     const char *enum_name;
 * }
 * }
 */
public class asn_INTEGER_enum_map_s {

    asn_INTEGER_enum_map_s() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("nat_value"),
        MessageFrame_h.C_LONG.withName("enum_len"),
        MessageFrame_h.C_POINTER.withName("enum_name")
    ).withName("asn_INTEGER_enum_map_s");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong nat_value$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nat_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long nat_value
     * }
     */
    public static final OfLong nat_value$layout() {
        return nat_value$LAYOUT;
    }

    private static final long nat_value$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long nat_value
     * }
     */
    public static final long nat_value$offset() {
        return nat_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long nat_value
     * }
     */
    public static long nat_value(MemorySegment struct) {
        return struct.get(nat_value$LAYOUT, nat_value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long nat_value
     * }
     */
    public static void nat_value(MemorySegment struct, long fieldValue) {
        struct.set(nat_value$LAYOUT, nat_value$OFFSET, fieldValue);
    }

    private static final OfLong enum_len$LAYOUT = (OfLong)$LAYOUT.select(groupElement("enum_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t enum_len
     * }
     */
    public static final OfLong enum_len$layout() {
        return enum_len$LAYOUT;
    }

    private static final long enum_len$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t enum_len
     * }
     */
    public static final long enum_len$offset() {
        return enum_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t enum_len
     * }
     */
    public static long enum_len(MemorySegment struct) {
        return struct.get(enum_len$LAYOUT, enum_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t enum_len
     * }
     */
    public static void enum_len(MemorySegment struct, long fieldValue) {
        struct.set(enum_len$LAYOUT, enum_len$OFFSET, fieldValue);
    }

    private static final AddressLayout enum_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("enum_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *enum_name
     * }
     */
    public static final AddressLayout enum_name$layout() {
        return enum_name$LAYOUT;
    }

    private static final long enum_name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *enum_name
     * }
     */
    public static final long enum_name$offset() {
        return enum_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *enum_name
     * }
     */
    public static MemorySegment enum_name(MemorySegment struct) {
        return struct.get(enum_name$LAYOUT, enum_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *enum_name
     * }
     */
    public static void enum_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(enum_name$LAYOUT, enum_name$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

