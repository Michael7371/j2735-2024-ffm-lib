// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RptAveragedRecord {
 *     Speed_t *avgSpeed;
 *     StdDev_t *speedStdDev;
 *     long *avgStopDuration;
 *     StdDev_t *avgStopStdDev;
 *     long *avgFuelConsumption;
 *     struct RptEmissions *avgEmissions;
 *     long *avgNumOfOccupants;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RptAveragedRecord {

    RptAveragedRecord() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("avgSpeed"),
        MessageFrame_h.C_POINTER.withName("speedStdDev"),
        MessageFrame_h.C_POINTER.withName("avgStopDuration"),
        MessageFrame_h.C_POINTER.withName("avgStopStdDev"),
        MessageFrame_h.C_POINTER.withName("avgFuelConsumption"),
        MessageFrame_h.C_POINTER.withName("avgEmissions"),
        MessageFrame_h.C_POINTER.withName("avgNumOfOccupants"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RptAveragedRecord");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout avgSpeed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Speed_t *avgSpeed
     * }
     */
    public static final AddressLayout avgSpeed$layout() {
        return avgSpeed$LAYOUT;
    }

    private static final long avgSpeed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Speed_t *avgSpeed
     * }
     */
    public static final long avgSpeed$offset() {
        return avgSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Speed_t *avgSpeed
     * }
     */
    public static MemorySegment avgSpeed(MemorySegment struct) {
        return struct.get(avgSpeed$LAYOUT, avgSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Speed_t *avgSpeed
     * }
     */
    public static void avgSpeed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgSpeed$LAYOUT, avgSpeed$OFFSET, fieldValue);
    }

    private static final AddressLayout speedStdDev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speedStdDev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdDev_t *speedStdDev
     * }
     */
    public static final AddressLayout speedStdDev$layout() {
        return speedStdDev$LAYOUT;
    }

    private static final long speedStdDev$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdDev_t *speedStdDev
     * }
     */
    public static final long speedStdDev$offset() {
        return speedStdDev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdDev_t *speedStdDev
     * }
     */
    public static MemorySegment speedStdDev(MemorySegment struct) {
        return struct.get(speedStdDev$LAYOUT, speedStdDev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdDev_t *speedStdDev
     * }
     */
    public static void speedStdDev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speedStdDev$LAYOUT, speedStdDev$OFFSET, fieldValue);
    }

    private static final AddressLayout avgStopDuration$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgStopDuration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *avgStopDuration
     * }
     */
    public static final AddressLayout avgStopDuration$layout() {
        return avgStopDuration$LAYOUT;
    }

    private static final long avgStopDuration$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *avgStopDuration
     * }
     */
    public static final long avgStopDuration$offset() {
        return avgStopDuration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *avgStopDuration
     * }
     */
    public static MemorySegment avgStopDuration(MemorySegment struct) {
        return struct.get(avgStopDuration$LAYOUT, avgStopDuration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *avgStopDuration
     * }
     */
    public static void avgStopDuration(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgStopDuration$LAYOUT, avgStopDuration$OFFSET, fieldValue);
    }

    private static final AddressLayout avgStopStdDev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgStopStdDev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdDev_t *avgStopStdDev
     * }
     */
    public static final AddressLayout avgStopStdDev$layout() {
        return avgStopStdDev$LAYOUT;
    }

    private static final long avgStopStdDev$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdDev_t *avgStopStdDev
     * }
     */
    public static final long avgStopStdDev$offset() {
        return avgStopStdDev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdDev_t *avgStopStdDev
     * }
     */
    public static MemorySegment avgStopStdDev(MemorySegment struct) {
        return struct.get(avgStopStdDev$LAYOUT, avgStopStdDev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdDev_t *avgStopStdDev
     * }
     */
    public static void avgStopStdDev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgStopStdDev$LAYOUT, avgStopStdDev$OFFSET, fieldValue);
    }

    private static final AddressLayout avgFuelConsumption$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgFuelConsumption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *avgFuelConsumption
     * }
     */
    public static final AddressLayout avgFuelConsumption$layout() {
        return avgFuelConsumption$LAYOUT;
    }

    private static final long avgFuelConsumption$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *avgFuelConsumption
     * }
     */
    public static final long avgFuelConsumption$offset() {
        return avgFuelConsumption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *avgFuelConsumption
     * }
     */
    public static MemorySegment avgFuelConsumption(MemorySegment struct) {
        return struct.get(avgFuelConsumption$LAYOUT, avgFuelConsumption$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *avgFuelConsumption
     * }
     */
    public static void avgFuelConsumption(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgFuelConsumption$LAYOUT, avgFuelConsumption$OFFSET, fieldValue);
    }

    private static final AddressLayout avgEmissions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgEmissions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct RptEmissions *avgEmissions
     * }
     */
    public static final AddressLayout avgEmissions$layout() {
        return avgEmissions$LAYOUT;
    }

    private static final long avgEmissions$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct RptEmissions *avgEmissions
     * }
     */
    public static final long avgEmissions$offset() {
        return avgEmissions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct RptEmissions *avgEmissions
     * }
     */
    public static MemorySegment avgEmissions(MemorySegment struct) {
        return struct.get(avgEmissions$LAYOUT, avgEmissions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct RptEmissions *avgEmissions
     * }
     */
    public static void avgEmissions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgEmissions$LAYOUT, avgEmissions$OFFSET, fieldValue);
    }

    private static final AddressLayout avgNumOfOccupants$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("avgNumOfOccupants"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long *avgNumOfOccupants
     * }
     */
    public static final AddressLayout avgNumOfOccupants$layout() {
        return avgNumOfOccupants$LAYOUT;
    }

    private static final long avgNumOfOccupants$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long *avgNumOfOccupants
     * }
     */
    public static final long avgNumOfOccupants$offset() {
        return avgNumOfOccupants$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long *avgNumOfOccupants
     * }
     */
    public static MemorySegment avgNumOfOccupants(MemorySegment struct) {
        return struct.get(avgNumOfOccupants$LAYOUT, avgNumOfOccupants$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long *avgNumOfOccupants
     * }
     */
    public static void avgNumOfOccupants(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(avgNumOfOccupants$LAYOUT, avgNumOfOccupants$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

