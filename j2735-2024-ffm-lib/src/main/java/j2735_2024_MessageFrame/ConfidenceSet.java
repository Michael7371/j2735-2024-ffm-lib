// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ConfidenceSet {
 *     struct AccelSteerYawRateConfidence *accelConfidence;
 *     struct SpeedandHeadingandThrottleConfidence *speedConfidence;
 *     TimeConfidence_t *timeConfidence;
 *     struct PositionConfidenceSet *posConfidence;
 *     SteeringWheelAngleConfidence_t *steerConfidence;
 *     HeadingConfidence_t *headingConfidence;
 *     ThrottleConfidence_t *throttleConfidence;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class ConfidenceSet {

    ConfidenceSet() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("accelConfidence"),
        MessageFrame_h.C_POINTER.withName("speedConfidence"),
        MessageFrame_h.C_POINTER.withName("timeConfidence"),
        MessageFrame_h.C_POINTER.withName("posConfidence"),
        MessageFrame_h.C_POINTER.withName("steerConfidence"),
        MessageFrame_h.C_POINTER.withName("headingConfidence"),
        MessageFrame_h.C_POINTER.withName("throttleConfidence"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("ConfidenceSet");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout accelConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accelConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct AccelSteerYawRateConfidence *accelConfidence
     * }
     */
    public static final AddressLayout accelConfidence$layout() {
        return accelConfidence$LAYOUT;
    }

    private static final long accelConfidence$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct AccelSteerYawRateConfidence *accelConfidence
     * }
     */
    public static final long accelConfidence$offset() {
        return accelConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct AccelSteerYawRateConfidence *accelConfidence
     * }
     */
    public static MemorySegment accelConfidence(MemorySegment struct) {
        return struct.get(accelConfidence$LAYOUT, accelConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct AccelSteerYawRateConfidence *accelConfidence
     * }
     */
    public static void accelConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accelConfidence$LAYOUT, accelConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout speedConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("speedConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static final AddressLayout speedConfidence$layout() {
        return speedConfidence$LAYOUT;
    }

    private static final long speedConfidence$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static final long speedConfidence$offset() {
        return speedConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static MemorySegment speedConfidence(MemorySegment struct) {
        return struct.get(speedConfidence$LAYOUT, speedConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct SpeedandHeadingandThrottleConfidence *speedConfidence
     * }
     */
    public static void speedConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(speedConfidence$LAYOUT, speedConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout timeConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("timeConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static final AddressLayout timeConfidence$layout() {
        return timeConfidence$LAYOUT;
    }

    private static final long timeConfidence$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static final long timeConfidence$offset() {
        return timeConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static MemorySegment timeConfidence(MemorySegment struct) {
        return struct.get(timeConfidence$LAYOUT, timeConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TimeConfidence_t *timeConfidence
     * }
     */
    public static void timeConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(timeConfidence$LAYOUT, timeConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout posConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("posConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static final AddressLayout posConfidence$layout() {
        return posConfidence$LAYOUT;
    }

    private static final long posConfidence$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static final long posConfidence$offset() {
        return posConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static MemorySegment posConfidence(MemorySegment struct) {
        return struct.get(posConfidence$LAYOUT, posConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct PositionConfidenceSet *posConfidence
     * }
     */
    public static void posConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(posConfidence$LAYOUT, posConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout steerConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("steerConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SteeringWheelAngleConfidence_t *steerConfidence
     * }
     */
    public static final AddressLayout steerConfidence$layout() {
        return steerConfidence$LAYOUT;
    }

    private static final long steerConfidence$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SteeringWheelAngleConfidence_t *steerConfidence
     * }
     */
    public static final long steerConfidence$offset() {
        return steerConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SteeringWheelAngleConfidence_t *steerConfidence
     * }
     */
    public static MemorySegment steerConfidence(MemorySegment struct) {
        return struct.get(steerConfidence$LAYOUT, steerConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SteeringWheelAngleConfidence_t *steerConfidence
     * }
     */
    public static void steerConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(steerConfidence$LAYOUT, steerConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout headingConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("headingConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HeadingConfidence_t *headingConfidence
     * }
     */
    public static final AddressLayout headingConfidence$layout() {
        return headingConfidence$LAYOUT;
    }

    private static final long headingConfidence$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HeadingConfidence_t *headingConfidence
     * }
     */
    public static final long headingConfidence$offset() {
        return headingConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HeadingConfidence_t *headingConfidence
     * }
     */
    public static MemorySegment headingConfidence(MemorySegment struct) {
        return struct.get(headingConfidence$LAYOUT, headingConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HeadingConfidence_t *headingConfidence
     * }
     */
    public static void headingConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(headingConfidence$LAYOUT, headingConfidence$OFFSET, fieldValue);
    }

    private static final AddressLayout throttleConfidence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("throttleConfidence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ThrottleConfidence_t *throttleConfidence
     * }
     */
    public static final AddressLayout throttleConfidence$layout() {
        return throttleConfidence$LAYOUT;
    }

    private static final long throttleConfidence$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ThrottleConfidence_t *throttleConfidence
     * }
     */
    public static final long throttleConfidence$offset() {
        return throttleConfidence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ThrottleConfidence_t *throttleConfidence
     * }
     */
    public static MemorySegment throttleConfidence(MemorySegment struct) {
        return struct.get(throttleConfidence$LAYOUT, throttleConfidence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ThrottleConfidence_t *throttleConfidence
     * }
     */
    public static void throttleConfidence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(throttleConfidence$LAYOUT, throttleConfidence$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

