// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TollAdvertisementInfo {
 *     Common_MsgCount_t tamSequenceNum;
 *     long totalTams;
 *     long tamNum;
 *     TollChargerInfo_t tollChargerInfo;
 *     DDateTime_t timestamp;
 *     struct TumInstructions *tumInstructions;
 *     TollPointMap_t tollPointMap;
 *     OCTET_STRING_t tumPublicKey;
 *     AckPolicy_t ackPolicy;
 *     BOOLEAN_t *lastTollPtDataReq;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TollAdvertisementInfo {

    TollAdvertisementInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_LONG.withName("tamSequenceNum"),
        MessageFrame_h.C_LONG.withName("totalTams"),
        MessageFrame_h.C_LONG.withName("tamNum"),
        TollChargerInfo.layout().withName("tollChargerInfo"),
        DDateTime.layout().withName("timestamp"),
        MessageFrame_h.C_POINTER.withName("tumInstructions"),
        TollPointMap.layout().withName("tollPointMap"),
        OCTET_STRING.layout().withName("tumPublicKey"),
        AckPolicy.layout().withName("ackPolicy"),
        MessageFrame_h.C_POINTER.withName("lastTollPtDataReq"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TollAdvertisementInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong tamSequenceNum$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tamSequenceNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Common_MsgCount_t tamSequenceNum
     * }
     */
    public static final OfLong tamSequenceNum$layout() {
        return tamSequenceNum$LAYOUT;
    }

    private static final long tamSequenceNum$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Common_MsgCount_t tamSequenceNum
     * }
     */
    public static final long tamSequenceNum$offset() {
        return tamSequenceNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t tamSequenceNum
     * }
     */
    public static long tamSequenceNum(MemorySegment struct) {
        return struct.get(tamSequenceNum$LAYOUT, tamSequenceNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Common_MsgCount_t tamSequenceNum
     * }
     */
    public static void tamSequenceNum(MemorySegment struct, long fieldValue) {
        struct.set(tamSequenceNum$LAYOUT, tamSequenceNum$OFFSET, fieldValue);
    }

    private static final OfLong totalTams$LAYOUT = (OfLong)$LAYOUT.select(groupElement("totalTams"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long totalTams
     * }
     */
    public static final OfLong totalTams$layout() {
        return totalTams$LAYOUT;
    }

    private static final long totalTams$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long totalTams
     * }
     */
    public static final long totalTams$offset() {
        return totalTams$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long totalTams
     * }
     */
    public static long totalTams(MemorySegment struct) {
        return struct.get(totalTams$LAYOUT, totalTams$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long totalTams
     * }
     */
    public static void totalTams(MemorySegment struct, long fieldValue) {
        struct.set(totalTams$LAYOUT, totalTams$OFFSET, fieldValue);
    }

    private static final OfLong tamNum$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tamNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long tamNum
     * }
     */
    public static final OfLong tamNum$layout() {
        return tamNum$LAYOUT;
    }

    private static final long tamNum$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long tamNum
     * }
     */
    public static final long tamNum$offset() {
        return tamNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long tamNum
     * }
     */
    public static long tamNum(MemorySegment struct) {
        return struct.get(tamNum$LAYOUT, tamNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long tamNum
     * }
     */
    public static void tamNum(MemorySegment struct, long fieldValue) {
        struct.set(tamNum$LAYOUT, tamNum$OFFSET, fieldValue);
    }

    private static final GroupLayout tollChargerInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tollChargerInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TollChargerInfo_t tollChargerInfo
     * }
     */
    public static final GroupLayout tollChargerInfo$layout() {
        return tollChargerInfo$LAYOUT;
    }

    private static final long tollChargerInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TollChargerInfo_t tollChargerInfo
     * }
     */
    public static final long tollChargerInfo$offset() {
        return tollChargerInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TollChargerInfo_t tollChargerInfo
     * }
     */
    public static MemorySegment tollChargerInfo(MemorySegment struct) {
        return struct.asSlice(tollChargerInfo$OFFSET, tollChargerInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TollChargerInfo_t tollChargerInfo
     * }
     */
    public static void tollChargerInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tollChargerInfo$OFFSET, tollChargerInfo$LAYOUT.byteSize());
    }

    private static final GroupLayout timestamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t timestamp
     * }
     */
    public static final GroupLayout timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t timestamp
     * }
     */
    public static MemorySegment timestamp(MemorySegment struct) {
        return struct.asSlice(timestamp$OFFSET, timestamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timestamp$OFFSET, timestamp$LAYOUT.byteSize());
    }

    private static final AddressLayout tumInstructions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tumInstructions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct TumInstructions *tumInstructions
     * }
     */
    public static final AddressLayout tumInstructions$layout() {
        return tumInstructions$LAYOUT;
    }

    private static final long tumInstructions$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct TumInstructions *tumInstructions
     * }
     */
    public static final long tumInstructions$offset() {
        return tumInstructions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct TumInstructions *tumInstructions
     * }
     */
    public static MemorySegment tumInstructions(MemorySegment struct) {
        return struct.get(tumInstructions$LAYOUT, tumInstructions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct TumInstructions *tumInstructions
     * }
     */
    public static void tumInstructions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tumInstructions$LAYOUT, tumInstructions$OFFSET, fieldValue);
    }

    private static final GroupLayout tollPointMap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tollPointMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TollPointMap_t tollPointMap
     * }
     */
    public static final GroupLayout tollPointMap$layout() {
        return tollPointMap$LAYOUT;
    }

    private static final long tollPointMap$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TollPointMap_t tollPointMap
     * }
     */
    public static final long tollPointMap$offset() {
        return tollPointMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TollPointMap_t tollPointMap
     * }
     */
    public static MemorySegment tollPointMap(MemorySegment struct) {
        return struct.asSlice(tollPointMap$OFFSET, tollPointMap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TollPointMap_t tollPointMap
     * }
     */
    public static void tollPointMap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tollPointMap$OFFSET, tollPointMap$LAYOUT.byteSize());
    }

    private static final GroupLayout tumPublicKey$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tumPublicKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OCTET_STRING_t tumPublicKey
     * }
     */
    public static final GroupLayout tumPublicKey$layout() {
        return tumPublicKey$LAYOUT;
    }

    private static final long tumPublicKey$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OCTET_STRING_t tumPublicKey
     * }
     */
    public static final long tumPublicKey$offset() {
        return tumPublicKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t tumPublicKey
     * }
     */
    public static MemorySegment tumPublicKey(MemorySegment struct) {
        return struct.asSlice(tumPublicKey$OFFSET, tumPublicKey$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OCTET_STRING_t tumPublicKey
     * }
     */
    public static void tumPublicKey(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, tumPublicKey$OFFSET, tumPublicKey$LAYOUT.byteSize());
    }

    private static final GroupLayout ackPolicy$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ackPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AckPolicy_t ackPolicy
     * }
     */
    public static final GroupLayout ackPolicy$layout() {
        return ackPolicy$LAYOUT;
    }

    private static final long ackPolicy$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AckPolicy_t ackPolicy
     * }
     */
    public static final long ackPolicy$offset() {
        return ackPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AckPolicy_t ackPolicy
     * }
     */
    public static MemorySegment ackPolicy(MemorySegment struct) {
        return struct.asSlice(ackPolicy$OFFSET, ackPolicy$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AckPolicy_t ackPolicy
     * }
     */
    public static void ackPolicy(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ackPolicy$OFFSET, ackPolicy$LAYOUT.byteSize());
    }

    private static final AddressLayout lastTollPtDataReq$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lastTollPtDataReq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN_t *lastTollPtDataReq
     * }
     */
    public static final AddressLayout lastTollPtDataReq$layout() {
        return lastTollPtDataReq$LAYOUT;
    }

    private static final long lastTollPtDataReq$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN_t *lastTollPtDataReq
     * }
     */
    public static final long lastTollPtDataReq$offset() {
        return lastTollPtDataReq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *lastTollPtDataReq
     * }
     */
    public static MemorySegment lastTollPtDataReq(MemorySegment struct) {
        return struct.get(lastTollPtDataReq$LAYOUT, lastTollPtDataReq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN_t *lastTollPtDataReq
     * }
     */
    public static void lastTollPtDataReq(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lastTollPtDataReq$LAYOUT, lastTollPtDataReq$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

