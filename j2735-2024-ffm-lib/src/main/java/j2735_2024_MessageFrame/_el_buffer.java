// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _el_buffer {
 *     uint8_t *buf;
 *     size_t length;
 *     size_t allocated_size;
 *     unsigned int bits_unused;
 * }
 * }
 */
public class _el_buffer {

    _el_buffer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("buf"),
        MessageFrame_h.C_LONG.withName("length"),
        MessageFrame_h.C_LONG.withName("allocated_size"),
        MessageFrame_h.C_INT.withName("bits_unused"),
        MemoryLayout.paddingLayout(4)
    ).withName("_el_buffer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buf$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *buf
     * }
     */
    public static final AddressLayout buf$layout() {
        return buf$LAYOUT;
    }

    private static final long buf$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *buf
     * }
     */
    public static final long buf$offset() {
        return buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *buf
     * }
     */
    public static MemorySegment buf(MemorySegment struct) {
        return struct.get(buf$LAYOUT, buf$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *buf
     * }
     */
    public static void buf(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buf$LAYOUT, buf$OFFSET, fieldValue);
    }

    private static final OfLong length$LAYOUT = (OfLong)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final OfLong length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static long length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t length
     * }
     */
    public static void length(MemorySegment struct, long fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final OfLong allocated_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("allocated_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t allocated_size
     * }
     */
    public static final OfLong allocated_size$layout() {
        return allocated_size$LAYOUT;
    }

    private static final long allocated_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t allocated_size
     * }
     */
    public static final long allocated_size$offset() {
        return allocated_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t allocated_size
     * }
     */
    public static long allocated_size(MemorySegment struct) {
        return struct.get(allocated_size$LAYOUT, allocated_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t allocated_size
     * }
     */
    public static void allocated_size(MemorySegment struct, long fieldValue) {
        struct.set(allocated_size$LAYOUT, allocated_size$OFFSET, fieldValue);
    }

    private static final OfInt bits_unused$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bits_unused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int bits_unused
     * }
     */
    public static final OfInt bits_unused$layout() {
        return bits_unused$LAYOUT;
    }

    private static final long bits_unused$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int bits_unused
     * }
     */
    public static final long bits_unused$offset() {
        return bits_unused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int bits_unused
     * }
     */
    public static int bits_unused(MemorySegment struct) {
        return struct.get(bits_unused$LAYOUT, bits_unused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int bits_unused
     * }
     */
    public static void bits_unused(MemorySegment struct, int fieldValue) {
        struct.set(bits_unused$LAYOUT, bits_unused$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

