// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct RptInstantaneousRecord {
 *     DDateTime_t timeOfInstantRec;
 *     Position3D_t locOfInstantRec;
 *     PositionalAccuracy_t accOfPosition;
 *     RptVelocity_t velOfInstantRec;
 *     struct RptInstantaneousRecordData *record;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class RptInstantaneousRecord {

    RptInstantaneousRecord() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        DDateTime.layout().withName("timeOfInstantRec"),
        Position3D.layout().withName("locOfInstantRec"),
        PositionalAccuracy.layout().withName("accOfPosition"),
        RptVelocity.layout().withName("velOfInstantRec"),
        MessageFrame_h.C_POINTER.withName("record"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("RptInstantaneousRecord");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout timeOfInstantRec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("timeOfInstantRec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DDateTime_t timeOfInstantRec
     * }
     */
    public static final GroupLayout timeOfInstantRec$layout() {
        return timeOfInstantRec$LAYOUT;
    }

    private static final long timeOfInstantRec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DDateTime_t timeOfInstantRec
     * }
     */
    public static final long timeOfInstantRec$offset() {
        return timeOfInstantRec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DDateTime_t timeOfInstantRec
     * }
     */
    public static MemorySegment timeOfInstantRec(MemorySegment struct) {
        return struct.asSlice(timeOfInstantRec$OFFSET, timeOfInstantRec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DDateTime_t timeOfInstantRec
     * }
     */
    public static void timeOfInstantRec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, timeOfInstantRec$OFFSET, timeOfInstantRec$LAYOUT.byteSize());
    }

    private static final GroupLayout locOfInstantRec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("locOfInstantRec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * Position3D_t locOfInstantRec
     * }
     */
    public static final GroupLayout locOfInstantRec$layout() {
        return locOfInstantRec$LAYOUT;
    }

    private static final long locOfInstantRec$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * Position3D_t locOfInstantRec
     * }
     */
    public static final long locOfInstantRec$offset() {
        return locOfInstantRec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * Position3D_t locOfInstantRec
     * }
     */
    public static MemorySegment locOfInstantRec(MemorySegment struct) {
        return struct.asSlice(locOfInstantRec$OFFSET, locOfInstantRec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * Position3D_t locOfInstantRec
     * }
     */
    public static void locOfInstantRec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, locOfInstantRec$OFFSET, locOfInstantRec$LAYOUT.byteSize());
    }

    private static final GroupLayout accOfPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("accOfPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accOfPosition
     * }
     */
    public static final GroupLayout accOfPosition$layout() {
        return accOfPosition$LAYOUT;
    }

    private static final long accOfPosition$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accOfPosition
     * }
     */
    public static final long accOfPosition$offset() {
        return accOfPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accOfPosition
     * }
     */
    public static MemorySegment accOfPosition(MemorySegment struct) {
        return struct.asSlice(accOfPosition$OFFSET, accOfPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PositionalAccuracy_t accOfPosition
     * }
     */
    public static void accOfPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, accOfPosition$OFFSET, accOfPosition$LAYOUT.byteSize());
    }

    private static final GroupLayout velOfInstantRec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("velOfInstantRec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RptVelocity_t velOfInstantRec
     * }
     */
    public static final GroupLayout velOfInstantRec$layout() {
        return velOfInstantRec$LAYOUT;
    }

    private static final long velOfInstantRec$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RptVelocity_t velOfInstantRec
     * }
     */
    public static final long velOfInstantRec$offset() {
        return velOfInstantRec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RptVelocity_t velOfInstantRec
     * }
     */
    public static MemorySegment velOfInstantRec(MemorySegment struct) {
        return struct.asSlice(velOfInstantRec$OFFSET, velOfInstantRec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RptVelocity_t velOfInstantRec
     * }
     */
    public static void velOfInstantRec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, velOfInstantRec$OFFSET, velOfInstantRec$LAYOUT.byteSize());
    }

    private static final AddressLayout record_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("record"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct RptInstantaneousRecordData *record
     * }
     */
    public static final AddressLayout record_$layout() {
        return record_$LAYOUT;
    }

    private static final long record_$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct RptInstantaneousRecordData *record
     * }
     */
    public static final long record_$offset() {
        return record_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct RptInstantaneousRecordData *record
     * }
     */
    public static MemorySegment record_(MemorySegment struct) {
        return struct.get(record_$LAYOUT, record_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct RptInstantaneousRecordData *record
     * }
     */
    public static void record_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(record_$LAYOUT, record_$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

