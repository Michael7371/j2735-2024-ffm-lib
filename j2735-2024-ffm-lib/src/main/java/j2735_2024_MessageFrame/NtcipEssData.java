// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct NtcipEssData {
 *     struct NtcipAirTemperature *airTemp;
 *     struct NtcipAtmosphericPressure *atmosphere;
 *     struct NtcipWind *wind;
 *     struct NtcipRelativeHumidity *humidity;
 *     struct NtcipDewPoint *dewpoint;
 *     struct NtcipPavement *pavement;
 *     struct NtcipVisibility *visibility;
 *     struct NtcipVisibilitySituation *visSituation;
 *     struct NtcipCloudSituation *cloudSitiation;
 *     struct NtcipPrecipitation *precipitation;
 *     struct NtcipSolarRadiation *solarRadiation;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class NtcipEssData {

    NtcipEssData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_POINTER.withName("airTemp"),
        MessageFrame_h.C_POINTER.withName("atmosphere"),
        MessageFrame_h.C_POINTER.withName("wind"),
        MessageFrame_h.C_POINTER.withName("humidity"),
        MessageFrame_h.C_POINTER.withName("dewpoint"),
        MessageFrame_h.C_POINTER.withName("pavement"),
        MessageFrame_h.C_POINTER.withName("visibility"),
        MessageFrame_h.C_POINTER.withName("visSituation"),
        MessageFrame_h.C_POINTER.withName("cloudSitiation"),
        MessageFrame_h.C_POINTER.withName("precipitation"),
        MessageFrame_h.C_POINTER.withName("solarRadiation"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("NtcipEssData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout airTemp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("airTemp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipAirTemperature *airTemp
     * }
     */
    public static final AddressLayout airTemp$layout() {
        return airTemp$LAYOUT;
    }

    private static final long airTemp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipAirTemperature *airTemp
     * }
     */
    public static final long airTemp$offset() {
        return airTemp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipAirTemperature *airTemp
     * }
     */
    public static MemorySegment airTemp(MemorySegment struct) {
        return struct.get(airTemp$LAYOUT, airTemp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipAirTemperature *airTemp
     * }
     */
    public static void airTemp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(airTemp$LAYOUT, airTemp$OFFSET, fieldValue);
    }

    private static final AddressLayout atmosphere$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("atmosphere"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipAtmosphericPressure *atmosphere
     * }
     */
    public static final AddressLayout atmosphere$layout() {
        return atmosphere$LAYOUT;
    }

    private static final long atmosphere$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipAtmosphericPressure *atmosphere
     * }
     */
    public static final long atmosphere$offset() {
        return atmosphere$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipAtmosphericPressure *atmosphere
     * }
     */
    public static MemorySegment atmosphere(MemorySegment struct) {
        return struct.get(atmosphere$LAYOUT, atmosphere$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipAtmosphericPressure *atmosphere
     * }
     */
    public static void atmosphere(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(atmosphere$LAYOUT, atmosphere$OFFSET, fieldValue);
    }

    private static final AddressLayout wind$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipWind *wind
     * }
     */
    public static final AddressLayout wind$layout() {
        return wind$LAYOUT;
    }

    private static final long wind$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipWind *wind
     * }
     */
    public static final long wind$offset() {
        return wind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipWind *wind
     * }
     */
    public static MemorySegment wind(MemorySegment struct) {
        return struct.get(wind$LAYOUT, wind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipWind *wind
     * }
     */
    public static void wind(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wind$LAYOUT, wind$OFFSET, fieldValue);
    }

    private static final AddressLayout humidity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("humidity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipRelativeHumidity *humidity
     * }
     */
    public static final AddressLayout humidity$layout() {
        return humidity$LAYOUT;
    }

    private static final long humidity$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipRelativeHumidity *humidity
     * }
     */
    public static final long humidity$offset() {
        return humidity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipRelativeHumidity *humidity
     * }
     */
    public static MemorySegment humidity(MemorySegment struct) {
        return struct.get(humidity$LAYOUT, humidity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipRelativeHumidity *humidity
     * }
     */
    public static void humidity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(humidity$LAYOUT, humidity$OFFSET, fieldValue);
    }

    private static final AddressLayout dewpoint$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dewpoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipDewPoint *dewpoint
     * }
     */
    public static final AddressLayout dewpoint$layout() {
        return dewpoint$LAYOUT;
    }

    private static final long dewpoint$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipDewPoint *dewpoint
     * }
     */
    public static final long dewpoint$offset() {
        return dewpoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipDewPoint *dewpoint
     * }
     */
    public static MemorySegment dewpoint(MemorySegment struct) {
        return struct.get(dewpoint$LAYOUT, dewpoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipDewPoint *dewpoint
     * }
     */
    public static void dewpoint(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dewpoint$LAYOUT, dewpoint$OFFSET, fieldValue);
    }

    private static final AddressLayout pavement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pavement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipPavement *pavement
     * }
     */
    public static final AddressLayout pavement$layout() {
        return pavement$LAYOUT;
    }

    private static final long pavement$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipPavement *pavement
     * }
     */
    public static final long pavement$offset() {
        return pavement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipPavement *pavement
     * }
     */
    public static MemorySegment pavement(MemorySegment struct) {
        return struct.get(pavement$LAYOUT, pavement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipPavement *pavement
     * }
     */
    public static void pavement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pavement$LAYOUT, pavement$OFFSET, fieldValue);
    }

    private static final AddressLayout visibility$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visibility"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipVisibility *visibility
     * }
     */
    public static final AddressLayout visibility$layout() {
        return visibility$LAYOUT;
    }

    private static final long visibility$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipVisibility *visibility
     * }
     */
    public static final long visibility$offset() {
        return visibility$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipVisibility *visibility
     * }
     */
    public static MemorySegment visibility(MemorySegment struct) {
        return struct.get(visibility$LAYOUT, visibility$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipVisibility *visibility
     * }
     */
    public static void visibility(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visibility$LAYOUT, visibility$OFFSET, fieldValue);
    }

    private static final AddressLayout visSituation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visSituation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipVisibilitySituation *visSituation
     * }
     */
    public static final AddressLayout visSituation$layout() {
        return visSituation$LAYOUT;
    }

    private static final long visSituation$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipVisibilitySituation *visSituation
     * }
     */
    public static final long visSituation$offset() {
        return visSituation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipVisibilitySituation *visSituation
     * }
     */
    public static MemorySegment visSituation(MemorySegment struct) {
        return struct.get(visSituation$LAYOUT, visSituation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipVisibilitySituation *visSituation
     * }
     */
    public static void visSituation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visSituation$LAYOUT, visSituation$OFFSET, fieldValue);
    }

    private static final AddressLayout cloudSitiation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cloudSitiation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipCloudSituation *cloudSitiation
     * }
     */
    public static final AddressLayout cloudSitiation$layout() {
        return cloudSitiation$LAYOUT;
    }

    private static final long cloudSitiation$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipCloudSituation *cloudSitiation
     * }
     */
    public static final long cloudSitiation$offset() {
        return cloudSitiation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipCloudSituation *cloudSitiation
     * }
     */
    public static MemorySegment cloudSitiation(MemorySegment struct) {
        return struct.get(cloudSitiation$LAYOUT, cloudSitiation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipCloudSituation *cloudSitiation
     * }
     */
    public static void cloudSitiation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cloudSitiation$LAYOUT, cloudSitiation$OFFSET, fieldValue);
    }

    private static final AddressLayout precipitation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("precipitation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipPrecipitation *precipitation
     * }
     */
    public static final AddressLayout precipitation$layout() {
        return precipitation$LAYOUT;
    }

    private static final long precipitation$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipPrecipitation *precipitation
     * }
     */
    public static final long precipitation$offset() {
        return precipitation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipPrecipitation *precipitation
     * }
     */
    public static MemorySegment precipitation(MemorySegment struct) {
        return struct.get(precipitation$LAYOUT, precipitation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipPrecipitation *precipitation
     * }
     */
    public static void precipitation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(precipitation$LAYOUT, precipitation$OFFSET, fieldValue);
    }

    private static final AddressLayout solarRadiation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("solarRadiation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct NtcipSolarRadiation *solarRadiation
     * }
     */
    public static final AddressLayout solarRadiation$layout() {
        return solarRadiation$LAYOUT;
    }

    private static final long solarRadiation$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct NtcipSolarRadiation *solarRadiation
     * }
     */
    public static final long solarRadiation$offset() {
        return solarRadiation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct NtcipSolarRadiation *solarRadiation
     * }
     */
    public static MemorySegment solarRadiation(MemorySegment struct) {
        return struct.get(solarRadiation$LAYOUT, solarRadiation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct NtcipSolarRadiation *solarRadiation
     * }
     */
    public static void solarRadiation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(solarRadiation$LAYOUT, solarRadiation$OFFSET, fieldValue);
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

