// Generated by jextract

package j2735_2024_MessageFrame;

import java.lang.foreign.*;
import java.util.function.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TRRLocation {
 *     TRRLocation_PR present;
 *     union TRRLocation_u {
 *         TRRLocationType1_t tRRLocationType1;
 *         TRRLocationType2_t tRRLocationType2;
 *         TRRLocationType3_t tRRLocationType3;
 *     } choice;
 *     asn_struct_ctx_t _asn_ctx;
 * }
 * }
 */
public class TRRLocation {

    TRRLocation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MessageFrame_h.C_INT.withName("present"),
        MemoryLayout.paddingLayout(4),
        TRRLocation_u.layout().withName("choice"),
        asn_struct_ctx_s.layout().withName("_asn_ctx")
    ).withName("TRRLocation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt present$LAYOUT = (OfInt)$LAYOUT.select(groupElement("present"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TRRLocation_PR present
     * }
     */
    public static final OfInt present$layout() {
        return present$LAYOUT;
    }

    private static final long present$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TRRLocation_PR present
     * }
     */
    public static final long present$offset() {
        return present$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TRRLocation_PR present
     * }
     */
    public static int present(MemorySegment struct) {
        return struct.get(present$LAYOUT, present$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TRRLocation_PR present
     * }
     */
    public static void present(MemorySegment struct, int fieldValue) {
        struct.set(present$LAYOUT, present$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union TRRLocation_u {
     *     TRRLocationType1_t tRRLocationType1;
     *     TRRLocationType2_t tRRLocationType2;
     *     TRRLocationType3_t tRRLocationType3;
     * }
     * }
     */
    public static class TRRLocation_u {

        TRRLocation_u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            TRRLocationType1.layout().withName("tRRLocationType1"),
            TRRLocationType2.layout().withName("tRRLocationType2"),
            TRRLocationType3.layout().withName("tRRLocationType3")
        ).withName("TRRLocation_u");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout tRRLocationType1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tRRLocationType1"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TRRLocationType1_t tRRLocationType1
         * }
         */
        public static final GroupLayout tRRLocationType1$layout() {
            return tRRLocationType1$LAYOUT;
        }

        private static final long tRRLocationType1$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TRRLocationType1_t tRRLocationType1
         * }
         */
        public static final long tRRLocationType1$offset() {
            return tRRLocationType1$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TRRLocationType1_t tRRLocationType1
         * }
         */
        public static MemorySegment tRRLocationType1(MemorySegment union) {
            return union.asSlice(tRRLocationType1$OFFSET, tRRLocationType1$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TRRLocationType1_t tRRLocationType1
         * }
         */
        public static void tRRLocationType1(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, tRRLocationType1$OFFSET, tRRLocationType1$LAYOUT.byteSize());
        }

        private static final GroupLayout tRRLocationType2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tRRLocationType2"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TRRLocationType2_t tRRLocationType2
         * }
         */
        public static final GroupLayout tRRLocationType2$layout() {
            return tRRLocationType2$LAYOUT;
        }

        private static final long tRRLocationType2$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TRRLocationType2_t tRRLocationType2
         * }
         */
        public static final long tRRLocationType2$offset() {
            return tRRLocationType2$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TRRLocationType2_t tRRLocationType2
         * }
         */
        public static MemorySegment tRRLocationType2(MemorySegment union) {
            return union.asSlice(tRRLocationType2$OFFSET, tRRLocationType2$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TRRLocationType2_t tRRLocationType2
         * }
         */
        public static void tRRLocationType2(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, tRRLocationType2$OFFSET, tRRLocationType2$LAYOUT.byteSize());
        }

        private static final GroupLayout tRRLocationType3$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("tRRLocationType3"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * TRRLocationType3_t tRRLocationType3
         * }
         */
        public static final GroupLayout tRRLocationType3$layout() {
            return tRRLocationType3$LAYOUT;
        }

        private static final long tRRLocationType3$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * TRRLocationType3_t tRRLocationType3
         * }
         */
        public static final long tRRLocationType3$offset() {
            return tRRLocationType3$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * TRRLocationType3_t tRRLocationType3
         * }
         */
        public static MemorySegment tRRLocationType3(MemorySegment union) {
            return union.asSlice(tRRLocationType3$OFFSET, tRRLocationType3$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * TRRLocationType3_t tRRLocationType3
         * }
         */
        public static void tRRLocationType3(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, tRRLocationType3$OFFSET, tRRLocationType3$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout choice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("choice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union TRRLocation_u choice
     * }
     */
    public static final GroupLayout choice$layout() {
        return choice$LAYOUT;
    }

    private static final long choice$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union TRRLocation_u choice
     * }
     */
    public static final long choice$offset() {
        return choice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union TRRLocation_u choice
     * }
     */
    public static MemorySegment choice(MemorySegment struct) {
        return struct.asSlice(choice$OFFSET, choice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union TRRLocation_u choice
     * }
     */
    public static void choice(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, choice$OFFSET, choice$LAYOUT.byteSize());
    }

    private static final GroupLayout _asn_ctx$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_asn_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final GroupLayout _asn_ctx$layout() {
        return _asn_ctx$LAYOUT;
    }

    private static final long _asn_ctx$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static final long _asn_ctx$offset() {
        return _asn_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static MemorySegment _asn_ctx(MemorySegment struct) {
        return struct.asSlice(_asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * asn_struct_ctx_t _asn_ctx
     * }
     */
    public static void _asn_ctx(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _asn_ctx$OFFSET, _asn_ctx$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

